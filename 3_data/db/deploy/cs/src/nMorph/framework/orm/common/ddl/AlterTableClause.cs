// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.common.ddl {
	public class AlterTableClause : global::haxe.lang.HxObject, global::nMorph.framework.orm.interfaces.IClause {
		
		static AlterTableClause() {
			global::nMorph.framework.orm.common.ddl.AlterTableClause.__rtti = "<class path=\"nMorph.framework.orm.common.ddl.AlterTableClause\" params=\"\">\n\t<implements path=\"nMorph.framework.orm.interfaces.IClause\"/>\n\t<CurrentDDL><c path=\"nMorph.framework.orm.lang.DDL\"/></CurrentDDL>\n\t<TableName><c path=\"String\"/></TableName>\n\t<ChangeType><e path=\"nMorph.framework.orm.common.enums.ChangeTypeEnum\"/></ChangeType>\n\t<TableOldName><c path=\"String\"/></TableOldName>\n\t<ADDCOLUMN public=\"1\" set=\"method\" line=\"28\"><f a=\"Column\">\n\t<c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<c path=\"nMorph.framework.orm.common.ddl.AddColumnClause\"/>\n</f></ADDCOLUMN>\n\t<DROPCOLUMN public=\"1\" set=\"method\" line=\"35\"><f a=\"ColumnName\">\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.framework.orm.common.ddl.DropColumnClause\"/>\n</f></DROPCOLUMN>\n\t<ADDFOREIGNKEY public=\"1\" set=\"method\" line=\"41\"><f a=\"ForeignKeyName:BaseColumns:ReferenceTable:ReferenceColumns\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/></c>\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/></c>\n\t<c path=\"nMorph.framework.orm.common.ddl.AddForeignKeyClause\"/>\n</f></ADDFOREIGNKEY>\n\t<ADDPRIMARYKEY public=\"1\" set=\"method\" line=\"50\"><f a=\"PrimaryKeyName:BaseColumns\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/></c>\n\t<c path=\"nMorph.framework.orm.common.ddl.AddPrimaryKeyClause\"/>\n</f></ADDPRIMARYKEY>\n\t<DROPPRIMARYKEY public=\"1\" set=\"method\" line=\"59\"><f a=\"PrimaryKeyName:BaseColumns\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/></c>\n\t<c path=\"nMorph.framework.orm.common.ddl.AddPrimaryKeyClause\"/>\n</f></DROPPRIMARYKEY>\n\t<DROPCONSTRAINT public=\"1\" set=\"method\" line=\"68\"><f a=\"ConstraintName\">\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.framework.orm.common.ddl.DropConstraintClause\"/>\n</f></DROPCONSTRAINT>\n\t<ALTERCOLUMN public=\"1\" set=\"method\" line=\"74\"><f a=\"ChangedColumn:TypeChange:?OldTable:?OldParameter\">\n\t<c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.ChangeTypeEnum\"/>\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.framework.orm.common.ddl.AlterColumnClause\"/>\n</f></ALTERCOLUMN>\n\t<RENAMETABLE public=\"1\" set=\"method\" line=\"86\"><f a=\"NewName:OldNewName\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.framework.orm.lang.DDL\"/>\n</f></RENAMETABLE>\n\t<SCRIPT_PART public=\"1\" set=\"method\" line=\"93\"><f a=\"?args\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></SCRIPT_PART>\n\t<SCRIPT public=\"1\" set=\"method\" line=\"119\"><f a=\"\"><c path=\"String\"/></f></SCRIPT>\n\t<Execute public=\"1\" set=\"method\" line=\"123\"><f a=\"\"><d/></f></Execute>\n\t<Register public=\"1\" set=\"method\" line=\"127\"><f a=\"context\">\n\t<c path=\"nMorph.framework.orm.tools.Context\"/>\n\t<x path=\"Void\"/>\n</f></Register>\n\t<Queue public=\"1\" set=\"method\" line=\"131\"><f a=\"queue\">\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.client.QueueItem\"/></c>\n\t<c path=\"Array\"><c path=\"nMorph.framework.orm.client.QueueItem\"/></c>\n</f></Queue>\n\t<Bulk public=\"1\" set=\"method\" line=\"136\"><f a=\"bulk\">\n\t<c path=\"nMorph.framework.orm.tools.BulkRun\"/>\n\t<c path=\"nMorph.framework.orm.tools.BulkRun\"/>\n</f></Bulk>\n\t<ReadValue public=\"1\" set=\"method\" line=\"141\"><f a=\"\"><d/></f></ReadValue>\n\t<ReadTable public=\"1\" set=\"method\" line=\"146\"><f a=\"\"><c path=\"nMorph.framework.orm.client.QueryTable\"/></f></ReadTable>\n\t<Read public=\"1\" params=\"T\" set=\"method\" line=\"151\"><f a=\"cl:?context\">\n\t<x path=\"Class\"><c path=\"Read.T\"/></x>\n\t<c path=\"nMorph.framework.orm.tools.Context\"/>\n\t<c path=\"Array\"><c path=\"Read.T\"/></c>\n</f></Read>\n\t<ReadOne public=\"1\" params=\"T\" set=\"method\" line=\"156\"><f a=\"cl:?context\">\n\t<x path=\"Class\"><c path=\"ReadOne.T\"/></x>\n\t<c path=\"nMorph.framework.orm.tools.Context\"/>\n\t<c path=\"ReadOne.T\"/>\n</f></ReadOne>\n\t<new public=\"1\" set=\"method\" line=\"22\"><f a=\"CurrentDDL:?TableName\">\n\t<c path=\"nMorph.framework.orm.lang.DDL\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public AlterTableClause(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public AlterTableClause(global::nMorph.framework.orm.lang.DDL CurrentDDL, string TableName) {
			global::nMorph.framework.orm.common.ddl.AlterTableClause.__hx_ctor_nMorph_framework_orm_common_ddl_AlterTableClause(this, CurrentDDL, TableName);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_common_ddl_AlterTableClause(global::nMorph.framework.orm.common.ddl.AlterTableClause __hx_this, global::nMorph.framework.orm.lang.DDL CurrentDDL, string TableName) {
			__hx_this.CurrentDDL = CurrentDDL;
			if (( TableName != null )) {
				__hx_this.TableName = TableName;
			}
			
		}
		
		
		public static string __rtti;
		
		public global::nMorph.framework.orm.lang.DDL CurrentDDL;
		
		public string TableName;
		
		public global::nMorph.framework.orm.common.enums.ChangeTypeEnum ChangeType;
		
		public string TableOldName;
		
		public virtual global::nMorph.framework.orm.common.ddl.AddColumnClause ADDCOLUMN(global::nMorph.framework.orm.interfaces.IColumnDefinition Column) {
			global::nMorph.framework.orm.common.ddl.AddColumnClause acc = new global::nMorph.framework.orm.common.ddl.AddColumnClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (Column) ));
			this.CurrentDDL.AddClause(acc);
			Column.RegisterQuery(this.CurrentDDL);
			return acc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.DropColumnClause DROPCOLUMN(string ColumnName) {
			global::nMorph.framework.orm.common.ddl.DropColumnClause dcc = new global::nMorph.framework.orm.common.ddl.DropColumnClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((string) (ColumnName) ));
			this.CurrentDDL.AddClause(dcc);
			return dcc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.AddForeignKeyClause ADDFOREIGNKEY(string ForeignKeyName, global::Array<object> BaseColumns, string ReferenceTable, global::Array<object> ReferenceColumns) {
			global::nMorph.framework.orm.common.ddl.AddForeignKeyClause afkc = new global::nMorph.framework.orm.common.ddl.AddForeignKeyClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((string) (ForeignKeyName) ), ((global::Array<object>) (BaseColumns) ), ((string) (ReferenceTable) ), ((global::Array<object>) (ReferenceColumns) ));
			this.CurrentDDL.AddClause(afkc);
			{
				int _g = 0;
				while (( _g < BaseColumns.length )) {
					global::nMorph.framework.orm.interfaces.IColumnDefinition bcolumn = ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (BaseColumns[_g]) );
					 ++ _g;
					bcolumn.RegisterQuery(this.CurrentDDL);
				}
				
			}
			
			return afkc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause ADDPRIMARYKEY(string PrimaryKeyName, global::Array<object> BaseColumns) {
			global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause apkc = new global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((string) (PrimaryKeyName) ), ((global::Array<object>) (BaseColumns) ));
			this.CurrentDDL.AddClause(apkc);
			{
				int _g = 0;
				while (( _g < BaseColumns.length )) {
					global::nMorph.framework.orm.interfaces.IColumnDefinition bcolumn = ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (BaseColumns[_g]) );
					 ++ _g;
					bcolumn.RegisterQuery(this.CurrentDDL);
				}
				
			}
			
			return apkc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause DROPPRIMARYKEY(string PrimaryKeyName, global::Array<object> BaseColumns) {
			global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause apkc = new global::nMorph.framework.orm.common.ddl.AddPrimaryKeyClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((string) (PrimaryKeyName) ), ((global::Array<object>) (BaseColumns) ));
			this.CurrentDDL.AddClause(apkc);
			{
				int _g = 0;
				while (( _g < BaseColumns.length )) {
					global::nMorph.framework.orm.interfaces.IColumnDefinition bcolumn = ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (BaseColumns[_g]) );
					 ++ _g;
					bcolumn.RegisterQuery(this.CurrentDDL);
				}
				
			}
			
			return apkc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.DropConstraintClause DROPCONSTRAINT(string ConstraintName) {
			global::nMorph.framework.orm.common.ddl.DropConstraintClause dcc = new global::nMorph.framework.orm.common.ddl.DropConstraintClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((string) (ConstraintName) ));
			this.CurrentDDL.AddClause(dcc);
			return dcc;
		}
		
		
		public virtual global::nMorph.framework.orm.common.ddl.AlterColumnClause ALTERCOLUMN(global::nMorph.framework.orm.interfaces.IColumnDefinition ChangedColumn, global::nMorph.framework.orm.common.enums.ChangeTypeEnum TypeChange, string OldTable, string OldParameter) {
			this.ChangeType = TypeChange;
			global::nMorph.framework.orm.common.ddl.AlterColumnClause acc = null;
			if (( ( OldParameter != null ) && ( OldParameter != "" ) )) {
				acc = new global::nMorph.framework.orm.common.ddl.AlterColumnClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (ChangedColumn) ), ((global::nMorph.framework.orm.common.enums.ChangeTypeEnum) (TypeChange) ), ((string) (OldTable) ), ((string) (OldParameter) ));
			}
			else {
				acc = new global::nMorph.framework.orm.common.ddl.AlterColumnClause(((global::nMorph.framework.orm.lang.DDL) (this.CurrentDDL) ), ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (ChangedColumn) ), ((global::nMorph.framework.orm.common.enums.ChangeTypeEnum) (TypeChange) ), default(string), default(string));
			}
			
			this.CurrentDDL.AddClause(acc);
			ChangedColumn.RegisterQuery(this.CurrentDDL);
			return acc;
		}
		
		
		public virtual global::nMorph.framework.orm.lang.DDL RENAMETABLE(string NewName, string OldNewName) {
			this.ChangeType = global::nMorph.framework.orm.common.enums.ChangeTypeEnum.tableName;
			this.TableName = NewName;
			this.TableOldName = OldNewName;
			return this.CurrentDDL;
		}
		
		
		public virtual void SCRIPT_PART(string args) {
			unchecked {
				switch (this.CurrentDDL.getCurrentEngine()._hx_index) {
					case 0:
					{
						if (( this.ChangeType == global::nMorph.framework.orm.common.enums.ChangeTypeEnum.tableName )) {
							this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("EXEC sp_rename \"", this.TableOldName), "\",\""), this.TableName), "\" "));
						}
						else {
							this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ALTER TABLE \"", this.TableName), "\" "));
						}
						
						break;
					}
					
					
					case 1:
					{
						this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ALTER TABLE \"", this.TableName), "\" "));
						break;
					}
					
					
					case 2:
					{
						this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ALTER TABLE \"", this.TableName), "\" "));
						break;
					}
					
					
					case 3:
					{
						this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ALTER TABLE \"", this.TableName), "\" "));
						break;
					}
					
					
					case 4:
					{
						this.CurrentDDL.AddBlock(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ALTER TABLE \"", this.TableName), "\" "));
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual string SCRIPT() {
			return this.CurrentDDL.GenerateAll();
		}
		
		
		public virtual object Execute() {
			return this.CurrentDDL.Execute();
		}
		
		
		public virtual void Register(global::nMorph.framework.orm.tools.Context context) {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
			}
		}
		
		
		public virtual global::Array<object> Queue(global::Array<object> queue) {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return null;
			}
		}
		
		
		public virtual global::nMorph.framework.orm.tools.BulkRun Bulk(global::nMorph.framework.orm.tools.BulkRun bulk) {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return null;
			}
		}
		
		
		public virtual object ReadValue() {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return null;
			}
		}
		
		
		public virtual global::nMorph.framework.orm.client.QueryTable ReadTable() {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return null;
			}
		}
		
		
		public virtual global::Array<T> Read<T>(global::System.Type cl, global::nMorph.framework.orm.tools.Context context) {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return null;
			}
		}
		
		
		public virtual T ReadOne<T>(global::System.Type cl, global::nMorph.framework.orm.tools.Context context) {
			unchecked {
				global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1, "Not Valid Method");
				return default(T);
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1575817284:
					{
						this.TableOldName = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 503524458:
					{
						this.ChangeType = ((global::nMorph.framework.orm.common.enums.ChangeTypeEnum) (@value) );
						return @value;
					}
					
					
					case 1483167065:
					{
						this.TableName = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1037559379:
					{
						this.CurrentDDL = ((global::nMorph.framework.orm.lang.DDL) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1344235664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadOne", 1344235664)) );
					}
					
					
					case 914388854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Read", 914388854)) );
					}
					
					
					case 2107499704:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadTable", 2107499704)) );
					}
					
					
					case 611494939:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadValue", 611494939)) );
					}
					
					
					case 737753906:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Bulk", 737753906)) );
					}
					
					
					case 1897397617:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Queue", 1897397617)) );
					}
					
					
					case 709976707:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Register", 709976707)) );
					}
					
					
					case 425603605:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Execute", 425603605)) );
					}
					
					
					case 2044918283:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SCRIPT", 2044918283)) );
					}
					
					
					case 2032371175:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SCRIPT_PART", 2032371175)) );
					}
					
					
					case 135540656:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "RENAMETABLE", 135540656)) );
					}
					
					
					case 995233036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ALTERCOLUMN", 995233036)) );
					}
					
					
					case 1780229452:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DROPCONSTRAINT", 1780229452)) );
					}
					
					
					case 106050572:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DROPPRIMARYKEY", 106050572)) );
					}
					
					
					case 1356397662:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ADDPRIMARYKEY", 1356397662)) );
					}
					
					
					case 1633912908:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ADDFOREIGNKEY", 1633912908)) );
					}
					
					
					case 1131399237:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DROPCOLUMN", 1131399237)) );
					}
					
					
					case 1165197207:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ADDCOLUMN", 1165197207)) );
					}
					
					
					case 1575817284:
					{
						return this.TableOldName;
					}
					
					
					case 503524458:
					{
						return this.ChangeType;
					}
					
					
					case 1483167065:
					{
						return this.TableName;
					}
					
					
					case 1037559379:
					{
						return this.CurrentDDL;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1344235664:
					{
						return this.ReadOne<object>(((global::System.Type) (dynargs[0]) ), ((global::nMorph.framework.orm.tools.Context) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ));
					}
					
					
					case 914388854:
					{
						return this.Read<object>(((global::System.Type) (dynargs[0]) ), ((global::nMorph.framework.orm.tools.Context) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ));
					}
					
					
					case 2107499704:
					{
						return this.ReadTable();
					}
					
					
					case 611494939:
					{
						return this.ReadValue();
					}
					
					
					case 737753906:
					{
						return this.Bulk(((global::nMorph.framework.orm.tools.BulkRun) (dynargs[0]) ));
					}
					
					
					case 1897397617:
					{
						return this.Queue(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ));
					}
					
					
					case 709976707:
					{
						this.Register(((global::nMorph.framework.orm.tools.Context) (dynargs[0]) ));
						break;
					}
					
					
					case 425603605:
					{
						return this.Execute();
					}
					
					
					case 2044918283:
					{
						return this.SCRIPT();
					}
					
					
					case 2032371175:
					{
						this.SCRIPT_PART(global::haxe.lang.Runtime.toString(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )));
						break;
					}
					
					
					case 135540656:
					{
						return this.RENAMETABLE(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]));
					}
					
					
					case 995233036:
					{
						return this.ALTERCOLUMN(((global::nMorph.framework.orm.interfaces.IColumnDefinition) (dynargs[0]) ), ((global::nMorph.framework.orm.common.enums.ChangeTypeEnum) (dynargs[1]) ), global::haxe.lang.Runtime.toString(( (( dynargs.Length > 2 )) ? (dynargs[2]) : (null) )), global::haxe.lang.Runtime.toString(( (( dynargs.Length > 3 )) ? (dynargs[3]) : (null) )));
					}
					
					
					case 1780229452:
					{
						return this.DROPCONSTRAINT(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 106050572:
					{
						return this.DROPPRIMARYKEY(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ));
					}
					
					
					case 1356397662:
					{
						return this.ADDPRIMARYKEY(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ));
					}
					
					
					case 1633912908:
					{
						return this.ADDFOREIGNKEY(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ), global::haxe.lang.Runtime.toString(dynargs[2]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[3]) ))) ));
					}
					
					
					case 1131399237:
					{
						return this.DROPCOLUMN(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1165197207:
					{
						return this.ADDCOLUMN(((global::nMorph.framework.orm.interfaces.IColumnDefinition) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("TableOldName");
			baseArr.push("ChangeType");
			baseArr.push("TableName");
			baseArr.push("CurrentDDL");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


