<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\enums;

use \php\Boot;
use \php\_Boot\HxEnum;

class DBTypeEnum extends HxEnum {
	/**
	 * @return DBTypeEnum
	 */
	static public function BIGINTEGER () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('BIGINTEGER', 2, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function BIGTEXT () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('BIGTEXT', 8, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function BINARY () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('BINARY', 12, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function BOOLEAN () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('BOOLEAN', 14, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function CHAR () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('CHAR', 6, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function DATETIME () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('DATETIME', 13, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function DECIMAL () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('DECIMAL', 5, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function FLOAT () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('FLOAT', 3, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function INTEGER () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('INTEGER', 1, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function NBIGTEXT () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('NBIGTEXT', 11, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function NCHAR () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('NCHAR', 9, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function NVARCHAR () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('NVARCHAR', 10, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function REAL () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('REAL', 4, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function SMALLINTEGER () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('SMALLINTEGER', 0, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function UUID () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('UUID', 15, []);
		return $inst;
	}

	/**
	 * @return DBTypeEnum
	 */
	static public function VARCHAR () {
		static $inst = null;
		if (!$inst) $inst = new DBTypeEnum('VARCHAR', 7, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			2 => 'BIGINTEGER',
			8 => 'BIGTEXT',
			12 => 'BINARY',
			14 => 'BOOLEAN',
			6 => 'CHAR',
			13 => 'DATETIME',
			5 => 'DECIMAL',
			3 => 'FLOAT',
			1 => 'INTEGER',
			11 => 'NBIGTEXT',
			9 => 'NCHAR',
			10 => 'NVARCHAR',
			4 => 'REAL',
			0 => 'SMALLINTEGER',
			15 => 'UUID',
			7 => 'VARCHAR',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'BIGINTEGER' => 0,
			'BIGTEXT' => 0,
			'BINARY' => 0,
			'BOOLEAN' => 0,
			'CHAR' => 0,
			'DATETIME' => 0,
			'DECIMAL' => 0,
			'FLOAT' => 0,
			'INTEGER' => 0,
			'NBIGTEXT' => 0,
			'NCHAR' => 0,
			'NVARCHAR' => 0,
			'REAL' => 0,
			'SMALLINTEGER' => 0,
			'UUID' => 0,
			'VARCHAR' => 0,
		];
	}
}

Boot::registerClass(DBTypeEnum::class, 'nMorph.framework.orm.common.enums.DBTypeEnum');
