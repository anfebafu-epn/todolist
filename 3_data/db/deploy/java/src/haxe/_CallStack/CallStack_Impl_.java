// Generated by Haxe 4.2.2
package haxe._CallStack;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class CallStack_Impl_
{
	
	
	public static int get_length(haxe.root.Array<haxe.StackItem> this1)
	{
		//line 46 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return this1.length;
	}
	
	
	public static haxe.root.Array<haxe.StackItem> callStack()
	{
		//line 52 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.callStack(), null);
	}
	
	
	public static haxe.root.Array<haxe.StackItem> exceptionStack(java.lang.Object fullStack)
	{
		//line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		boolean fullStack1 = ( (haxe.lang.Runtime.eq(fullStack, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (fullStack) ))) );
		//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		haxe.root.Array<haxe.StackItem> eStack = haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.exceptionStack(), null);
		//line 65 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return ((haxe.root.Array<haxe.StackItem>) (( (fullStack1) ? (eStack) : (haxe._CallStack.CallStack_Impl_.subtract(eStack, haxe._CallStack.CallStack_Impl_.callStack())) )) );
	}
	
	
	public static java.lang.String toString(haxe.root.Array<haxe.StackItem> stack)
	{
		//line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		haxe.root.StringBuf b = new haxe.root.StringBuf();
		//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		{
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			int _g = 0;
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			haxe.root.Array<haxe.StackItem> _g1 = ((haxe.root.Array<haxe.StackItem>) (stack) );
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			while (( _g < _g1.length ))
			{
				//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				haxe.StackItem s = _g1.__get(_g);
				//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				 ++ _g;
				//line 74 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				b.add(haxe.lang.Runtime.toString("\nCalled from "));
				//line 74 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.Object __temp_expr1 = ((java.lang.Object) (null) );
				//line 75 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				haxe._CallStack.CallStack_Impl_.itemToString(b, s);
			}
			
		}
		
		//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return b.toString();
	}
	
	
	public static haxe.root.Array<haxe.StackItem> subtract(haxe.root.Array<haxe.StackItem> this1, haxe.root.Array<haxe.StackItem> stack)
	{
		//line 85 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		int startIndex = -1;
		//line 86 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		int i = -1;
		//line 87 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		while ((  ++ i < this1.length ))
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				int _g = 0;
				//line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				int _g1 = ((haxe.root.Array<haxe.StackItem>) (stack) ).length;
				//line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				while (( _g < _g1 ))
				{
					//line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					int j = _g++;
					//line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (haxe._CallStack.CallStack_Impl_.equalItems(this1.__get(i), ((haxe.root.Array<haxe.StackItem>) (stack) ).__get(j))) 
					{
						//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						if (( startIndex < 0 )) 
						{
							//line 91 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
							startIndex = i;
						}
						
						//line 93 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						 ++ i;
						//line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						if (( i >= this1.length )) 
						{
							//line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
							break;
						}
						
					}
					else
					{
						//line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						startIndex = -1;
					}
					
				}
				
			}
			
			//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			if (( startIndex >= 0 )) 
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
		}
		
		//line 101 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		if (( startIndex >= 0 )) 
		{
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			return this1.slice(0, startIndex);
		}
		else
		{
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			return this1;
		}
		
	}
	
	
	public static haxe.root.Array<haxe.StackItem> copy(haxe.root.Array<haxe.StackItem> this1)
	{
		//line 108 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return this1.copy();
	}
	
	
	public static haxe.StackItem get(haxe.root.Array<haxe.StackItem> this1, int index)
	{
		//line 112 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return this1.__get(index);
	}
	
	
	public static haxe.root.Array<haxe.StackItem> asArray(haxe.root.Array<haxe.StackItem> this1)
	{
		//line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return this1;
	}
	
	
	public static boolean equalItems(haxe.StackItem item1, haxe.StackItem item2)
	{
		//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		if (( item1 == null )) 
		{
			//line 121 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			if (( item2 == null )) 
			{
				//line 121 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				return true;
			}
			else
			{
				//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				return false;
			}
			
		}
		else
		{
			//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			switch (item1.index)
			{
				case 0:
				{
					//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( item2 == null )) 
					{
						//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						return false;
					}
					else
					{
						//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						switch (item2.index)
						{
							case 0:
							{
								//line 122 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return true;
							}
							
							
							default:
							{
								//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				
				case 1:
				{
					//line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.String _g = haxe.lang.Runtime.toString(item1.params[0]);
					//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( item2 == null )) 
					{
						//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						return false;
					}
					else
					{
						//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						switch (item2.index)
						{
							case 1:
							{
								//line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String m2 = haxe.lang.Runtime.toString(item2.params[0]);
								//line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String m1 = _g;
								//line 124 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return haxe.lang.Runtime.valEq(m1, m2);
							}
							
							
							default:
							{
								//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				
				case 2:
				{
					//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					haxe.StackItem _g1 = ((haxe.StackItem) (item1.params[0]) );
					//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.String _g2 = haxe.lang.Runtime.toString(item1.params[1]);
					//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					int _g3 = ((int) (haxe.lang.Runtime.toInt(item1.params[2])) );
					//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object _g4 = item1.params[3];
					//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( item2 == null )) 
					{
						//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						return false;
					}
					else
					{
						//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						switch (item2.index)
						{
							case 2:
							{
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								haxe.StackItem item21 = ((haxe.StackItem) (item2.params[0]) );
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String file2 = haxe.lang.Runtime.toString(item2.params[1]);
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								int line2 = ((int) (haxe.lang.Runtime.toInt(item2.params[2])) );
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.Object col2 = item2.params[3];
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.Object col1 = _g4;
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								int line1 = _g3;
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String file1 = _g2;
								//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								haxe.StackItem item11 = _g1;
								//line 126 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								if (( ( haxe.lang.Runtime.valEq(file1, file2) && ( line1 == line2 ) ) && haxe.lang.Runtime.eq(col1, col2) )) 
								{
									//line 126 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
									return haxe._CallStack.CallStack_Impl_.equalItems(item11, item21);
								}
								else
								{
									//line 126 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
									return false;
								}
								
							}
							
							
							default:
							{
								//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				
				case 3:
				{
					//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.String _g5 = haxe.lang.Runtime.toString(item1.params[0]);
					//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.String _g6 = haxe.lang.Runtime.toString(item1.params[1]);
					//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( item2 == null )) 
					{
						//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						return false;
					}
					else
					{
						//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						switch (item2.index)
						{
							case 3:
							{
								//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String class2 = haxe.lang.Runtime.toString(item2.params[0]);
								//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String method2 = haxe.lang.Runtime.toString(item2.params[1]);
								//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String method1 = _g6;
								//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.String class1 = _g5;
								//line 128 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								if (haxe.lang.Runtime.valEq(class1, class2)) 
								{
									//line 128 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
									return haxe.lang.Runtime.valEq(method1, method2);
								}
								else
								{
									//line 128 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
									return false;
								}
								
							}
							
							
							default:
							{
								//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				
				case 4:
				{
					//line 129 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object _g7 = item1.params[0];
					//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( item2 == null )) 
					{
						//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						return false;
					}
					else
					{
						//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						switch (item2.index)
						{
							case 4:
							{
								//line 129 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.Object v2 = item2.params[0];
								//line 129 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								java.lang.Object v1 = _g7;
								//line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return haxe.lang.Runtime.eq(v1, v2);
							}
							
							
							default:
							{
								//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				
			}
			
		}
		
		//line 119 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return false;
	}
	
	
	public static java.lang.String exceptionToString(haxe.Exception e)
	{
		//line 136 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		if (( e.get_previous() == null )) 
		{
			//line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			java.lang.String tmp = ( "Exception: " + e.toString() );
			//line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			haxe.root.Array<haxe.StackItem> tmp1 = e.get_stack();
			//line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			return ( tmp + (( (( tmp1 == null )) ? ("null") : (haxe._CallStack.CallStack_Impl_.toString(tmp1)) )) );
		}
		
		//line 139 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		java.lang.String result = "";
		//line 140 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		haxe.Exception e1 = e;
		//line 141 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		haxe.Exception prev = null;
		//line 142 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		while (( e1 != null ))
		{
			//line 143 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			if (( prev == null )) 
			{
				//line 144 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.String result1 = ( "Exception: " + e1.get_message() );
				//line 144 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				haxe.root.Array<haxe.StackItem> tmp2 = e1.get_stack();
				//line 144 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				result = ( ( result1 + (( (( tmp2 == null )) ? ("null") : (haxe._CallStack.CallStack_Impl_.toString(tmp2)) )) ) + result );
			}
			else
			{
				//line 146 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				haxe.root.Array<haxe.StackItem> prevStack = haxe._CallStack.CallStack_Impl_.subtract(e1.get_stack(), prev.get_stack());
				//line 147 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				result = ( ( ( ( "Exception: " + e1.get_message() ) + (( (( prevStack == null )) ? ("null") : (haxe._CallStack.CallStack_Impl_.toString(prevStack)) )) ) + "\n\nNext " ) + result );
			}
			
			//line 149 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			prev = e1;
			//line 150 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
			e1 = e1.get_previous();
		}
		
		//line 152 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		return result;
	}
	
	
	public static void itemToString(haxe.root.StringBuf b, haxe.StackItem s)
	{
		//line 156 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
		switch (s.index)
		{
			case 0:
			{
				//line 158 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				b.add(haxe.lang.Runtime.toString("a C function"));
				//line 158 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.Object __temp_expr1 = ((java.lang.Object) (null) );
				//line 158 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
			
			case 1:
			{
				//line 159 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.String m = haxe.lang.Runtime.toString(s.params[0]);
				//line 159 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				{
					//line 160 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString("module "));
					//line 160 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr2 = ((java.lang.Object) (null) );
					//line 161 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString(m));
					//line 161 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr3 = ((java.lang.Object) (null) );
				}
				
				//line 159 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
			
			case 2:
			{
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				haxe.StackItem s1 = ((haxe.StackItem) (s.params[0]) );
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.String file = haxe.lang.Runtime.toString(s.params[1]);
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				int line = ((int) (haxe.lang.Runtime.toInt(s.params[2])) );
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.Object col = s.params[3];
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				{
					//line 163 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( s1 != null )) 
					{
						//line 164 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						haxe._CallStack.CallStack_Impl_.itemToString(b, s1);
						//line 165 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						b.add(haxe.lang.Runtime.toString(" ("));
						//line 165 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						java.lang.Object __temp_expr4 = ((java.lang.Object) (null) );
					}
					
					//line 167 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString(file));
					//line 167 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr5 = ((java.lang.Object) (null) );
					//line 168 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString(" line "));
					//line 168 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr6 = ((java.lang.Object) (null) );
					//line 169 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(((java.lang.Object) (line) ));
					//line 169 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr7 = ((java.lang.Object) (null) );
					//line 170 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( ! (haxe.lang.Runtime.eq(col, null)) )) 
					{
						//line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						b.add(haxe.lang.Runtime.toString(" column "));
						//line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						java.lang.Object __temp_expr8 = ((java.lang.Object) (null) );
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						b.add(((java.lang.Object) (col) ));
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						java.lang.Object __temp_expr9 = ((java.lang.Object) (null) );
					}
					
					//line 174 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					if (( s1 != null )) 
					{
						//line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						b.add(haxe.lang.Runtime.toString(")"));
						//line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
						java.lang.Object __temp_expr10 = ((java.lang.Object) (null) );
					}
					
				}
				
				//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
			
			case 3:
			{
				//line 176 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.String cname = haxe.lang.Runtime.toString(s.params[0]);
				//line 176 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.String meth = haxe.lang.Runtime.toString(s.params[1]);
				//line 176 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				{
					//line 177 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString(( (( cname == null )) ? ("<unknown>") : (cname) )));
					//line 177 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr11 = ((java.lang.Object) (null) );
					//line 178 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString("."));
					//line 178 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr12 = ((java.lang.Object) (null) );
					//line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString(meth));
					//line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr13 = ((java.lang.Object) (null) );
				}
				
				//line 176 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
			
			case 4:
			{
				//line 180 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				java.lang.Object n = s.params[0];
				//line 180 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				{
					//line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(haxe.lang.Runtime.toString("local function #"));
					//line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr14 = ((java.lang.Object) (null) );
					//line 182 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					b.add(((java.lang.Object) (n) ));
					//line 182 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
					java.lang.Object __temp_expr15 = ((java.lang.Object) (null) );
				}
				
				//line 180 "C:\\HaxeToolkit\\haxe\\std\\haxe\\CallStack.hx"
				break;
			}
			
			
		}
		
	}
	
	
}


