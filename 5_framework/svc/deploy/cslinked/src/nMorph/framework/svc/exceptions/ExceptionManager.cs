// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.svc.exceptions {
	public class ExceptionManager : global::haxe.lang.HxObject {
		
		public ExceptionManager(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ExceptionManager() {
			global::nMorph.framework.svc.exceptions.ExceptionManager.__hx_ctor_nMorph_framework_svc_exceptions_ExceptionManager(this);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_svc_exceptions_ExceptionManager(global::nMorph.framework.svc.exceptions.ExceptionManager __hx_this) {
		}
		
		
		public static string HandleException(global::haxe.Exception ex, string DecryptedString, global::nMorph.framework.svc.msg.RequestMessage req, string LogicModule, string LogicClass, string LogicMethod, string Name) {
			unchecked {
				global::nMorph.framework.svc.msg.ResponseMessage res = new global::nMorph.framework.svc.msg.ResponseMessage();
				string cc = global::Type.getClassName(global::Type.getClass<object>(((object) (ex) )));
				if (( cc == "nMorph.framework.common.exceptions.LogicException" )) {
					global::nMorph.framework.common.exceptions.LogicException le = ((global::nMorph.framework.common.exceptions.LogicException) (ex) );
					res.set_AttentionCode(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(le.get_Code())));
					res.set_Message(le.get_message());
					res.set_RequestSeq(-1);
					res.set_Results(null);
				}
				else if (( cc == "nMorph.framework.common.exceptions.SecurityException" )) {
					global::nMorph.framework.common.exceptions.SecurityException le1 = ((global::nMorph.framework.common.exceptions.SecurityException) (ex) );
					res.set_AttentionCode(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(le1.get_Code())));
					res.set_Message(le1.get_message());
					res.set_RequestSeq(-2);
					res.set_Results(null);
				}
				else {
					string AttentionCode = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::Std.@string(global::Std.random(99)), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99)));
					while (global::sys.FileSystem.exists(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::nMorph.framework.common.configuration.Configuration.Data.get_LogFolder(), AttentionCode), ".txt"))) {
						AttentionCode = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::Std.@string(global::Std.random(99)), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99))), global::Std.@string(global::Std.random(99)));
					}
					
					string logContent = "";
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Message: ", ex.get_message()), "\r\n"));
					global::Array<object> tmp = ex.get_stack();
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("StackTrace: ", (( (( tmp == null )) ? ("null") : (global::haxe._CallStack.CallStack_Impl_.toString(tmp)) ))), "\r\n"));
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Details: ", ex.details()), "\r\n"));
					bool tmp1 = ( ex.get_previous() != null );
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Date: ", new global::Date(((global::System.DateTime) (global::System.DateTime.Now) )).toString()), "\r\n"));
					if (( DecryptedString != null )) {
						logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("SerializedData: ", DecryptedString), "\r\n"));
					}
					
					if (( req != null )) {
						logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("RequestSeq: ", global::haxe.lang.Runtime.toString(req.get_RequestSeq())), "\r\n"));
						logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("SessionID: ", req.get_SessionID()), "\r\n"));
						{
							int _g = 0;
							global::Array<object> _g1 = req.get_Calls();
							while (( _g < _g1.length )) {
								global::nMorph.framework.svc.transport.MethodCall call = ((global::nMorph.framework.svc.transport.MethodCall) (_g1[_g]) );
								 ++ _g;
								logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat("-------------------", "\r\n"));
								logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Name: ", call.get_Name()), "\r\n"));
								logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("LogicModule: ", call.get_LogicModule()), "\r\n"));
								logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("LogicClass: ", call.get_LogicClass()), "\r\n"));
								logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("LogicMethod: ", call.get_LogicMethod()), "\r\n"));
								int pcount = 1;
								{
									int _g2 = 0;
									global::Array _g3 = call.get_LogicParams();
									while (( _g2 < ((int) (global::haxe.lang.Runtime.getField_f(_g3, "length", 520590566, true)) ) )) {
										object p = _g3[_g2];
										 ++ _g2;
										logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Param", global::haxe.lang.Runtime.toString(pcount)), ": "), global::Std.@string(p)), "\r\n"));
										 ++ pcount;
									}
									
								}
								
							}
							
						}
						
					}
					
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat("-------------------", "\r\n"));
					logContent = global::haxe.lang.Runtime.concat(logContent, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Localhost: ", global::sys.net.Host.localhost()), "\r\n"));
					global::sys.io.File.saveContent(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::nMorph.framework.common.configuration.Configuration.Data.get_LogFolder(), AttentionCode), ".txt"), logContent);
					res.set_AttentionCode(AttentionCode);
					res.set_Message(AttentionCode);
					res.set_RequestSeq(-3);
					res.set_Results(null);
				}
				
				global::haxe.Serializer serializer = new global::haxe.Serializer();
				serializer.serialize(res);
				string ResponseString = serializer.toString();
				return ResponseString;
			}
		}
		
		
	}
}


