// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.lang {
	public sealed class FieldHashConflict {
		
		public FieldHashConflict(int hash, string name, object @value, global::haxe.lang.FieldHashConflict next) {
			this.hash = hash;
			this.name = name;
			this.@value = @value;
			this.next = next;
		}
		
		
		public readonly int hash;
		
		public readonly string name;
		
		public object @value;
		
		public global::haxe.lang.FieldHashConflict next;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.lang {
	public sealed class FieldLookup {
		
		#pragma warning disable 628
		static FieldLookup() {
			global::haxe.lang.FieldLookup.length = ( global::haxe.lang.FieldLookup.fieldIds as global::System.Array ).Length;
		}
		
		
		public FieldLookup() {
		}
		
		
		protected static int[] fieldIds = new int[]{98, 104, 105, 109, 113, 115, 23527, 1332402, 1821933, 4745537, 4846113, 4849249, 4899635, 4949376, 4995541, 4996429, 5047484, 5049505, 5144726, 5145602, 5243965, 5246186, 5343647, 5393365, 5442204, 5442212, 5443986, 5594513, 5594516, 5741474, 5744817, 5745024, 5841808, 10319920, 14532012, 22574218, 24046298, 25738091, 42740551, 43737796, 46374763, 52644165, 57219237, 67856200, 67859554, 68006728, 72252782, 76061764, 78945784, 87156323, 87367608, 96903864, 109931362, 112843575, 125111323, 132916898, 133414859, 142151465, 142301684, 142605435, 159136996, 172955042, 179047623, 180481622, 188431961, 207609411, 208459108, 212892678, 221637784, 222029606, 226931207, 231613549, 243225909, 244830897, 252173918, 252174139, 252174360, 253048465, 255614490, 261031087, 262801146, 281751194, 288167040, 296257455, 302979532, 305151978, 309502035, 311106773, 311106994, 312752480, 328878574, 334695532, 336134320, 336655392, 343868310, 350619104, 350619108, 353204262, 358990357, 359333139, 365188593, 373781560, 384816719, 389426697, 391692349, 400509660, 401751628, 404153790, 407283053, 437335495, 444663929, 451001976, 452737314, 480756972, 481768284, 493819893, 499574632, 501039929, 502768344, 502769015, 511970408, 520590566, 520665567, 525508230, 528448451, 537630174, 542823803, 572311959, 589000550, 589599061, 590345008, 591404329, 596483356, 598785079, 603885322, 610723709, 614073432, 626118359, 630156697, 640252688, 650414942, 651890926, 652994848, 666925948, 701410669, 703544457, 723690193, 724060212, 727112898, 742854407, 744003798, 744358035, 746281503, 748543309, 771767076, 772311838, 772312059, 782495260, 784433846, 790737991, 834174833, 845179051, 849624764, 863972113, 865294836, 869834347, 878103594, 910198946, 922037898, 922671056, 930986349, 930987020, 937267591, 946786476, 950567126, 995006396, 997465939, 1008670959, 1024542152, 1040558381, 1050861805, 1058556349, 1066783641, 1067353468, 1071652316, 1081380189, 1091869250, 1092171829, 1103412149, 1111108641, 1113806382, 1126920507, 1136381564, 1136381571, 1140502987, 1154932936, 1155848147, 1158359328, 1158860648, 1164821372, 1169995914, 1170195731, 1171620962, 1177754921, 1181037546, 1191633396, 1191829406, 1202522710, 1202718727, 1203028895, 1204059472, 1204816148, 1212528822, 1213952397, 1214305123, 1214453688, 1224901644, 1224901875, 1225098545, 1225779193, 1230265810, 1238832007, 1239430847, 1247875546, 1248509218, 1257164128, 1257939113, 1269206179, 1269254998, 1269755426, 1271070480, 1273207865, 1274465926, 1280345464, 1280549057, 1280638028, 1280638699, 1280845662, 1282943179, 1291436593, 1302870512, 1309344294, 1312666830, 1313416818, 1315911912, 1337394146, 1348037855, 1352786672, 1381630732, 1390395051, 1390578741, 1390578962, 1390579183, 1395555037, 1400771174, 1414062581, 1439849010, 1450762973, 1460447810, 1484998194, 1489662016, 1503920168, 1512997393, 1521873482, 1532710347, 1537812987, 1547440149, 1547539107, 1562392721, 1576149820, 1582403597, 1614780307, 1620824029, 1621420777, 1623148745, 1639293562, 1643164520, 1648581351, 1651365158, 1669983860, 1705629508, 1723805383, 1734499751, 1763375486, 1768164316, 1789423016, 1789751239, 1794072594, 1797611211, 1815533258, 1820942764, 1825849507, 1834794430, 1837892969, 1840135161, 1840387740, 1840455391, 1842910510, 1860301499, 1873474154, 1887596712, 1889717695, 1891834246, 1893491216, 1915412854, 1916009602, 1937159360, 1962040800, 1970444429, 1981972957, 2005380545, 2008593328, 2009711818, 2010580328, 2012934199, 2022294396, 2025055113, 2025238049, 2029008698, 2048392659, 2056840295, 2067999320, 2079583163, 2082268609, 2082663554, 2083500811, 2103468489, 2113708439, 2123232567, 2127021138, 2131770120};
		
		protected static string[] fields = new string[]{"b", "h", "i", "m", "q", "s", "ip", "get_position", "isGlobal", "__a", "add", "arr", "buf", "cur", "dev", "dir", "eof", "ext", "get", "gid", "idx", "ino", "key", "len", "map", "max", "min", "pop", "pos", "set", "str", "sub", "uid", "first", "resolveClass", "LogicModule", "split", "exitCode", "flags", "flush", "readAll", "match", "compare", "stack", "start", "stdin", "helper", "remove", "__previousException", "get_LogicClass", "filter", "merge", "set_LogicMethod", "hxUnserialize", "hashCode", "stderr", "stdout", "classString", "resize", "useCache", "matched", "getFullYear", "readString", "get_LogicMethod", "getHours", "isEmpty", "parseString", "resolver", "__nativeException", "setLoop", "getString", "set_RequestSeq", "readBytes", "compareArg", "readInt16", "readInt24", "readInt32", "getUTCMinutes", "LogicClass", "get_length", "mtime", "setFloat", "stream", "ReturnObject", "methodName", "hostEntry", "setDouble", "readUInt16", "readUInt24", "get_native", "iterator", "indent", "hxSerialize", "toHex", "dateUTC", "getData", "getDate", "set_position", "getUInt16", "lastIndexOf", "getUTCSeconds", "get_ReturnObject", "serializeException", "get_LogFolder", "writeFloat", "totlen", "get_Calls", "replacer", "hasNext", "message", "serializeFields", "keysLoop", "reverse", "nOccupied", "parseNumber", "getBytes", "nlink", "insert", "getInt32", "getInt64", "get_SessionID", "length", "addSub", "unserializeObject", "getTime", "get_message", "bigEndian", "native", "getDay", "getPid", "get_ip", "getMinutes", "balance", "previous", "useEnumIndex", "writeFullBytes", "matchedRight", "set_LogicClass", "array", "writeString", "set_bigEndian", "atime", "invalidNumber", "getUTCDate", "invalidChar", "getSeconds", "serializeString", "replace", "details", "readDouble", "get_Code", "CurrentDeployEnvironment", "contains", "Code", "LogicParams", "writeUInt16", "writeUInt24", "readDigits", "pretty", "getDouble", "value", "quotient", "getResolver", "__nativeStack", "get_Name", "Name", "fieldsString", "compareArgs", "addBytes", "cachedIndex", "addInt32", "addInt64", "prepare", "toString", "Results", "hashes", "serializeRef", "scache", "setResolver", "set_LogicModule", "get_Results", "_eof", "__exceptionStack", "splice", "exists", "args", "cache", "blit", "copy", "get_LogicModule", "date", "matchSub", "file", "fill", "AttentionCode", "removeLoop", "minBinding", "head", "host", "scount", "ipad", "item", "getTimezoneOffset", "__skipStack", "join", "keys", "kill", "last", "left", "get_stack", "writeDouble", "concat", "backslash", "clear", "mode", "close", "newl", "next", "nind", "set_Results", "addString", "writeByte", "LogicMethod", "push", "get_AttentionCode", "keyValueIterator", "position", "rdev", "read", "root", "matchedPos", "current", "__shiftStack", "seek", "size", "setInt32", "setInt64", "sort", "quicksort", "tell", "ctime", "readFullBytes", "getUTCDay", "vals", "writeInt8", "values", "write", "spliceVoid", "writeBytes", "writeInput", "writeInt16", "writeInt24", "writeInt32", "cachedKey", "readFloat", "Calls", "LogFolder", "parseRec", "__ownStack", "getUTCMonth", "get_previous", "objString", "posInfos", "set_Code", "concatNative", "nBuckets", "set_LogFolder", "className", "SessionID", "quote", "resolveEnum", "offset", "__unsafe_get", "__unsafe_set", "indexOf", "lookup", "set_Name", "fileName", "getFloat", "set_SessionID", "toDynamic", "regex", "Message", "readByte", "right", "canSeek", "set_LogicParams", "addDouble", "getDefault", "getMonth", "set_ReturnObject", "unwrap", "get_Message", "nextChar", "get_RequestSeq", "get_CurrentDeployEnvironment", "readInt8", "set_AttentionCode", "get_LogicParams", "readLine", "doParse", "get_canSeek", "_height", "set_CurrentDeployEnvironment", "__get", "__set", "__hx_deleteField", "serialize", "ipAddress", "lineNumber", "getUTCHours", "RequestSeq", "set_Message", "readUntil", "modulus", "upperBound", "unshift", "setUInt16", "getUTCFullYear", "_keys", "unserialize", "set_Calls", "addFloat", "shash", "shift", "matchedLeft", "addByte", "addChar", "removeMinBinding", "slice", "unserializeEnum"};
		
		protected static int length;
		
		public static void addFields(int[] nids, string[] nfields) {
			unchecked {
				int[] cids = global::haxe.lang.FieldLookup.fieldIds;
				string[] cfields = global::haxe.lang.FieldLookup.fields;
				int nlen = ( nids as global::System.Array ).Length;
				int clen = global::haxe.lang.FieldLookup.length;
				if (( ( nfields as global::System.Array ).Length != nlen )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Different fields length: ", global::haxe.lang.Runtime.toString(nlen)), " and "), global::haxe.lang.Runtime.toString(( nfields as global::System.Array ).Length)))) );
				}
				
				bool needsChange = false;
				{
					int[] _g_arr = nids;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						int i = _g_arr[((int) (((uint) (( _g_idx - 1 )) )) )];
						if (( global::haxe.lang.FieldLookup.findHash(i, cids, clen) < 0 )) {
							needsChange = true;
							break;
						}
						
					}
					
				}
				
				if (needsChange) {
					lock(typeof(global::haxe.lang.FieldLookup)){
						int[] ansIds = new int[( clen + nlen )];
						string[] ansFields = new string[( clen + nlen )];
						int ci = 0;
						int ni = 0;
						int ansi = 0;
						while (true) {
							if ( ! ((( (( ci < clen )) ? (( ni < nlen )) : (false) ))) ) {
								break;
							}
							
							if (( cids[ci] < nids[ni] )) {
								ansIds[ansi] = cids[ci];
								ansFields[ansi] = ((string) (cfields[ci]) );
								ci = ( ci + 1 );
							}
							else {
								ansIds[ansi] = nids[ni];
								ansFields[ansi] = ((string) (nfields[ni]) );
								ni = ( ni + 1 );
							}
							
							ansi = ( ansi + 1 );
						}
						
						if (( ci < clen )) {
							global::System.Array.Copy(((global::System.Array) (cids) ), ((int) (ci) ), ((global::System.Array) (ansIds) ), ((int) (ansi) ), ((int) (( clen - ci )) ));
							global::System.Array.Copy(((global::System.Array) (cfields) ), ((int) (ci) ), ((global::System.Array) (ansFields) ), ((int) (ansi) ), ((int) (( clen - ci )) ));
							ansi = ( ansi + (( clen - ci )) );
						}
						
						if (( ni < nlen )) {
							global::System.Array.Copy(((global::System.Array) (nids) ), ((int) (ni) ), ((global::System.Array) (ansIds) ), ((int) (ansi) ), ((int) (( nlen - ni )) ));
							global::System.Array.Copy(((global::System.Array) (nfields) ), ((int) (ni) ), ((global::System.Array) (ansFields) ), ((int) (ansi) ), ((int) (( nlen - ni )) ));
							ansi = ( ansi + (( nlen - ni )) );
						}
						
						global::haxe.lang.FieldLookup.fieldIds = ansIds;
						global::haxe.lang.FieldLookup.fields = ansFields;
						global::haxe.lang.FieldLookup.length = ansi;
					}
					;
				}
				
			}
		}
		
		
		public static int doHash(string s) {
			unchecked {
				int acc = 0;
				{
					int _g = 0;
					int _g1 = s.Length;
					while (( _g < _g1 )) {
						int i = _g++;
						acc = ( ( ( 223 * (( acc >> 1 )) ) + ((int) (s[i]) ) ) << 1 );
					}
					
				}
				
				return ((int) (( ((uint) (acc) ) >> 1 )) );
			}
		}
		
		
		public static string lookupHash(int key) {
			unchecked {
				int[] ids = global::haxe.lang.FieldLookup.fieldIds;
				int min = 0;
				int max = global::haxe.lang.FieldLookup.length;
				while (( min < max )) {
					int mid = ( min + ( (( max - min )) / 2 ) );
					int imid = ids[mid];
					if (( key < imid )) {
						max = mid;
					}
					else if (( key > imid )) {
						min = ( mid + 1 );
					}
					else {
						return ((string) (global::haxe.lang.FieldLookup.fields[mid]) );
					}
					
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Field not found for hash ", global::haxe.lang.Runtime.toString(key)))) );
			}
		}
		
		
		public static int hash(string s) {
			unchecked {
				if (( s == null )) {
					return 0;
				}
				
				int acc = 0;
				{
					int _g = 0;
					int _g1 = s.Length;
					while (( _g < _g1 )) {
						int i = _g++;
						acc = ( ( ( 223 * (( acc >> 1 )) ) + ((int) (s[i]) ) ) << 1 );
					}
					
				}
				
				int key = ((int) (( ((uint) (acc) ) >> 1 )) );
				int[] ids = global::haxe.lang.FieldLookup.fieldIds;
				string[] fld = global::haxe.lang.FieldLookup.fields;
				int min = 0;
				int max = global::haxe.lang.FieldLookup.length;
				int len = global::haxe.lang.FieldLookup.length;
				while (( min < max )) {
					int mid = ((int) (( min + ( ((double) ((( max - min ))) ) / 2 ) )) );
					int imid = ids[mid];
					if (( key < imid )) {
						max = mid;
					}
					else if (( key > imid )) {
						min = ( mid + 1 );
					}
					else {
						string field = ((string) (fld[mid]) );
						if (( field != s )) {
							return  ~ (key) ;
						}
						
						return key;
					}
					
				}
				
				lock(typeof(global::haxe.lang.FieldLookup)){
					if (( len != global::haxe.lang.FieldLookup.length )) {
						return global::haxe.lang.FieldLookup.hash(s);
					}
					
					global::haxe.lang.FieldLookup.fieldIds = global::haxe.lang.FieldLookup.insertInt(global::haxe.lang.FieldLookup.fieldIds, global::haxe.lang.FieldLookup.length, min, key);
					global::haxe.lang.FieldLookup.fields = global::haxe.lang.FieldLookup.insertString(global::haxe.lang.FieldLookup.fields, global::haxe.lang.FieldLookup.length, min, s);
					 ++ global::haxe.lang.FieldLookup.length;
				}
				;
				return key;
			}
		}
		
		
		public static int findHash(int hash, int[] hashs, int length) {
			unchecked {
				int min = 0;
				int max = length;
				while (( min < max )) {
					int mid = ( (( max + min )) / 2 );
					int imid = hashs[mid];
					if (( hash < imid )) {
						max = mid;
					}
					else if (( hash > imid )) {
						min = ( mid + 1 );
					}
					else {
						return mid;
					}
					
				}
				
				return  ~ (min) ;
			}
		}
		
		
		public static void removeInt(int[] a, int length, int pos) {
			unchecked {
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = 0;
			}
		}
		
		
		public static void removeFloat(double[] a, int length, int pos) {
			unchecked {
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = ((double) (0) );
			}
		}
		
		
		public static void removeDynamic(object[] a, int length, int pos) {
			unchecked {
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = null;
			}
		}
		
		
		public static int[] insertInt(int[] a, int length, int pos, int x) {
			unchecked {
				int[] a1 = a;
				int capacity = ( a1 as global::System.Array ).Length;
				if (( pos == length )) {
					if (( capacity == length )) {
						int[] newarr = new int[( (( length << 1 )) + 1 )];
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					if (( capacity == length )) {
						int[] newarr1 = new int[( (( length << 1 )) + 1 )];
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						a1 = newarr1;
					}
					else {
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					int[] newarr2 = new int[( (( length << 1 )) + 1 )];
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else {
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				a1[pos] = x;
				return a1;
			}
		}
		
		
		public static double[] insertFloat(double[] a, int length, int pos, double x) {
			unchecked {
				double[] a1 = a;
				int capacity = ( a1 as global::System.Array ).Length;
				if (( pos == length )) {
					if (( capacity == length )) {
						double[] newarr = new double[( (( length << 1 )) + 1 )];
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					if (( capacity == length )) {
						double[] newarr1 = new double[( (( length << 1 )) + 1 )];
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						a1 = newarr1;
					}
					else {
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					double[] newarr2 = new double[( (( length << 1 )) + 1 )];
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else {
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				a1[pos] = x;
				return a1;
			}
		}
		
		
		public static object[] insertDynamic(object[] a, int length, int pos, object x) {
			unchecked {
				object[] a1 = a;
				int capacity = ( a1 as global::System.Array ).Length;
				if (( pos == length )) {
					if (( capacity == length )) {
						object[] newarr = new object[( (( length << 1 )) + 1 )];
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					if (( capacity == length )) {
						object[] newarr1 = new object[( (( length << 1 )) + 1 )];
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						a1 = newarr1;
					}
					else {
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					object[] newarr2 = new object[( (( length << 1 )) + 1 )];
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else {
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				a1[pos] = ((object) (x) );
				return a1;
			}
		}
		
		
		public static string[] insertString(string[] a, int length, int pos, string x) {
			unchecked {
				string[] a1 = a;
				int capacity = ( a1 as global::System.Array ).Length;
				if (( pos == length )) {
					if (( capacity == length )) {
						string[] newarr = new string[( (( length << 1 )) + 1 )];
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					if (( capacity == length )) {
						string[] newarr1 = new string[( (( length << 1 )) + 1 )];
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						a1 = newarr1;
					}
					else {
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					string[] newarr2 = new string[( (( length << 1 )) + 1 )];
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else {
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				a1[pos] = x;
				return a1;
			}
		}
		
		
		public static global::haxe.lang.FieldHashConflict getHashConflict(global::haxe.lang.FieldHashConflict head, int hash, string name) {
			while (( head != null )) {
				if (( ( head.hash == hash ) && ( head.name == name ) )) {
					return head;
				}
				
				head = head.next;
			}
			
			return null;
		}
		
		
		public static void setHashConflict(ref global::haxe.lang.FieldHashConflict head, int hash, string name, object @value) {
			global::haxe.lang.FieldHashConflict node = head;
			while (( node != null )) {
				if (( ( node.hash == hash ) && ( node.name == name ) )) {
					node.@value = @value;
					return;
				}
				
				node = ((global::haxe.lang.FieldHashConflict) (node.next) );
			}
			
			head = ((global::haxe.lang.FieldHashConflict) (new global::haxe.lang.FieldHashConflict(hash, name, @value, ((global::haxe.lang.FieldHashConflict) (head) ))) );
		}
		
		
		public static bool deleteHashConflict(ref global::haxe.lang.FieldHashConflict head, int hash, string name) {
			if (( head == null )) {
				return false;
			}
			
			if (( ( head.hash == hash ) && ( head.name == name ) )) {
				head = ((global::haxe.lang.FieldHashConflict) (head.next) );
				return true;
			}
			
			global::haxe.lang.FieldHashConflict prev = head;
			global::haxe.lang.FieldHashConflict node = head.next;
			while (( node != null )) {
				if (( ( node.hash == hash ) && ( node.name == name ) )) {
					prev.next = node.next;
					return true;
				}
				
				node = node.next;
			}
			
			return false;
		}
		
		
		public static void addHashConflictNames(global::haxe.lang.FieldHashConflict head, global::Array<string> arr) {
			while (( head != null )) {
				arr.push(head.name);
				head = head.next;
			}
			
		}
		
		
	}
}


