// Generated by Haxe 4.2.2
package haxe;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class NativeStackTrace extends haxe.lang.HxObject
{
	static
	{
		//line 16 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		haxe.NativeStackTrace.exception = new java.lang.ThreadLocal<java.lang.Throwable>();
	}
	
	public NativeStackTrace(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public NativeStackTrace()
	{
		//line 15 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		haxe.NativeStackTrace.__hx_ctor_haxe_NativeStackTrace(this);
	}
	
	
	protected static void __hx_ctor_haxe_NativeStackTrace(haxe.NativeStackTrace __hx_this)
	{
	}
	
	
	public static java.lang.ThreadLocal<java.lang.Throwable> exception;
	
	public static void saveStack(java.lang.Throwable e)
	{
		//line 20 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		haxe.NativeStackTrace.exception.set(((java.lang.Throwable) (e) ));
	}
	
	
	public static java.lang.StackTraceElement[] callStack()
	{
		//line 24 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		java.lang.StackTraceElement[] stack = java.lang.Thread.currentThread().getStackTrace();
		//line 25 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		if (( stack.length <= 3 )) 
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			return stack;
		}
		else
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			return ((java.lang.StackTraceElement[]) (java.util.Arrays.copyOfRange(((java.lang.StackTraceElement[]) (stack) ), ((int) (3) ), ((int) (stack.length) ))) );
		}
		
	}
	
	
	public static java.lang.StackTraceElement[] exceptionStack()
	{
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		java.lang.Throwable _g = haxe.NativeStackTrace.exception.get();
		//line 30 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		if (( _g == null )) 
		{
			//line 30 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			return new java.lang.StackTraceElement[0];
		}
		else
		{
			//line 31 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			java.lang.Throwable e = _g;
			//line 31 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			return e.getStackTrace();
		}
		
	}
	
	
	public static haxe.root.Array<haxe.StackItem> toHaxe(java.lang.StackTraceElement[] _native, java.lang.Object skip)
	{
		//line 35 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		int skip1 = ( (haxe.lang.Runtime.eq(skip, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(skip)) )) );
		//line 36 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		haxe.root.Array<haxe.StackItem> stack = new haxe.root.Array<haxe.StackItem>(new haxe.StackItem[]{});
		//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		{
			//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			int _g = 0;
			//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			int _g1 = _native.length;
			//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
			while (( _g < _g1 ))
			{
				//line 37 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				int i = _g++;
				//line 38 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				if (( skip1 > i )) 
				{
					//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
					continue;
				}
				
				//line 41 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				java.lang.StackTraceElement el = _native[i];
				//line 42 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				java.lang.String className = el.getClassName();
				//line 43 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				java.lang.String methodName = el.getMethodName();
				//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				java.lang.String fileName = el.getFileName();
				//line 45 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				int lineNumber = el.getLineNumber();
				//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				haxe.StackItem method = haxe.StackItem.Method(className, methodName);
				//line 47 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
				if (( ( fileName != null ) || ( lineNumber >= 0 ) )) 
				{
					//line 48 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
					stack.push(haxe.StackItem.FilePos(method, fileName, lineNumber, null));
				}
				else
				{
					//line 50 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
					stack.push(method);
				}
				
			}
			
		}
		
		//line 53 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\haxe\\NativeStackTrace.hx"
		return stack;
	}
	
	
}


