<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="C:\HaxeToolkit\haxe\std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward.variance"/>
		</meta>
		<impl><class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/Array.hx" final="1">
		<__hx_toString_depth expr="0" line="34" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_toString_depth>
		<__hx_defaultCapacity final="1" get="inline" set="null" expr="4" line="35" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>4</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_defaultCapacity>
		<ofNative params="X" get="inline" set="null" line="42" static="1"><f a="native">
	<c path="cs.NativeArray"><c path="ofNative.X"/></c>
	<c path="Array"><c path="ofNative.X"/></c>
</f></ofNative>
		<alloc params="Y" get="inline" set="null" line="47" static="1"><f a="size">
	<x path="Int"/>
	<c path="Array"><c path="alloc.Y"/></c>
</f></alloc>
		<length public="1" set="null"><x path="Int"/></length>
		<__a><c path="cs.NativeArray"><c path="Array.T"/></c></__a>
		<concat public="1" set="method" line="68"><f a="a">
	<c path="Array"><c path="Array.T"/></c>
	<c path="Array"><c path="Array.T"/></c>
</f></concat>
		<concatNative set="method" line="77"><f a="a">
	<c path="cs.NativeArray"><c path="Array.T"/></c>
	<x path="Void"/>
</f></concatNative>
		<indexOf public="1" set="method" line="93"><f a="x:?fromIndex">
	<c path="Array.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="105"><f a="x:?fromIndex">
	<c path="Array.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<join public="1" set="method" line="117"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="134"><f a=""><x path="Null"><c path="Array.T"/></x></f></pop>
		<push public="1" set="method" line="148"><f a="x">
	<c path="Array.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="161"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="175"><f a=""><x path="Null"><c path="Array.T"/></x></f></shift>
		<slice public="1" set="method" line="190"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></slice>
		<sort public="1" set="method" line="212"><f a="f">
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<quicksort set="method" line="218"><f a="lo:hi:f">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quicksort>
		<splice public="1" set="method" line="240"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></splice>
		<spliceVoid set="method" line="270"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></spliceVoid>
		<toString public="1" set="method" line="295"><f a=""><c path="String"/></f></toString>
		<__hx_toString set="method" line="311">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</__hx_toString>
		<unshift public="1" set="method" line="328"><f a="x">
	<c path="Array.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="345"><f a="pos:x">
	<x path="Int"/>
	<c path="Array.T"/>
	<x path="Void"/>
</f></insert>
		<remove public="1" set="method" line="378"><f a="x">
	<c path="Array.T"/>
	<x path="Bool"/>
</f></remove>
		<map public="1" params="S" get="inline" set="null" line="394"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<contains public="1" set="method" line="401"><f a="x">
	<c path="Array.T"/>
	<x path="Bool"/>
</f></contains>
		<filter public="1" get="inline" set="null" line="412"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="Array.T"/></c>
</f></filter>
		<copy public="1" set="method" line="422"><f a=""><c path="Array"><c path="Array.T"/></c></f></copy>
		<iterator public="1" get="inline" set="null" line="430"><f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="435"><f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f></keyValueIterator>
		<resize public="1" set="method" line="439"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<__get set="method" line="450"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="454"><f a="idx:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__unsafe_get get="inline" set="null" line="472"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__unsafe_get>
		<__unsafe_set get="inline" set="null" line="476"><f a="idx:val">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__unsafe_set>
		<new public="1" set="method" line="51">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method" line="62">
	<f a="native">
		<c path="cs.NativeArray"><c path="Array.T"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cs.system.ValueType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ValueType" extern="1" abstract="1">
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ValueType"</e></m>
		</meta>
	</class>
	<class path="cs.system.IComparable_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IComparable_1" extern="1" interface="1">
		<CompareTo public="1" set="method"><f a="other">
	<c path="cs.system.IComparable_1.T0"/>
	<x path="Int"/>
</f></CompareTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IComparable`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.IEquatable_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IEquatable_1" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.IEquatable`1"</e></m>
</meta></class>
	<class path="cs.system.IComparable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IComparable" extern="1" interface="1">
		<CompareTo public="1" set="method"><f a="obj">
	<d/>
	<x path="Int"/>
</f></CompareTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IComparable"</e></m>
		</meta>
	</class>
	<class path="cs.system.IConvertible" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IConvertible" extern="1" interface="1">
		<GetTypeCode public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<ToBoolean public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="Bool"/>
</f></ToBoolean>
		<ToByte public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
		<ToChar public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
		<ToDateTime public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
		<ToDecimal public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
		<ToDouble public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="Float"/>
</f></ToDouble>
		<ToInt16 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
		<ToInt32 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="Int"/>
</f></ToInt32>
		<ToInt64 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
		<ToSByte public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
		<ToSingle public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="Single"/>
</f></ToSingle>
		<ToString public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
		<ToType public="1" set="method"><f a="conversionType:provider">
	<c path="cs.system.Type"/>
	<c path="cs.system.IFormatProvider"/>
	<d/>
</f></ToType>
		<ToUInt16 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
		<ToUInt32 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<x path="UInt"/>
</f></ToUInt32>
		<ToUInt64 public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IConvertible"</e></m>
		</meta>
	</class>
	<class path="cs.system.IFormattable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IFormattable" extern="1" interface="1">
		<ToString public="1" set="method"><f a="format:formatProvider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IFormattable"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.ISerializable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.ISerializable" extern="1" interface="1">
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.ISerializable"</e></m>
		</meta>
	</class>
	<class path="cs.system.DateTime" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.DateTime" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.DateTime"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.DateTime"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<UtcNow public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></UtcNow>
		<Today public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></Today>
		<Now public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></Now>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.DateTime"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.DateTime"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<get_Now public="1" set="method" static="1"><f a=""><c path="cs.system.DateTime"/></f></get_Now>
		<get_Today public="1" set="method" static="1"><f a=""><c path="cs.system.DateTime"/></f></get_Today>
		<get_UtcNow public="1" set="method" static="1"><f a=""><c path="cs.system.DateTime"/></f></get_UtcNow>
		<Compare public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></Compare>
		<FromBinary public="1" set="method" static="1"><f a="dateData">
	<x path="haxe.Int64"/>
	<c path="cs.system.DateTime"/>
</f></FromBinary>
		<SpecifyKind public="1" set="method" static="1"><f a="value:kind">
	<c path="cs.system.DateTime"/>
	<e path="cs.system.DateTimeKind"/>
	<c path="cs.system.DateTime"/>
</f></SpecifyKind>
		<DaysInMonth public="1" set="method" static="1"><f a="year:month">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></DaysInMonth>
		<_Equals public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"Equals"</e></m></meta>
		</_Equals>
		<FromFileTime public="1" set="method" static="1"><f a="fileTime">
	<x path="haxe.Int64"/>
	<c path="cs.system.DateTime"/>
</f></FromFileTime>
		<FromFileTimeUtc public="1" set="method" static="1"><f a="fileTime">
	<x path="haxe.Int64"/>
	<c path="cs.system.DateTime"/>
</f></FromFileTimeUtc>
		<FromOADate public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></FromOADate>
		<IsLeapYear public="1" set="method" static="1"><f a="year">
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLeapYear>
		<Parse public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:provider:styles">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<e path="cs.system.globalization.DateTimeStyles"/>
	<c path="cs.system.DateTime"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.DateTime"/>
</f></Parse>
			</overloads>
		</Parse>
		<ParseExact public="1" set="method" static="1">
			<f a="s:format:provider">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.DateTime"/>
			</f>
			<overloads>
				<ParseExact public="1" set="method"><f a="s:formats:provider:style">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.IFormatProvider"/>
	<e path="cs.system.globalization.DateTimeStyles"/>
	<c path="cs.system.DateTime"/>
</f></ParseExact>
				<ParseExact public="1" set="method"><f a="s:format:provider:style">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<e path="cs.system.globalization.DateTimeStyles"/>
	<c path="cs.system.DateTime"/>
</f></ParseExact>
			</overloads>
		</ParseExact>
		<TryParse public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.DateTime"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:provider:styles:result">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<e path="cs.system.globalization.DateTimeStyles"/>
	<t path="cs.Out"><c path="cs.system.DateTime"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<TryParseExact public="1" set="method" static="1">
			<f a="s:format:provider:style:result">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<e path="cs.system.globalization.DateTimeStyles"/>
				<t path="cs.Out"><c path="cs.system.DateTime"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParseExact public="1" set="method"><f a="s:formats:provider:style:result">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.IFormatProvider"/>
	<e path="cs.system.globalization.DateTimeStyles"/>
	<t path="cs.Out"><c path="cs.system.DateTime"/></t>
	<x path="Bool"/>
</f></TryParseExact></overloads>
		</TryParseExact>
		<op_Addition public="1" set="method" static="1"><f a="d:t">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.DateTime"/>
</f></op_Addition>
		<op_Equality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_GreaterThan public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_GreaterThan>
		<op_GreaterThanOrEqual public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_GreaterThanOrEqual>
		<op_Inequality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_LessThan public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_LessThan>
		<op_LessThanOrEqual public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></op_LessThanOrEqual>
		<op_Subtraction public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<overloads><op_Subtraction public="1" set="method"><f a="d:t">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.DateTime"/>
</f></op_Subtraction></overloads>
		</op_Subtraction>
		<Kind public="1" get="accessor" set="null"><e path="cs.system.DateTimeKind"/></Kind>
		<Year public="1" get="accessor" set="null"><x path="Int"/></Year>
		<Ticks public="1" get="accessor" set="null"><x path="haxe.Int64"/></Ticks>
		<Millisecond public="1" get="accessor" set="null"><x path="Int"/></Millisecond>
		<Second public="1" get="accessor" set="null"><x path="Int"/></Second>
		<Minute public="1" get="accessor" set="null"><x path="Int"/></Minute>
		<Hour public="1" get="accessor" set="null"><x path="Int"/></Hour>
		<TimeOfDay public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TimeOfDay>
		<DayOfYear public="1" get="accessor" set="null"><x path="Int"/></DayOfYear>
		<DayOfWeek public="1" get="accessor" set="null"><e path="cs.system.DayOfWeek"/></DayOfWeek>
		<Day public="1" get="accessor" set="null"><x path="Int"/></Day>
		<Month public="1" get="accessor" set="null"><x path="Int"/></Month>
		<Date public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></Date>
		<get_Date final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_Date>
		<get_Month final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Month>
		<get_Day final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Day>
		<get_DayOfWeek final="1" public="1" set="method"><f a=""><e path="cs.system.DayOfWeek"/></f></get_DayOfWeek>
		<get_DayOfYear final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_DayOfYear>
		<get_TimeOfDay final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_TimeOfDay>
		<get_Hour final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Hour>
		<get_Minute final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Minute>
		<get_Second final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Second>
		<get_Millisecond final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Millisecond>
		<get_Ticks final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Ticks>
		<get_Year final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Year>
		<get_Kind final="1" public="1" set="method"><f a=""><e path="cs.system.DateTimeKind"/></f></get_Kind>
		<Add final="1" public="1" set="method"><f a="value">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.DateTime"/>
</f></Add>
		<AddDays final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddDays>
		<AddTicks final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.DateTime"/>
</f></AddTicks>
		<AddHours final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddHours>
		<AddMilliseconds final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddMilliseconds>
		<AddMinutes final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddMinutes>
		<AddMonths final="1" public="1" set="method"><f a="months">
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddMonths>
		<AddSeconds final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddSeconds>
		<AddYears final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddYears>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<IsDaylightSavingTime final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsDaylightSavingTime>
		<ToBinary final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></ToBinary>
		<GetDateTimeFormats final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<overloads>
				<GetDateTimeFormats final="1" public="1" set="method"><f a="format:provider">
	<t path="cs.types.Char16"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetDateTimeFormats>
				<GetDateTimeFormats final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetDateTimeFormats>
				<GetDateTimeFormats final="1" public="1" set="method"><f a="format">
	<t path="cs.types.Char16"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetDateTimeFormats>
			</overloads>
		</GetDateTimeFormats>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<Subtract final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<overloads><Subtract final="1" public="1" set="method"><f a="value">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.DateTime"/>
</f></Subtract></overloads>
		</Subtract>
		<ToFileTime final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></ToFileTime>
		<ToFileTimeUtc final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></ToFileTimeUtc>
		<ToLongDateString final="1" public="1" set="method"><f a=""><c path="String"/></f></ToLongDateString>
		<ToLongTimeString final="1" public="1" set="method"><f a=""><c path="String"/></f></ToLongTimeString>
		<ToOADate final="1" public="1" set="method"><f a=""><x path="Float"/></f></ToOADate>
		<ToShortDateString final="1" public="1" set="method"><f a=""><c path="String"/></f></ToShortDateString>
		<ToShortTimeString final="1" public="1" set="method"><f a=""><c path="String"/></f></ToShortTimeString>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<ToLocalTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></ToLocalTime>
		<ToUniversalTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></ToUniversalTime>
		<new final="1" public="1" set="method">
			<f a="ticks">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:millisecond:calendar:kind">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.globalization.Calendar"/>
	<e path="cs.system.DateTimeKind"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:millisecond:kind">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.DateTimeKind"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:kind">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.DateTimeKind"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="ticks:kind">
	<x path="haxe.Int64"/>
	<e path="cs.system.DateTimeKind"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:millisecond:calendar">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.globalization.Calendar"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:calendar">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.globalization.Calendar"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:calendar">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.globalization.Calendar"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second:millisecond">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day:hour:minute:second">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="year:month:day">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.DateTime"</e></m>
		</meta>
	</class>
	<class path="Date" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Date.hx">
		<epochTicks expr="new DateTime(1970, 1, 1).Ticks" line="32" static="1">
			<x path="haxe.Int64"/>
			<meta>
				<m n=":value"><e>new DateTime(1970, 1, 1).Ticks</e></m>
				<m n=":readOnly"/>
			</meta>
		</epochTicks>
		<now public="1" get="inline" set="null" line="128" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="132" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<fromNative get="inline" set="null" line="159" static="1"><f a="d">
	<c path="cs.system.DateTime"/>
	<c path="Date"/>
</f></fromNative>
		<date><c path="cs.system.DateTime"/></date>
		<dateUTC><c path="cs.system.DateTime"/></dateUTC>
		<getTime public="1" get="inline" set="null" line="56">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="64">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="68">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="76">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="80">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="84">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="88">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" get="inline" set="null" line="92">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" get="inline" set="null" line="96">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" get="inline" set="null" line="100">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" get="inline" set="null" line="104">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" get="inline" set="null" line="108">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" get="inline" set="null" line="112">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" get="inline" set="null" line="116">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" get="inline" set="null" line="120">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method" line="124">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="37">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
			<overloads><new set="method" line="46">
	<f a="native">
		<c path="cs.system.DateTime"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/EReg.hx" final="1">
		<escape public="1" get="inline" set="null" line="132" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<regex><c path="cs.system.text.regularexpressions.Regex"/></regex>
		<m><c path="cs.system.text.regularexpressions.Match"/></m>
		<isGlobal><x path="Bool"/></isGlobal>
		<cur><c path="String"/></cur>
		<match public="1" set="method" line="55">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="61">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="69">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="77">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="81">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="87">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<start get="inline" set="null" line="96"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
		<len get="inline" set="null" line="100"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></len>
		<replace public="1" set="method" line="104">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="108">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="34">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx" private="1" module="EnumValue" final="1">
	<match public="1" set="method" line="58" static="1">
		<f a="this:pattern">
			<x path="EnumValue"/>
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
	</match>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx" private="1" module="EnumValue" final="1">
		<match public="1" set="method" line="58" static="1">
			<f a="this:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="IntIterator" params="" file="C:\HaxeToolkit\haxe\std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<x path="haxe.ds.Map">
			<c path="Map.K"/>
			<c path="Map.V"/>
		</x>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="cs.system.Double" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Double" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><x path="Float"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="Float"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<PositiveInfinity public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</PositiveInfinity>
		<NegativeInfinity public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</NegativeInfinity>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</NaN>
		<MinValue public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Epsilon public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</Epsilon>
		<IsInfinity public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Bool"/>
</f></IsInfinity>
		<IsNaN public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Bool"/>
</f></IsNaN>
		<IsNegativeInfinity public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Bool"/>
</f></IsNegativeInfinity>
		<IsPositiveInfinity public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Bool"/>
</f></IsPositiveInfinity>
		<Parse public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:style:provider">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Float"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:style">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<x path="Float"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Float"/>
</f></Parse>
			</overloads>
		</Parse>
		<TryParse public="1" set="method" static="1">
			<f a="s:style:provider:result">
				<c path="String"/>
				<e path="cs.system.globalization.NumberStyles"/>
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.Out"><x path="Float"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:result">
	<c path="String"/>
	<t path="cs.Out"><x path="Float"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Double"</e></m>
		</meta>
	</class>
	<class path="cs.system.Math" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Math" extern="1" final="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</PI>
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</E>
		<Abs public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<Abs public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
</f></Abs>
				<Abs public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
</f></Abs>
				<Abs public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></Abs>
				<Abs public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></Abs>
				<Abs public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Single"/>
</f></Abs>
				<Abs public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></Abs>
			</overloads>
		</Abs>
		<Ceiling public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads><Ceiling public="1" set="method"><f a="a">
	<x path="Float"/>
	<x path="Float"/>
</f></Ceiling></overloads>
		</Ceiling>
		<BigMul public="1" set="method" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></BigMul>
		<DivRem public="1" set="method" static="1">
			<f a="a:b:result">
				<x path="Int"/>
				<x path="Int"/>
				<t path="cs.Out"><x path="Int"/></t>
				<x path="Int"/>
			</f>
			<overloads><DivRem public="1" set="method"><f a="a:b:result">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<t path="cs.Out"><x path="haxe.Int64"/></t>
	<x path="haxe.Int64"/>
</f></DivRem></overloads>
		</DivRem>
		<Floor public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><Floor public="1" set="method"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Floor></overloads>
		</Floor>
		<IEEERemainder public="1" set="method" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></IEEERemainder>
		<Log public="1" set="method" static="1">
			<f a="a:newBase">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><Log public="1" set="method"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Log></overloads>
		</Log>
		<Max public="1" set="method" static="1">
			<f a="val1:val2">
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
			</f>
			<overloads>
				<Max public="1" set="method"><f a="val1:val2">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt64"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<x path="Single"/>
	<x path="Single"/>
	<x path="Single"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></Max>
				<Max public="1" set="method"><f a="val1:val2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Max>
			</overloads>
		</Max>
		<Min public="1" set="method" static="1">
			<f a="val1:val2">
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
			</f>
			<overloads>
				<Min public="1" set="method"><f a="val1:val2">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt64"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<x path="Single"/>
	<x path="Single"/>
	<x path="Single"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></Min>
				<Min public="1" set="method"><f a="val1:val2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Min>
			</overloads>
		</Min>
		<Round public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<Round public="1" set="method"><f a="value:digits:mode">
	<x path="Float"/>
	<x path="Int"/>
	<e path="cs.system.MidpointRounding"/>
	<x path="Float"/>
</f></Round>
				<Round public="1" set="method"><f a="value:mode">
	<x path="Float"/>
	<e path="cs.system.MidpointRounding"/>
	<x path="Float"/>
</f></Round>
				<Round public="1" set="method"><f a="value:digits">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
</f></Round>
				<Round public="1" set="method"><f a="a">
	<x path="Float"/>
	<x path="Float"/>
</f></Round>
				<Round public="1" set="method"><f a="d:decimals:mode">
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
	<e path="cs.system.MidpointRounding"/>
	<c path="cs.system.Decimal"/>
</f></Round>
				<Round public="1" set="method"><f a="d:mode">
	<c path="cs.system.Decimal"/>
	<e path="cs.system.MidpointRounding"/>
	<c path="cs.system.Decimal"/>
</f></Round>
				<Round public="1" set="method"><f a="d:decimals">
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
	<c path="cs.system.Decimal"/>
</f></Round>
			</overloads>
		</Round>
		<Truncate public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><Truncate public="1" set="method"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Truncate></overloads>
		</Truncate>
		<Sign public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
			</f>
			<overloads>
				<Sign public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="Int"/>
</f></Sign>
				<Sign public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="Int"/>
</f></Sign>
				<Sign public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></Sign>
				<Sign public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></Sign>
				<Sign public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Int"/>
</f></Sign>
				<Sign public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></Sign>
			</overloads>
		</Sign>
		<Sin public="1" set="method" static="1"><f a="a">
	<x path="Float"/>
	<x path="Float"/>
</f></Sin>
		<Cos public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Cos>
		<Tan public="1" set="method" static="1"><f a="a">
	<x path="Float"/>
	<x path="Float"/>
</f></Tan>
		<Sinh public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></Sinh>
		<Cosh public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></Cosh>
		<Tanh public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></Tanh>
		<Acos public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Acos>
		<Asin public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Asin>
		<Atan public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Atan>
		<Atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></Atan2>
		<Exp public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Exp>
		<Log10 public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Log10>
		<Pow public="1" set="method" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></Pow>
		<Sqrt public="1" set="method" static="1"><f a="d">
	<x path="Float"/>
	<x path="Float"/>
</f></Sqrt>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Math"</e></m>
		</meta>
	</class>
	<class path="cs.system.Random" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Random" extern="1">
		<Sample set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":protected"/></meta>
		</Sample>
		<Next public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<Next public="1" set="method"><f a="minValue:maxValue">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Next>
				<Next public="1" set="method"><f a="maxValue">
	<x path="Int"/>
	<x path="Int"/>
</f></Next>
			</overloads>
		</Next>
		<NextBytes public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></NextBytes>
		<NextDouble public="1" set="method"><f a=""><x path="Float"/></f></NextDouble>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="Seed">
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Random"</e></m>
		</meta>
	</class>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Math.hx">
		<rand expr="new cs.system.Random()" line="24" static="1">
			<c path="cs.system.Random"/>
			<meta>
				<m n=":value"><e>new cs.system.Random()</e></m>
				<m n=":readOnly"/>
			</meta>
		</rand>
		<PI public="1" set="null" expr="cs.system.Math.PI" line="27" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Math.PI</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NaN public="1" set="null" expr="cs.system.Double.NaN" line="29" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.NaN</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" expr="cs.system.Double.NegativeInfinity" line="31" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.NegativeInfinity</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" expr="cs.system.Double.PositiveInfinity" line="33" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.PositiveInfinity</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<abs public="1" get="inline" set="null" line="35" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" get="inline" set="null" line="39" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" get="inline" set="null" line="43" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" get="inline" set="null" line="47" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" get="inline" set="null" line="51" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" get="inline" set="null" line="55" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" get="inline" set="null" line="59" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" get="inline" set="null" line="63" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" get="inline" set="null" line="67" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" get="inline" set="null" line="71" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<fround public="1" get="inline" set="null" line="75" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" get="inline" set="null" line="79" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="83" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<round public="1" set="method" line="87" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" get="inline" set="null" line="99" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" get="inline" set="null" line="103" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" get="inline" set="null" line="107" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<asin public="1" get="inline" set="null" line="111" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" get="inline" set="null" line="115" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" get="inline" set="null" line="119" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<random public="1" get="inline" set="null" line="123" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<isFinite public="1" get="inline" set="null" line="127" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="131" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Reflect.hx">
		<hasField public="1" set="method" line="34" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="43" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" line="52" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="60" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="71" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="81" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="87" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<instanceFields set="method" line="100" static="1"><f a="c">
	<x path="Class"><d/></x>
	<c path="Array"><c path="String"/></c>
</f></instanceFields>
		<isFunction public="1" get="inline" set="null" line="111" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="115" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="120" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>cs.internal.Closure</e></m></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="134" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="138" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="142" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="149" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="159" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Std.hx">
		<is public="1" get="inline" set="null" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="32" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<string public="1" set="method" line="69" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="78" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="82" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="132" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="187" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1">
		<haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/String.hx" extern="1">
		<Compare set="method" static="1">
			<f a="s1:s2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Compare set="method">
	<f a="s1:s2:kind">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.StringComparison"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</Compare></overloads>
		</Compare>
		<CompareOrdinal set="method" static="1"><f a="s1:s2">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></CompareOrdinal>
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<IndexOf set="method"><f a="value:startIndex:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></IndexOf>
		<Replace set="method"><f a="oldValue:newValue">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Replace>
		<StartsWith set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></StartsWith>
		<EndsWith set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></EndsWith>
		<TrimStart set="method"><f a=""><c path="String"/></f></TrimStart>
		<TrimEnd set="method"><f a=""><c path="String"/></f></TrimEnd>
		<Trim set="method"><f a=""><c path="String"/></f></Trim>
		<CompareTo set="method"><f a="obj">
	<d/>
	<x path="Int"/>
</f></CompareTo>
		<Substring set="method">
			<f a="startIndex:length">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><Substring set="method"><f a="startIndex">
	<x path="Int"/>
	<c path="String"/>
</f></Substring></overloads>
		</Substring>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/StringBuf.hx">
		<b><c path="cs.system.text.StringBuilder"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="35"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="39">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="43">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="48">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="57">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.SysTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="193" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="211" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" get="inline" set="null" line="226" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" get="inline" set="null" line="249" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="278" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" get="inline" set="null" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" get="inline" set="null" line="321" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" get="inline" set="null" line="343" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="365" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="390" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="412" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="434" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="476" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<unsafeCodeAt public="1" get="inline" set="null" line="515" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</unsafeCodeAt>
		<iterator public="1" get="inline" set="null" line="550" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="561" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="568" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="589" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="598" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="615" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="630" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="632" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="Sys" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Sys.hx">
		<_env static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_env>
		<_args static="1"><c path="Array"><c path="String"/></c></_args>
		<print public="1" get="inline" set="null" line="32" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="36" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" line="40" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" get="inline" set="null" line="49" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="53" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="59" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" get="inline" set="null" line="71" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="75" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" get="inline" set="null" line="80" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" get="inline" set="null" line="84" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="88" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" line="105" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" get="inline" set="null" line="127" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<epochTicks expr="new cs.system.DateTime(1970, 1, 1).Ticks" line="131" static="1">
			<x path="haxe.Int64"/>
			<meta>
				<m n=":value"><e>new cs.system.DateTime(1970, 1, 1).Ticks</e></m>
				<m n=":readOnly"/>
			</meta>
		</epochTicks>
		<time public="1" set="method" line="133" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" get="inline" set="null" line="137" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" get="inline" set="null" line="141" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="145" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" line="149" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" get="inline" set="null" line="157" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" get="inline" set="null" line="165" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" get="inline" set="null" line="173" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</enum>
	<class path="cs.system.ICloneable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ICloneable" extern="1" interface="1">
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ICloneable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEnumerable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IEnumerable" extern="1" interface="1">
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IEnumerable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ICollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ICollection" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ICollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IList" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IList" extern="1" interface="1">
		<extends path="cs.system.collections.ICollection"/>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><d/></extends>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<get_IsFixedSize public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Item public="1" set="method"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<Add public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></IndexOf>
		<Insert public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<Remove public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IList"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" extern="1" abstract="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<CreateInstance public="1" set="method" static="1">
			<f a="elementType:length">
				<c path="cs.system.Type"/>
				<x path="Int"/>
				<c path="cs.system.Array"/>
			</f>
			<overloads>
				<CreateInstance public="1" set="method"><f a="elementType:lengths">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
	<c path="cs.system.Array"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="elementType:lengths:lowerBounds">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.system.Array"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="elementType:lengths">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.system.Array"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="elementType:length1:length2:length3">
	<c path="cs.system.Type"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="elementType:length1:length2">
	<c path="cs.system.Type"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<BinarySearch public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" params="M0" set="method"><f a="array:index:length:value:comparer">
	<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="BinarySearch.M0"/>
	<c path="cs.system.collections.generic.IComparer_1"><c path="BinarySearch.M0"/></c>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" params="M0" set="method"><f a="array:index:length:value">
	<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="BinarySearch.M0"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" params="M0" set="method"><f a="array:value:comparer">
	<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
	<c path="BinarySearch.M0"/>
	<c path="cs.system.collections.generic.IComparer_1"><c path="BinarySearch.M0"/></c>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" params="M0" set="method"><f a="array:value">
	<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
	<c path="BinarySearch.M0"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="array:index:length:value:comparer">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="array:index:length:value">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="array:value:comparer">
	<c path="cs.system.Array"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<Clear public="1" set="method" static="1">
			<f a="array:index:length">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Clear>
		<Copy public="1" set="method" static="1">
			<f a="sourceArray:destinationArray:length">
				<c path="cs.system.Array"/>
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Copy public="1" set="method"><f a="sourceArray:destinationArray:length">
	<c path="cs.system.Array"/>
	<c path="cs.system.Array"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Copy>
				<Copy public="1" set="method"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="haxe.Int64"/>
	<c path="cs.system.Array"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Copy>
				<Copy public="1" set="method"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Copy>
			</overloads>
		</Copy>
		<IndexOf public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
			<overloads>
				<IndexOf public="1" params="M0" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</IndexOf>
				<IndexOf public="1" params="M0" set="method">
					<f a="array:value:startIndex">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</IndexOf>
				<IndexOf public="1" params="M0" set="method">
					<f a="array:value">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="array:value:startIndex">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" params="M0" set="method"><f a="array:value:startIndex:count">
	<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
	<c path="LastIndexOf.M0"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" params="M0" set="method"><f a="array:value:startIndex">
	<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
	<c path="LastIndexOf.M0"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" params="M0" set="method"><f a="array:value">
	<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
	<c path="LastIndexOf.M0"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="array:value:startIndex:count">
	<c path="cs.system.Array"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="array:value:startIndex">
	<c path="cs.system.Array"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Reverse public="1" set="method" static="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads><Reverse public="1" set="method"><f a="array:index:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<Sort public="1" set="method" static="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Sort public="1" params="M0" set="method"><f a="array:comparison">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<x path="cs.system.Comparison_1"><c path="Sort.M0"/></x>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0:M1" set="method"><f a="keys:items:index:length:comparer">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<c path="cs.NativeArray"><c path="Sort.M1"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0" set="method"><f a="array:index:length:comparer">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0:M1" set="method"><f a="keys:items:index:length">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<c path="cs.NativeArray"><c path="Sort.M1"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0" set="method"><f a="array:index:length">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0:M1" set="method"><f a="keys:items:comparer">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<c path="cs.NativeArray"><c path="Sort.M1"/></c>
	<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0" set="method"><f a="array:comparer">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0:M1" set="method"><f a="keys:items">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<c path="cs.NativeArray"><c path="Sort.M1"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" params="M0" set="method"><f a="array">
	<c path="cs.NativeArray"><c path="Sort.M0"/></c>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="keys:items:index:length:comparer">
	<c path="cs.system.Array"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="array:index:length:comparer">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="keys:items:index:length">
	<c path="cs.system.Array"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="keys:items:comparer">
	<c path="cs.system.Array"/>
	<c path="cs.system.Array"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="array:index:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="array:comparer">
	<c path="cs.system.Array"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="keys:items">
	<c path="cs.system.Array"/>
	<c path="cs.system.Array"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<Resize public="1" params="M0" set="method" static="1"><f a="array:newSize">
	<t path="cs.Ref"><c path="cs.NativeArray"><c path="Resize.M0"/></c></t>
	<x path="Int"/>
	<x path="Void"/>
</f></Resize>
		<TrueForAll public="1" params="M0" set="method" static="1"><f a="array:match">
	<c path="cs.NativeArray"><c path="TrueForAll.M0"/></c>
	<x path="cs.system.Predicate_1"><c path="TrueForAll.M0"/></x>
	<x path="Bool"/>
</f></TrueForAll>
		<ForEach public="1" params="M0" set="method" static="1"><f a="array:action">
	<c path="cs.NativeArray"><c path="ForEach.M0"/></c>
	<x path="cs.system.Action_1"><c path="ForEach.M0"/></x>
	<x path="Void"/>
</f></ForEach>
		<ConvertAll public="1" params="M0:M1" set="method" static="1"><f a="array:converter">
	<c path="cs.NativeArray"><c path="ConvertAll.M0"/></c>
	<x path="cs.system.Converter_2">
		<c path="ConvertAll.M0"/>
		<c path="ConvertAll.M1"/>
	</x>
	<c path="cs.NativeArray"><c path="ConvertAll.M1"/></c>
</f></ConvertAll>
		<FindLastIndex public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
				<x path="Int"/>
			</f>
			<overloads>
				<FindLastIndex public="1" params="M0" set="method"><f a="array:startIndex:count:match">
	<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
	<x path="Int"/>
</f></FindLastIndex>
				<FindLastIndex public="1" params="M0" set="method"><f a="array:startIndex:match">
	<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
	<x path="Int"/>
	<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
	<x path="Int"/>
</f></FindLastIndex>
			</overloads>
		</FindLastIndex>
		<FindIndex public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
				<x path="Int"/>
			</f>
			<overloads>
				<FindIndex public="1" params="M0" set="method"><f a="array:startIndex:count:match">
	<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
	<x path="Int"/>
</f></FindIndex>
				<FindIndex public="1" params="M0" set="method"><f a="array:startIndex:match">
	<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
	<x path="Int"/>
	<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
	<x path="Int"/>
</f></FindIndex>
			</overloads>
		</FindIndex>
		<FindAll public="1" params="M0" set="method" static="1"><f a="array:match">
	<c path="cs.NativeArray"><c path="FindAll.M0"/></c>
	<x path="cs.system.Predicate_1"><c path="FindAll.M0"/></x>
	<c path="cs.NativeArray"><c path="FindAll.M0"/></c>
</f></FindAll>
		<Exists public="1" params="M0" set="method" static="1"><f a="array:match">
	<c path="cs.NativeArray"><c path="Exists.M0"/></c>
	<x path="cs.system.Predicate_1"><c path="Exists.M0"/></x>
	<x path="Bool"/>
</f></Exists>
		<AsReadOnly public="1" params="M0" set="method" static="1"><f a="array">
	<c path="cs.NativeArray"><c path="AsReadOnly.M0"/></c>
	<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1"><c path="AsReadOnly.M0"/></c>
</f></AsReadOnly>
		<Find public="1" params="M0" set="method" static="1"><f a="array:match">
	<c path="cs.NativeArray"><c path="Find.M0"/></c>
	<x path="cs.system.Predicate_1"><c path="Find.M0"/></x>
	<c path="Find.M0"/>
</f></Find>
		<FindLast public="1" params="M0" set="method" static="1"><f a="array:match">
	<c path="cs.NativeArray"><c path="FindLast.M0"/></c>
	<x path="cs.system.Predicate_1"><c path="FindLast.M0"/></x>
	<c path="FindLast.M0"/>
</f></FindLast>
		<ConstrainedCopy public="1" set="method" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></ConstrainedCopy>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Rank public="1" get="accessor" set="null"><x path="Int"/></Rank>
		<LongLength public="1" get="accessor" set="null"><x path="haxe.Int64"/></LongLength>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Length final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Length>
		<get_LongLength final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_LongLength>
		<get_Rank final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Rank>
		<GetLength final="1" public="1" set="method"><f a="dimension">
	<x path="Int"/>
	<x path="Int"/>
</f></GetLength>
		<GetLongLength final="1" public="1" set="method"><f a="dimension">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></GetLongLength>
		<GetLowerBound final="1" public="1" set="method"><f a="dimension">
	<x path="Int"/>
	<x path="Int"/>
</f></GetLowerBound>
		<GetValue final="1" public="1" set="method">
			<f a="indices">
				<c path="cs.NativeArray"><x path="Int"/></c>
				<d/>
			</f>
			<overloads>
				<GetValue final="1" public="1" set="method"><f a="indices">
	<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index1:index2:index3">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index1:index2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index">
	<x path="haxe.Int64"/>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index1:index2:index3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></GetValue>
				<GetValue final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<d/>
</f></GetValue>
			</overloads>
		</GetValue>
		<SetValue final="1" public="1" set="method">
			<f a="value:indices">
				<d/>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<SetValue final="1" public="1" set="method"><f a="value:indices">
	<d/>
	<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index1:index2:index3">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index1:index2">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index1:index2:index3">
	<d/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index1:index2">
	<d/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetValue>
				<SetValue final="1" public="1" set="method"><f a="value:index">
	<d/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetValue>
			</overloads>
		</SetValue>
		<get_IsSynchronized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot final="1" public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<get_IsFixedSize final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<GetUpperBound final="1" public="1" set="method"><f a="dimension">
	<x path="Int"/>
	<x path="Int"/>
</f></GetUpperBound>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<Initialize final="1" public="1" set="method"><f a=""><x path="Void"/></f></Initialize>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></CopyTo></overloads>
		</CopyTo>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array"</e></m>
		</meta>
	</class>
	<class path="cs.NativeArray" params="T" file="C:\HaxeToolkit\haxe\std/cs/NativeArray.hx" extern="1">
		<extends path="cs.system.Array"/>
		<make public="1" params="T" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><c path="make.T"/></t>
				<c path="cs.NativeArray"><c path="make.T"/></c>
			</f>
			<haxe_doc>Creates a new array with the specified elements.

		Usage:
		```haxe
		var elements = NativeArray.make(1,2,3,4,5,6);
		```</haxe_doc>
		</make>
		<Reverse public="1" set="method" static="1"><f a="arr">
	<c path="cs.system.Array"/>
	<x path="Void"/>
</f></Reverse>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>Alias to array's `Length` property. Returns the size of the array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new array with size `len`</haxe_doc>
		</new>
		<haxe_doc>Represents a C# fixed-size Array (`T[]`)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<enum path="cs.internal.EmptyObject" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Runtime.hx" module="cs.internal.Runtime">
		<EMPTY/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.EmptyObject"</e></m>
		</meta>
	</enum>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="46" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="53" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="68" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="87" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="96" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="146" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="154" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<__createEmptyInstance_EMPTY_ARGS expr="cs.NativeArray.make(((cs.internal.Runtime.EmptyObject.EMPTY : Any)))" line="167" static="1">
			<c path="cs.NativeArray"><x path="Any"/></c>
			<meta>
				<m n=":value"><e>cs.NativeArray.make(((cs.internal.Runtime.EmptyObject.EMPTY : Any)))</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_ARGS>
		<createEmptyInstance public="1" params="T" set="method" line="169" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="189" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="200" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="205" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="228" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="244" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="256" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="305" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="314" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="318" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="324" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature"><e>"has_enum"</e></m></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="333" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="UInt"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#. It's currently
	handled the same as a normal Int.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":analyzer"><e>no_const_propagation</e></m>
		</meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt" final="1">
	<addI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<addF set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addF>
	<add set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mulF set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulF>
	<mul set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<modF set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modF>
	<mod set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<subF set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subF>
	<sub set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<divF set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divF>
	<div set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shl set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shr get="inline" set="null" line="79" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<gt set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<gtf set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtf>
	<gtf2 set="method" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtf2>
	<gtef set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gtef>
	<gtef2 set="method" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gtef2>
	<ltf set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltf>
	<ltf2 set="method" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltf2>
	<ltef set="method" static="1">
		<f a="lhs:rhs">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</ltef>
	<ltef2 set="method" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</ltef2>
	<bneg set="method" static="1">
		<f a="t">
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<equalsInt params="T" set="method" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" set="method" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" set="method" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" set="method" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<prefixIncrement set="method" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement set="method" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement set="method" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement set="method" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt" final="1">
		<addI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<addF set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addF>
		<add set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mulF set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulF>
		<mul set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<modF set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modF>
		<mod set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<subF set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subF>
		<sub set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<divF set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divF>
		<div set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shl set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shr get="inline" set="null" line="79" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<gt set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<gtf set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtf>
		<gtf2 set="method" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtf2>
		<gtef set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gtef>
		<gtef2 set="method" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gtef2>
		<ltf set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltf>
		<ltf2 set="method" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltf2>
		<ltef set="method" static="1">
			<f a="lhs:rhs">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</ltef>
		<ltef2 set="method" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</ltef2>
		<bneg set="method" static="1">
			<f a="t">
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<equalsInt params="T" set="method" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" set="method" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" set="method" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" set="method" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<prefixIncrement set="method" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement set="method" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement set="method" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement set="method" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.Boot" params="" file="C:\HaxeToolkit\haxe\std/cs/Boot.hx">
		<init public="1" set="method" line="42" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</init>
		<meta>
			<m n=":hxGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<abstract path="cs.Flags" params="T" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx">
		<from><icast><c path="cs.Flags.T"/></icast></from>
		<this><c path="cs.Flags.T"/></this>
		<to><icast><c path="cs.Flags.T"/></icast></to>
		<haxe_doc>Use this type to have access to the bitwise operators of C# enums that have a `cs.system.FlagsAttribute` attribute.

	Usage example:

	```haxe
	import cs.system.reflection.BindingFlags;
	var binding = new Flags(BindingFlags.Public) | BindingFlags.Static | BindingFlags.NonPublic;
	```</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="cs._Flags.Flags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx" private="1" module="cs.Flags" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="cs._Flags.Flags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx" private="1" module="cs.Flags" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="cs._Flags.EnumUnderlying" params="T" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx" private="1" module="cs.Flags">
		<from><icast><c path="cs._Flags.EnumUnderlying.T"/></icast></from>
		<this><x path="cs._Flags.EnumUnderlying"><c path="cs._Flags.EnumUnderlying.T"/></x></this>
		<to><icast><c path="cs._Flags.EnumUnderlying.T"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._Flags.EnumUnderlying_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx" private="1" module="cs.Flags" final="1">
	<or public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
			<c path="or.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xor public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
			<c path="xor.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<and public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
			<c path="and.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<bneg public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs._Flags.EnumUnderlying"><c path="bneg.T"/></x>
			<c path="bneg.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._Flags.EnumUnderlying_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/Flags.hx" private="1" module="cs.Flags" final="1">
		<or public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
				<c path="or.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xor public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
				<c path="xor.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<and public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
				<c path="and.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<bneg public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs._Flags.EnumUnderlying"><c path="bneg.T"/></x>
				<c path="bneg.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.Lib" params="" file="C:\HaxeToolkit\haxe\std/cs/Lib.hx">
		<decimalSeparator static="1"><c path="String"/></decimalSeparator>
		<applyCultureChanges public="1" set="method" line="38" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Changes the current culture settings to allow a consistent cross-target behavior.
		Currently the only change made is in regard to the decimal separator, which is always set to "."</haxe_doc>
		</applyCultureChanges>
		<revertDefaultCulture public="1" set="method" line="48" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverts the culture changes to the default settings.</haxe_doc>
		</revertDefaultCulture>
		<p_nativeArray params="T" set="method" line="71" static="1">
			<f a="arr:ret">
				<c path="Array"><c path="p_nativeArray.T"/></c>
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</p_nativeArray>
		<fromNativeType public="1" get="inline" set="null" line="95" static="1">
			<f a="t">
				<c path="cs.system.Type"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a Class<> equivalent to the native System.Type type.

		Currently Haxe's Class<> is equivalent to System.Type, but this is an implementation detail.
		This may change in the future, so use this function whenever you need to perform such conversion.]]></haxe_doc>
		</fromNativeType>
		<toNativeType public="1" get="inline" set="null" line="105" static="1">
			<f a="cl">
				<x path="Class"><d/></x>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a System.Type equivalent to the Haxe Class<> type.

		Currently Haxe's Class<> is equivalent to System.Type, but this is an implementation detail.
		This may change in the future, so use this function whenever you need to perform such conversion.]]></haxe_doc>
		</toNativeType>
		<toNativeEnum public="1" get="inline" set="null" line="112" static="1">
			<f a="cl">
				<x path="Enum"><d/></x>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a System.Type equivalent to the Haxe Enum<> type.]]></haxe_doc>
		</toNativeEnum>
		<nativeType public="1" get="inline" set="null" line="121" static="1">
			<f a="obj">
				<d/>
				<c path="cs.system.Type"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"The function `nativeType` is deprecated and will be removed in later versions. Please use `getNativeType` instead"</e></m>
			</meta>
			<haxe_doc>Gets the native System.Type from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</nativeType>
		<getNativeType public="1" get="inline" set="null" line="128" static="1">
			<f a="obj">
				<d/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the native System.Type from the supplied object. Will throw an exception in case of null being passed.</haxe_doc>
		</getNativeType>
		<array public="1" params="T" get="inline" set="null" line="147" static="1">
			<f a="native">
				<c path="cs.NativeArray"><c path="array.T"/></c>
				<c path="Array"><c path="array.T"/></c>
			</f>
			<haxe_doc>Returns a Haxe Array of a native Array.
		Unless `erase_generics` is defined, it won't copy the contents of the native array,
		so unless any operation triggers an array resize, all changes made to the Haxe array
		will affect the native array argument.</haxe_doc>
		</array>
		<arrayAlloc public="1" params="T" get="inline" set="null" line="159" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="arrayAlloc.T"/></c>
			</f>
			<haxe_doc>Allocates a new Haxe Array with a predetermined size</haxe_doc>
		</arrayAlloc>
		<haxe_doc>Platform-specific C# Library. Provides some platform-specific functions for the C# target,
	such as conversion from haxe types to native types and vice-versa.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="cs._NativeArray.NativeArrayIterator" params="T" file="C:\HaxeToolkit\haxe\std/cs/NativeArray.hx" private="1" module="cs.NativeArray">
		<arr public="1" set="null"><c path="cs.NativeArray"><c path="cs._NativeArray.NativeArrayIterator.T"/></c></arr>
		<idx public="1" set="null"><x path="UInt"/></idx>
		<hasNext public="1" get="inline" set="null" line="73"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="75"><f a=""><c path="cs._NativeArray.NativeArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="67"><f a="arr">
	<c path="cs.NativeArray"><c path="cs._NativeArray.NativeArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":dce"/>
		</meta>
	</class>
	<typedef path="cs.Out" params="T" file="C:\HaxeToolkit\haxe\std/cs/Out.hx">
		<c path="cs.Out.T"/>
		<haxe_doc>This type represents "out" types for C# function parameters.
	It only has effect on function parameters, and conversion to/from the referenced type is automatic.

	Note: Using this type should be considered a bad practice unless overriding a native function is needed.</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":analyzer"><e>no_local_dce</e></m>
			<m n=":semantics"><e>reference</e></m>
		</meta>
	</typedef>
	<typedef path="cs.Ref" params="T" file="C:\HaxeToolkit\haxe\std/cs/Ref.hx">
		<c path="cs.Ref.T"/>
		<haxe_doc>This type represents "ref" types for C# function parameters.
	It only has effect on function parameters, and conversion to/from the referenced type is automatic.

	Note: Using this type should be considered a bad practice unless overriding a native function is needed.</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":semantics"><e>reference</e></m>
		</meta>
	</typedef>
	<abstract path="cs.Int8" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.Int8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Int16" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.Int16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Char16" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cs.Char16"/></this>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.UInt8" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cs.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.UInt16" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.UInt16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Int64" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="Float"/></icast>
		</from>
		<this><x path="cs.Int64"/></this>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._StdTypes.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1" final="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._StdTypes.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1" final="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="cs.UInt64" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" module="cs.StdTypes">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="cs.Int64"/></icast>
			<icast><x path="Float"/></icast>
			<icast><x path="haxe.Int64"/></icast>
		</from>
		<this><x path="cs.UInt64"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._StdTypes.UInt64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1" final="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._StdTypes.UInt64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1" final="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.internal.FieldHashConflict" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/FieldLookup.hx" module="cs.internal.FieldLookup" final="1">
		<hash public="1" set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</hash>
		<name public="1" set="null">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</name>
		<value public="1"><d/></value>
		<next public="1"><c path="cs.internal.FieldHashConflict"/></next>
		<new public="1" set="method" line="33">
			<f a="hash:name:value:next">
				<x path="Int"/>
				<c path="String"/>
				<d/>
				<c path="cs.internal.FieldHashConflict"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.FieldHashConflict"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="cs.internal.FieldLookup" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/FieldLookup.hx" final="1">
		<fieldIds static="1">
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":protected"/></meta>
		</fieldIds>
		<fields static="1">
			<c path="cs.NativeArray"><c path="String"/></c>
			<meta><m n=":protected"/></meta>
		</fields>
		<length static="1">
			<x path="Int"/>
			<meta><m n=":protected"/></meta>
		</length>
		<addFields set="method" line="53" static="1"><f a="nids:nfields">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></addFields>
		<doHash get="inline" set="null" line="111" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></doHash>
		<lookupHash public="1" set="method" line="120" static="1"><f a="key">
	<x path="Int"/>
	<c path="String"/>
</f></lookupHash>
		<hash public="1" set="method" line="140" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<findHash public="1" set="method" line="180" static="1"><f a="hash:hashs:length">
	<x path="Int"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></findHash>
		<removeInt public="1" set="method" line="199" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeInt>
		<removeFloat public="1" set="method" line="204" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeFloat>
		<removeDynamic public="1" set="method" line="209" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeDynamic>
		<insertInt public="1" set="method" line="246" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></insertInt>
		<insertFloat public="1" set="method" line="249" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="cs.NativeArray"><x path="Float"/></c>
</f></insertFloat>
		<insertDynamic public="1" set="method" line="252" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
</f></insertDynamic>
		<insertString public="1" set="method" line="255" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></insertString>
		<getHashConflict public="1" set="method" line="257" static="1"><f a="head:hash:name">
	<c path="cs.internal.FieldHashConflict"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.internal.FieldHashConflict"/>
</f></getHashConflict>
		<setHashConflict public="1" set="method" line="267" static="1"><f a="head:hash:name:value">
	<t path="cs.Ref"><c path="cs.internal.FieldHashConflict"/></t>
	<x path="Int"/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setHashConflict>
		<deleteHashConflict public="1" set="method" line="279" static="1"><f a="head:hash:name">
	<t path="cs.Ref"><c path="cs.internal.FieldHashConflict"/></t>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
</f></deleteHashConflict>
		<addHashConflictNames public="1" set="method" line="305" static="1"><f a="head:arr">
	<c path="cs.internal.FieldHashConflict"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></addHashConflictNames>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.FieldLookup"</e></m>
			<m n=":classCode"><e>"#pragma warning disable 628\n"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":static"/>
		</meta>
	</class>
	<class path="cs.internal.Function" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Function.hx">
		<new set="method" line="31"><f a="arity:type">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>These classes are automatically generated by the compiler. They are only
	here so there is an option for e.g. defining them as externs if you are compiling
	in modules (untested).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":abstract"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Function"</e></m>
		</meta>
	</class>
	<class path="cs.internal._Function.VarArgsBase" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Function.hx" private="1" module="cs.internal.Function">
		<extends path="cs.internal.Function"/>
		<__hx_invokeDynamic public="1" set="method" line="35"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<meta>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsBase"</e></m>
		</meta>
	</class>
	<class path="cs.internal.VarArgsFunction" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Function.hx" module="cs.internal.Function">
		<extends path="cs.internal._Function.VarArgsBase"/>
		<fun><f a="">
	<c path="Array"><d/></c>
	<d/>
</f></fun>
		<__hx_invokeDynamic public="1" set="method" line="48" override="1"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<new public="1" set="method" line="43"><f a="fun">
	<f a="">
		<c path="Array"><d/></c>
		<d/>
	</f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsFunction"</e></m>
		</meta>
	</class>
	<class path="cs.internal.Closure" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Function.hx" module="cs.internal.Function">
		<extends path="cs.internal._Function.VarArgsBase"/>
		<obj><d/></obj>
		<field><c path="String"/></field>
		<hash><x path="Int"/></hash>
		<__hx_invokeDynamic public="1" set="method" line="65" override="1"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<Equals public="1" set="method" line="69"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></Equals>
		<GetHashCode public="1" set="method" line="76">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</GetHashCode>
		<new public="1" set="method" line="58"><f a="obj:field:hash">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Closure"</e></m>
		</meta>
	</class>
	<typedef path="cs.internal._HxObject.StdType" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" private="1" module="cs.internal.HxObject">
		<c path="Type"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="cs.internal.IHxObject" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" module="cs.internal.HxObject" interface="1"><meta>
	<m n=":directlyUsed"/>
	<m n=":hxGen"/>
	<m n=":keep"/>
	<m n=":native"><e>"haxe.lang.IHxObject"</e></m>
</meta></class>
	<class path="cs.internal.HxObject" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx">
		<implements path="cs.internal.IHxObject"/>
		<__hx_deleteField public="1" set="method" line="33"><f a="field:hash">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></__hx_deleteField>
		<meta>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.HxObject"</e></m>
		</meta>
	</class>
	<class path="cs.internal.DynamicObject" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<extends path="cs.internal.HxObject"/>
		<__hx_toString_depth expr="0" line="56" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_toString_depth>
		<__hx_hashes>
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_hashes>
		<__hx_dynamics>
			<c path="cs.NativeArray"><d/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_dynamics>
		<__hx_hashes_f>
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_hashes_f>
		<__hx_dynamics_f>
			<c path="cs.NativeArray"><x path="Float"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_dynamics_f>
		<__hx_length>
			<x path="Int"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_length>
		<__hx_length_f>
			<x path="Int"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_length_f>
		<__hx_conflicts>
			<c path="cs.internal.FieldHashConflict"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_conflicts>
		<__hx_deleteField public="1" set="method" line="76" override="1"><f a="field:hash">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></__hx_deleteField>
		<__hx_getField public="1" set="method" line="98"><f a="field:hash:throwErrors:isCheck:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<d/>
</f></__hx_getField>
		<__hx_setField public="1" set="method" line="118"><f a="field:hash:value:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<d/>
	<x path="Bool"/>
	<d/>
</f></__hx_setField>
		<__hx_getField_f public="1" set="method" line="146"><f a="field:hash:throwErrors:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></__hx_getField_f>
		<__hx_setField_f public="1" set="method" line="166"><f a="field:hash:value:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></__hx_setField_f>
		<__hx_getFields public="1" set="method" line="191"><f a="baseArr">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></__hx_getFields>
		<__hx_invokeField public="1" set="method" line="201">
			<f a="field:hash:dynargs">
				<c path="String"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__hx_invokeField>
		<toString public="1" set="method" line="213">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</toString>
		<__hx_toString public="1" set="method" line="228">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</__hx_toString>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method" line="66">
	<f a="hashes:dynamics:hashes_f:dynamics_f">
		<c path="cs.NativeArray"><x path="Int"/></c>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.NativeArray"><x path="Int"/></c>
		<c path="cs.NativeArray"><x path="Float"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.DynamicObject"</e></m>
		</meta>
	</class>
	<class path="cs.internal.IGenericObject" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" module="cs.internal.HxObject" interface="1"><meta>
	<m n=":directlyUsed"/>
	<m n=":hxGen"/>
	<m n=":keep"/>
	<m n=":native"><e>"haxe.lang.IGenericObject"</e></m>
</meta></class>
	<class path="cs.system.runtime.interopservices._Attribute" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Attribute" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Attribute"</e></m>
		</meta>
	</class>
	<class path="cs.system.Attribute" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Attribute" extern="1" abstract="1">
		<implements path="cs.system.runtime.interopservices._Attribute"/>
		<GetCustomAttribute public="1" set="method" static="1">
			<f a="element:attributeType">
				<c path="cs.system.reflection.ParameterInfo"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.Attribute"/>
			</f>
			<overloads>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
				<GetCustomAttribute public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.Attribute"/>
</f></GetCustomAttribute>
			</overloads>
		</GetCustomAttribute>
		<GetCustomAttributes public="1" set="method" static="1">
			<f a="element">
				<c path="cs.system.reflection.Assembly"/>
				<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
			</f>
			<overloads>
				<GetCustomAttributes public="1" set="method"><f a="element:inherit">
	<c path="cs.system.reflection.ParameterInfo"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:inherit">
	<c path="cs.system.reflection.MemberInfo"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:inherit">
	<c path="cs.system.reflection.Assembly"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:inherit">
	<c path="cs.system.reflection.Module"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:type:inherit">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:type">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
				<GetCustomAttributes public="1" set="method"><f a="element">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
</f></GetCustomAttributes>
			</overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method" static="1">
			<f a="element:attributeType">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<IsDefined public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType:inherit">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.MemberInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsDefined>
				<IsDefined public="1" set="method"><f a="element:attributeType">
	<c path="cs.system.reflection.ParameterInfo"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsDefined>
			</overloads>
		</IsDefined>
		<TypeId public="1" get="accessor" set="null"><d/></TypeId>
		<get_TypeId public="1" set="method"><f a=""><d/></f></get_TypeId>
		<IsDefaultAttribute public="1" set="method"><f a=""><x path="Bool"/></f></IsDefaultAttribute>
		<Match public="1" set="method"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></Match>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Attribute"</e></m>
		</meta>
	</class>
	<class path="cs.internal.GenericInterface" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<extends path="cs.system.Attribute"/>
		<generic public="1" set="null">
			<c path="cs.system.Type"/>
			<meta><m n=":readOnly"/></meta>
		</generic>
		<new public="1" set="method" line="258">
			<f a="generic">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.GenericInterface"</e></m>
		</meta>
	</class>
	<class path="cs.internal.HxEnum" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<paramsToString set="method" line="290" static="1">
			<f a="tag:params">
				<c path="String"/>
				<x path="haxe.ds.Vector"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":protected"/></meta>
		</paramsToString>
		<paramsGetHashCode set="method" line="306" static="1">
			<f a="index:params">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><d/></x>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":protected"/>
			</meta>
		</paramsGetHashCode>
		<_hx_index set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</_hx_index>
		<getTag public="1" set="method" line="278"><f a=""><c path="String"/></f></getTag>
		<getParams public="1" set="method" line="282"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="286"><f a=""><c path="String"/></f></toString>
		<new set="method" line="274">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":protected"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.Enum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="cs.internal._Null.Nullable" params="T" file="C:\HaxeToolkit\haxe\std/cs/internal/Null.hx" private="1" module="cs.internal.Null">
		<ofDynamic public="1" params="D" set="method" line="79" static="1">
			<f a="obj">
				<d/>
				<c path="cs.internal._Null.Nullable"><c path="ofDynamic.D"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["if (obj == null) {\r\n\t\t\t\treturn new haxe.lang.Null<D>(default(D), false);\r\n\t\t\t} else if (typeof(D).Equals(typeof(double))) {\r\n\t\t\t\treturn new haxe.lang.Null<D>((D) (object) haxe.lang.Runtime.toDouble(obj), true);\r\n\t\t\t} else if (typeof(D).Equals(typeof(int))) {\r\n\t\t\t\treturn new haxe.lang.Null<D>((D) (object) haxe.lang.Runtime.toInt(obj), true);\r\n\t\t\t} else {\r\n\t\t\t\treturn new haxe.lang.Null<D>((D) obj, true);\r\n\t\t\t}"]]></e></m></meta>
		</ofDynamic>
		<value public="1" set="null">
			<c path="cs.internal._Null.Nullable.T"/>
			<meta><m n=":readOnly"/></meta>
		</value>
		<hasValue public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":readOnly"/></meta>
		</hasValue>
		<toDynamic public="1" set="method" line="83"><f a=""><d/></f></toDynamic>
		<new public="1" set="method" line="62">
			<f a="v:hasValue">
				<c path="cs.internal._Null.Nullable.T"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":classCode"><e><![CDATA["//This function is here to be used with Reflection, when the haxe.lang.Null type is known\r\n\t\tpublic static haxe.lang.Null<T> _ofDynamic(object obj) {\r\n\t\t\tif (obj == null) {\r\n\t\t\t\treturn new haxe.lang.Null<T>(default(T), false);\r\n\t\t\t} else if (typeof(T).Equals(typeof(double))) {\r\n\t\t\t\treturn new haxe.lang.Null<T>((T) (object) haxe.lang.Runtime.toDouble(obj), true);\r\n\t\t\t} else if (typeof(T).Equals(typeof(int))) {\r\n\t\t\t\treturn new haxe.lang.Null<T>((T) (object) haxe.lang.Runtime.toInt(obj), true);\r\n\t\t\t} else {\r\n\t\t\t\treturn new haxe.lang.Null<T>((T) obj, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static implicit operator haxe.lang.Null<T>(T val) {\r\n\t\t\treturn new haxe.lang.Null<T>(val, true);\r\n\t\t}\r\n\r\n\t\tpublic static implicit operator Null<T>(__NoValue__ noValue) {\r\n\t\t\treturn new haxe.lang.Null<T>(default(T), false);\r\n\t\t}\r\n\r\n\t\tpublic sealed class __NoValue__ {\r\n\t\t\tprivate __NoValue__() {}\r\n\t\t}\r\n\r\n\t\toverride public string ToString() {\r\n\t\t\tif (!hasValue) return \"null\";\r\n\t\t\telse return value.ToString();\r\n\t\t}\r\n"]]></e></m>
			<m n=":keep"/>
			<m n=":struct"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Null"</e></m>
		</meta>
	</class>
	<class path="cs.system.Object" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Object" extern="1">
		<_Equals public="1" set="method" static="1">
			<f a="objA:objB">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"Equals"</e></m></meta>
		</_Equals>
		<ReferenceEquals public="1" set="method" static="1"><f a="objA:objB">
	<d/>
	<d/>
	<x path="Bool"/>
</f></ReferenceEquals>
		<GetType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<MemberwiseClone final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":protected"/></meta>
		</MemberwiseClone>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Object"</e></m>
		</meta>
	</class>
	<class path="cs.internal.Runtime" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/Runtime.hx">
		<undefined public="1" set="null" expr="new cs.system.Object()" line="74" static="1">
			<d/>
			<meta>
				<m n=":value"><e>new cs.system.Object()</e></m>
				<m n=":readOnly"/>
			</meta>
		</undefined>
		<closure public="1" set="method" line="76" static="1"><f a="obj:hash:field">
	<d/>
	<x path="Int"/>
	<c path="String"/>
	<d/>
</f></closure>
		<eq public="1" set="method" line="80" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></eq>
		<refEq public="1" set="method" line="133" static="1"><f a="v1:v2">
	<a/>
	<a/>
	<x path="Bool"/>
</f></refEq>
		<toDouble public="1" set="method" line="141" static="1"><f a="obj">
	<d/>
	<x path="Float"/>
</f></toDouble>
		<toInt public="1" set="method" line="145" static="1"><f a="obj">
	<d/>
	<x path="Int"/>
</f></toInt>
		<isInt public="1" set="method" line="155" static="1"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></isInt>
		<isUInt public="1" set="method" line="171" static="1"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></isUInt>
		<compare public="1" set="method" line="187" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare>
		<plus public="1" set="method" line="230" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<d/>
</f></plus>
		<slowGetField public="1" set="method" line="254" static="1"><f a="obj:field:throwErrors">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></slowGetField>
		<slowHasField public="1" set="method" line="308" static="1"><f a="obj:field">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></slowHasField>
		<slowSetField public="1" set="method" line="328" static="1"><f a="obj:field:value">
	<d/>
	<c path="String"/>
	<d/>
	<d/>
</f></slowSetField>
		<callMethod public="1" set="method" line="383" static="1">
			<f a="obj:methods:methodLength:args">
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</callMethod>
		<unbox public="1" set="method" line="501" static="1">
			<f a="dyn">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</unbox>
		<mkNullable public="1" set="method" line="515" static="1">
			<f a="obj:nullableType">
				<d/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tif (nullableType.ContainsGenericParameters)\r\n\t\t\treturn haxe.lang.Null<object>.ofDynamic<object>(obj);\r\n\t\treturn nullableType.GetMethod(\"_ofDynamic\").Invoke(null, new object[] { obj });\r\n\t"]]></e></m></meta>
		</mkNullable>
		<slowCallField public="1" set="method" line="524" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</slowCallField>
		<callField public="1" set="method" line="574" static="1">
			<f a="obj:field:fieldHash:args">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</callField>
		<getField public="1" set="method" line="581" static="1">
			<f a="obj:field:fieldHash:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getField>
		<getField_f public="1" set="method" line="589" static="1">
			<f a="obj:field:fieldHash:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getField_f>
		<setField public="1" set="method" line="597" static="1">
			<f a="obj:field:fieldHash:value">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setField>
		<setField_f public="1" set="method" line="605" static="1">
			<f a="obj:field:fieldHash:value">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setField_f>
		<toString public="1" set="method" line="613" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<typeEq public="1" set="method" line="628" static="1"><f a="t1:t2">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></typeEq>
		<getGenericAttr public="1" set="method" line="653" static="1"><f a="t">
	<c path="cs.system.Type"/>
	<c path="cs.internal.GenericInterface"/>
</f></getGenericAttr>
		<genericCast public="1" params="To" set="method" line="678" static="1">
			<f a="obj">
				<d/>
				<c path="genericCast.To"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tif (obj is To)\r\n\t\t\treturn (To) obj;\r\n\t\telse if (obj == null)\r\n\t\t\treturn default(To);\r\n\t\tif (typeof(To) == typeof(double))\r\n\t\t\treturn (To)(object) toDouble(obj);\r\n\t\telse if (typeof(To) == typeof(int))\r\n\t\t\treturn (To)(object) toInt(obj);\r\n\t\telse if (typeof(To) == typeof(float))\r\n\t\t\treturn (To)(object)(float)toDouble(obj);\r\n\t\telse if (typeof(To) == typeof(long))\r\n\t\t\treturn (To)(object)(long)toDouble(obj);\r\n\t\telse\r\n\t\t\treturn (To) obj;\r\n\t"</e></m></meta>
		</genericCast>
		<concat public="1" set="method" line="686" static="1">
			<f a="s1:s2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\treturn (s1 == null ? \"null\" : s1) + (s2 == null ? \"null\" : s2);\r\n\t"</e></m></meta>
		</concat>
		<toBool public="1" set="method" line="690" static="1">
			<f a="dyn">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toBool>
		<haxe_doc>This class is meant for internal compiler use only. It provides the Haxe runtime
	compatibility to the host language.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Runtime"</e></m>
			<m n=":access"><e>String</e></m>
			<m n=":classCode"><e><![CDATA["\r\n\tpublic static object getField(haxe.lang.HxObject obj, string field, int fieldHash, bool throwErrors)\r\n\t{\r\n\t\tif (obj == null && !throwErrors) return null;\r\n\t\treturn obj.__hx_getField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, throwErrors, false, false);\r\n\t}\r\n\r\n\tpublic static double getField_f(haxe.lang.HxObject obj, string field, int fieldHash, bool throwErrors)\r\n\t{\r\n\t\tif (obj == null && !throwErrors) return 0.0;\r\n\t\treturn obj.__hx_getField_f(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, throwErrors, false);\r\n\t}\r\n\r\n\tpublic static object setField(haxe.lang.HxObject obj, string field, int fieldHash, object value)\r\n\t{\r\n\t\treturn obj.__hx_setField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, value, false);\r\n\t}\r\n\r\n\tpublic static double setField_f(haxe.lang.HxObject obj, string field, int fieldHash, double value)\r\n\t{\r\n\t\treturn obj.__hx_setField_f(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, value, false);\r\n\t}\r\n\r\n\tpublic static object callField(haxe.lang.HxObject obj, string field, int fieldHash, object[] args)\r\n\t{\r\n\t\treturn obj.__hx_invokeField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, args);\r\n\t}\r\n"]]></e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="cs.internal._StringExt.NativeString" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/StringExt.hx" private="1" module="cs.internal.StringExt">
		<c path="cs.system.String"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="cs.system.collections.generic.IEnumerable_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IEnumerable_1" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerable"/>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.generic.IEnumerable_1.T0"/></c></f></GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IEnumerable`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.String" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.String" extern="1" final="1">
		<implements path="cs.system.collections.generic.IEnumerable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IComparable_1"><c path="String"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="String"/></implements>
		<implements path="cs.system.collections.IEnumerable"/>
		<Empty public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<_Equals public="1" set="method" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"Equals"</e></m></meta>
			<overloads><Equals public="1" set="method">
	<f a="a:b:comparisonType">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.StringComparison"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":native"><e>"Equals"</e></m></meta>
</Equals></overloads>
		</_Equals>
		<Compare public="1" set="method" static="1">
			<f a="strA:strB">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<Compare public="1" set="method"><f a="strA:indexA:strB:indexB:length:culture:options">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:strB:culture:options">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:indexA:strB:indexB:length:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:strB:comparisonType">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:indexA:strB:indexB:length:ignoreCase:culture">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:indexA:strB:indexB:length:ignoreCase">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:indexA:strB:indexB:length">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:strB:ignoreCase:culture">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="strA:strB:ignoreCase">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></Compare>
			</overloads>
		</Compare>
		<CompareOrdinal public="1" set="method" static="1">
			<f a="strA:strB">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><CompareOrdinal public="1" set="method"><f a="strA:indexA:strB:indexB:length">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></CompareOrdinal></overloads>
		</CompareOrdinal>
		<IsNullOrEmpty public="1" set="method" static="1"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></IsNullOrEmpty>
		<Format public="1" set="method" static="1">
			<f a="format:arg0">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<overloads>
				<Format public="1" set="method"><f a="provider:format:args">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="String"/>
</f></Format>
				<Format public="1" set="method"><f a="format:args">
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="String"/>
</f></Format>
				<Format public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></Format>
				<Format public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<c path="String"/>
</f></Format>
			</overloads>
		</Format>
		<Copy public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></Copy>
		<Concat public="1" set="method" static="1">
			<f a="arg0">
				<d/>
				<c path="String"/>
			</f>
			<overloads>
				<Concat public="1" set="method"><f a="values">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="args">
	<c path="cs.NativeArray"><d/></c>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="str0:str1:str2:str3">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="str0:str1:str2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="str0:str1">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="arg0:arg1:arg2:arg3">
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="arg0:arg1:arg2">
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></Concat>
				<Concat public="1" set="method"><f a="arg0:arg1">
	<d/>
	<d/>
	<c path="String"/>
</f></Concat>
			</overloads>
		</Concat>
		<Intern public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></Intern>
		<IsInterned public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></IsInterned>
		<Join public="1" set="method" static="1">
			<f a="separator:value">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="String"/>
			</f>
			<overloads><Join public="1" set="method"><f a="separator:value:startIndex:count">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></Join></overloads>
		</Join>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Chars final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
</f></get_Chars>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<CopyTo final="1" public="1" set="method"><f a="sourceIndex:destination:destinationIndex:count">
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<ToCharArray final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.Char16"/></c></f>
			<overloads><ToCharArray final="1" public="1" set="method"><f a="startIndex:length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
</f></ToCharArray></overloads>
		</ToCharArray>
		<Split final="1" public="1" set="method">
			<f a="separator">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads>
				<Split final="1" public="1" set="method"><f a="separator:options">
	<c path="cs.NativeArray"><c path="String"/></c>
	<e path="cs.system.StringSplitOptions"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
				<Split final="1" public="1" set="method"><f a="separator:options">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<e path="cs.system.StringSplitOptions"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
				<Split final="1" public="1" set="method"><f a="separator:count:options">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<e path="cs.system.StringSplitOptions"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
				<Split final="1" public="1" set="method"><f a="separator:count:options">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<e path="cs.system.StringSplitOptions"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
				<Split final="1" public="1" set="method"><f a="separator:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
			</overloads>
		</Split>
		<Substring final="1" public="1" set="method">
			<f a="startIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><Substring final="1" public="1" set="method"><f a="startIndex:length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></Substring></overloads>
		</Substring>
		<Trim final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><Trim final="1" public="1" set="method"><f a="trimChars">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<c path="String"/>
</f></Trim></overloads>
		</Trim>
		<TrimStart final="1" public="1" set="method"><f a="trimChars">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<c path="String"/>
</f></TrimStart>
		<TrimEnd final="1" public="1" set="method"><f a="trimChars">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<c path="String"/>
</f></TrimEnd>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="strB">
	<c path="String"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<EndsWith final="1" public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<EndsWith final="1" public="1" set="method"><f a="value:comparisonType">
	<c path="String"/>
	<e path="cs.system.StringComparison"/>
	<x path="Bool"/>
</f></EndsWith>
				<EndsWith final="1" public="1" set="method"><f a="value:ignoreCase:culture">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Bool"/>
</f></EndsWith>
			</overloads>
		</EndsWith>
		<IndexOfAny final="1" public="1" set="method">
			<f a="anyOf">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOfAny final="1" public="1" set="method"><f a="anyOf:startIndex:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOfAny>
				<IndexOfAny final="1" public="1" set="method"><f a="anyOf:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOfAny>
			</overloads>
		</IndexOfAny>
		<IndexOf final="1" public="1" set="method">
			<f a="value:comparisonType">
				<c path="String"/>
				<e path="cs.system.StringComparison"/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex:count">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex:count">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex:count:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf final="1" public="1" set="method"><f a="value:startIndex:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf final="1" public="1" set="method">
			<f a="value:comparisonType">
				<c path="String"/>
				<e path="cs.system.StringComparison"/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex:count">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex:count">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex:count:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf final="1" public="1" set="method"><f a="value:startIndex:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<LastIndexOfAny final="1" public="1" set="method">
			<f a="anyOf">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOfAny final="1" public="1" set="method"><f a="anyOf:startIndex:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOfAny>
				<LastIndexOfAny final="1" public="1" set="method"><f a="anyOf:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOfAny>
			</overloads>
		</LastIndexOfAny>
		<Contains final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></Contains>
		<Normalize final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><Normalize final="1" public="1" set="method"><f a="normalizationForm">
	<e path="cs.system.text.NormalizationForm"/>
	<c path="String"/>
</f></Normalize></overloads>
		</Normalize>
		<IsNormalized final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><IsNormalized final="1" public="1" set="method"><f a="normalizationForm">
	<e path="cs.system.text.NormalizationForm"/>
	<x path="Bool"/>
</f></IsNormalized></overloads>
		</IsNormalized>
		<Remove final="1" public="1" set="method">
			<f a="startIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><Remove final="1" public="1" set="method"><f a="startIndex:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></Remove></overloads>
		</Remove>
		<PadLeft final="1" public="1" set="method">
			<f a="totalWidth">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><PadLeft final="1" public="1" set="method"><f a="totalWidth:paddingChar">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<c path="String"/>
</f></PadLeft></overloads>
		</PadLeft>
		<PadRight final="1" public="1" set="method">
			<f a="totalWidth">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><PadRight final="1" public="1" set="method"><f a="totalWidth:paddingChar">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<c path="String"/>
</f></PadRight></overloads>
		</PadRight>
		<StartsWith final="1" public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<StartsWith final="1" public="1" set="method"><f a="value:ignoreCase:culture">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Bool"/>
</f></StartsWith>
				<StartsWith final="1" public="1" set="method"><f a="value:comparisonType">
	<c path="String"/>
	<e path="cs.system.StringComparison"/>
	<x path="Bool"/>
</f></StartsWith>
			</overloads>
		</StartsWith>
		<Replace final="1" public="1" set="method">
			<f a="oldChar:newChar">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<overloads><Replace final="1" public="1" set="method"><f a="oldValue:newValue">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Replace></overloads>
		</Replace>
		<ToLower final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToLower final="1" public="1" set="method"><f a="culture">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="String"/>
</f></ToLower></overloads>
		</ToLower>
		<ToLowerInvariant final="1" public="1" set="method"><f a=""><c path="String"/></f></ToLowerInvariant>
		<ToUpper final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToUpper final="1" public="1" set="method"><f a="culture">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="String"/>
</f></ToUpper></overloads>
		</ToUpper>
		<ToUpperInvariant final="1" public="1" set="method"><f a=""><c path="String"/></f></ToUpperInvariant>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<Insert final="1" public="1" set="method"><f a="startIndex:value">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></Insert>
		<get_Length final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Length>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.CharEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="value:startIndex:length">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="c:count">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.String"</e></m>
		</meta>
	</class>
	<class path="cs.internal.StringExt" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/StringExt.hx">
		<empty set="null" expr="new NativeString(cast 0, 0)" line="30" static="1">
			<c path="cs.system.String"/>
			<meta>
				<m n=":value"><e>new NativeString(cast 0, 0)</e></m>
				<m n=":readOnly"/>
			</meta>
		</empty>
		<charAt public="1" set="method" line="32" static="1"><f a="me:index">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></charAt>
		<charCodeAt public="1" set="method" line="39" static="1"><f a="me:index">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Null"><x path="Int"/></x>
</f></charCodeAt>
		<indexOf public="1" set="method" line="46" static="1"><f a="me:str:?startIndex">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="60" static="1">
			<f a="me:str:?startIndex">
				<t path="cs.internal._StringExt.NativeString"/>
				<t path="cs.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</lastIndexOf>
		<split public="1" set="method" line="102" static="1">
			<f a="me:delimiter">
				<t path="cs.internal._StringExt.NativeString"/>
				<t path="cs.internal._StringExt.NativeString"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</split>
		<substr public="1" set="method" line="119" static="1"><f a="me:pos:?len">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substr>
		<substring public="1" set="method" line="146" static="1"><f a="me:startIndex:?endIndex">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substring>
		<toString public="1" set="method" line="170" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></toString>
		<toLowerCase public="1" set="method" line="174" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
</f></toLowerCase>
		<toUpperCase public="1" set="method" line="178" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
</f></toUpperCase>
		<toNativeString public="1" set="method" line="182" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></toNativeString>
		<fromCharCode public="1" set="method" line="186" static="1"><f a="code">
	<x path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringExt"</e></m>
		</meta>
	</class>
	<class path="cs.internal.StringRefl" params="" file="C:\HaxeToolkit\haxe\std/cs/internal/StringExt.hx" module="cs.internal.StringExt">
		<fields public="1" expr="[&quot;length&quot;, &quot;toUpperCase&quot;, &quot;toLowerCase&quot;, &quot;charAt&quot;, &quot;charCodeAt&quot;, &quot;indexOf&quot;, &quot;lastIndexOf&quot;, &quot;split&quot;, &quot;substr&quot;, &quot;substring&quot;]" line="193" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["length", "toUpperCase", "toLowerCase", "charAt", "charCodeAt", "indexOf", "lastIndexOf", "split", "substr", "substring"]</e></m></meta>
		</fields>
		<handleGetField public="1" set="method" line="197" static="1"><f a="str:f:throwErrors">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></handleGetField>
		<handleCallField public="1" set="method" line="211" static="1"><f a="str:f:args">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></handleCallField>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringRefl"</e></m>
		</meta>
	</class>
	<class path="haxe.io.Input" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><t path="haxe.io.BytesData"/></helper>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.io.NativeInput" params="" file="C:\HaxeToolkit\haxe\std/cs/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<canSeek public="1" get="accessor" set="null"><x path="Bool"/></canSeek>
		<stream><c path="cs.system.io.Stream"/></stream>
		<_eof><x path="Bool"/></_eof>
		<readByte public="1" set="method" line="44" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="68" override="1"><f a=""><x path="Void"/></f></close>
		<get_canSeek get="inline" set="null" line="72"><f a=""><x path="Bool"/></f></get_canSeek>
		<seek public="1" set="method" line="76"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="87"><f a=""><x path="Int"/></f></tell>
		<eof public="1" get="inline" set="null" line="91"><f a=""><x path="Bool"/></f></eof>
		<new public="1" set="method" line="37"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.io.NativeOutput" params="" file="C:\HaxeToolkit\haxe\std/cs/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<canSeek get="accessor" set="null"><x path="Bool"/></canSeek>
		<stream><c path="cs.system.io.Stream"/></stream>
		<writeByte public="1" set="method" line="40" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<close public="1" set="method" line="44" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="48" override="1"><f a=""><x path="Void"/></f></flush>
		<prepare public="1" set="method" line="52" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<get_canSeek get="inline" set="null" line="57"><f a=""><x path="Bool"/></f></get_canSeek>
		<seek public="1" set="method" line="61"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="71"><f a=""><x path="Int"/></f></tell>
		<new public="1" set="method" line="34"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.system.Delegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Delegate" extern="1" abstract="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreateDelegate public="1" set="method" static="1">
			<f a="type:firstArgument:method:throwOnBindFailure">
				<c path="cs.system.Type"/>
				<d/>
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Bool"/>
				<c path="cs.system.Delegate"/>
			</f>
			<overloads>
				<CreateDelegate public="1" set="method"><f a="type:target:method:ignoreCase">
	<c path="cs.system.Type"/>
	<d/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:target:method:ignoreCase:throwOnBindFailure">
	<c path="cs.system.Type"/>
	<d/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:target:method:ignoreCase">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:target:method">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
	<c path="String"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:target:method:ignoreCase:throwOnBindFailure">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:target:method">
	<c path="cs.system.Type"/>
	<d/>
	<c path="String"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:method">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:method:throwOnBindFailure">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<x path="Bool"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
				<CreateDelegate public="1" set="method"><f a="type:firstArgument:method">
	<c path="cs.system.Type"/>
	<d/>
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.system.Delegate"/>
</f></CreateDelegate>
			</overloads>
		</CreateDelegate>
		<Combine public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<overloads><Combine public="1" set="method"><f a="delegates">
	<c path="cs.NativeArray"><c path="cs.system.Delegate"/></c>
	<c path="cs.system.Delegate"/>
</f></Combine></overloads>
		</Combine>
		<Remove public="1" set="method" static="1"><f a="source:value">
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
</f></Remove>
		<RemoveAll public="1" set="method" static="1"><f a="source:value">
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
</f></RemoveAll>
		<op_Equality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Delegate"/>
	<c path="cs.system.Delegate"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Target public="1" get="accessor" set="null"><d/></Target>
		<Method public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></Method>
		<get_Method final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></get_Method>
		<get_Target final="1" public="1" set="method"><f a=""><d/></f></get_Target>
		<DynamicInvoke final="1" public="1" set="method"><f a="args">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></DynamicInvoke>
		<DynamicInvokeImpl set="method">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":protected"/></meta>
		</DynamicInvokeImpl>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<GetMethodImpl set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetInvocationList public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Delegate"/></c></f></GetInvocationList>
		<CombineImpl set="method">
			<f a="d">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CombineImpl>
		<RemoveImpl set="method">
			<f a="d">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveImpl>
		<new final="1" set="method">
			<f a="target:method">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" set="method">
	<f a="target:method">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Delegate"</e></m>
		</meta>
	</class>
	<class path="cs.system.MulticastDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.MulticastDelegate" extern="1" abstract="1">
		<extends path="cs.system.Delegate"/>
		<op_Equality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.MulticastDelegate"/>
	<c path="cs.system.MulticastDelegate"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.MulticastDelegate"/>
	<c path="cs.system.MulticastDelegate"/>
	<x path="Bool"/>
</f></op_Inequality>
		<GetObjectData public="1" set="method" override="1"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<DynamicInvokeImpl final="1" set="method" override="1">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":protected"/></meta>
		</DynamicInvokeImpl>
		<GetInvocationList final="1" public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Delegate"/></c></f></GetInvocationList>
		<CombineImpl final="1" set="method" override="1">
			<f a="follow">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CombineImpl>
		<RemoveImpl final="1" set="method" override="1">
			<f a="value">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveImpl>
		<new final="1" set="method">
			<f a="target:method">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" set="method">
	<f a="target:method">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MulticastDelegate"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Action_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Action_1" module="cs.system.Action_1" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="obj">
	<c path="cs.system.Delegate_Action_1.T0"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="obj:callback:object">
	<c path="cs.system.Delegate_Action_1.T0"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Action`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Action_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Action_1">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Action_1.Action_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Action_1" private="1" module="cs.system.Action_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Action_1.Action_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Action_1" private="1" module="cs.system.Action_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.ActivationContext_ContextForm" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ActivationContext" module="cs.system.ActivationContext">
		<Loose><meta><m n=":csNative"><e>0</e></m></meta></Loose>
		<StoreBounded><meta><m n=":csNative"><e>1</e></m></meta></StoreBounded>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ActivationContext.ContextForm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.IDisposable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IDisposable" extern="1" interface="1">
		<Dispose public="1" set="method"><f a=""><x path="Void"/></f></Dispose>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IDisposable"</e></m>
		</meta>
	</class>
	<class path="cs.system.ActivationContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ActivationContext" extern="1" final="1">
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreatePartialActivationContext public="1" set="method" static="1">
			<f a="identity">
				<c path="cs.system.ApplicationIdentity"/>
				<c path="cs.system.ActivationContext"/>
			</f>
			<overloads><CreatePartialActivationContext public="1" set="method"><f a="identity:manifestPaths">
	<c path="cs.system.ApplicationIdentity"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.ActivationContext"/>
</f></CreatePartialActivationContext></overloads>
		</CreatePartialActivationContext>
		<Identity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></Identity>
		<Form public="1" get="accessor" set="null"><e path="cs.system.ActivationContext_ContextForm"/></Form>
		<get_Form final="1" public="1" set="method"><f a=""><e path="cs.system.ActivationContext_ContextForm"/></f></get_Form>
		<get_Identity final="1" public="1" set="method"><f a=""><c path="cs.system.ApplicationIdentity"/></f></get_Identity>
		<Dispose final="1" public="1" set="method"><f a=""><x path="Void"/></f></Dispose>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ActivationContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Activator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Activator" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Activator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Activator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Activator" extern="1" final="1">
		<implements path="cs.system.runtime.interopservices._Activator"/>
		<CreateComInstanceFrom public="1" set="method" static="1">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads><CreateComInstanceFrom public="1" set="method"><f a="assemblyName:typeName:hashValue:hashAlgorithm">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateComInstanceFrom></overloads>
		</CreateComInstanceFrom>
		<CreateInstanceFrom public="1" set="method" static="1">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstanceFrom public="1" set="method"><f a="domain:assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="cs.system.AppDomain"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
				<CreateInstanceFrom public="1" set="method"><f a="domain:assemblyFile:typeName">
	<c path="cs.system.AppDomain"/>
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
				<CreateInstanceFrom public="1" set="method"><f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityInfo">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
				<CreateInstanceFrom public="1" set="method"><f a="assemblyFile:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<CreateInstance public="1" set="method" static="1">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstance public="1" set="method"><f a="type:nonPublic">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="type:bindingAttr:binder:args:culture:activationAttributes">
	<c path="cs.system.Type"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="type:bindingAttr:binder:args:culture">
	<c path="cs.system.Type"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="type:args:activationAttributes">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="type:args">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="type">
	<c path="cs.system.Type"/>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" params="M0" set="method"><f a=""><c path="CreateInstance.M0"/></f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="domain:assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="cs.system.AppDomain"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="domain:assemblyName:typeName">
	<c path="cs.system.AppDomain"/>
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="activationContext:activationCustomData">
	<c path="cs.system.ActivationContext"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="activationContext">
	<c path="cs.system.ActivationContext"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityInfo">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="assemblyName:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<GetObject public="1" set="method" static="1">
			<f a="type:url">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<d/>
			</f>
			<overloads><GetObject public="1" set="method"><f a="type:url:state">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<d/>
	<d/>
</f></GetObject></overloads>
		</GetObject>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Activator"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain_Initializer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" module="cs.system.AppDomain" extern="1">
		<Initialize final="1" public="1" set="method"><f a=""><x path="Void"/></f></Initialize>
		<new final="1" public="1" set="method"><f a="initializer:arguments">
	<x path="cs.system.AppDomainInitializer"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain.Initializer"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain_Loader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" module="cs.system.AppDomain" extern="1">
		<Load final="1" public="1" set="method"><f a=""><x path="Void"/></f></Load>
		<new final="1" public="1" set="method"><f a="assembly">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain.Loader"</e></m>
		</meta>
	</class>
	<class path="cs.system.MarshalByRefObject" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.MarshalByRefObject" extern="1" abstract="1">
		<CreateObjRef public="1" set="method"><f a="requestedType">
	<c path="cs.system.Type"/>
	<c path="cs.system.runtime.remoting.ObjRef"/>
</f></CreateObjRef>
		<GetLifetimeService final="1" public="1" set="method"><f a=""><d/></f></GetLifetimeService>
		<InitializeLifetimeService public="1" set="method"><f a=""><d/></f></InitializeLifetimeService>
		<MemberwiseClone final="1" set="method">
			<f a="cloneIdentity">
				<x path="Bool"/>
				<c path="cs.system.MarshalByRefObject"/>
			</f>
			<meta><m n=":protected"/></meta>
		</MemberwiseClone>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MarshalByRefObject"</e></m>
		</meta>
	</class>
	<class path="cs.system._AppDomain" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system._AppDomain" extern="1" interface="1">
		<UnhandledException>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</UnhandledException>
		<TypeResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</TypeResolve>
		<ResourceResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ResourceResolve>
		<ProcessExit>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ProcessExit>
		<DomainUnload>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</DomainUnload>
		<AssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyResolve>
		<AssemblyLoad>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyLoad>
		<ShadowCopyFiles public="1" get="accessor" set="null"><x path="Bool"/></ShadowCopyFiles>
		<RelativeSearchPath public="1" get="accessor" set="null"><c path="String"/></RelativeSearchPath>
		<FriendlyName public="1" get="accessor" set="null"><c path="String"/></FriendlyName>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<DynamicDirectory public="1" get="accessor" set="null"><c path="String"/></DynamicDirectory>
		<BaseDirectory public="1" get="accessor" set="null"><c path="String"/></BaseDirectory>
		<add_AssemblyLoad public="1" set="method"><f a="value">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="Void"/>
</f></add_AssemblyLoad>
		<remove_AssemblyLoad public="1" set="method"><f a="value">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="Void"/>
</f></remove_AssemblyLoad>
		<add_AssemblyResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_AssemblyResolve>
		<remove_AssemblyResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_AssemblyResolve>
		<add_DomainUnload public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_DomainUnload>
		<remove_DomainUnload public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_DomainUnload>
		<add_ProcessExit public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_ProcessExit>
		<remove_ProcessExit public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_ProcessExit>
		<add_ResourceResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_ResourceResolve>
		<remove_ResourceResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ResourceResolve>
		<add_TypeResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_TypeResolve>
		<remove_TypeResolve public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_TypeResolve>
		<add_UnhandledException public="1" set="method"><f a="value">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="Void"/>
</f></add_UnhandledException>
		<remove_UnhandledException public="1" set="method"><f a="value">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="Void"/>
</f></remove_UnhandledException>
		<get_BaseDirectory public="1" set="method"><f a=""><c path="String"/></f></get_BaseDirectory>
		<get_DynamicDirectory public="1" set="method"><f a=""><c path="String"/></f></get_DynamicDirectory>
		<get_Evidence public="1" set="method"><f a=""><c path="cs.system.security.policy.Evidence"/></f></get_Evidence>
		<get_FriendlyName public="1" set="method"><f a=""><c path="String"/></f></get_FriendlyName>
		<get_RelativeSearchPath public="1" set="method"><f a=""><c path="String"/></f></get_RelativeSearchPath>
		<get_ShadowCopyFiles public="1" set="method"><f a=""><x path="Bool"/></f></get_ShadowCopyFiles>
		<AppendPrivatePath public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></AppendPrivatePath>
		<ClearPrivatePath public="1" set="method"><f a=""><x path="Void"/></f></ClearPrivatePath>
		<ClearShadowCopyPath public="1" set="method"><f a=""><x path="Void"/></f></ClearShadowCopyPath>
		<CreateInstance public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstance public="1" set="method"><f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="assemblyName:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<CreateInstanceFrom public="1" set="method">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstanceFrom public="1" set="method"><f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
				<CreateInstanceFrom public="1" set="method"><f a="assemblyFile:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<DefineDynamicAssembly public="1" set="method">
			<f a="name:access">
				<c path="cs.system.reflection.AssemblyName"/>
				<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
				<c path="cs.system.reflection.emit.AssemblyBuilder"/>
			</f>
			<overloads>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Bool"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:dir:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:dir:evidence">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:dir">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method"><f a="name:access:evidence">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
			</overloads>
		</DefineDynamicAssembly>
		<DoCallBack public="1" set="method"><f a="theDelegate">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="Void"/>
</f></DoCallBack>
		<ExecuteAssembly public="1" set="method">
			<f a="assemblyFile">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<ExecuteAssembly public="1" set="method"><f a="assemblyFile:assemblySecurity:args">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
</f></ExecuteAssembly>
				<ExecuteAssembly public="1" set="method"><f a="assemblyFile:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Int"/>
</f></ExecuteAssembly>
			</overloads>
		</ExecuteAssembly>
		<GetAssemblies public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f></GetAssemblies>
		<GetData public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></GetData>
		<GetLifetimeService public="1" set="method"><f a=""><d/></f></GetLifetimeService>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<InitializeLifetimeService public="1" set="method"><f a=""><d/></f></InitializeLifetimeService>
		<Load public="1" set="method">
			<f a="assemblyRef">
				<c path="cs.system.reflection.AssemblyName"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads>
				<Load public="1" set="method"><f a="rawAssembly:rawSymbolStore:securityEvidence">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyString:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="rawAssembly:rawSymbolStore">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyRef:assemblySecurity">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyString">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="rawAssembly">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
			</overloads>
		</Load>
		<SetAppDomainPolicy public="1" set="method"><f a="domainPolicy">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></SetAppDomainPolicy>
		<SetCachePath public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></SetCachePath>
		<SetData public="1" set="method"><f a="name:data">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></SetData>
		<SetPrincipalPolicy public="1" set="method"><f a="policy">
	<e path="cs.system.security.principal.PrincipalPolicy"/>
	<x path="Void"/>
</f></SetPrincipalPolicy>
		<SetShadowCopyPath public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></SetShadowCopyPath>
		<SetThreadPrincipal public="1" set="method"><f a="principal">
	<c path="cs.system.security.principal.IPrincipal"/>
	<x path="Void"/>
</f></SetThreadPrincipal>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System._AppDomain"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IEvidenceFactory" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.IEvidenceFactory" extern="1" interface="1">
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<get_Evidence public="1" set="method"><f a=""><c path="cs.system.security.policy.Evidence"/></f></get_Evidence>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IEvidenceFactory"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" extern="1" final="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system._AppDomain"/>
		<implements path="cs.system.security.IEvidenceFactory"/>
		<CurrentDomain public="1" get="accessor" set="null" static="1"><c path="cs.system.AppDomain"/></CurrentDomain>
		<get_CurrentDomain public="1" set="method" static="1"><f a=""><c path="cs.system.AppDomain"/></f></get_CurrentDomain>
		<CreateDomain public="1" set="method" static="1">
			<f a="friendlyName">
				<c path="String"/>
				<c path="cs.system.AppDomain"/>
			</f>
			<overloads>
				<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo:appBasePath:appRelativeSearchPath:shadowCopyFiles:adInit:adInitArgs">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="cs.system.AppDomainInitializer"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
				<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo:info:grantSet:fullTrustAssemblies">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.AppDomainSetup"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.NativeArray"><c path="cs.system.security.policy.StrongName"/></c>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
				<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo:appBasePath:appRelativeSearchPath:shadowCopyFiles">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
				<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo:info">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.AppDomainSetup"/>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
				<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
			</overloads>
		</CreateDomain>
		<Unload public="1" set="method" static="1"><f a="domain">
	<c path="cs.system.AppDomain"/>
	<x path="Void"/>
</f></Unload>
		<GetCurrentThreadId public="1" set="method" static="1"><f a=""><x path="Int"/></f></GetCurrentThreadId>
		<ReflectionOnlyAssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ReflectionOnlyAssemblyResolve>
		<UnhandledException>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</UnhandledException>
		<TypeResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</TypeResolve>
		<ResourceResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ResourceResolve>
		<ProcessExit>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ProcessExit>
		<DomainUnload>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</DomainUnload>
		<AssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyResolve>
		<AssemblyLoad>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyLoad>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<ApplicationIdentity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<ActivationContext public="1" get="accessor" set="null"><c path="cs.system.ActivationContext"/></ActivationContext>
		<DomainManager public="1" get="accessor" set="null"><c path="cs.system.AppDomainManager"/></DomainManager>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<FriendlyName public="1" get="accessor" set="null"><c path="String"/></FriendlyName>
		<ShadowCopyFiles public="1" get="accessor" set="null"><x path="Bool"/></ShadowCopyFiles>
		<DynamicDirectory public="1" get="accessor" set="null"><c path="String"/></DynamicDirectory>
		<RelativeSearchPath public="1" get="accessor" set="null"><c path="String"/></RelativeSearchPath>
		<BaseDirectory public="1" get="accessor" set="null"><c path="String"/></BaseDirectory>
		<ApplicationTrust public="1" get="accessor" set="null"><c path="cs.system.security.policy.ApplicationTrust"/></ApplicationTrust>
		<SetupInformation public="1" get="accessor" set="null"><c path="cs.system.AppDomainSetup"/></SetupInformation>
		<add_AssemblyLoad final="1" public="1" set="method"><f a="value">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="Void"/>
</f></add_AssemblyLoad>
		<remove_AssemblyLoad final="1" public="1" set="method"><f a="value">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="Void"/>
</f></remove_AssemblyLoad>
		<add_AssemblyResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_AssemblyResolve>
		<remove_AssemblyResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_AssemblyResolve>
		<add_DomainUnload final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_DomainUnload>
		<remove_DomainUnload final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_DomainUnload>
		<add_ProcessExit final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_ProcessExit>
		<remove_ProcessExit final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_ProcessExit>
		<add_ResourceResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_ResourceResolve>
		<remove_ResourceResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ResourceResolve>
		<add_TypeResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_TypeResolve>
		<remove_TypeResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_TypeResolve>
		<add_UnhandledException final="1" public="1" set="method"><f a="value">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="Void"/>
</f></add_UnhandledException>
		<remove_UnhandledException final="1" public="1" set="method"><f a="value">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="Void"/>
</f></remove_UnhandledException>
		<add_ReflectionOnlyAssemblyResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></add_ReflectionOnlyAssemblyResolve>
		<remove_ReflectionOnlyAssemblyResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ReflectionOnlyAssemblyResolve>
		<get_SetupInformation final="1" public="1" set="method"><f a=""><c path="cs.system.AppDomainSetup"/></f></get_SetupInformation>
		<get_ApplicationTrust final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.ApplicationTrust"/></f></get_ApplicationTrust>
		<get_BaseDirectory final="1" public="1" set="method"><f a=""><c path="String"/></f></get_BaseDirectory>
		<get_RelativeSearchPath final="1" public="1" set="method"><f a=""><c path="String"/></f></get_RelativeSearchPath>
		<get_DynamicDirectory final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DynamicDirectory>
		<get_ShadowCopyFiles final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_ShadowCopyFiles>
		<get_FriendlyName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FriendlyName>
		<get_Evidence final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.Evidence"/></f></get_Evidence>
		<AppendPrivatePath final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></AppendPrivatePath>
		<ClearPrivatePath final="1" public="1" set="method"><f a=""><x path="Void"/></f></ClearPrivatePath>
		<ClearShadowCopyPath final="1" public="1" set="method"><f a=""><x path="Void"/></f></ClearShadowCopyPath>
		<CreateComInstanceFrom final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads><CreateComInstanceFrom final="1" public="1" set="method"><f a="assemblyFile:typeName:hashValue:hashAlgorithm">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateComInstanceFrom></overloads>
		</CreateComInstanceFrom>
		<CreateInstance final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstance final="1" public="1" set="method"><f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
				<CreateInstance final="1" public="1" set="method"><f a="assemblyName:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<CreateInstanceAndUnwrap final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<overloads>
				<CreateInstanceAndUnwrap final="1" public="1" set="method"><f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<d/>
</f></CreateInstanceAndUnwrap>
				<CreateInstanceAndUnwrap final="1" public="1" set="method"><f a="assemblyName:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstanceAndUnwrap>
			</overloads>
		</CreateInstanceAndUnwrap>
		<CreateInstanceFrom final="1" public="1" set="method">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads>
				<CreateInstanceFrom final="1" public="1" set="method"><f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
				<CreateInstanceFrom final="1" public="1" set="method"><f a="assemblyFile:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<CreateInstanceFromAndUnwrap final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<overloads>
				<CreateInstanceFromAndUnwrap final="1" public="1" set="method"><f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<d/>
</f></CreateInstanceFromAndUnwrap>
				<CreateInstanceFromAndUnwrap final="1" public="1" set="method"><f a="assemblyName:typeName:activationAttributes">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstanceFromAndUnwrap>
			</overloads>
		</CreateInstanceFromAndUnwrap>
		<DefineDynamicAssembly final="1" public="1" set="method">
			<f a="name:access">
				<c path="cs.system.reflection.AssemblyName"/>
				<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
				<c path="cs.system.reflection.emit.AssemblyBuilder"/>
			</f>
			<overloads>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:assemblyAttributes">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized:assemblyAttributes">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Bool"/>
	<c path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Bool"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:requiredPermissions:optionalPermissions:refusedPermissions">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir:evidence">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:dir">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="String"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method"><f a="name:access:evidence">
	<c path="cs.system.reflection.AssemblyName"/>
	<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.emit.AssemblyBuilder"/>
</f></DefineDynamicAssembly>
			</overloads>
		</DefineDynamicAssembly>
		<DoCallBack final="1" public="1" set="method"><f a="callBackDelegate">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="Void"/>
</f></DoCallBack>
		<ExecuteAssembly final="1" public="1" set="method">
			<f a="assemblyFile">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<ExecuteAssembly final="1" public="1" set="method"><f a="assemblyFile:assemblySecurity:args:hashValue:hashAlgorithm">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
	<x path="Int"/>
</f></ExecuteAssembly>
				<ExecuteAssembly final="1" public="1" set="method"><f a="assemblyFile:assemblySecurity:args">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
</f></ExecuteAssembly>
				<ExecuteAssembly final="1" public="1" set="method"><f a="assemblyFile:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Int"/>
</f></ExecuteAssembly>
			</overloads>
		</ExecuteAssembly>
		<GetAssemblies final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f></GetAssemblies>
		<GetData final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></GetData>
		<GetType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<InitializeLifetimeService public="1" set="method" override="1"><f a=""><d/></f></InitializeLifetimeService>
		<Load final="1" public="1" set="method">
			<f a="assemblyRef">
				<c path="cs.system.reflection.AssemblyName"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads>
				<Load final="1" public="1" set="method"><f a="rawAssembly:rawSymbolStore:securityEvidence">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load final="1" public="1" set="method"><f a="rawAssembly:rawSymbolStore">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load final="1" public="1" set="method"><f a="rawAssembly">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load final="1" public="1" set="method"><f a="assemblyString:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load final="1" public="1" set="method"><f a="assemblyString">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load final="1" public="1" set="method"><f a="assemblyRef:assemblySecurity">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
			</overloads>
		</Load>
		<SetAppDomainPolicy final="1" public="1" set="method"><f a="domainPolicy">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></SetAppDomainPolicy>
		<SetCachePath final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></SetCachePath>
		<SetPrincipalPolicy final="1" public="1" set="method"><f a="policy">
	<e path="cs.system.security.principal.PrincipalPolicy"/>
	<x path="Void"/>
</f></SetPrincipalPolicy>
		<SetShadowCopyFiles final="1" public="1" set="method"><f a=""><x path="Void"/></f></SetShadowCopyFiles>
		<SetShadowCopyPath final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></SetShadowCopyPath>
		<SetThreadPrincipal final="1" public="1" set="method"><f a="principal">
	<c path="cs.system.security.principal.IPrincipal"/>
	<x path="Void"/>
</f></SetThreadPrincipal>
		<IsFinalizingForUnload final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsFinalizingForUnload>
		<SetData final="1" public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<overloads><SetData final="1" public="1" set="method"><f a="name:data:permission">
	<c path="String"/>
	<d/>
	<c path="cs.system.security.IPermission"/>
	<x path="Void"/>
</f></SetData></overloads>
		</SetData>
		<SetDynamicBase final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></SetDynamicBase>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_DomainManager final="1" public="1" set="method"><f a=""><c path="cs.system.AppDomainManager"/></f></get_DomainManager>
		<get_ActivationContext final="1" public="1" set="method"><f a=""><c path="cs.system.ActivationContext"/></f></get_ActivationContext>
		<get_ApplicationIdentity final="1" public="1" set="method"><f a=""><c path="cs.system.ApplicationIdentity"/></f></get_ApplicationIdentity>
		<get_Id final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Id>
		<ApplyPolicy final="1" public="1" set="method"><f a="assemblyName">
	<c path="String"/>
	<c path="String"/>
</f></ApplyPolicy>
		<ExecuteAssemblyByName final="1" public="1" set="method">
			<f a="assemblyName">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<ExecuteAssemblyByName final="1" public="1" set="method"><f a="assemblyName:assemblySecurity:args">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
</f></ExecuteAssemblyByName>
				<ExecuteAssemblyByName final="1" public="1" set="method"><f a="assemblyName:assemblySecurity:args">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
</f></ExecuteAssemblyByName>
				<ExecuteAssemblyByName final="1" public="1" set="method"><f a="assemblyName:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Int"/>
</f></ExecuteAssemblyByName>
			</overloads>
		</ExecuteAssemblyByName>
		<IsDefaultAppDomain final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsDefaultAppDomain>
		<ReflectionOnlyGetAssemblies final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f></ReflectionOnlyGetAssemblies>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_AppDomainInitializer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" module="cs.system.AppDomainInitializer" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="args">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="args:callback:object">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainInitializer"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AppDomainInitializer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AppDomainInitializer"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AppDomainInitializer.AppDomainInitializer_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" private="1" module="cs.system.AppDomainInitializer" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._AppDomainInitializer.AppDomainInitializer_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" private="1" module="cs.system.AppDomainInitializer" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.AppDomainManager" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainManager" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<CreateDomainHelper set="method" static="1">
			<f a="friendlyName:securityInfo:appDomainInfo">
				<c path="String"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.AppDomainSetup"/>
				<c path="cs.system.AppDomain"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CreateDomainHelper>
		<InitializationFlags public="1" get="accessor" set="accessor"><e path="cs.system.AppDomainManagerInitializationOptions"/></InitializationFlags>
		<HostSecurityManager public="1" get="accessor" set="null"><c path="cs.system.security.HostSecurityManager"/></HostSecurityManager>
		<HostExecutionContextManager public="1" get="accessor" set="null"><c path="cs.system.threading.HostExecutionContextManager"/></HostExecutionContextManager>
		<EntryAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></EntryAssembly>
		<ApplicationActivator public="1" get="accessor" set="null"><c path="cs.system.runtime.hosting.ApplicationActivator"/></ApplicationActivator>
		<get_ApplicationActivator public="1" set="method"><f a=""><c path="cs.system.runtime.hosting.ApplicationActivator"/></f></get_ApplicationActivator>
		<get_EntryAssembly public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_EntryAssembly>
		<get_HostExecutionContextManager public="1" set="method"><f a=""><c path="cs.system.threading.HostExecutionContextManager"/></f></get_HostExecutionContextManager>
		<get_HostSecurityManager public="1" set="method"><f a=""><c path="cs.system.security.HostSecurityManager"/></f></get_HostSecurityManager>
		<get_InitializationFlags final="1" public="1" set="method"><f a=""><e path="cs.system.AppDomainManagerInitializationOptions"/></f></get_InitializationFlags>
		<set_InitializationFlags final="1" public="1" set="method"><f a="value">
	<e path="cs.system.AppDomainManagerInitializationOptions"/>
	<e path="cs.system.AppDomainManagerInitializationOptions"/>
</f></set_InitializationFlags>
		<CreateDomain public="1" set="method"><f a="friendlyName:securityInfo:appDomainInfo">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.AppDomainSetup"/>
	<c path="cs.system.AppDomain"/>
</f></CreateDomain>
		<InitializeNewDomain public="1" set="method"><f a="appDomainInfo">
	<c path="cs.system.AppDomainSetup"/>
	<x path="Void"/>
</f></InitializeNewDomain>
		<CheckSecuritySettings public="1" set="method"><f a="state">
	<c path="cs.system.security.SecurityState"/>
	<x path="Bool"/>
</f></CheckSecuritySettings>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainManager"</e></m>
		</meta>
	</class>
	<enum path="cs.system.AppDomainManagerInitializationOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainManagerInitializationOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<RegisterWithHost><meta><m n=":csNative"><e>1</e></m></meta></RegisterWithHost>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.AppDomainManagerInitializationOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.IAppDomainSetup" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IAppDomainSetup" extern="1" interface="1">
		<ShadowCopyFiles public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyFiles>
		<ShadowCopyDirectories public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyDirectories>
		<PrivateBinPathProbe public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPathProbe>
		<PrivateBinPath public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPath>
		<LicenseFile public="1" get="accessor" set="accessor"><c path="String"/></LicenseFile>
		<DynamicBase public="1" get="accessor" set="accessor"><c path="String"/></DynamicBase>
		<ConfigurationFile public="1" get="accessor" set="accessor"><c path="String"/></ConfigurationFile>
		<CachePath public="1" get="accessor" set="accessor"><c path="String"/></CachePath>
		<ApplicationName public="1" get="accessor" set="accessor"><c path="String"/></ApplicationName>
		<ApplicationBase public="1" get="accessor" set="accessor"><c path="String"/></ApplicationBase>
		<get_ApplicationBase public="1" set="method"><f a=""><c path="String"/></f></get_ApplicationBase>
		<set_ApplicationBase public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ApplicationBase>
		<get_ApplicationName public="1" set="method"><f a=""><c path="String"/></f></get_ApplicationName>
		<set_ApplicationName public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ApplicationName>
		<get_CachePath public="1" set="method"><f a=""><c path="String"/></f></get_CachePath>
		<set_CachePath public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CachePath>
		<get_ConfigurationFile public="1" set="method"><f a=""><c path="String"/></f></get_ConfigurationFile>
		<set_ConfigurationFile public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ConfigurationFile>
		<get_DynamicBase public="1" set="method"><f a=""><c path="String"/></f></get_DynamicBase>
		<set_DynamicBase public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_DynamicBase>
		<get_LicenseFile public="1" set="method"><f a=""><c path="String"/></f></get_LicenseFile>
		<set_LicenseFile public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LicenseFile>
		<get_PrivateBinPath public="1" set="method"><f a=""><c path="String"/></f></get_PrivateBinPath>
		<set_PrivateBinPath public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PrivateBinPath>
		<get_PrivateBinPathProbe public="1" set="method"><f a=""><c path="String"/></f></get_PrivateBinPathProbe>
		<set_PrivateBinPathProbe public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PrivateBinPathProbe>
		<get_ShadowCopyDirectories public="1" set="method"><f a=""><c path="String"/></f></get_ShadowCopyDirectories>
		<set_ShadowCopyDirectories public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShadowCopyDirectories>
		<get_ShadowCopyFiles public="1" set="method"><f a=""><c path="String"/></f></get_ShadowCopyFiles>
		<set_ShadowCopyFiles public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShadowCopyFiles>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IAppDomainSetup"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomainSetup" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AppDomainSetup" extern="1" final="1">
		<implements path="cs.system.IAppDomainSetup"/>
		<DisallowApplicationBaseProbing public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowApplicationBaseProbing>
		<ApplicationTrust public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.ApplicationTrust"/></ApplicationTrust>
		<AppDomainInitializerArguments public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AppDomainInitializerArguments>
		<AppDomainInitializer public="1" get="accessor" set="accessor"><x path="cs.system.AppDomainInitializer"/></AppDomainInitializer>
		<ActivationArguments public="1" get="accessor" set="accessor"><c path="cs.system.runtime.hosting.ActivationArguments"/></ActivationArguments>
		<DisallowCodeDownload public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowCodeDownload>
		<DisallowBindingRedirects public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowBindingRedirects>
		<ShadowCopyFiles public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyFiles>
		<ShadowCopyDirectories public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyDirectories>
		<PrivateBinPathProbe public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPathProbe>
		<PrivateBinPath public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPath>
		<LoaderOptimization public="1" get="accessor" set="accessor"><e path="cs.system.LoaderOptimization"/></LoaderOptimization>
		<LicenseFile public="1" get="accessor" set="accessor"><c path="String"/></LicenseFile>
		<DynamicBase public="1" get="accessor" set="accessor"><c path="String"/></DynamicBase>
		<DisallowPublisherPolicy public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowPublisherPolicy>
		<ConfigurationFile public="1" get="accessor" set="accessor"><c path="String"/></ConfigurationFile>
		<CachePath public="1" get="accessor" set="accessor"><c path="String"/></CachePath>
		<ApplicationName public="1" get="accessor" set="accessor"><c path="String"/></ApplicationName>
		<ApplicationBase public="1" get="accessor" set="accessor"><c path="String"/></ApplicationBase>
		<get_ApplicationBase final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ApplicationBase>
		<set_ApplicationBase final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ApplicationBase>
		<get_ApplicationName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ApplicationName>
		<set_ApplicationName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ApplicationName>
		<get_CachePath final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CachePath>
		<set_CachePath final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CachePath>
		<get_ConfigurationFile final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ConfigurationFile>
		<set_ConfigurationFile final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ConfigurationFile>
		<get_DisallowPublisherPolicy final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_DisallowPublisherPolicy>
		<set_DisallowPublisherPolicy final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_DisallowPublisherPolicy>
		<get_DynamicBase final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DynamicBase>
		<set_DynamicBase final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_DynamicBase>
		<get_LicenseFile final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LicenseFile>
		<set_LicenseFile final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LicenseFile>
		<get_LoaderOptimization final="1" public="1" set="method"><f a=""><e path="cs.system.LoaderOptimization"/></f></get_LoaderOptimization>
		<set_LoaderOptimization final="1" public="1" set="method"><f a="value">
	<e path="cs.system.LoaderOptimization"/>
	<e path="cs.system.LoaderOptimization"/>
</f></set_LoaderOptimization>
		<get_PrivateBinPath final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PrivateBinPath>
		<set_PrivateBinPath final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PrivateBinPath>
		<get_PrivateBinPathProbe final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PrivateBinPathProbe>
		<set_PrivateBinPathProbe final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PrivateBinPathProbe>
		<get_ShadowCopyDirectories final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ShadowCopyDirectories>
		<set_ShadowCopyDirectories final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShadowCopyDirectories>
		<get_ShadowCopyFiles final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ShadowCopyFiles>
		<set_ShadowCopyFiles final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShadowCopyFiles>
		<get_DisallowBindingRedirects final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_DisallowBindingRedirects>
		<set_DisallowBindingRedirects final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_DisallowBindingRedirects>
		<get_DisallowCodeDownload final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_DisallowCodeDownload>
		<set_DisallowCodeDownload final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_DisallowCodeDownload>
		<get_ActivationArguments final="1" public="1" set="method"><f a=""><c path="cs.system.runtime.hosting.ActivationArguments"/></f></get_ActivationArguments>
		<set_ActivationArguments final="1" public="1" set="method"><f a="value">
	<c path="cs.system.runtime.hosting.ActivationArguments"/>
	<c path="cs.system.runtime.hosting.ActivationArguments"/>
</f></set_ActivationArguments>
		<get_AppDomainInitializer final="1" public="1" set="method"><f a=""><x path="cs.system.AppDomainInitializer"/></f></get_AppDomainInitializer>
		<set_AppDomainInitializer final="1" public="1" set="method"><f a="value">
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
</f></set_AppDomainInitializer>
		<get_AppDomainInitializerArguments final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_AppDomainInitializerArguments>
		<set_AppDomainInitializerArguments final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_AppDomainInitializerArguments>
		<get_ApplicationTrust final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.ApplicationTrust"/></f></get_ApplicationTrust>
		<set_ApplicationTrust final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.policy.ApplicationTrust"/>
	<c path="cs.system.security.policy.ApplicationTrust"/>
</f></set_ApplicationTrust>
		<get_DisallowApplicationBaseProbing final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_DisallowApplicationBaseProbing>
		<set_DisallowApplicationBaseProbing final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_DisallowApplicationBaseProbing>
		<GetConfigurationBytes final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetConfigurationBytes>
		<SetConfigurationBytes final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetConfigurationBytes>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="activationContext">
	<c path="cs.system.ActivationContext"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="activationArguments">
	<c path="cs.system.runtime.hosting.ActivationArguments"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainSetup"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Exception" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Exception" extern="1" interface="1">
		<TargetSite public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></TargetSite>
		<StackTrace public="1" get="accessor" set="null"><c path="String"/></StackTrace>
		<Source public="1" get="accessor" set="accessor"><c path="String"/></Source>
		<Message public="1" get="accessor" set="null"><c path="String"/></Message>
		<InnerException public="1" get="accessor" set="null"><c path="cs.system.Exception"/></InnerException>
		<HelpLink public="1" get="accessor" set="accessor"><c path="String"/></HelpLink>
		<get_HelpLink public="1" set="method"><f a=""><c path="String"/></f></get_HelpLink>
		<set_HelpLink public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_HelpLink>
		<get_InnerException public="1" set="method"><f a=""><c path="cs.system.Exception"/></f></get_InnerException>
		<get_Message public="1" set="method"><f a=""><c path="String"/></f></get_Message>
		<get_Source public="1" set="method"><f a=""><c path="String"/></f></get_Source>
		<set_Source public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Source>
		<get_StackTrace public="1" set="method"><f a=""><c path="String"/></f></get_StackTrace>
		<get_TargetSite public="1" set="method"><f a=""><c path="cs.system.reflection.MethodBase"/></f></get_TargetSite>
		<GetBaseException public="1" set="method"><f a=""><c path="cs.system.Exception"/></f></GetBaseException>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Exception"</e></m>
		</meta>
	</class>
	<class path="cs.system.Exception" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Exception" extern="1">
		<implements path="cs.system.runtime.interopservices._Exception"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Data public="1" get="accessor" set="null"><c path="cs.system.collections.IDictionary"/></Data>
		<TargetSite public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></TargetSite>
		<StackTrace public="1" get="accessor" set="null"><c path="String"/></StackTrace>
		<Source public="1" get="accessor" set="accessor"><c path="String"/></Source>
		<Message public="1" get="accessor" set="null"><c path="String"/></Message>
		<HResult get="null" set="null"><x path="Int"/></HResult>
		<HelpLink public="1" get="accessor" set="accessor"><c path="String"/></HelpLink>
		<InnerException public="1" get="accessor" set="null"><c path="cs.system.Exception"/></InnerException>
		<get_InnerException final="1" public="1" set="method"><f a=""><c path="cs.system.Exception"/></f></get_InnerException>
		<get_HelpLink public="1" set="method"><f a=""><c path="String"/></f></get_HelpLink>
		<set_HelpLink public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_HelpLink>
		<get_HResult final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":protected"/></meta>
		</get_HResult>
		<set_HResult final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_HResult>
		<get_Message public="1" set="method"><f a=""><c path="String"/></f></get_Message>
		<get_Source public="1" set="method"><f a=""><c path="String"/></f></get_Source>
		<set_Source public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Source>
		<get_StackTrace public="1" set="method"><f a=""><c path="String"/></f></get_StackTrace>
		<get_TargetSite final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.MethodBase"/></f></get_TargetSite>
		<get_Data public="1" set="method"><f a=""><c path="cs.system.collections.IDictionary"/></f></get_Data>
		<GetBaseException public="1" set="method"><f a=""><c path="cs.system.Exception"/></f></GetBaseException>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Exception"</e></m>
		</meta>
	</class>
	<class path="cs.system.ApplicationException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ApplicationException" extern="1">
		<extends path="cs.system.Exception"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ApplicationException"</e></m>
		</meta>
	</class>
	<class path="cs.system.ApplicationIdentity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ApplicationIdentity" extern="1" final="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<get_CodeBase final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CodeBase>
		<get_FullName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a="applicationIdentityFullName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ApplicationIdentity"</e></m>
		</meta>
	</class>
	<class path="cs.system.SystemException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.SystemException" extern="1">
		<extends path="cs.system.Exception"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.SystemException"</e></m>
		</meta>
	</class>
	<class path="cs.system.ArgumentException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ArgumentException" extern="1">
		<extends path="cs.system.SystemException"/>
		<Message public="1" get="accessor" set="null" override="1"><c path="String"/></Message>
		<ParamName public="1" get="accessor" set="null"><c path="String"/></ParamName>
		<get_ParamName public="1" set="method"><f a=""><c path="String"/></f></get_ParamName>
		<get_Message public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Message>
		<GetObjectData public="1" set="method" override="1"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message:paramName:innerException">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message:paramName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ArgumentException"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IEnumerator" extern="1" interface="1">
		<Current public="1" get="accessor" set="null"><d/></Current>
		<get_Current public="1" set="method"><f a=""><d/></f></get_Current>
		<MoveNext public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_SimpleEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<new final="1" public="1" set="method"><f a="arrayToEnumerate">
	<c path="cs.system.Array"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.SimpleEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_Delegate_Swapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="i:j">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="i:j:callback:object">
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.Swapper"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Array_Swapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array">
		<from><icast field="FromHaxeFunction"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Array_Delegate_Swapper"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Array.Array_Swapper_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" private="1" module="cs.system.Array" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Array.Array_Swapper_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" private="1" module="cs.system.Array" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.collections.generic.IEnumerator_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IEnumerator_1" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<extends path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IEnumerator_1.T0"/></Current>
		<get_Current public="1" set="method"><f a=""><c path="cs.system.collections.generic.IEnumerator_1.T0"/></f></get_Current>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IEnumerator`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_InternalEnumerator_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.Array_InternalEnumerator_1.T0"/></implements>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null">
			<c path="cs.system.Array_InternalEnumerator_1.T0"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<Dispose final="1" public="1" set="method"><f a=""><x path="Void"/></f></Dispose>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<get_Current final="1" public="1" set="method">
			<f a=""><c path="cs.system.Array_InternalEnumerator_1.T0"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</get_Current>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.InternalEnumerator`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.EventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EventArgs" extern="1">
		<Empty public="1" set="null" static="1">
			<c path="cs.system.EventArgs"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.EventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.AssemblyLoadEventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<LoadedAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></LoadedAssembly>
		<get_LoadedAssembly final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_LoadedAssembly>
		<new final="1" public="1" set="method"><f a="loadedAssembly">
	<c path="cs.system.reflection.Assembly"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AssemblyLoadEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_AssemblyLoadEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" module="cs.system.AssemblyLoadEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:args">
	<d/>
	<c path="cs.system.AssemblyLoadEventArgs"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:args:callback:object">
	<d/>
	<c path="cs.system.AssemblyLoadEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AssemblyLoadEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AssemblyLoadEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.AssemblyLoadEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AssemblyLoadEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AssemblyLoadEventHandler.AssemblyLoadEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" private="1" module="cs.system.AssemblyLoadEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._AssemblyLoadEventHandler.AssemblyLoadEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" private="1" module="cs.system.AssemblyLoadEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Delegate_AsyncCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" module="cs.system.AsyncCallback" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="ar">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="ar:callback:object">
	<c path="cs.system.IAsyncResult"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AsyncCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AsyncCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AsyncCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AsyncCallback.AsyncCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" private="1" module="cs.system.AsyncCallback" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._AsyncCallback.AsyncCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" private="1" module="cs.system.AsyncCallback" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.Base64FormattingOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Base64FormattingOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<InsertLineBreaks><meta><m n=":csNative"><e>1</e></m></meta></InsertLineBreaks>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Base64FormattingOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.BitConverter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.BitConverter" extern="1" final="1">
		<IsLittleEndian public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":readOnly"/></meta>
		</IsLittleEndian>
		<DoubleToInt64Bits public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></DoubleToInt64Bits>
		<Int64BitsToDouble public="1" set="method" static="1"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Float"/>
</f></Int64BitsToDouble>
		<GetBytes public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<overloads>
				<GetBytes public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<x path="Single"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
			</overloads>
		</GetBytes>
		<ToBoolean public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></ToBoolean>
		<ToChar public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
		<ToInt16 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
		<ToInt32 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></ToInt32>
		<ToInt64 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
		<ToUInt16 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
		<ToUInt32 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="UInt"/>
</f></ToUInt32>
		<ToUInt64 public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
		<ToSingle public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Single"/>
</f></ToSingle>
		<ToDouble public="1" set="method" static="1"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Float"/>
</f></ToDouble>
		<ToString public="1" set="method" static="1">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="String"/>
			</f>
			<overloads>
				<ToString public="1" set="method"><f a="value:startIndex:length">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:startIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<_ToString public="1" set="method" static="1">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"ToString"</e></m></meta>
			<overloads>
				<ToString public="1" set="method">
					<f a="value:startIndex:length">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:startIndex">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
			</overloads>
		</_ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.BitConverter"</e></m>
		</meta>
	</class>
	<class path="cs.system.Char" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Char" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.IEquatable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<MinValue public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<ConvertFromUtf32 public="1" set="method" static="1"><f a="utf32">
	<x path="Int"/>
	<c path="String"/>
</f></ConvertFromUtf32>
		<ConvertToUtf32 public="1" set="method" static="1">
			<f a="highSurrogate:lowSurrogate">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<overloads><ConvertToUtf32 public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ConvertToUtf32></overloads>
		</ConvertToUtf32>
		<IsSurrogatePair public="1" set="method" static="1">
			<f a="highSurrogate:lowSurrogate">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSurrogatePair public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsSurrogatePair></overloads>
		</IsSurrogatePair>
		<GetNumericValue public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Float"/>
			</f>
			<overloads><GetNumericValue public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></GetNumericValue></overloads>
		</GetNumericValue>
		<GetUnicodeCategory public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<e path="cs.system.globalization.UnicodeCategory"/>
			</f>
			<overloads><GetUnicodeCategory public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.globalization.UnicodeCategory"/>
</f></GetUnicodeCategory></overloads>
		</GetUnicodeCategory>
		<IsControl public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsControl public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsControl></overloads>
		</IsControl>
		<IsDigit public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsDigit public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsDigit></overloads>
		</IsDigit>
		<IsHighSurrogate public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsHighSurrogate public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsHighSurrogate></overloads>
		</IsHighSurrogate>
		<IsLetter public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLetter public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLetter></overloads>
		</IsLetter>
		<IsLetterOrDigit public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLetterOrDigit public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLetterOrDigit></overloads>
		</IsLetterOrDigit>
		<IsLower public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLower public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLower></overloads>
		</IsLower>
		<IsLowSurrogate public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLowSurrogate public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLowSurrogate></overloads>
		</IsLowSurrogate>
		<IsNumber public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsNumber public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsNumber></overloads>
		</IsNumber>
		<IsPunctuation public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsPunctuation public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsPunctuation></overloads>
		</IsPunctuation>
		<IsSeparator public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSeparator public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsSeparator></overloads>
		</IsSeparator>
		<IsSurrogate public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSurrogate public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsSurrogate></overloads>
		</IsSurrogate>
		<IsSymbol public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSymbol public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsSymbol></overloads>
		</IsSymbol>
		<IsUpper public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsUpper public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsUpper></overloads>
		</IsUpper>
		<IsWhiteSpace public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsWhiteSpace public="1" set="method"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsWhiteSpace></overloads>
		</IsWhiteSpace>
		<TryParse public="1" set="method" static="1"><f a="s:result">
	<c path="String"/>
	<t path="cs.Out"><t path="cs.types.Char16"/></t>
	<x path="Bool"/>
</f></TryParse>
		<Parse public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<t path="cs.types.Char16"/>
</f></Parse>
		<ToLower public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<overloads><ToLower public="1" set="method"><f a="c:culture">
	<t path="cs.types.Char16"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<t path="cs.types.Char16"/>
</f></ToLower></overloads>
		</ToLower>
		<ToLowerInvariant public="1" set="method" static="1"><f a="c">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Char16"/>
</f></ToLowerInvariant>
		<ToUpper public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<overloads><ToUpper public="1" set="method"><f a="c:culture">
	<t path="cs.types.Char16"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<t path="cs.types.Char16"/>
</f></ToUpper></overloads>
		</ToUpper>
		<ToUpperInvariant public="1" set="method" static="1"><f a="c">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Char16"/>
</f></ToUpperInvariant>
		<ToString public="1" set="method" static="1"><f a="c">
	<t path="cs.types.Char16"/>
	<c path="String"/>
</f></ToString>
		<_ToString public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"ToString"</e></m></meta>
		</_ToString>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads><ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Char"</e></m>
		</meta>
	</class>
	<class path="cs.system.CharEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.CharEnumerator" extern="1" final="1">
		<implements path="cs.system.collections.generic.IEnumerator_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null">
			<t path="cs.types.Char16"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<get_Current final="1" public="1" set="method">
			<f a=""><t path="cs.types.Char16"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</get_Current>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.CharEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Comparison_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" module="cs.system.Comparison_1" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="x:y">
	<c path="cs.system.Delegate_Comparison_1.T0"/>
	<c path="cs.system.Delegate_Comparison_1.T0"/>
	<x path="Int"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="x:y:callback:object">
	<c path="cs.system.Delegate_Comparison_1.T0"/>
	<c path="cs.system.Delegate_Comparison_1.T0"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Int"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Comparison`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Comparison_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T0"/>
	<x path="Int"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Comparison_1.Comparison_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" private="1" module="cs.system.Comparison_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Comparison_1.Comparison_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" private="1" module="cs.system.Comparison_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Console_Delegate_InternalCancelHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a=""><x path="Void"/></f></Invoke>
		<BeginInvoke public="1" set="method"><f a="callback:object">
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.InternalCancelHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Console_InternalCancelHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.Console_Delegate_InternalCancelHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Console.Console_InternalCancelHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Console.Console_InternalCancelHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="keyCode">
	<x path="Int"/>
	<x path="Bool"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="keyCode:callback:object">
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Bool"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.WindowsConsole.WindowsCancelHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Console_WindowsConsole_WindowsCancelHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console">
		<from><icast field="FromHaxeFunction"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Console.Console_WindowsConsole_WindowsCancelHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Console.Console_WindowsConsole_WindowsCancelHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Console_WindowsConsole" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1">
		<ctrlHandlerAdded public="1" static="1"><x path="Bool"/></ctrlHandlerAdded>
		<GetInputCodePage public="1" set="method" static="1"><f a=""><x path="Int"/></f></GetInputCodePage>
		<GetOutputCodePage public="1" set="method" static="1"><f a=""><x path="Int"/></f></GetOutputCodePage>
		<AddCtrlHandler public="1" set="method" static="1"><f a=""><x path="Void"/></f></AddCtrlHandler>
		<RemoveCtrlHandler public="1" set="method" static="1"><f a=""><x path="Void"/></f></RemoveCtrlHandler>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.WindowsConsole"</e></m>
		</meta>
	</class>
	<class path="cs.system.Console" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Console" extern="1" final="1">
		<CancelKeyPress static="1">
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</CancelKeyPress>
		<WindowWidth public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowWidth>
		<WindowTop public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowTop>
		<WindowLeft public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowLeft>
		<WindowHeight public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowHeight>
		<TreatControlCAsInput public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></TreatControlCAsInput>
		<Title public="1" get="accessor" set="accessor" static="1"><c path="String"/></Title>
		<NumberLock public="1" get="accessor" set="null" static="1"><x path="Bool"/></NumberLock>
		<LargestWindowWidth public="1" get="accessor" set="null" static="1"><x path="Int"/></LargestWindowWidth>
		<LargestWindowHeight public="1" get="accessor" set="null" static="1"><x path="Int"/></LargestWindowHeight>
		<KeyAvailable public="1" get="accessor" set="null" static="1"><x path="Bool"/></KeyAvailable>
		<ForegroundColor public="1" get="accessor" set="accessor" static="1"><e path="cs.system.ConsoleColor"/></ForegroundColor>
		<CursorVisible public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></CursorVisible>
		<CursorSize public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorSize>
		<CursorTop public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorTop>
		<CursorLeft public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorLeft>
		<CapsLock public="1" get="accessor" set="null" static="1"><x path="Bool"/></CapsLock>
		<BufferWidth public="1" get="accessor" set="accessor" static="1"><x path="Int"/></BufferWidth>
		<BufferHeight public="1" get="accessor" set="accessor" static="1"><x path="Int"/></BufferHeight>
		<BackgroundColor public="1" get="accessor" set="accessor" static="1"><e path="cs.system.ConsoleColor"/></BackgroundColor>
		<OutputEncoding public="1" get="accessor" set="accessor" static="1"><c path="cs.system.text.Encoding"/></OutputEncoding>
		<InputEncoding public="1" get="accessor" set="accessor" static="1"><c path="cs.system.text.Encoding"/></InputEncoding>
		<In public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextReader"/></In>
		<Out public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextWriter"/></Out>
		<Error public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextWriter"/></Error>
		<add_CancelKeyPress public="1" set="method" static="1"><f a="value">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="Void"/>
</f></add_CancelKeyPress>
		<remove_CancelKeyPress public="1" set="method" static="1"><f a="value">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="Void"/>
</f></remove_CancelKeyPress>
		<get_Error public="1" set="method" static="1"><f a=""><c path="cs.system.io.TextWriter"/></f></get_Error>
		<get_Out public="1" set="method" static="1"><f a=""><c path="cs.system.io.TextWriter"/></f></get_Out>
		<get_In public="1" set="method" static="1"><f a=""><c path="cs.system.io.TextReader"/></f></get_In>
		<OpenStandardError public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<overloads><OpenStandardError public="1" set="method"><f a="bufferSize">
	<x path="Int"/>
	<c path="cs.system.io.Stream"/>
</f></OpenStandardError></overloads>
		</OpenStandardError>
		<OpenStandardInput public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<overloads><OpenStandardInput public="1" set="method"><f a="bufferSize">
	<x path="Int"/>
	<c path="cs.system.io.Stream"/>
</f></OpenStandardInput></overloads>
		</OpenStandardInput>
		<OpenStandardOutput public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<overloads><OpenStandardOutput public="1" set="method"><f a="bufferSize">
	<x path="Int"/>
	<c path="cs.system.io.Stream"/>
</f></OpenStandardOutput></overloads>
		</OpenStandardOutput>
		<SetError public="1" set="method" static="1"><f a="newError">
	<c path="cs.system.io.TextWriter"/>
	<x path="Void"/>
</f></SetError>
		<SetIn public="1" set="method" static="1"><f a="newIn">
	<c path="cs.system.io.TextReader"/>
	<x path="Void"/>
</f></SetIn>
		<SetOut public="1" set="method" static="1"><f a="newOut">
	<c path="cs.system.io.TextWriter"/>
	<x path="Void"/>
</f></SetOut>
		<Write public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Write public="1" set="method"><f a="format:arg0:arg1:arg2:arg3">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg">
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg0">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></Write>
			</overloads>
		</Write>
		<WriteLine public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<WriteLine public="1" set="method"><f a="format:arg0:arg1:arg2:arg3">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg">
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg0">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></WriteLine>
			</overloads>
		</WriteLine>
		<Read public="1" set="method" static="1"><f a=""><x path="Int"/></f></Read>
		<ReadLine public="1" set="method" static="1"><f a=""><c path="String"/></f></ReadLine>
		<get_InputEncoding public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_InputEncoding>
		<set_InputEncoding public="1" set="method" static="1"><f a="value">
	<c path="cs.system.text.Encoding"/>
	<c path="cs.system.text.Encoding"/>
</f></set_InputEncoding>
		<get_OutputEncoding public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_OutputEncoding>
		<set_OutputEncoding public="1" set="method" static="1"><f a="value">
	<c path="cs.system.text.Encoding"/>
	<c path="cs.system.text.Encoding"/>
</f></set_OutputEncoding>
		<get_BackgroundColor public="1" set="method" static="1"><f a=""><e path="cs.system.ConsoleColor"/></f></get_BackgroundColor>
		<set_BackgroundColor public="1" set="method" static="1"><f a="value">
	<e path="cs.system.ConsoleColor"/>
	<e path="cs.system.ConsoleColor"/>
</f></set_BackgroundColor>
		<get_BufferHeight public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_BufferHeight>
		<set_BufferHeight public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_BufferHeight>
		<get_BufferWidth public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_BufferWidth>
		<set_BufferWidth public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_BufferWidth>
		<get_CapsLock public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_CapsLock>
		<get_CursorLeft public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_CursorLeft>
		<set_CursorLeft public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CursorLeft>
		<get_CursorTop public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_CursorTop>
		<set_CursorTop public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CursorTop>
		<get_CursorSize public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_CursorSize>
		<set_CursorSize public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CursorSize>
		<get_CursorVisible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_CursorVisible>
		<set_CursorVisible public="1" set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_CursorVisible>
		<get_ForegroundColor public="1" set="method" static="1"><f a=""><e path="cs.system.ConsoleColor"/></f></get_ForegroundColor>
		<set_ForegroundColor public="1" set="method" static="1"><f a="value">
	<e path="cs.system.ConsoleColor"/>
	<e path="cs.system.ConsoleColor"/>
</f></set_ForegroundColor>
		<get_KeyAvailable public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_KeyAvailable>
		<get_LargestWindowHeight public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_LargestWindowHeight>
		<get_LargestWindowWidth public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_LargestWindowWidth>
		<get_NumberLock public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_NumberLock>
		<get_Title public="1" set="method" static="1"><f a=""><c path="String"/></f></get_Title>
		<set_Title public="1" set="method" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Title>
		<get_TreatControlCAsInput public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_TreatControlCAsInput>
		<set_TreatControlCAsInput public="1" set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_TreatControlCAsInput>
		<get_WindowHeight public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_WindowHeight>
		<set_WindowHeight public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_WindowHeight>
		<get_WindowLeft public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_WindowLeft>
		<set_WindowLeft public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_WindowLeft>
		<get_WindowTop public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_WindowTop>
		<set_WindowTop public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_WindowTop>
		<get_WindowWidth public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_WindowWidth>
		<set_WindowWidth public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_WindowWidth>
		<Beep public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<overloads><Beep public="1" set="method"><f a="frequency:duration">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Beep></overloads>
		</Beep>
		<Clear public="1" set="method" static="1"><f a=""><x path="Void"/></f></Clear>
		<MoveBufferArea public="1" set="method" static="1">
			<f a="sourceLeft:sourceTop:sourceWidth:sourceHeight:targetLeft:targetTop">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><MoveBufferArea public="1" set="method"><f a="sourceLeft:sourceTop:sourceWidth:sourceHeight:targetLeft:targetTop:sourceChar:sourceForeColor:sourceBackColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<e path="cs.system.ConsoleColor"/>
	<e path="cs.system.ConsoleColor"/>
	<x path="Void"/>
</f></MoveBufferArea></overloads>
		</MoveBufferArea>
		<ReadKey public="1" set="method" static="1">
			<f a=""><c path="cs.system.ConsoleKeyInfo"/></f>
			<overloads><ReadKey public="1" set="method"><f a="intercept">
	<x path="Bool"/>
	<c path="cs.system.ConsoleKeyInfo"/>
</f></ReadKey></overloads>
		</ReadKey>
		<ResetColor public="1" set="method" static="1"><f a=""><x path="Void"/></f></ResetColor>
		<SetBufferSize public="1" set="method" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetBufferSize>
		<SetCursorPosition public="1" set="method" static="1"><f a="left:top">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetCursorPosition>
		<SetWindowPosition public="1" set="method" static="1"><f a="left:top">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetWindowPosition>
		<SetWindowSize public="1" set="method" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetWindowSize>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console"</e></m>
		</meta>
	</class>
	<class path="cs.system.ConsoleCancelEventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventArgs" extern="1" final="1">
		<extends path="cs.system.EventArgs"/>
		<SpecialKey public="1" get="accessor" set="null"><e path="cs.system.ConsoleSpecialKey"/></SpecialKey>
		<Cancel public="1" get="accessor" set="accessor"><x path="Bool"/></Cancel>
		<get_Cancel final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Cancel>
		<set_Cancel final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_Cancel>
		<get_SpecialKey final="1" public="1" set="method"><f a=""><e path="cs.system.ConsoleSpecialKey"/></f></get_SpecialKey>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleCancelEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_ConsoleCancelEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" module="cs.system.ConsoleCancelEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.ConsoleCancelEventArgs"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:e:callback:object">
	<d/>
	<c path="cs.system.ConsoleCancelEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleCancelEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.ConsoleCancelEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ConsoleCancelEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_ConsoleCancelEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._ConsoleCancelEventHandler.ConsoleCancelEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" private="1" module="cs.system.ConsoleCancelEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._ConsoleCancelEventHandler.ConsoleCancelEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" private="1" module="cs.system.ConsoleCancelEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.ConsoleColor" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleColor">
		<Black><meta><m n=":csNative"><e>0</e></m></meta></Black>
		<DarkBlue><meta><m n=":csNative"><e>1</e></m></meta></DarkBlue>
		<DarkGreen><meta><m n=":csNative"><e>2</e></m></meta></DarkGreen>
		<DarkCyan><meta><m n=":csNative"><e>3</e></m></meta></DarkCyan>
		<DarkRed><meta><m n=":csNative"><e>4</e></m></meta></DarkRed>
		<DarkMagenta><meta><m n=":csNative"><e>5</e></m></meta></DarkMagenta>
		<DarkYellow><meta><m n=":csNative"><e>6</e></m></meta></DarkYellow>
		<Gray><meta><m n=":csNative"><e>7</e></m></meta></Gray>
		<DarkGray><meta><m n=":csNative"><e>8</e></m></meta></DarkGray>
		<Blue><meta><m n=":csNative"><e>9</e></m></meta></Blue>
		<Green><meta><m n=":csNative"><e>10</e></m></meta></Green>
		<Cyan><meta><m n=":csNative"><e>11</e></m></meta></Cyan>
		<Red><meta><m n=":csNative"><e>12</e></m></meta></Red>
		<Magenta><meta><m n=":csNative"><e>13</e></m></meta></Magenta>
		<Yellow><meta><m n=":csNative"><e>14</e></m></meta></Yellow>
		<White><meta><m n=":csNative"><e>15</e></m></meta></White>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleColor"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.ConsoleKey" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleKey">
		<Backspace><meta><m n=":csNative"><e>8</e></m></meta></Backspace>
		<Tab><meta><m n=":csNative"><e>9</e></m></meta></Tab>
		<Clear><meta><m n=":csNative"><e>12</e></m></meta></Clear>
		<Enter><meta><m n=":csNative"><e>13</e></m></meta></Enter>
		<Pause><meta><m n=":csNative"><e>19</e></m></meta></Pause>
		<Escape><meta><m n=":csNative"><e>27</e></m></meta></Escape>
		<Spacebar><meta><m n=":csNative"><e>32</e></m></meta></Spacebar>
		<PageUp><meta><m n=":csNative"><e>33</e></m></meta></PageUp>
		<PageDown><meta><m n=":csNative"><e>34</e></m></meta></PageDown>
		<End><meta><m n=":csNative"><e>35</e></m></meta></End>
		<Home><meta><m n=":csNative"><e>36</e></m></meta></Home>
		<LeftArrow><meta><m n=":csNative"><e>37</e></m></meta></LeftArrow>
		<UpArrow><meta><m n=":csNative"><e>38</e></m></meta></UpArrow>
		<RightArrow><meta><m n=":csNative"><e>39</e></m></meta></RightArrow>
		<DownArrow><meta><m n=":csNative"><e>40</e></m></meta></DownArrow>
		<Select><meta><m n=":csNative"><e>41</e></m></meta></Select>
		<Print><meta><m n=":csNative"><e>42</e></m></meta></Print>
		<Execute><meta><m n=":csNative"><e>43</e></m></meta></Execute>
		<PrintScreen><meta><m n=":csNative"><e>44</e></m></meta></PrintScreen>
		<Insert><meta><m n=":csNative"><e>45</e></m></meta></Insert>
		<Delete><meta><m n=":csNative"><e>46</e></m></meta></Delete>
		<Help><meta><m n=":csNative"><e>47</e></m></meta></Help>
		<D0><meta><m n=":csNative"><e>48</e></m></meta></D0>
		<D1><meta><m n=":csNative"><e>49</e></m></meta></D1>
		<D2><meta><m n=":csNative"><e>50</e></m></meta></D2>
		<D3><meta><m n=":csNative"><e>51</e></m></meta></D3>
		<D4><meta><m n=":csNative"><e>52</e></m></meta></D4>
		<D5><meta><m n=":csNative"><e>53</e></m></meta></D5>
		<D6><meta><m n=":csNative"><e>54</e></m></meta></D6>
		<D7><meta><m n=":csNative"><e>55</e></m></meta></D7>
		<D8><meta><m n=":csNative"><e>56</e></m></meta></D8>
		<D9><meta><m n=":csNative"><e>57</e></m></meta></D9>
		<A><meta><m n=":csNative"><e>65</e></m></meta></A>
		<B><meta><m n=":csNative"><e>66</e></m></meta></B>
		<C><meta><m n=":csNative"><e>67</e></m></meta></C>
		<D><meta><m n=":csNative"><e>68</e></m></meta></D>
		<E><meta><m n=":csNative"><e>69</e></m></meta></E>
		<F><meta><m n=":csNative"><e>70</e></m></meta></F>
		<G><meta><m n=":csNative"><e>71</e></m></meta></G>
		<H><meta><m n=":csNative"><e>72</e></m></meta></H>
		<I><meta><m n=":csNative"><e>73</e></m></meta></I>
		<J><meta><m n=":csNative"><e>74</e></m></meta></J>
		<K><meta><m n=":csNative"><e>75</e></m></meta></K>
		<L><meta><m n=":csNative"><e>76</e></m></meta></L>
		<M><meta><m n=":csNative"><e>77</e></m></meta></M>
		<N><meta><m n=":csNative"><e>78</e></m></meta></N>
		<O><meta><m n=":csNative"><e>79</e></m></meta></O>
		<P><meta><m n=":csNative"><e>80</e></m></meta></P>
		<Q><meta><m n=":csNative"><e>81</e></m></meta></Q>
		<R><meta><m n=":csNative"><e>82</e></m></meta></R>
		<S><meta><m n=":csNative"><e>83</e></m></meta></S>
		<T><meta><m n=":csNative"><e>84</e></m></meta></T>
		<U><meta><m n=":csNative"><e>85</e></m></meta></U>
		<V><meta><m n=":csNative"><e>86</e></m></meta></V>
		<W><meta><m n=":csNative"><e>87</e></m></meta></W>
		<X><meta><m n=":csNative"><e>88</e></m></meta></X>
		<Y><meta><m n=":csNative"><e>89</e></m></meta></Y>
		<Z><meta><m n=":csNative"><e>90</e></m></meta></Z>
		<LeftWindows><meta><m n=":csNative"><e>91</e></m></meta></LeftWindows>
		<RightWindows><meta><m n=":csNative"><e>92</e></m></meta></RightWindows>
		<Applications><meta><m n=":csNative"><e>93</e></m></meta></Applications>
		<Sleep><meta><m n=":csNative"><e>95</e></m></meta></Sleep>
		<NumPad0><meta><m n=":csNative"><e>96</e></m></meta></NumPad0>
		<NumPad1><meta><m n=":csNative"><e>97</e></m></meta></NumPad1>
		<NumPad2><meta><m n=":csNative"><e>98</e></m></meta></NumPad2>
		<NumPad3><meta><m n=":csNative"><e>99</e></m></meta></NumPad3>
		<NumPad4><meta><m n=":csNative"><e>100</e></m></meta></NumPad4>
		<NumPad5><meta><m n=":csNative"><e>101</e></m></meta></NumPad5>
		<NumPad6><meta><m n=":csNative"><e>102</e></m></meta></NumPad6>
		<NumPad7><meta><m n=":csNative"><e>103</e></m></meta></NumPad7>
		<NumPad8><meta><m n=":csNative"><e>104</e></m></meta></NumPad8>
		<NumPad9><meta><m n=":csNative"><e>105</e></m></meta></NumPad9>
		<Multiply><meta><m n=":csNative"><e>106</e></m></meta></Multiply>
		<Add><meta><m n=":csNative"><e>107</e></m></meta></Add>
		<Separator><meta><m n=":csNative"><e>108</e></m></meta></Separator>
		<Subtract><meta><m n=":csNative"><e>109</e></m></meta></Subtract>
		<Decimal><meta><m n=":csNative"><e>110</e></m></meta></Decimal>
		<Divide><meta><m n=":csNative"><e>111</e></m></meta></Divide>
		<F1><meta><m n=":csNative"><e>112</e></m></meta></F1>
		<F2><meta><m n=":csNative"><e>113</e></m></meta></F2>
		<F3><meta><m n=":csNative"><e>114</e></m></meta></F3>
		<F4><meta><m n=":csNative"><e>115</e></m></meta></F4>
		<F5><meta><m n=":csNative"><e>116</e></m></meta></F5>
		<F6><meta><m n=":csNative"><e>117</e></m></meta></F6>
		<F7><meta><m n=":csNative"><e>118</e></m></meta></F7>
		<F8><meta><m n=":csNative"><e>119</e></m></meta></F8>
		<F9><meta><m n=":csNative"><e>120</e></m></meta></F9>
		<F10><meta><m n=":csNative"><e>121</e></m></meta></F10>
		<F11><meta><m n=":csNative"><e>122</e></m></meta></F11>
		<F12><meta><m n=":csNative"><e>123</e></m></meta></F12>
		<F13><meta><m n=":csNative"><e>124</e></m></meta></F13>
		<F14><meta><m n=":csNative"><e>125</e></m></meta></F14>
		<F15><meta><m n=":csNative"><e>126</e></m></meta></F15>
		<F16><meta><m n=":csNative"><e>127</e></m></meta></F16>
		<F17><meta><m n=":csNative"><e>128</e></m></meta></F17>
		<F18><meta><m n=":csNative"><e>129</e></m></meta></F18>
		<F19><meta><m n=":csNative"><e>130</e></m></meta></F19>
		<F20><meta><m n=":csNative"><e>131</e></m></meta></F20>
		<F21><meta><m n=":csNative"><e>132</e></m></meta></F21>
		<F22><meta><m n=":csNative"><e>133</e></m></meta></F22>
		<F23><meta><m n=":csNative"><e>134</e></m></meta></F23>
		<F24><meta><m n=":csNative"><e>135</e></m></meta></F24>
		<BrowserBack><meta><m n=":csNative"><e>166</e></m></meta></BrowserBack>
		<BrowserForward><meta><m n=":csNative"><e>167</e></m></meta></BrowserForward>
		<BrowserRefresh><meta><m n=":csNative"><e>168</e></m></meta></BrowserRefresh>
		<BrowserStop><meta><m n=":csNative"><e>169</e></m></meta></BrowserStop>
		<BrowserSearch><meta><m n=":csNative"><e>170</e></m></meta></BrowserSearch>
		<BrowserFavorites><meta><m n=":csNative"><e>171</e></m></meta></BrowserFavorites>
		<BrowserHome><meta><m n=":csNative"><e>172</e></m></meta></BrowserHome>
		<VolumeMute><meta><m n=":csNative"><e>173</e></m></meta></VolumeMute>
		<VolumeDown><meta><m n=":csNative"><e>174</e></m></meta></VolumeDown>
		<VolumeUp><meta><m n=":csNative"><e>175</e></m></meta></VolumeUp>
		<MediaNext><meta><m n=":csNative"><e>176</e></m></meta></MediaNext>
		<MediaPrevious><meta><m n=":csNative"><e>177</e></m></meta></MediaPrevious>
		<MediaStop><meta><m n=":csNative"><e>178</e></m></meta></MediaStop>
		<MediaPlay><meta><m n=":csNative"><e>179</e></m></meta></MediaPlay>
		<LaunchMail><meta><m n=":csNative"><e>180</e></m></meta></LaunchMail>
		<LaunchMediaSelect><meta><m n=":csNative"><e>181</e></m></meta></LaunchMediaSelect>
		<LaunchApp1><meta><m n=":csNative"><e>182</e></m></meta></LaunchApp1>
		<LaunchApp2><meta><m n=":csNative"><e>183</e></m></meta></LaunchApp2>
		<Oem1><meta><m n=":csNative"><e>186</e></m></meta></Oem1>
		<OemPlus><meta><m n=":csNative"><e>187</e></m></meta></OemPlus>
		<OemComma><meta><m n=":csNative"><e>188</e></m></meta></OemComma>
		<OemMinus><meta><m n=":csNative"><e>189</e></m></meta></OemMinus>
		<OemPeriod><meta><m n=":csNative"><e>190</e></m></meta></OemPeriod>
		<Oem2><meta><m n=":csNative"><e>191</e></m></meta></Oem2>
		<Oem3><meta><m n=":csNative"><e>192</e></m></meta></Oem3>
		<Oem4><meta><m n=":csNative"><e>219</e></m></meta></Oem4>
		<Oem5><meta><m n=":csNative"><e>220</e></m></meta></Oem5>
		<Oem6><meta><m n=":csNative"><e>221</e></m></meta></Oem6>
		<Oem7><meta><m n=":csNative"><e>222</e></m></meta></Oem7>
		<Oem8><meta><m n=":csNative"><e>223</e></m></meta></Oem8>
		<Oem102><meta><m n=":csNative"><e>226</e></m></meta></Oem102>
		<Process><meta><m n=":csNative"><e>229</e></m></meta></Process>
		<Packet><meta><m n=":csNative"><e>231</e></m></meta></Packet>
		<Attention><meta><m n=":csNative"><e>246</e></m></meta></Attention>
		<CrSel><meta><m n=":csNative"><e>247</e></m></meta></CrSel>
		<ExSel><meta><m n=":csNative"><e>248</e></m></meta></ExSel>
		<EraseEndOfFile><meta><m n=":csNative"><e>249</e></m></meta></EraseEndOfFile>
		<Play><meta><m n=":csNative"><e>250</e></m></meta></Play>
		<Zoom><meta><m n=":csNative"><e>251</e></m></meta></Zoom>
		<NoName><meta><m n=":csNative"><e>252</e></m></meta></NoName>
		<Pa1><meta><m n=":csNative"><e>253</e></m></meta></Pa1>
		<OemClear><meta><m n=":csNative"><e>254</e></m></meta></OemClear>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleKey"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.ConsoleKeyInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleKeyInfo" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.ConsoleKeyInfo"/>
	<c path="cs.system.ConsoleKeyInfo"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.ConsoleKeyInfo"/>
	<c path="cs.system.ConsoleKeyInfo"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Modifiers public="1" get="accessor" set="null"><e path="cs.system.ConsoleModifiers"/></Modifiers>
		<KeyChar public="1" get="accessor" set="null"><t path="cs.types.Char16"/></KeyChar>
		<Key public="1" get="accessor" set="null"><e path="cs.system.ConsoleKey"/></Key>
		<get_Key final="1" public="1" set="method"><f a=""><e path="cs.system.ConsoleKey"/></f></get_Key>
		<get_KeyChar final="1" public="1" set="method"><f a=""><t path="cs.types.Char16"/></f></get_KeyChar>
		<get_Modifiers final="1" public="1" set="method"><f a=""><e path="cs.system.ConsoleModifiers"/></f></get_Modifiers>
		<new final="1" public="1" set="method"><f a="keyChar:key:shift:alt:control">
	<t path="cs.types.Char16"/>
	<e path="cs.system.ConsoleKey"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleKeyInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.ConsoleModifiers" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleModifiers">
		<Alt><meta><m n=":csNative"><e>1</e></m></meta></Alt>
		<Shift><meta><m n=":csNative"><e>2</e></m></meta></Shift>
		<Control><meta><m n=":csNative"><e>4</e></m></meta></Control>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleModifiers"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.ConsoleSpecialKey" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ConsoleSpecialKey">
		<ControlC><meta><m n=":csNative"><e>0</e></m></meta></ControlC>
		<ControlBreak><meta><m n=":csNative"><e>1</e></m></meta></ControlBreak>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleSpecialKey"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.ContextBoundObject" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ContextBoundObject" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ContextBoundObject"</e></m>
		</meta>
	</class>
	<class path="cs.system.Convert" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Convert" extern="1" final="1">
		<DBNull public="1" set="null" static="1">
			<d/>
			<meta><m n=":readOnly"/></meta>
		</DBNull>
		<FromBase64CharArray public="1" set="method" static="1"><f a="inArray:offset:length">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></FromBase64CharArray>
		<FromBase64String public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></FromBase64String>
		<GetTypeCode public="1" set="method" static="1"><f a="value">
	<d/>
	<e path="cs.system.TypeCode"/>
</f></GetTypeCode>
		<IsDBNull public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></IsDBNull>
		<ToBase64CharArray public="1" set="method" static="1">
			<f a="inArray:offsetIn:length:outArray:offsetOut">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><ToBase64CharArray public="1" set="method"><f a="inArray:offsetIn:length:outArray:offsetOut:options">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<e path="cs.system.Base64FormattingOptions"/>
	<x path="Int"/>
</f></ToBase64CharArray></overloads>
		</ToBase64CharArray>
		<ToBase64String public="1" set="method" static="1">
			<f a="inArray">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="String"/>
			</f>
			<overloads>
				<ToBase64String public="1" set="method"><f a="inArray:offset:length:options">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.Base64FormattingOptions"/>
	<c path="String"/>
</f></ToBase64String>
				<ToBase64String public="1" set="method"><f a="inArray:options">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.Base64FormattingOptions"/>
	<c path="String"/>
</f></ToBase64String>
				<ToBase64String public="1" set="method"><f a="inArray:offset:length">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToBase64String>
			</overloads>
		</ToBase64String>
		<ToBoolean public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<ToBoolean public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Bool"/>
</f></ToBoolean>
				<ToBoolean public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Bool"/>
</f></ToBoolean>
			</overloads>
		</ToBoolean>
		<ToByte public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.UInt8"/>
			</f>
			<overloads>
				<ToByte public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
				<ToByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
			</overloads>
		</ToByte>
		<ToChar public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.Char16"/>
			</f>
			<overloads>
				<ToChar public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
				<ToChar public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.Char16"/>
</f></ToChar>
			</overloads>
		</ToChar>
		<ToDateTime public="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<overloads>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<d/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="Single"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value">
	<x path="Bool"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
				<ToDateTime public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
			</overloads>
		</ToDateTime>
		<ToDecimal public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<ToDecimal public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<d/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<x path="Single"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
				<ToDecimal public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
			</overloads>
		</ToDecimal>
		<ToDouble public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<overloads>
				<ToDouble public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<d/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Float"/>
</f></ToDouble>
				<ToDouble public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Float"/>
</f></ToDouble>
			</overloads>
		</ToDouble>
		<ToInt16 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.Int16"/>
			</f>
			<overloads>
				<ToInt16 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
				<ToInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
			</overloads>
		</ToInt16>
		<ToInt32 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<overloads>
				<ToInt32 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
</f></ToInt32>
				<ToInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Int"/>
</f></ToInt32>
			</overloads>
		</ToInt32>
		<ToInt64 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads>
				<ToInt64 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<d/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
				<ToInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="haxe.Int64"/>
</f></ToInt64>
			</overloads>
		</ToInt64>
		<ToSByte public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.Int8"/>
			</f>
			<overloads>
				<ToSByte public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
				<ToSByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
			</overloads>
		</ToSByte>
		<ToSingle public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Single"/>
			</f>
			<overloads>
				<ToSingle public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<d/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Single"/>
</f></ToSingle>
				<ToSingle public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Single"/>
</f></ToSingle>
			</overloads>
		</ToSingle>
		<ToString public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<overloads>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.UInt16"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.UInt64"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="UInt"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.Int16"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:toBase">
	<t path="cs.types.Int16"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.Int8"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<d/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="haxe.Int64"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:toBase">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="Int"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:toBase">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="Single"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<x path="Single"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="Float"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.Char16"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:toBase">
	<t path="cs.types.UInt8"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<t path="cs.types.UInt8"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a="value:provider">
	<x path="Bool"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<_ToString public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"ToString"</e></m></meta>
			<overloads>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.UInt16"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt16"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.UInt64"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="UInt"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.Int16"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:toBase">
						<t path="cs.types.Int16"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.Int8"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.Int8"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<d/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="haxe.Int64"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:toBase">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="Int"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:toBase">
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="Single"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="Float"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<c path="cs.system.Decimal"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<c path="cs.system.DateTime"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<c path="cs.system.DateTime"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.Char16"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:toBase">
						<t path="cs.types.UInt8"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<t path="cs.types.UInt8"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt8"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a="value:provider">
						<x path="Bool"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"ToString"</e></m></meta>
				</ToString>
			</overloads>
		</_ToString>
		<ToUInt16 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.UInt16"/>
			</f>
			<overloads>
				<ToUInt16 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
				<ToUInt16 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
			</overloads>
		</ToUInt16>
		<ToUInt32 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<overloads>
				<ToUInt32 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<d/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="UInt"/>
</f></ToUInt32>
				<ToUInt32 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="UInt"/>
</f></ToUInt32>
			</overloads>
		</ToUInt32>
		<ToUInt64 public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<t path="cs.types.UInt64"/>
			</f>
			<overloads>
				<ToUInt64 public="1" set="method"><f a="value:provider">
	<d/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<x path="UInt"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value:fromBase">
	<c path="String"/>
	<x path="Int"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<c path="String"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<x path="Int"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<x path="Single"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<x path="Float"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
				<ToUInt64 public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
			</overloads>
		</ToUInt64>
		<ChangeType public="1" set="method" static="1">
			<f a="value:conversionType">
				<d/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<overloads>
				<ChangeType public="1" set="method"><f a="value:typeCode:provider">
	<d/>
	<e path="cs.system.TypeCode"/>
	<c path="cs.system.IFormatProvider"/>
	<d/>
</f></ChangeType>
				<ChangeType public="1" set="method"><f a="value:conversionType:provider">
	<d/>
	<c path="cs.system.Type"/>
	<c path="cs.system.IFormatProvider"/>
	<d/>
</f></ChangeType>
				<ChangeType public="1" set="method"><f a="value:typeCode">
	<d/>
	<e path="cs.system.TypeCode"/>
	<d/>
</f></ChangeType>
			</overloads>
		</ChangeType>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Convert"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Converter_2" params="T0:T1" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" module="cs.system.Converter_2" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="input">
	<c path="cs.system.Delegate_Converter_2.T0"/>
	<c path="cs.system.Delegate_Converter_2.T1"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="input:callback:object">
	<c path="cs.system.Delegate_Converter_2.T0"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.Delegate_Converter_2.T1"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Converter`2"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Converter_2" params="T0:T1" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Converter_2">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T1"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Converter_2">
	<c path="cs.system.Converter_2.T0"/>
	<c path="cs.system.Converter_2.T1"/>
</c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Converter_2.Converter_2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" private="1" module="cs.system.Converter_2" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Converter_2.Converter_2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" private="1" module="cs.system.Converter_2" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Delegate_CrossAppDomainDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" module="cs.system.CrossAppDomainDelegate" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a=""><x path="Void"/></f></Invoke>
		<BeginInvoke public="1" set="method"><f a="callback:object">
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.CrossAppDomainDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.CrossAppDomainDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.Delegate_CrossAppDomainDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._CrossAppDomainDelegate.CrossAppDomainDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" private="1" module="cs.system.CrossAppDomainDelegate" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._CrossAppDomainDelegate.CrossAppDomainDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" private="1" module="cs.system.CrossAppDomainDelegate" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.DateTime_Which" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.DateTime" module="cs.system.DateTime">
		<Day><meta><m n=":csNative"><e>0</e></m></meta></Day>
		<DayYear><meta><m n=":csNative"><e>1</e></m></meta></DayYear>
		<Month><meta><m n=":csNative"><e>2</e></m></meta></Month>
		<Year><meta><m n=":csNative"><e>3</e></m></meta></Year>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DateTime.Which"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.DateTimeKind" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.DateTimeKind">
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Utc><meta><m n=":csNative"><e>1</e></m></meta></Utc>
		<Local><meta><m n=":csNative"><e>2</e></m></meta></Local>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DateTimeKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.DayOfWeek" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.DayOfWeek">
		<Sunday><meta><m n=":csNative"><e>0</e></m></meta></Sunday>
		<Monday><meta><m n=":csNative"><e>1</e></m></meta></Monday>
		<Tuesday><meta><m n=":csNative"><e>2</e></m></meta></Tuesday>
		<Wednesday><meta><m n=":csNative"><e>3</e></m></meta></Wednesday>
		<Thursday><meta><m n=":csNative"><e>4</e></m></meta></Thursday>
		<Friday><meta><m n=":csNative"><e>5</e></m></meta></Friday>
		<Saturday><meta><m n=":csNative"><e>6</e></m></meta></Saturday>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DayOfWeek"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Decimal" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Decimal" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Decimal"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Decimal"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<One public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</One>
		<MinusOne public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MinusOne>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<FromOACurrency public="1" set="method" static="1"><f a="cy">
	<x path="haxe.Int64"/>
	<c path="cs.system.Decimal"/>
</f></FromOACurrency>
		<GetBits public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></GetBits>
		<Negate public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Negate>
		<Add public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Add>
		<Subtract public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Subtract>
		<_Equals public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"Equals"</e></m></meta>
		</_Equals>
		<Floor public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Floor>
		<Truncate public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Truncate>
		<Round public="1" set="method" static="1">
			<f a="d:decimals">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<Round public="1" set="method"><f a="d:mode">
	<c path="cs.system.Decimal"/>
	<e path="cs.system.MidpointRounding"/>
	<c path="cs.system.Decimal"/>
</f></Round>
				<Round public="1" set="method"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Round>
				<Round public="1" set="method"><f a="d:decimals:mode">
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
	<e path="cs.system.MidpointRounding"/>
	<c path="cs.system.Decimal"/>
</f></Round>
			</overloads>
		</Round>
		<Multiply public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Multiply>
		<Divide public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Divide>
		<Remainder public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Remainder>
		<Compare public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
</f></Compare>
		<Ceiling public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></Ceiling>
		<Parse public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:style:provider">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.Decimal"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.Decimal"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:style">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.Decimal"/>
</f></Parse>
			</overloads>
		</Parse>
		<TryParse public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.Decimal"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:style:provider:result">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.Out"><c path="cs.system.Decimal"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<ToByte public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToByte>
		<ToDouble public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToDouble>
		<ToInt16 public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToInt16>
		<ToInt32 public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToInt32>
		<ToInt64 public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToInt64>
		<ToOACurrency public="1" set="method" static="1"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="haxe.Int64"/>
</f></ToOACurrency>
		<ToSByte public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.Int8"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToSByte>
		<ToSingle public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToSingle>
		<ToUInt16 public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToUInt16>
		<ToUInt32 public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToUInt32>
		<ToUInt64 public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToUInt64>
		<op_Addition public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Addition>
		<op_Decrement public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Decrement>
		<op_Increment public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Increment>
		<op_Subtraction public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Subtraction>
		<op_UnaryNegation public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_UnaryNegation>
		<op_UnaryPlus public="1" set="method" static="1"><f a="d">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_UnaryPlus>
		<op_Multiply public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Multiply>
		<op_Division public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Division>
		<op_Modulus public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
</f></op_Modulus>
		<op_Implicit public="1" set="method" static="1">
			<f a="value">
				<t path="cs.types.UInt8"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<op_Implicit public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
				<op_Implicit public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<c path="cs.system.Decimal"/>
</f></op_Implicit>
			</overloads>
		</op_Implicit>
		<op_Explicit public="1" set="method" static="1">
			<f a="value">
				<x path="Single"/>
				<c path="cs.system.Decimal"/>
			</f>
			<overloads>
				<op_Explicit public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Float"/>
</f></op_Explicit>
				<op_Explicit public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.Decimal"/>
</f></op_Explicit>
			</overloads>
		</op_Explicit>
		<op_Inequality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_Equality public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_GreaterThan public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_GreaterThan>
		<op_GreaterThanOrEqual public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_GreaterThanOrEqual>
		<op_LessThan public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_LessThan>
		<op_LessThanOrEqual public="1" set="method" static="1"><f a="d1:d2">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.Decimal"/>
	<x path="Bool"/>
</f></op_LessThanOrEqual>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<ToString final="1" public="1" set="method" override="1">
			<f a="format:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<c path="String"/>
			</f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
			</overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="lo:mid:hi:isNegative:scale">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="bits">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Decimal"</e></m>
		</meta>
	</class>
	<class path="cs.system.Enum" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Enum" extern="1" abstract="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<GetValues public="1" set="method" static="1"><f a="enumType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></GetValues>
		<GetNames public="1" set="method" static="1"><f a="enumType">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetNames>
		<GetName public="1" set="method" static="1"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<d/>
	<c path="String"/>
</f></GetName>
		<IsDefined public="1" set="method" static="1"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<d/>
	<x path="Bool"/>
</f></IsDefined>
		<GetUnderlyingType public="1" set="method" static="1"><f a="enumType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
</f></GetUnderlyingType>
		<Parse public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<d/>
			</f>
			<overloads><Parse public="1" set="method"><f a="enumType:value:ignoreCase">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></Parse></overloads>
		</Parse>
		<ToObject public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<t path="cs.types.UInt8"/>
				<d/>
			</f>
			<overloads>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<t path="cs.types.UInt64"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<x path="UInt"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<t path="cs.types.UInt16"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<t path="cs.types.Int8"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<d/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<x path="haxe.Int64"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<x path="Int"/>
	<d/>
</f></ToObject>
				<ToObject public="1" set="method"><f a="enumType:value">
	<c path="cs.system.Type"/>
	<t path="cs.types.Int16"/>
	<d/>
</f></ToObject>
			</overloads>
		</ToObject>
		<Format public="1" set="method" static="1"><f a="enumType:value:format">
	<c path="cs.system.Type"/>
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></Format>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<CompareTo final="1" public="1" set="method"><f a="target">
	<d/>
	<x path="Int"/>
</f></CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Enum"</e></m>
		</meta>
	</class>
	<enum path="cs.system.Environment_SpecialFolderOption" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Environment" module="cs.system.Environment">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<DoNotVerify><meta><m n=":csNative"><e>16384</e></m></meta></DoNotVerify>
		<Create><meta><m n=":csNative"><e>32768</e></m></meta></Create>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Environment.SpecialFolderOption"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.Environment_SpecialFolder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Environment" module="cs.system.Environment">
		<Desktop><meta><m n=":csNative"><e>0</e></m></meta></Desktop>
		<Programs><meta><m n=":csNative"><e>2</e></m></meta></Programs>
		<MyDocuments><meta><m n=":csNative"><e>5</e></m></meta></MyDocuments>
		<Personal><meta><m n=":csNative"><e>5</e></m></meta></Personal>
		<Favorites><meta><m n=":csNative"><e>6</e></m></meta></Favorites>
		<Startup><meta><m n=":csNative"><e>7</e></m></meta></Startup>
		<Recent><meta><m n=":csNative"><e>8</e></m></meta></Recent>
		<SendTo><meta><m n=":csNative"><e>9</e></m></meta></SendTo>
		<StartMenu><meta><m n=":csNative"><e>11</e></m></meta></StartMenu>
		<MyMusic><meta><m n=":csNative"><e>13</e></m></meta></MyMusic>
		<DesktopDirectory><meta><m n=":csNative"><e>16</e></m></meta></DesktopDirectory>
		<MyComputer><meta><m n=":csNative"><e>17</e></m></meta></MyComputer>
		<Templates><meta><m n=":csNative"><e>21</e></m></meta></Templates>
		<ApplicationData><meta><m n=":csNative"><e>26</e></m></meta></ApplicationData>
		<LocalApplicationData><meta><m n=":csNative"><e>28</e></m></meta></LocalApplicationData>
		<InternetCache><meta><m n=":csNative"><e>32</e></m></meta></InternetCache>
		<Cookies><meta><m n=":csNative"><e>33</e></m></meta></Cookies>
		<History><meta><m n=":csNative"><e>34</e></m></meta></History>
		<CommonApplicationData><meta><m n=":csNative"><e>35</e></m></meta></CommonApplicationData>
		<System><meta><m n=":csNative"><e>37</e></m></meta></System>
		<ProgramFiles><meta><m n=":csNative"><e>38</e></m></meta></ProgramFiles>
		<MyPictures><meta><m n=":csNative"><e>39</e></m></meta></MyPictures>
		<CommonProgramFiles><meta><m n=":csNative"><e>43</e></m></meta></CommonProgramFiles>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Environment.SpecialFolder"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Environment" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Environment" extern="1" final="1">
		<ProcessorCount public="1" get="accessor" set="null" static="1"><x path="Int"/></ProcessorCount>
		<WorkingSet public="1" get="accessor" set="null" static="1"><x path="haxe.Int64"/></WorkingSet>
		<Version public="1" get="accessor" set="null" static="1"><c path="cs.system.Version"/></Version>
		<UserName public="1" get="accessor" set="null" static="1"><c path="String"/></UserName>
		<UserInteractive public="1" get="accessor" set="null" static="1"><x path="Bool"/></UserInteractive>
		<UserDomainName public="1" get="accessor" set="null" static="1"><c path="String"/></UserDomainName>
		<TickCount public="1" get="accessor" set="null" static="1"><x path="Int"/></TickCount>
		<SystemDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></SystemDirectory>
		<StackTrace public="1" get="accessor" set="null" static="1"><c path="String"/></StackTrace>
		<OSVersion public="1" get="accessor" set="null" static="1"><c path="cs.system.OperatingSystem"/></OSVersion>
		<NewLine public="1" get="accessor" set="null" static="1"><c path="String"/></NewLine>
		<MachineName public="1" get="accessor" set="null" static="1"><c path="String"/></MachineName>
		<HasShutdownStarted public="1" get="accessor" set="null" static="1"><x path="Bool"/></HasShutdownStarted>
		<ExitCode public="1" get="accessor" set="accessor" static="1"><x path="Int"/></ExitCode>
		<CurrentDirectory public="1" get="accessor" set="accessor" static="1"><c path="String"/></CurrentDirectory>
		<CommandLine public="1" get="accessor" set="null" static="1"><c path="String"/></CommandLine>
		<get_CommandLine public="1" set="method" static="1"><f a=""><c path="String"/></f></get_CommandLine>
		<get_CurrentDirectory public="1" set="method" static="1"><f a=""><c path="String"/></f></get_CurrentDirectory>
		<set_CurrentDirectory public="1" set="method" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CurrentDirectory>
		<get_ExitCode public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_ExitCode>
		<set_ExitCode public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_ExitCode>
		<get_HasShutdownStarted public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_HasShutdownStarted>
		<get_MachineName public="1" set="method" static="1"><f a=""><c path="String"/></f></get_MachineName>
		<get_NewLine public="1" set="method" static="1"><f a=""><c path="String"/></f></get_NewLine>
		<get_OSVersion public="1" set="method" static="1"><f a=""><c path="cs.system.OperatingSystem"/></f></get_OSVersion>
		<get_StackTrace public="1" set="method" static="1"><f a=""><c path="String"/></f></get_StackTrace>
		<get_SystemDirectory public="1" set="method" static="1"><f a=""><c path="String"/></f></get_SystemDirectory>
		<get_TickCount public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_TickCount>
		<get_UserDomainName public="1" set="method" static="1"><f a=""><c path="String"/></f></get_UserDomainName>
		<get_UserInteractive public="1" set="method" static="1"><f a=""><x path="Bool"/></f></get_UserInteractive>
		<get_UserName public="1" set="method" static="1"><f a=""><c path="String"/></f></get_UserName>
		<get_Version public="1" set="method" static="1"><f a=""><c path="cs.system.Version"/></f></get_Version>
		<get_WorkingSet public="1" set="method" static="1"><f a=""><x path="haxe.Int64"/></f></get_WorkingSet>
		<Exit public="1" set="method" static="1"><f a="exitCode">
	<x path="Int"/>
	<x path="Void"/>
</f></Exit>
		<ExpandEnvironmentVariables public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></ExpandEnvironmentVariables>
		<GetCommandLineArgs public="1" set="method" static="1"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetCommandLineArgs>
		<GetEnvironmentVariable public="1" set="method" static="1">
			<f a="variable">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><GetEnvironmentVariable public="1" set="method"><f a="variable:target">
	<c path="String"/>
	<e path="cs.system.EnvironmentVariableTarget"/>
	<c path="String"/>
</f></GetEnvironmentVariable></overloads>
		</GetEnvironmentVariable>
		<GetEnvironmentVariables public="1" set="method" static="1">
			<f a=""><c path="cs.system.collections.IDictionary"/></f>
			<overloads><GetEnvironmentVariables public="1" set="method"><f a="target">
	<e path="cs.system.EnvironmentVariableTarget"/>
	<c path="cs.system.collections.IDictionary"/>
</f></GetEnvironmentVariables></overloads>
		</GetEnvironmentVariables>
		<GetFolderPath public="1" set="method" static="1"><f a="folder">
	<e path="cs.system.Environment_SpecialFolder"/>
	<c path="String"/>
</f></GetFolderPath>
		<GetLogicalDrives public="1" set="method" static="1"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetLogicalDrives>
		<SetEnvironmentVariable public="1" set="method" static="1">
			<f a="variable:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><SetEnvironmentVariable public="1" set="method"><f a="variable:value:target">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.EnvironmentVariableTarget"/>
	<x path="Void"/>
</f></SetEnvironmentVariable></overloads>
		</SetEnvironmentVariable>
		<FailFast public="1" set="method" static="1"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></FailFast>
		<get_ProcessorCount public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_ProcessorCount>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Environment"</e></m>
		</meta>
	</class>
	<enum path="cs.system.EnvironmentVariableTarget" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EnvironmentVariableTarget">
		<Process><meta><m n=":csNative"><e>0</e></m></meta></Process>
		<User><meta><m n=":csNative"><e>1</e></m></meta></User>
		<Machine><meta><m n=":csNative"><e>2</e></m></meta></Machine>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.EnvironmentVariableTarget"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Delegate_EventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" module="cs.system.EventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.EventArgs"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:e:callback:object">
	<d/>
	<c path="cs.system.EventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.EventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.EventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.EventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_EventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._EventHandler.EventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" private="1" module="cs.system.EventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._EventHandler.EventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" private="1" module="cs.system.EventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.FormatException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.FormatException" extern="1">
		<extends path="cs.system.SystemException"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.FormatException"</e></m>
		</meta>
	</class>
	<class path="cs.system.Guid_GuidParser" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Guid" module="cs.system.Guid" extern="1">
		<Parse final="1" public="1" set="method">
			<f a="format:guid">
				<e path="cs.system.Guid_Format"/>
				<t path="cs.Out"><c path="cs.system.Guid"/></t>
				<x path="Bool"/>
			</f>
			<overloads><Parse final="1" public="1" set="method"><f a="guid">
	<t path="cs.Out"><c path="cs.system.Guid"/></t>
	<x path="Bool"/>
</f></Parse></overloads>
		</Parse>
		<new final="1" public="1" set="method"><f a="src">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Guid.GuidParser"</e></m>
		</meta>
	</class>
	<enum path="cs.system.Guid_Format" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Guid" module="cs.system.Guid">
		<N><meta><m n=":csNative"><e>0</e></m></meta></N>
		<D><meta><m n=":csNative"><e>1</e></m></meta></D>
		<B><meta><m n=":csNative"><e>2</e></m></meta></B>
		<P><meta><m n=":csNative"><e>3</e></m></meta></P>
		<X><meta><m n=":csNative"><e>4</e></m></meta></X>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Guid.Format"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Guid" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Guid" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Guid"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Guid"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IFormattable"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.Guid"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<NewGuid public="1" set="method" static="1"><f a=""><c path="cs.system.Guid"/></f></NewGuid>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<x path="Bool"/>
</f></op_Inequality>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Guid"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToByteArray final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></ToByteArray>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="b">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="a:b:c:d:e:f:g:h:i:j:k">
	<x path="UInt"/>
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt16"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="a:b:c:d:e:f:g:h:i:j:k">
	<x path="Int"/>
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="a:b:c:d">
	<x path="Int"/>
	<t path="cs.types.Int16"/>
	<t path="cs.types.Int16"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="g">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Guid"</e></m>
		</meta>
	</class>
	<class path="cs.system.IAsyncResult" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IAsyncResult" extern="1" interface="1">
		<IsCompleted public="1" get="accessor" set="null"><x path="Bool"/></IsCompleted>
		<CompletedSynchronously public="1" get="accessor" set="null"><x path="Bool"/></CompletedSynchronously>
		<AsyncWaitHandle public="1" get="accessor" set="null"><c path="cs.system.threading.WaitHandle"/></AsyncWaitHandle>
		<AsyncState public="1" get="accessor" set="null"><d/></AsyncState>
		<get_AsyncState public="1" set="method"><f a=""><d/></f></get_AsyncState>
		<get_AsyncWaitHandle public="1" set="method"><f a=""><c path="cs.system.threading.WaitHandle"/></f></get_AsyncWaitHandle>
		<get_CompletedSynchronously public="1" set="method"><f a=""><x path="Bool"/></f></get_CompletedSynchronously>
		<get_IsCompleted public="1" set="method"><f a=""><x path="Bool"/></f></get_IsCompleted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IAsyncResult"</e></m>
		</meta>
	</class>
	<class path="cs.system.IFormatProvider" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IFormatProvider" extern="1" interface="1">
		<GetFormat public="1" set="method"><f a="formatType">
	<c path="cs.system.Type"/>
	<d/>
</f></GetFormat>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IFormatProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.IServiceProvider" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IServiceProvider" extern="1" interface="1">
		<GetService public="1" set="method"><f a="serviceType">
	<c path="cs.system.Type"/>
	<d/>
</f></GetService>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IServiceProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.Int32" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Int32" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><x path="Int"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="Int"/></implements>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<MinValue public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse public="1" set="method" static="1">
			<f a="s:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<x path="Int"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:style:provider">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="Int"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:style">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<x path="Int"/>
</f></Parse>
			</overloads>
		</Parse>
		<TryParse public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="Int"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:style:provider:result">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.Out"><x path="Int"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Int32"</e></m>
		</meta>
	</class>
	<class path="cs.system.Int64" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Int64" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IComparable_1"><x path="haxe.Int64"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="haxe.Int64"/></implements>
		<implements path="cs.system.IFormattable"/>
		<MinValue public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse public="1" set="method" static="1">
			<f a="s:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:style:provider">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="haxe.Int64"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:style">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<x path="haxe.Int64"/>
</f></Parse>
			</overloads>
		</Parse>
		<TryParse public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="haxe.Int64"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:style:provider:result">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.Out"><x path="haxe.Int64"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Int64"</e></m>
		</meta>
	</class>
	<class path="cs.system.IntPtr" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.IntPtr" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Size public="1" get="accessor" set="null" static="1"><x path="Int"/></Size>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.IntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<get_Size public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_Size>
		<op_Equality public="1" set="method" static="1"><f a="value1:value2">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="value1:value2">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_Explicit public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<overloads><op_Explicit public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.IntPtr"/>
</f></op_Explicit></overloads>
		</op_Explicit>
		<ToInt32 final="1" public="1" set="method"><f a=""><x path="Int"/></f></ToInt32>
		<ToInt64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></ToInt64>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads><ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IntPtr"</e></m>
		</meta>
	</class>
	<enum path="cs.system.LoaderOptimization" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.LoaderOptimization">
		<NotSpecified><meta><m n=":csNative"><e>0</e></m></meta></NotSpecified>
		<SingleDomain><meta><m n=":csNative"><e>1</e></m></meta></SingleDomain>
		<MultiDomain><meta><m n=":csNative"><e>2</e></m></meta></MultiDomain>
		<MultiDomainHost><meta><m n=":csNative"><e>3</e></m></meta></MultiDomainHost>
		<DomainMask><meta><m n=":csNative"><e>3</e></m></meta></DomainMask>
		<DisallowBindings><meta><m n=":csNative"><e>4</e></m></meta></DisallowBindings>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.LoaderOptimization"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.LocalDataStoreSlot" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.LocalDataStoreSlot" extern="1" final="1"><meta>
	<m n=":nativeGen"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.LocalDataStoreSlot"</e></m>
</meta></class>
	<class path="cs.system.MemberAccessException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.MemberAccessException" extern="1">
		<extends path="cs.system.SystemException"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="message:inner">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MemberAccessException"</e></m>
		</meta>
	</class>
	<enum path="cs.system.MidpointRounding" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.MidpointRounding">
		<ToEven><meta><m n=":csNative"><e>0</e></m></meta></ToEven>
		<AwayFromZero><meta><m n=":csNative"><e>1</e></m></meta></AwayFromZero>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.MidpointRounding"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.MissingMemberException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.MissingMemberException" extern="1">
		<extends path="cs.system.MemberAccessException"/>
		<Message public="1" get="accessor" set="null" override="1"><c path="String"/></Message>
		<Signature><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></Signature>
		<MemberName><c path="String"/></MemberName>
		<ClassName><c path="String"/></ClassName>
		<GetObjectData public="1" set="method" override="1"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<get_Message public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Message>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="className:memberName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message:inner">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MissingMemberException"</e></m>
		</meta>
	</class>
	<class path="cs.system.ModuleHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ModuleHandle" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<EmptyHandle public="1" set="null" static="1">
			<c path="cs.system.ModuleHandle"/>
			<meta><m n=":readOnly"/></meta>
		</EmptyHandle>
		<op_Equality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.ModuleHandle"/>
	<c path="cs.system.ModuleHandle"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.ModuleHandle"/>
	<c path="cs.system.ModuleHandle"/>
	<x path="Bool"/>
</f></op_Inequality>
		<MDStreamVersion public="1" get="accessor" set="null"><x path="Int"/></MDStreamVersion>
		<get_MDStreamVersion final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MDStreamVersion>
		<ResolveFieldHandle final="1" public="1" set="method">
			<f a="fieldToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeFieldHandle"/>
			</f>
			<overloads><ResolveFieldHandle final="1" public="1" set="method"><f a="fieldToken:typeInstantiationContext:methodInstantiationContext">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.system.RuntimeFieldHandle"/>
</f></ResolveFieldHandle></overloads>
		</ResolveFieldHandle>
		<ResolveMethodHandle final="1" public="1" set="method">
			<f a="methodToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeMethodHandle"/>
			</f>
			<overloads><ResolveMethodHandle final="1" public="1" set="method"><f a="methodToken:typeInstantiationContext:methodInstantiationContext">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.system.RuntimeMethodHandle"/>
</f></ResolveMethodHandle></overloads>
		</ResolveMethodHandle>
		<ResolveTypeHandle final="1" public="1" set="method">
			<f a="typeToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeTypeHandle"/>
			</f>
			<overloads><ResolveTypeHandle final="1" public="1" set="method"><f a="typeToken:typeInstantiationContext:methodInstantiationContext">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
	<c path="cs.system.RuntimeTypeHandle"/>
</f></ResolveTypeHandle></overloads>
		</ResolveTypeHandle>
		<GetRuntimeFieldHandleFromMetadataToken final="1" public="1" set="method"><f a="fieldToken">
	<x path="Int"/>
	<c path="cs.system.RuntimeFieldHandle"/>
</f></GetRuntimeFieldHandleFromMetadataToken>
		<GetRuntimeMethodHandleFromMetadataToken final="1" public="1" set="method"><f a="methodToken">
	<x path="Int"/>
	<c path="cs.system.RuntimeMethodHandle"/>
</f></GetRuntimeMethodHandleFromMetadataToken>
		<GetRuntimeTypeHandleFromMetadataToken final="1" public="1" set="method"><f a="typeToken">
	<x path="Int"/>
	<c path="cs.system.RuntimeTypeHandle"/>
</f></GetRuntimeTypeHandleFromMetadataToken>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ModuleHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.NullReferenceException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.NullReferenceException" extern="1">
		<extends path="cs.system.SystemException"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="message:innerException">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.NullReferenceException"</e></m>
		</meta>
	</class>
	<class path="cs.system.OperatingSystem" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.OperatingSystem" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<VersionString public="1" get="accessor" set="null"><c path="String"/></VersionString>
		<ServicePack public="1" get="accessor" set="null"><c path="String"/></ServicePack>
		<Version public="1" get="accessor" set="null"><c path="cs.system.Version"/></Version>
		<Platform public="1" get="accessor" set="null"><e path="cs.system.PlatformID"/></Platform>
		<get_Platform final="1" public="1" set="method"><f a=""><e path="cs.system.PlatformID"/></f></get_Platform>
		<get_Version final="1" public="1" set="method"><f a=""><c path="cs.system.Version"/></f></get_Version>
		<get_ServicePack final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ServicePack>
		<get_VersionString final="1" public="1" set="method"><f a=""><c path="String"/></f></get_VersionString>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a="platform:version">
	<e path="cs.system.PlatformID"/>
	<c path="cs.system.Version"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.OperatingSystem"</e></m>
		</meta>
	</class>
	<enum path="cs.system.PlatformID" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.PlatformID">
		<Win32S><meta><m n=":csNative"><e>0</e></m></meta></Win32S>
		<Win32Windows><meta><m n=":csNative"><e>1</e></m></meta></Win32Windows>
		<Win32NT><meta><m n=":csNative"><e>2</e></m></meta></Win32NT>
		<WinCE><meta><m n=":csNative"><e>3</e></m></meta></WinCE>
		<Unix><meta><m n=":csNative"><e>4</e></m></meta></Unix>
		<Xbox><meta><m n=":csNative"><e>5</e></m></meta></Xbox>
		<MacOSX><meta><m n=":csNative"><e>6</e></m></meta></MacOSX>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.PlatformID"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Delegate_Predicate_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" module="cs.system.Predicate_1" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="obj">
	<c path="cs.system.Delegate_Predicate_1.T0"/>
	<x path="Bool"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="obj:callback:object">
	<c path="cs.system.Delegate_Predicate_1.T0"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Bool"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Predicate`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Predicate_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Predicate_1.Predicate_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" private="1" module="cs.system.Predicate_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._Predicate_1.Predicate_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" private="1" module="cs.system.Predicate_1" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.ResolveEventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<new final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ResolveEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_ResolveEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" module="cs.system.ResolveEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:args">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:args:callback:object">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.reflection.Assembly"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ResolveEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.ResolveEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Assembly"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_ResolveEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._ResolveEventHandler.ResolveEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" private="1" module="cs.system.ResolveEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._ResolveEventHandler.ResolveEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" private="1" module="cs.system.ResolveEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.RuntimeFieldHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.RuntimeFieldHandle" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.RuntimeFieldHandle"/>
	<c path="cs.system.RuntimeFieldHandle"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.RuntimeFieldHandle"/>
	<c path="cs.system.RuntimeFieldHandle"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Value>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeFieldHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.RuntimeMethodHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.RuntimeMethodHandle" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.RuntimeMethodHandle"/>
	<c path="cs.system.RuntimeMethodHandle"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.RuntimeMethodHandle"/>
	<c path="cs.system.RuntimeMethodHandle"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Value>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetFunctionPointer final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></GetFunctionPointer>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeMethodHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.RuntimeTypeHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.RuntimeTypeHandle" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeTypeHandle"/>
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><op_Equality public="1" set="method"><f a="left:right">
	<d/>
	<c path="cs.system.RuntimeTypeHandle"/>
	<x path="Bool"/>
</f></op_Equality></overloads>
		</op_Equality>
		<op_Inequality public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeTypeHandle"/>
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><op_Inequality public="1" set="method"><f a="left:right">
	<d/>
	<c path="cs.system.RuntimeTypeHandle"/>
	<x path="Bool"/>
</f></op_Inequality></overloads>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Value>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetModuleHandle final="1" public="1" set="method"><f a=""><c path="cs.system.ModuleHandle"/></f></GetModuleHandle>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeTypeHandle"</e></m>
		</meta>
	</class>
	<enum path="cs.system.StringComparison" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.StringComparison">
		<CurrentCulture><meta><m n=":csNative"><e>0</e></m></meta></CurrentCulture>
		<CurrentCultureIgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></CurrentCultureIgnoreCase>
		<InvariantCulture><meta><m n=":csNative"><e>2</e></m></meta></InvariantCulture>
		<InvariantCultureIgnoreCase><meta><m n=":csNative"><e>3</e></m></meta></InvariantCultureIgnoreCase>
		<Ordinal><meta><m n=":csNative"><e>4</e></m></meta></Ordinal>
		<OrdinalIgnoreCase><meta><m n=":csNative"><e>5</e></m></meta></OrdinalIgnoreCase>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.StringComparison"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.StringSplitOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.StringSplitOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<RemoveEmptyEntries><meta><m n=":csNative"><e>1</e></m></meta></RemoveEmptyEntries>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.StringSplitOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TimeSpan_Parser" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" module="cs.system.TimeSpan" extern="1">
		<AtEnd public="1" get="accessor" set="null"><x path="Bool"/></AtEnd>
		<get_AtEnd final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_AtEnd>
		<Execute final="1" public="1" set="method"><f a="tryParse:result">
	<x path="Bool"/>
	<t path="cs.Out"><c path="cs.system.TimeSpan"/></t>
	<x path="Bool"/>
</f></Execute>
		<new final="1" public="1" set="method"><f a="src">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeSpan.Parser"</e></m>
		</meta>
	</class>
	<enum path="cs.system.TimeSpan_ParseError" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" module="cs.system.TimeSpan">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Format><meta><m n=":csNative"><e>1</e></m></meta></Format>
		<Overflow><meta><m n=":csNative"><e>2</e></m></meta></Overflow>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.TimeSpan.ParseError"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TimeSpan" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.TimeSpan"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.TimeSpan"/></implements>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<TicksPerSecond public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerSecond>
		<TicksPerMinute public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerMinute>
		<TicksPerMillisecond public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerMillisecond>
		<TicksPerHour public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerHour>
		<TicksPerDay public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerDay>
		<Compare public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Int"/>
</f></Compare>
		<_Equals public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"Equals"</e></m></meta>
		</_Equals>
		<FromDays public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<c path="cs.system.TimeSpan"/>
</f></FromDays>
		<FromHours public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<c path="cs.system.TimeSpan"/>
</f></FromHours>
		<FromMinutes public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<c path="cs.system.TimeSpan"/>
</f></FromMinutes>
		<FromSeconds public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<c path="cs.system.TimeSpan"/>
</f></FromSeconds>
		<FromMilliseconds public="1" set="method" static="1"><f a="value">
	<x path="Float"/>
	<c path="cs.system.TimeSpan"/>
</f></FromMilliseconds>
		<FromTicks public="1" set="method" static="1"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.TimeSpan"/>
</f></FromTicks>
		<Parse public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="cs.system.TimeSpan"/>
</f></Parse>
		<TryParse public="1" set="method" static="1"><f a="s:result">
	<c path="String"/>
	<t path="cs.Out"><c path="cs.system.TimeSpan"/></t>
	<x path="Bool"/>
</f></TryParse>
		<op_Addition public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></op_Addition>
		<op_Equality public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_GreaterThan public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_GreaterThan>
		<op_GreaterThanOrEqual public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_GreaterThanOrEqual>
		<op_Inequality public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_LessThan public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_LessThan>
		<op_LessThanOrEqual public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></op_LessThanOrEqual>
		<op_Subtraction public="1" set="method" static="1"><f a="t1:t2">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></op_Subtraction>
		<op_UnaryNegation public="1" set="method" static="1"><f a="t">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></op_UnaryNegation>
		<op_UnaryPlus public="1" set="method" static="1"><f a="t">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></op_UnaryPlus>
		<TotalSeconds public="1" get="accessor" set="null"><x path="Float"/></TotalSeconds>
		<TotalMinutes public="1" get="accessor" set="null"><x path="Float"/></TotalMinutes>
		<TotalMilliseconds public="1" get="accessor" set="null"><x path="Float"/></TotalMilliseconds>
		<TotalHours public="1" get="accessor" set="null"><x path="Float"/></TotalHours>
		<TotalDays public="1" get="accessor" set="null"><x path="Float"/></TotalDays>
		<Ticks public="1" get="accessor" set="null"><x path="haxe.Int64"/></Ticks>
		<Seconds public="1" get="accessor" set="null"><x path="Int"/></Seconds>
		<Minutes public="1" get="accessor" set="null"><x path="Int"/></Minutes>
		<Milliseconds public="1" get="accessor" set="null"><x path="Int"/></Milliseconds>
		<Hours public="1" get="accessor" set="null"><x path="Int"/></Hours>
		<Days public="1" get="accessor" set="null"><x path="Int"/></Days>
		<get_Days final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Days>
		<get_Hours final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Hours>
		<get_Milliseconds final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Milliseconds>
		<get_Minutes final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Minutes>
		<get_Seconds final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Seconds>
		<get_Ticks final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Ticks>
		<get_TotalDays final="1" public="1" set="method"><f a=""><x path="Float"/></f></get_TotalDays>
		<get_TotalHours final="1" public="1" set="method"><f a=""><x path="Float"/></f></get_TotalHours>
		<get_TotalMilliseconds final="1" public="1" set="method"><f a=""><x path="Float"/></f></get_TotalMilliseconds>
		<get_TotalMinutes final="1" public="1" set="method"><f a=""><x path="Float"/></f></get_TotalMinutes>
		<get_TotalSeconds final="1" public="1" set="method"><f a=""><x path="Float"/></f></get_TotalSeconds>
		<Add final="1" public="1" set="method"><f a="ts">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></Add>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.TimeSpan"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<Duration final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></Duration>
		<Negate final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></Negate>
		<Subtract final="1" public="1" set="method"><f a="ts">
	<c path="cs.system.TimeSpan"/>
	<c path="cs.system.TimeSpan"/>
</f></Subtract>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a="ticks">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="days:hours:minutes:seconds:milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="days:hours:minutes:seconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="hours:minutes:seconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeSpan"</e></m>
		</meta>
	</class>
	<class path="cs.system.TimeZone" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TimeZone" extern="1" abstract="1">
		<CurrentTimeZone public="1" get="accessor" set="null" static="1"><c path="cs.system.TimeZone"/></CurrentTimeZone>
		<get_CurrentTimeZone public="1" set="method" static="1"><f a=""><c path="cs.system.TimeZone"/></f></get_CurrentTimeZone>
		<IsDaylightSavingTime public="1" set="method" static="1"><f a="time:daylightTimes">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.globalization.DaylightTime"/>
	<x path="Bool"/>
</f></IsDaylightSavingTime>
		<_IsDaylightSavingTime public="1" set="method" static="1">
			<f a="time:daylightTimes">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.globalization.DaylightTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"IsDaylightSavingTime"</e></m></meta>
		</_IsDaylightSavingTime>
		<StandardName public="1" get="accessor" set="null"><c path="String"/></StandardName>
		<DaylightName public="1" get="accessor" set="null"><c path="String"/></DaylightName>
		<get_DaylightName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_DaylightName>
		<get_StandardName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_StandardName>
		<GetDaylightChanges abstract="1" public="1" set="method"><f a="year">
	<x path="Int"/>
	<c path="cs.system.globalization.DaylightTime"/>
</f></GetDaylightChanges>
		<GetUtcOffset abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.TimeSpan"/>
</f></GetUtcOffset>
		<IsDaylightSavingTime public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Bool"/>
</f></IsDaylightSavingTime>
		<ToLocalTime public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></ToLocalTime>
		<ToUniversalTime public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></ToUniversalTime>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeZone"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ICustomAttributeProvider" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ICustomAttributeProvider" extern="1" interface="1">
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ICustomAttributeProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._MemberInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MemberInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MemberInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MemberInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberInfo" extern="1" abstract="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._MemberInfo"/>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<Module public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<get_DeclaringType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_MemberType abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Name abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_Module public="1" set="method"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<IsDefined abstract="1" public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes abstract="1" public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes abstract="1" public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<get_MetadataToken public="1" set="method"><f a=""><x path="Int"/></f></get_MetadataToken>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MemberInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.IReflect" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.IReflect" extern="1" interface="1">
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<get_UnderlyingSystemType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<GetField public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField>
		<GetFields public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields>
		<GetMember public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
		<GetMembers public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers>
		<GetMethod public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<overloads><GetMethod public="1" set="method"><f a="name:bindingAttr:binder:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod></overloads>
		</GetMethod>
		<GetMethods public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods>
		<GetProperties public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties>
		<GetProperty public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<overloads><GetProperty public="1" set="method"><f a="name:bindingAttr:binder:returnType:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty></overloads>
		</GetProperty>
		<InvokeMember public="1" set="method"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.IReflect"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Type" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Type" extern="1" interface="1">
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<TypeInitializer public="1" get="accessor" set="null"><c path="cs.system.reflection.ConstructorInfo"/></TypeInitializer>
		<TypeHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></Module>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsValueType public="1" get="accessor" set="null"><x path="Bool"/></IsValueType>
		<IsUnicodeClass public="1" get="accessor" set="null"><x path="Bool"/></IsUnicodeClass>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsSerializable public="1" get="accessor" set="null"><x path="Bool"/></IsSerializable>
		<IsSealed public="1" get="accessor" set="null"><x path="Bool"/></IsSealed>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrimitive public="1" get="accessor" set="null"><x path="Bool"/></IsPrimitive>
		<IsPointer public="1" get="accessor" set="null"><x path="Bool"/></IsPointer>
		<IsNotPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNotPublic>
		<IsNestedPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPublic>
		<IsNestedPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPrivate>
		<IsNestedFamORAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamORAssem>
		<IsNestedFamily public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamily>
		<IsNestedFamANDAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamANDAssem>
		<IsNestedAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsNestedAssembly>
		<IsMarshalByRef public="1" get="accessor" set="null"><x path="Bool"/></IsMarshalByRef>
		<IsLayoutSequential public="1" get="accessor" set="null"><x path="Bool"/></IsLayoutSequential>
		<IsInterface public="1" get="accessor" set="null"><x path="Bool"/></IsInterface>
		<IsImport public="1" get="accessor" set="null"><x path="Bool"/></IsImport>
		<IsExplicitLayout public="1" get="accessor" set="null"><x path="Bool"/></IsExplicitLayout>
		<IsEnum public="1" get="accessor" set="null"><x path="Bool"/></IsEnum>
		<IsContextful public="1" get="accessor" set="null"><x path="Bool"/></IsContextful>
		<IsCOMObject public="1" get="accessor" set="null"><x path="Bool"/></IsCOMObject>
		<IsClass public="1" get="accessor" set="null"><x path="Bool"/></IsClass>
		<IsByRef public="1" get="accessor" set="null"><x path="Bool"/></IsByRef>
		<IsAutoLayout public="1" get="accessor" set="null"><x path="Bool"/></IsAutoLayout>
		<IsAutoClass public="1" get="accessor" set="null"><x path="Bool"/></IsAutoClass>
		<IsArray public="1" get="accessor" set="null"><x path="Bool"/></IsArray>
		<IsAnsiClass public="1" get="accessor" set="null"><x path="Bool"/></IsAnsiClass>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<HasElementType public="1" get="accessor" set="null"><x path="Bool"/></HasElementType>
		<GUID public="1" get="accessor" set="null"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null"><c path="cs.system.Type"/></BaseType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.TypeAttributes"/></Attributes>
		<AssemblyQualifiedName public="1" get="accessor" set="null"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<FindInterfaces public="1" set="method"><f a="filter:filterCriteria">
	<x path="cs.system.reflection.TypeFilter"/>
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></FindInterfaces>
		<FindMembers public="1" set="method"><f a="memberType:bindingAttr:filter:filterCriteria">
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></FindMembers>
		<GetArrayRank public="1" set="method"><f a=""><x path="Int"/></f></GetArrayRank>
		<GetConstructor public="1" set="method">
			<f a="types">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<overloads>
				<GetConstructor public="1" set="method"><f a="bindingAttr:binder:callConvention:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.ConstructorInfo"/>
</f></GetConstructor>
				<GetConstructor public="1" set="method"><f a="bindingAttr:binder:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.ConstructorInfo"/>
</f></GetConstructor>
			</overloads>
		</GetConstructor>
		<GetConstructors public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c></f>
			<overloads><GetConstructors public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
</f></GetConstructors></overloads>
		</GetConstructors>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetDefaultMembers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f></GetDefaultMembers>
		<GetElementType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetElementType>
		<GetEvent public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<overloads><GetEvent public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.EventInfo"/>
</f></GetEvent></overloads>
		</GetEvent>
		<GetEvents public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<overloads><GetEvents public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
</f></GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<overloads><GetField public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField></overloads>
		</GetField>
		<GetFields public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<overloads><GetFields public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields></overloads>
		</GetFields>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<GetInterface public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads><GetInterface public="1" set="method"><f a="name:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetInterface></overloads>
		</GetInterface>
		<GetInterfaceMap public="1" set="method"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.InterfaceMapping"/>
</f></GetInterfaceMap>
		<GetInterfaces public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetInterfaces>
		<GetMember public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<overloads>
				<GetMember public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
				<GetMember public="1" set="method"><f a="name:type:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
			</overloads>
		</GetMember>
		<GetMembers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<overloads><GetMembers public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers></overloads>
		</GetMembers>
		<GetMethod public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<overloads>
				<GetMethod public="1" set="method"><f a="name:bindingAttr:binder:callConvention:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod public="1" set="method"><f a="name:bindingAttr:binder:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod public="1" set="method"><f a="name:types:modifiers">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod public="1" set="method"><f a="name:types">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
			</overloads>
		</GetMethod>
		<GetMethods public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<overloads><GetMethods public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods></overloads>
		</GetMethods>
		<GetNestedType public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads><GetNestedType public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.Type"/>
</f></GetNestedType></overloads>
		</GetNestedType>
		<GetNestedTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<overloads><GetNestedTypes public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetNestedTypes></overloads>
		</GetNestedTypes>
		<GetProperties public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c></f>
			<overloads><GetProperties public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties></overloads>
		</GetProperties>
		<GetProperty public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<overloads>
				<GetProperty public="1" set="method"><f a="name:bindingAttr:binder:returnType:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty public="1" set="method"><f a="name:returnType:types:modifiers">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty public="1" set="method"><f a="name:returnType:types">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty public="1" set="method"><f a="name:types">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty public="1" set="method"><f a="name:returnType">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
			</overloads>
		</GetProperty>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<InvokeMember public="1" set="method">
			<f a="name:invokeAttr:binder:target:args">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<overloads>
				<InvokeMember public="1" set="method"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
				<InvokeMember public="1" set="method"><f a="name:invokeAttr:binder:target:args:culture">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></InvokeMember>
			</overloads>
		</InvokeMember>
		<IsAssignableFrom public="1" set="method"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsAssignableFrom>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<IsInstanceOfType public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></IsInstanceOfType>
		<IsSubclassOf public="1" set="method"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsSubclassOf>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Assembly public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_AssemblyQualifiedName public="1" set="method"><f a=""><c path="String"/></f></get_AssemblyQualifiedName>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.TypeAttributes"/></f></get_Attributes>
		<get_BaseType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_BaseType>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_FullName public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_GUID public="1" set="method"><f a=""><c path="cs.system.Guid"/></f></get_GUID>
		<get_HasElementType public="1" set="method"><f a=""><x path="Bool"/></f></get_HasElementType>
		<get_IsAbstract public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsAnsiClass public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAnsiClass>
		<get_IsArray public="1" set="method"><f a=""><x path="Bool"/></f></get_IsArray>
		<get_IsAutoClass public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAutoClass>
		<get_IsAutoLayout public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAutoLayout>
		<get_IsByRef public="1" set="method"><f a=""><x path="Bool"/></f></get_IsByRef>
		<get_IsClass public="1" set="method"><f a=""><x path="Bool"/></f></get_IsClass>
		<get_IsCOMObject public="1" set="method"><f a=""><x path="Bool"/></f></get_IsCOMObject>
		<get_IsContextful public="1" set="method"><f a=""><x path="Bool"/></f></get_IsContextful>
		<get_IsEnum public="1" set="method"><f a=""><x path="Bool"/></f></get_IsEnum>
		<get_IsExplicitLayout public="1" set="method"><f a=""><x path="Bool"/></f></get_IsExplicitLayout>
		<get_IsImport public="1" set="method"><f a=""><x path="Bool"/></f></get_IsImport>
		<get_IsInterface public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInterface>
		<get_IsLayoutSequential public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLayoutSequential>
		<get_IsMarshalByRef public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMarshalByRef>
		<get_IsNestedAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedAssembly>
		<get_IsNestedFamANDAssem public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamANDAssem>
		<get_IsNestedFamily public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamily>
		<get_IsNestedFamORAssem public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamORAssem>
		<get_IsNestedPrivate public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedPrivate>
		<get_IsNestedPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedPublic>
		<get_IsNotPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNotPublic>
		<get_IsPointer public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPointer>
		<get_IsPrimitive public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrimitive>
		<get_IsPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSealed public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSealed>
		<get_IsSerializable public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSerializable>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsUnicodeClass public="1" set="method"><f a=""><x path="Bool"/></f></get_IsUnicodeClass>
		<get_IsValueType public="1" set="method"><f a=""><x path="Bool"/></f></get_IsValueType>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Module public="1" set="method"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Namespace public="1" set="method"><f a=""><c path="String"/></f></get_Namespace>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_TypeHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeTypeHandle"/></f></get_TypeHandle>
		<get_TypeInitializer public="1" set="method"><f a=""><c path="cs.system.reflection.ConstructorInfo"/></f></get_TypeInitializer>
		<get_UnderlyingSystemType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Type"</e></m>
		</meta>
	</class>
	<class path="cs.system.Type" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Type" extern="1" abstract="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.reflection.IReflect"/>
		<implements path="cs.system.runtime.interopservices._Type"/>
		<DefaultBinder public="1" get="accessor" set="null" static="1"><c path="cs.system.reflection.Binder"/></DefaultBinder>
		<Missing public="1" set="null" static="1">
			<d/>
			<meta><m n=":readOnly"/></meta>
		</Missing>
		<FilterNameIgnoreCase public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterNameIgnoreCase>
		<FilterName public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterName>
		<FilterAttribute public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterAttribute>
		<EmptyTypes public="1" set="null" static="1">
			<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			<meta><m n=":readOnly"/></meta>
		</EmptyTypes>
		<Delimiter public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</Delimiter>
		<get_DefaultBinder public="1" set="method" static="1"><f a=""><c path="cs.system.reflection.Binder"/></f></get_DefaultBinder>
		<GetType public="1" set="method" static="1">
			<f a="typeName">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads>
				<GetType public="1" set="method"><f a="typeName:throwOnError:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
				<GetType public="1" set="method"><f a="typeName:throwOnError">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
			</overloads>
		</GetType>
		<_GetType public="1" set="method" static="1">
			<f a="typeName">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":native"><e>"GetType"</e></m></meta>
			<overloads>
				<GetType public="1" set="method">
					<f a="typeName:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":native"><e>"GetType"</e></m></meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="typeName:throwOnError">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":native"><e>"GetType"</e></m></meta>
				</GetType>
			</overloads>
		</_GetType>
		<GetTypeArray public="1" set="method" static="1"><f a="args">
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetTypeArray>
		<GetTypeCode public="1" set="method" static="1"><f a="type">
	<c path="cs.system.Type"/>
	<e path="cs.system.TypeCode"/>
</f></GetTypeCode>
		<GetTypeFromCLSID public="1" set="method" static="1">
			<f a="clsid">
				<c path="cs.system.Guid"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads>
				<GetTypeFromCLSID public="1" set="method"><f a="clsid:server:throwOnError">
	<c path="cs.system.Guid"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromCLSID>
				<GetTypeFromCLSID public="1" set="method"><f a="clsid:server">
	<c path="cs.system.Guid"/>
	<c path="String"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromCLSID>
				<GetTypeFromCLSID public="1" set="method"><f a="clsid:throwOnError">
	<c path="cs.system.Guid"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromCLSID>
			</overloads>
		</GetTypeFromCLSID>
		<GetTypeFromHandle public="1" set="method" static="1"><f a="handle">
	<c path="cs.system.RuntimeTypeHandle"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromHandle>
		<GetTypeFromProgID public="1" set="method" static="1">
			<f a="progID">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads>
				<GetTypeFromProgID public="1" set="method"><f a="progID:server:throwOnError">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromProgID>
				<GetTypeFromProgID public="1" set="method"><f a="progID:server">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromProgID>
				<GetTypeFromProgID public="1" set="method"><f a="progID:throwOnError">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetTypeFromProgID>
			</overloads>
		</GetTypeFromProgID>
		<GetTypeHandle public="1" set="method" static="1"><f a="o">
	<d/>
	<c path="cs.system.RuntimeTypeHandle"/>
</f></GetTypeHandle>
		<ReflectionOnlyGetType public="1" set="method" static="1"><f a="typeName:throwIfNotFound:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></ReflectionOnlyGetType>
		<StructLayoutAttribute public="1" get="accessor" set="null"><c path="cs.system.runtime.interopservices.StructLayoutAttribute"/></StructLayoutAttribute>
		<DeclaringMethod public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterAttributes public="1" get="accessor" set="null"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<GenericParameterPosition public="1" get="accessor" set="null"><x path="Int"/></GenericParameterPosition>
		<IsVisible public="1" get="accessor" set="null"><x path="Bool"/></IsVisible>
		<IsNested public="1" get="accessor" set="null"><x path="Bool"/></IsNested>
		<IsGenericParameter public="1" get="accessor" set="null"><x path="Bool"/></IsGenericParameter>
		<IsGenericType public="1" get="accessor" set="null"><x path="Bool"/></IsGenericType>
		<IsGenericTypeDefinition public="1" get="accessor" set="null"><x path="Bool"/></IsGenericTypeDefinition>
		<ContainsGenericParameters public="1" get="accessor" set="null"><x path="Bool"/></ContainsGenericParameters>
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<TypeInitializer public="1" get="accessor" set="null"><c path="cs.system.reflection.ConstructorInfo"/></TypeInitializer>
		<TypeHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null"><c path="String"/></Namespace>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsValueType public="1" get="accessor" set="null"><x path="Bool"/></IsValueType>
		<IsUnicodeClass public="1" get="accessor" set="null"><x path="Bool"/></IsUnicodeClass>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsSerializable public="1" get="accessor" set="null"><x path="Bool"/></IsSerializable>
		<IsSealed public="1" get="accessor" set="null"><x path="Bool"/></IsSealed>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrimitive public="1" get="accessor" set="null"><x path="Bool"/></IsPrimitive>
		<IsPointer public="1" get="accessor" set="null"><x path="Bool"/></IsPointer>
		<IsNotPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNotPublic>
		<IsNestedPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPublic>
		<IsNestedPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPrivate>
		<IsNestedFamORAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamORAssem>
		<IsNestedFamily public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamily>
		<IsNestedFamANDAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamANDAssem>
		<IsNestedAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsNestedAssembly>
		<IsMarshalByRef public="1" get="accessor" set="null"><x path="Bool"/></IsMarshalByRef>
		<IsLayoutSequential public="1" get="accessor" set="null"><x path="Bool"/></IsLayoutSequential>
		<IsInterface public="1" get="accessor" set="null"><x path="Bool"/></IsInterface>
		<IsImport public="1" get="accessor" set="null"><x path="Bool"/></IsImport>
		<IsExplicitLayout public="1" get="accessor" set="null"><x path="Bool"/></IsExplicitLayout>
		<IsEnum public="1" get="accessor" set="null"><x path="Bool"/></IsEnum>
		<IsContextful public="1" get="accessor" set="null"><x path="Bool"/></IsContextful>
		<IsCOMObject public="1" get="accessor" set="null"><x path="Bool"/></IsCOMObject>
		<IsClass public="1" get="accessor" set="null"><x path="Bool"/></IsClass>
		<IsByRef public="1" get="accessor" set="null"><x path="Bool"/></IsByRef>
		<IsAutoLayout public="1" get="accessor" set="null"><x path="Bool"/></IsAutoLayout>
		<IsAutoClass public="1" get="accessor" set="null"><x path="Bool"/></IsAutoClass>
		<IsArray public="1" get="accessor" set="null"><x path="Bool"/></IsArray>
		<IsAnsiClass public="1" get="accessor" set="null"><x path="Bool"/></IsAnsiClass>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<HasElementType public="1" get="accessor" set="null"><x path="Bool"/></HasElementType>
		<GUID public="1" get="accessor" set="null"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null"><c path="cs.system.Type"/></BaseType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.TypeAttributes"/></Attributes>
		<AssemblyQualifiedName public="1" get="accessor" set="null"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<get_Assembly abstract="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_AssemblyQualifiedName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_AssemblyQualifiedName>
		<get_Attributes final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.TypeAttributes"/></f></get_Attributes>
		<get_BaseType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_BaseType>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_FullName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_GUID abstract="1" public="1" set="method"><f a=""><c path="cs.system.Guid"/></f></get_GUID>
		<get_HasElementType final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_HasElementType>
		<get_IsAbstract final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsAnsiClass final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAnsiClass>
		<get_IsArray final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsArray>
		<get_IsAutoClass final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAutoClass>
		<get_IsAutoLayout final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAutoLayout>
		<get_IsByRef final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsByRef>
		<get_IsClass final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsClass>
		<get_IsCOMObject final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsCOMObject>
		<get_IsContextful final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsContextful>
		<get_IsEnum final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsEnum>
		<get_IsExplicitLayout final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsExplicitLayout>
		<get_IsImport final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsImport>
		<get_IsInterface final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInterface>
		<get_IsLayoutSequential final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLayoutSequential>
		<get_IsMarshalByRef final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMarshalByRef>
		<get_IsNestedAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedAssembly>
		<get_IsNestedFamANDAssem final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamANDAssem>
		<get_IsNestedFamily final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamily>
		<get_IsNestedFamORAssem final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedFamORAssem>
		<get_IsNestedPrivate final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedPrivate>
		<get_IsNestedPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNestedPublic>
		<get_IsNotPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNotPublic>
		<get_IsPointer final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPointer>
		<get_IsPrimitive final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrimitive>
		<get_IsPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSealed final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSealed>
		<get_IsSerializable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSerializable>
		<get_IsSpecialName final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsUnicodeClass final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsUnicodeClass>
		<get_IsValueType final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsValueType>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Module abstract="1" public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<get_Namespace abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_Namespace>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_TypeHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeTypeHandle"/></f></get_TypeHandle>
		<get_TypeInitializer final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.ConstructorInfo"/></f></get_TypeInitializer>
		<get_UnderlyingSystemType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<GetType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<IsSubclassOf public="1" set="method"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsSubclassOf>
		<FindInterfaces public="1" set="method"><f a="filter:filterCriteria">
	<x path="cs.system.reflection.TypeFilter"/>
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></FindInterfaces>
		<GetInterface final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads><GetInterface abstract="1" public="1" set="method"><f a="name:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetInterface></overloads>
		</GetInterface>
		<GetInterfaceMap public="1" set="method"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.InterfaceMapping"/>
</f></GetInterfaceMap>
		<GetInterfaces abstract="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetInterfaces>
		<IsAssignableFrom public="1" set="method"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsAssignableFrom>
		<IsInstanceOfType public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></IsInstanceOfType>
		<GetArrayRank public="1" set="method"><f a=""><x path="Int"/></f></GetArrayRank>
		<GetElementType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetElementType>
		<GetEvent final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<overloads><GetEvent abstract="1" public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.EventInfo"/>
</f></GetEvent></overloads>
		</GetEvent>
		<GetEvents public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<overloads><GetEvents abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
</f></GetEvents></overloads>
		</GetEvents>
		<GetField final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<overloads><GetField abstract="1" public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField></overloads>
		</GetField>
		<GetFields final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<overloads><GetFields abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields></overloads>
		</GetFields>
		<GetMember final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<overloads>
				<GetMember public="1" set="method"><f a="name:type:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
				<GetMember public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
			</overloads>
		</GetMember>
		<GetMembers final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<overloads><GetMembers abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers></overloads>
		</GetMembers>
		<GetMethod final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<overloads>
				<GetMethod final="1" public="1" set="method"><f a="name:bindingAttr:binder:callConvention:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod final="1" public="1" set="method"><f a="name:bindingAttr:binder:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod final="1" public="1" set="method"><f a="name:types:modifiers">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod final="1" public="1" set="method"><f a="name:types">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod final="1" public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
			</overloads>
		</GetMethod>
		<GetMethodImpl abstract="1" set="method">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetMethods final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<overloads><GetMethods abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods></overloads>
		</GetMethods>
		<GetNestedType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads><GetNestedType abstract="1" public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.Type"/>
</f></GetNestedType></overloads>
		</GetNestedType>
		<GetNestedTypes final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<overloads><GetNestedTypes abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetNestedTypes></overloads>
		</GetNestedTypes>
		<GetProperties final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c></f>
			<overloads><GetProperties abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties></overloads>
		</GetProperties>
		<GetProperty final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<overloads>
				<GetProperty final="1" public="1" set="method"><f a="name:bindingAttr:binder:returnType:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty final="1" public="1" set="method"><f a="name:returnType:types:modifiers">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty final="1" public="1" set="method"><f a="name:returnType:types">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty final="1" public="1" set="method"><f a="name:types">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty final="1" public="1" set="method"><f a="name:returnType">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
				<GetProperty final="1" public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></GetProperty>
			</overloads>
		</GetProperty>
		<GetPropertyImpl abstract="1" set="method">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetPropertyImpl>
		<GetConstructorImpl abstract="1" set="method">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetConstructorImpl>
		<GetAttributeFlagsImpl abstract="1" set="method">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":protected"/></meta>
		</GetAttributeFlagsImpl>
		<HasElementTypeImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</HasElementTypeImpl>
		<IsArrayImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsArrayImpl>
		<IsByRefImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsByRefImpl>
		<IsCOMObjectImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsCOMObjectImpl>
		<IsPointerImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPointerImpl>
		<IsPrimitiveImpl abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsValueTypeImpl>
		<IsContextfulImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsContextfulImpl>
		<IsMarshalByRefImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsMarshalByRefImpl>
		<GetConstructor final="1" public="1" set="method">
			<f a="types">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<overloads>
				<GetConstructor final="1" public="1" set="method"><f a="bindingAttr:binder:callConvention:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.ConstructorInfo"/>
</f></GetConstructor>
				<GetConstructor final="1" public="1" set="method"><f a="bindingAttr:binder:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.ConstructorInfo"/>
</f></GetConstructor>
			</overloads>
		</GetConstructor>
		<GetConstructors final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c></f>
			<overloads><GetConstructors abstract="1" public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
</f></GetConstructors></overloads>
		</GetConstructors>
		<GetDefaultMembers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f></GetDefaultMembers>
		<FindMembers public="1" set="method"><f a="memberType:bindingAttr:filter:filterCriteria">
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></FindMembers>
		<InvokeMember final="1" public="1" set="method">
			<f a="name:invokeAttr:binder:target:args">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<overloads>
				<InvokeMember abstract="1" public="1" set="method"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
				<InvokeMember final="1" public="1" set="method"><f a="name:invokeAttr:binder:target:args:culture">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></InvokeMember>
			</overloads>
		</InvokeMember>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetGenericArguments public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<get_ContainsGenericParameters public="1" set="method"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_IsGenericTypeDefinition public="1" set="method"><f a=""><x path="Bool"/></f></get_IsGenericTypeDefinition>
		<GetGenericTypeDefinition public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetGenericTypeDefinition>
		<get_IsGenericType public="1" set="method"><f a=""><x path="Bool"/></f></get_IsGenericType>
		<MakeGenericType public="1" set="method"><f a="typeArguments">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.Type"/>
</f></MakeGenericType>
		<get_IsGenericParameter public="1" set="method"><f a=""><x path="Bool"/></f></get_IsGenericParameter>
		<get_IsNested final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNested>
		<get_IsVisible final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsVisible>
		<get_GenericParameterPosition public="1" set="method"><f a=""><x path="Int"/></f></get_GenericParameterPosition>
		<get_GenericParameterAttributes public="1" set="method"><f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f></get_GenericParameterAttributes>
		<GetGenericParameterConstraints public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericParameterConstraints>
		<get_DeclaringMethod public="1" set="method"><f a=""><c path="cs.system.reflection.MethodBase"/></f></get_DeclaringMethod>
		<MakeArrayType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<overloads><MakeArrayType public="1" set="method"><f a="rank">
	<x path="Int"/>
	<c path="cs.system.Type"/>
</f></MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></MakeByRefType>
		<MakePointerType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></MakePointerType>
		<get_StructLayoutAttribute public="1" set="method"><f a=""><c path="cs.system.runtime.interopservices.StructLayoutAttribute"/></f></get_StructLayoutAttribute>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Type"</e></m>
		</meta>
	</class>
	<enum path="cs.system.TypeCode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TypeCode">
		<Empty><meta><m n=":csNative"><e>0</e></m></meta></Empty>
		<Object><meta><m n=":csNative"><e>1</e></m></meta></Object>
		<DBNull><meta><m n=":csNative"><e>2</e></m></meta></DBNull>
		<Boolean><meta><m n=":csNative"><e>3</e></m></meta></Boolean>
		<Char><meta><m n=":csNative"><e>4</e></m></meta></Char>
		<SByte><meta><m n=":csNative"><e>5</e></m></meta></SByte>
		<Byte><meta><m n=":csNative"><e>6</e></m></meta></Byte>
		<Int16><meta><m n=":csNative"><e>7</e></m></meta></Int16>
		<UInt16><meta><m n=":csNative"><e>8</e></m></meta></UInt16>
		<Int32><meta><m n=":csNative"><e>9</e></m></meta></Int32>
		<UInt32><meta><m n=":csNative"><e>10</e></m></meta></UInt32>
		<Int64><meta><m n=":csNative"><e>11</e></m></meta></Int64>
		<UInt64><meta><m n=":csNative"><e>12</e></m></meta></UInt64>
		<Single><meta><m n=":csNative"><e>13</e></m></meta></Single>
		<Double><meta><m n=":csNative"><e>14</e></m></meta></Double>
		<Decimal><meta><m n=":csNative"><e>15</e></m></meta></Decimal>
		<DateTime><meta><m n=":csNative"><e>16</e></m></meta></DateTime>
		<String><meta><m n=":csNative"><e>18</e></m></meta></String>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.TypeCode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TypedReference" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.TypedReference" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<GetTargetType public="1" set="method" static="1"><f a="value">
	<c path="cs.system.TypedReference"/>
	<c path="cs.system.Type"/>
</f></GetTargetType>
		<MakeTypedReference public="1" set="method" static="1"><f a="target:flds">
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	<c path="cs.system.TypedReference"/>
</f></MakeTypedReference>
		<SetTypedReference public="1" set="method" static="1"><f a="target:value">
	<c path="cs.system.TypedReference"/>
	<d/>
	<x path="Void"/>
</f></SetTypedReference>
		<TargetTypeToken public="1" set="method" static="1"><f a="value">
	<c path="cs.system.TypedReference"/>
	<c path="cs.system.RuntimeTypeHandle"/>
</f></TargetTypeToken>
		<ToObject public="1" set="method" static="1"><f a="value">
	<c path="cs.system.TypedReference"/>
	<d/>
</f></ToObject>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TypedReference"</e></m>
		</meta>
	</class>
	<class path="cs.system.UInt32" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UInt32" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<implements path="cs.system.IComparable_1"><x path="UInt"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="UInt"/></implements>
		<MinValue public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="UInt"/>
			</f>
			<overloads>
				<Parse public="1" set="method"><f a="s:style">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<x path="UInt"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="UInt"/>
</f></Parse>
				<Parse public="1" set="method"><f a="s:style:provider">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<x path="UInt"/>
</f></Parse>
			</overloads>
		</Parse>
		<TryParse public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Bool"/>
			</f>
			<overloads><TryParse public="1" set="method"><f a="s:style:provider:result">
	<c path="String"/>
	<e path="cs.system.globalization.NumberStyles"/>
	<c path="cs.system.IFormatProvider"/>
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Bool"/>
</f></TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<overloads>
				<ToString final="1" public="1" set="method"><f a="format:provider">
	<c path="String"/>
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></ToString>
				<ToString final="1" public="1" set="method"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
</f></ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method"><f a=""><e path="cs.system.TypeCode"/></f></GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UInt32"</e></m>
		</meta>
	</class>
	<class path="cs.system.UIntPtr" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UIntPtr" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Size public="1" get="accessor" set="null" static="1"><x path="Int"/></Size>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.UIntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<get_Size public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_Size>
		<op_Equality public="1" set="method" static="1"><f a="value1:value2">
	<c path="cs.system.UIntPtr"/>
	<c path="cs.system.UIntPtr"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="value1:value2">
	<c path="cs.system.UIntPtr"/>
	<c path="cs.system.UIntPtr"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_Explicit public="1" set="method" static="1">
			<f a="value">
				<t path="cs.types.UInt64"/>
				<c path="cs.system.UIntPtr"/>
			</f>
			<overloads><op_Explicit public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.system.UIntPtr"/>
</f></op_Explicit></overloads>
		</op_Explicit>
		<ToUInt32 final="1" public="1" set="method"><f a=""><x path="UInt"/></f></ToUInt32>
		<ToUInt64 final="1" public="1" set="method"><f a=""><t path="cs.types.UInt64"/></f></ToUInt64>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a="value">
				<t path="cs.types.UInt64"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UIntPtr"</e></m>
		</meta>
	</class>
	<class path="cs.system.UnhandledExceptionEventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<IsTerminating public="1" get="accessor" set="null"><x path="Bool"/></IsTerminating>
		<ExceptionObject public="1" get="accessor" set="null"><d/></ExceptionObject>
		<get_ExceptionObject final="1" public="1" set="method"><f a=""><d/></f></get_ExceptionObject>
		<get_IsTerminating final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsTerminating>
		<new final="1" public="1" set="method"><f a="exception:isTerminating">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UnhandledExceptionEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_UnhandledExceptionEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" module="cs.system.UnhandledExceptionEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.UnhandledExceptionEventArgs"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:e:callback:object">
	<d/>
	<c path="cs.system.UnhandledExceptionEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UnhandledExceptionEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.UnhandledExceptionEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.UnhandledExceptionEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_UnhandledExceptionEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._UnhandledExceptionEventHandler.UnhandledExceptionEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" private="1" module="cs.system.UnhandledExceptionEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system._UnhandledExceptionEventHandler.UnhandledExceptionEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" private="1" module="cs.system.UnhandledExceptionEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.Uri_UriScheme" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.Uri" module="cs.system.Uri" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<defaultPort public="1"><x path="Int"/></defaultPort>
		<delimiter public="1"><c path="String"/></delimiter>
		<scheme public="1"><c path="String"/></scheme>
		<new final="1" public="1" set="method"><f a="s:d:p">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Uri.UriScheme"</e></m>
		</meta>
	</class>
	<class path="cs.system.Uri" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.Uri" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<UriSchemeNetTcp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNetTcp>
		<UriSchemeNetPipe public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNetPipe>
		<UriSchemeNntp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNntp>
		<UriSchemeNews public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNews>
		<UriSchemeMailto public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeMailto>
		<UriSchemeHttps public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeHttps>
		<UriSchemeHttp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeHttp>
		<UriSchemeGopher public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeGopher>
		<UriSchemeFtp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeFtp>
		<UriSchemeFile public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeFile>
		<SchemeDelimiter public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</SchemeDelimiter>
		<CheckHostName public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<e path="cs.system.UriHostNameType"/>
</f></CheckHostName>
		<CheckSchemeName public="1" set="method" static="1"><f a="schemeName">
	<c path="String"/>
	<x path="Bool"/>
</f></CheckSchemeName>
		<FromHex public="1" set="method" static="1"><f a="digit">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
</f></FromHex>
		<HexEscape public="1" set="method" static="1"><f a="character">
	<t path="cs.types.Char16"/>
	<c path="String"/>
</f></HexEscape>
		<HexUnescape public="1" set="method" static="1"><f a="pattern:index">
	<c path="String"/>
	<t path="cs.Ref"><x path="Int"/></t>
	<t path="cs.types.Char16"/>
</f></HexUnescape>
		<IsHexDigit public="1" set="method" static="1"><f a="digit">
	<t path="cs.types.Char16"/>
	<x path="Bool"/>
</f></IsHexDigit>
		<IsHexEncoding public="1" set="method" static="1"><f a="pattern:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsHexEncoding>
		<EscapeString set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":protected"/></meta>
		</EscapeString>
		<IsExcludedCharacter set="method" static="1">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsExcludedCharacter>
		<Compare public="1" set="method" static="1"><f a="uri1:uri2:partsToCompare:compareFormat:comparisonType">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
	<e path="cs.system.UriComponents"/>
	<e path="cs.system.UriFormat"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></Compare>
		<EscapeDataString public="1" set="method" static="1"><f a="stringToEscape">
	<c path="String"/>
	<c path="String"/>
</f></EscapeDataString>
		<EscapeUriString public="1" set="method" static="1"><f a="stringToEscape">
	<c path="String"/>
	<c path="String"/>
</f></EscapeUriString>
		<IsWellFormedUriString public="1" set="method" static="1"><f a="uriString:uriKind">
	<c path="String"/>
	<e path="cs.system.UriKind"/>
	<x path="Bool"/>
</f></IsWellFormedUriString>
		<TryCreate public="1" set="method" static="1">
			<f a="uriString:uriKind:result">
				<c path="String"/>
				<e path="cs.system.UriKind"/>
				<t path="cs.Out"><c path="cs.system.Uri"/></t>
				<x path="Bool"/>
			</f>
			<overloads>
				<TryCreate public="1" set="method"><f a="baseUri:relativeUri:result">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
	<t path="cs.Out"><c path="cs.system.Uri"/></t>
	<x path="Bool"/>
</f></TryCreate>
				<TryCreate public="1" set="method"><f a="baseUri:relativeUri:result">
	<c path="cs.system.Uri"/>
	<c path="String"/>
	<t path="cs.Out"><c path="cs.system.Uri"/></t>
	<x path="Bool"/>
</f></TryCreate>
			</overloads>
		</TryCreate>
		<UnescapeDataString public="1" set="method" static="1"><f a="stringToUnescape">
	<c path="String"/>
	<c path="String"/>
</f></UnescapeDataString>
		<op_Equality public="1" set="method" static="1"><f a="u1:u2">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="u1:u2">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
	<x path="Bool"/>
</f></op_Inequality>
		<OriginalString public="1" get="accessor" set="null"><c path="String"/></OriginalString>
		<IsAbsoluteUri public="1" get="accessor" set="null"><x path="Bool"/></IsAbsoluteUri>
		<DnsSafeHost public="1" get="accessor" set="null"><c path="String"/></DnsSafeHost>
		<UserInfo public="1" get="accessor" set="null"><c path="String"/></UserInfo>
		<UserEscaped public="1" get="accessor" set="null"><x path="Bool"/></UserEscaped>
		<Segments public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></Segments>
		<Scheme public="1" get="accessor" set="null"><c path="String"/></Scheme>
		<Query public="1" get="accessor" set="null"><c path="String"/></Query>
		<Port public="1" get="accessor" set="null"><x path="Int"/></Port>
		<PathAndQuery public="1" get="accessor" set="null"><c path="String"/></PathAndQuery>
		<LocalPath public="1" get="accessor" set="null"><c path="String"/></LocalPath>
		<IsUnc public="1" get="accessor" set="null"><x path="Bool"/></IsUnc>
		<IsLoopback public="1" get="accessor" set="null"><x path="Bool"/></IsLoopback>
		<IsFile public="1" get="accessor" set="null"><x path="Bool"/></IsFile>
		<IsDefaultPort public="1" get="accessor" set="null"><x path="Bool"/></IsDefaultPort>
		<HostNameType public="1" get="accessor" set="null"><e path="cs.system.UriHostNameType"/></HostNameType>
		<Host public="1" get="accessor" set="null"><c path="String"/></Host>
		<Fragment public="1" get="accessor" set="null"><c path="String"/></Fragment>
		<Authority public="1" get="accessor" set="null"><c path="String"/></Authority>
		<AbsoluteUri public="1" get="accessor" set="null"><c path="String"/></AbsoluteUri>
		<AbsolutePath public="1" get="accessor" set="null"><c path="String"/></AbsolutePath>
		<get_AbsolutePath final="1" public="1" set="method"><f a=""><c path="String"/></f></get_AbsolutePath>
		<get_AbsoluteUri final="1" public="1" set="method"><f a=""><c path="String"/></f></get_AbsoluteUri>
		<get_Authority final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Authority>
		<get_Fragment final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Fragment>
		<get_Host final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Host>
		<get_HostNameType final="1" public="1" set="method"><f a=""><e path="cs.system.UriHostNameType"/></f></get_HostNameType>
		<get_IsDefaultPort final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsDefaultPort>
		<get_IsFile final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFile>
		<get_IsLoopback final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLoopback>
		<get_IsUnc final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsUnc>
		<get_LocalPath final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LocalPath>
		<get_PathAndQuery final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PathAndQuery>
		<get_Port final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Port>
		<get_Query final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Query>
		<get_Scheme final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Scheme>
		<get_Segments final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_Segments>
		<get_UserEscaped final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_UserEscaped>
		<get_UserInfo final="1" public="1" set="method"><f a=""><c path="String"/></f></get_UserInfo>
		<get_DnsSafeHost final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DnsSafeHost>
		<get_IsAbsoluteUri final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbsoluteUri>
		<get_OriginalString final="1" public="1" set="method"><f a=""><c path="String"/></f></get_OriginalString>
		<Canonicalize set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</Canonicalize>
		<CheckSecurity set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</CheckSecurity>
		<GetLeftPart final="1" public="1" set="method"><f a="part">
	<e path="cs.system.UriPartial"/>
	<c path="String"/>
</f></GetLeftPart>
		<MakeRelativeUri final="1" public="1" set="method"><f a="uri">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
</f></MakeRelativeUri>
		<MakeRelative final="1" public="1" set="method"><f a="toUri">
	<c path="cs.system.Uri"/>
	<c path="String"/>
</f></MakeRelative>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetObjectData>
		<Escape set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</Escape>
		<Parse set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</Parse>
		<Unescape set="method">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Unescape>
		<IsBadFileSystemCharacter set="method">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsBadFileSystemCharacter>
		<IsReservedCharacter set="method">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsReservedCharacter>
		<GetComponents final="1" public="1" set="method"><f a="components:format">
	<e path="cs.system.UriComponents"/>
	<e path="cs.system.UriFormat"/>
	<c path="String"/>
</f></GetComponents>
		<IsBaseOf final="1" public="1" set="method"><f a="uri">
	<c path="cs.system.Uri"/>
	<x path="Bool"/>
</f></IsBaseOf>
		<IsWellFormedOriginalString final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsWellFormedOriginalString>
		<new final="1" public="1" set="method">
			<f a="uriString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="baseUri:relativeUri:dontEscape">
	<c path="cs.system.Uri"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="baseUri:relativeUri">
	<c path="cs.system.Uri"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="uriString:dontEscape">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="baseUri:relativeUri">
	<c path="cs.system.Uri"/>
	<c path="cs.system.Uri"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="uriString:uriKind">
	<c path="String"/>
	<e path="cs.system.UriKind"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="serializationInfo:streamingContext">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Uri"</e></m>
		</meta>
	</class>
	<enum path="cs.system.UriComponents" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.UriComponents">
		<SerializationInfoString><meta><m n=":csNative"><e>-2147483648</e></m></meta></SerializationInfoString>
		<Scheme><meta><m n=":csNative"><e>1</e></m></meta></Scheme>
		<UserInfo><meta><m n=":csNative"><e>2</e></m></meta></UserInfo>
		<Host><meta><m n=":csNative"><e>4</e></m></meta></Host>
		<Port><meta><m n=":csNative"><e>8</e></m></meta></Port>
		<SchemeAndServer><meta><m n=":csNative"><e>13</e></m></meta></SchemeAndServer>
		<Path><meta><m n=":csNative"><e>16</e></m></meta></Path>
		<Query><meta><m n=":csNative"><e>32</e></m></meta></Query>
		<PathAndQuery><meta><m n=":csNative"><e>48</e></m></meta></PathAndQuery>
		<HttpRequestUrl><meta><m n=":csNative"><e>61</e></m></meta></HttpRequestUrl>
		<Fragment><meta><m n=":csNative"><e>64</e></m></meta></Fragment>
		<AbsoluteUri><meta><m n=":csNative"><e>127</e></m></meta></AbsoluteUri>
		<StrongPort><meta><m n=":csNative"><e>128</e></m></meta></StrongPort>
		<HostAndPort><meta><m n=":csNative"><e>132</e></m></meta></HostAndPort>
		<StrongAuthority><meta><m n=":csNative"><e>134</e></m></meta></StrongAuthority>
		<KeepDelimiter><meta><m n=":csNative"><e>1073741824</e></m></meta></KeepDelimiter>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriComponents"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriFormat" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.UriFormat">
		<UriEscaped><meta><m n=":csNative"><e>1</e></m></meta></UriEscaped>
		<Unescaped><meta><m n=":csNative"><e>2</e></m></meta></Unescaped>
		<SafeUnescaped><meta><m n=":csNative"><e>3</e></m></meta></SafeUnescaped>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriFormat"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriHostNameType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.UriHostNameType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<Basic><meta><m n=":csNative"><e>1</e></m></meta></Basic>
		<Dns><meta><m n=":csNative"><e>2</e></m></meta></Dns>
		<IPv4><meta><m n=":csNative"><e>3</e></m></meta></IPv4>
		<IPv6><meta><m n=":csNative"><e>4</e></m></meta></IPv6>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriHostNameType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriKind" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.UriKind">
		<RelativeOrAbsolute><meta><m n=":csNative"><e>0</e></m></meta></RelativeOrAbsolute>
		<Absolute><meta><m n=":csNative"><e>1</e></m></meta></Absolute>
		<Relative><meta><m n=":csNative"><e>2</e></m></meta></Relative>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriPartial" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.UriPartial">
		<Scheme><meta><m n=":csNative"><e>0</e></m></meta></Scheme>
		<Authority><meta><m n=":csNative"><e>1</e></m></meta></Authority>
		<Path><meta><m n=":csNative"><e>2</e></m></meta></Path>
		<Query><meta><m n=":csNative"><e>3</e></m></meta></Query>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriPartial"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Version" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.Version" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Version"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Version"/></implements>
		<op_Equality public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_Inequality>
		<op_GreaterThan public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_GreaterThan>
		<op_GreaterThanOrEqual public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_GreaterThanOrEqual>
		<op_LessThan public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_LessThan>
		<op_LessThanOrEqual public="1" set="method" static="1"><f a="v1:v2">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
	<x path="Bool"/>
</f></op_LessThanOrEqual>
		<MinorRevision public="1" get="accessor" set="null"><t path="cs.types.Int16"/></MinorRevision>
		<MajorRevision public="1" get="accessor" set="null"><t path="cs.types.Int16"/></MajorRevision>
		<Revision public="1" get="accessor" set="null"><x path="Int"/></Revision>
		<Minor public="1" get="accessor" set="null"><x path="Int"/></Minor>
		<Major public="1" get="accessor" set="null"><x path="Int"/></Major>
		<Build public="1" get="accessor" set="null"><x path="Int"/></Build>
		<get_Build final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Build>
		<get_Major final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Major>
		<get_Minor final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Minor>
		<get_Revision final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Revision>
		<get_MajorRevision final="1" public="1" set="method"><f a=""><t path="cs.types.Int16"/></f></get_MajorRevision>
		<get_MinorRevision final="1" public="1" set="method"><f a=""><t path="cs.types.Int16"/></f></get_MinorRevision>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<CompareTo final="1" public="1" set="method">
			<f a="version">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><CompareTo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Version"/>
	<x path="Int"/>
</f></CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToString final="1" public="1" set="method"><f a="fieldCount">
	<x path="Int"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="major:minor:build:revision">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="major:minor:build">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="major:minor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="version">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Version"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<m_InnerList><c path="cs.system.collections.IList"/></m_InnerList>
		<get_Item public="1" set="method"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<get_IsFixedSize public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<Add public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></IndexOf>
		<Insert public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<Remove public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<new final="1" public="1" set="method"><f a="innerList">
	<c path="cs.system.collections.IList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_FixedSizeListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ListWrapper"/>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<ErrorMessage get="null" set="null"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":protected"/></meta>
		</get_ErrorMessage>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<new final="1" public="1" set="method"><f a="innerList">
	<c path="cs.system.collections.IList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.FixedSizeListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ReadOnlyListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList_FixedSizeListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<ErrorMessage get="null" set="null" override="1"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":protected"/></meta>
		</get_ErrorMessage>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<new final="1" public="1" set="method"><f a="innerList">
	<c path="cs.system.collections.IList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ReadOnlyListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SynchronizedListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList_ListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method" override="1"><f a=""><d/></f></get_SyncRoot>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></IndexOf>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<CopyTo public="1" set="method" override="1"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator public="1" set="method" override="1"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<new final="1" public="1" set="method"><f a="innerList">
	<c path="cs.system.collections.IList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SynchronizedListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<Adapter public="1" set="method" static="1"><f a="list">
	<c path="cs.system.collections.IList"/>
	<c path="cs.system.collections.ArrayList"/>
</f></Adapter>
		<Synchronized public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<overloads><Synchronized public="1" set="method"><f a="list">
	<c path="cs.system.collections.IList"/>
	<c path="cs.system.collections.IList"/>
</f></Synchronized></overloads>
		</Synchronized>
		<ReadOnly public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<overloads><ReadOnly public="1" set="method"><f a="list">
	<c path="cs.system.collections.IList"/>
	<c path="cs.system.collections.IList"/>
</f></ReadOnly></overloads>
		</ReadOnly>
		<FixedSize public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<overloads><FixedSize public="1" set="method"><f a="list">
	<c path="cs.system.collections.IList"/>
	<c path="cs.system.collections.IList"/>
</f></FixedSize></overloads>
		</FixedSize>
		<Repeat public="1" set="method" static="1"><f a="value:count">
	<d/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></Repeat>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Item public="1" set="method"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_Capacity public="1" set="method"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_IsFixedSize public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<Add public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="item">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method"><f a="obj">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<Reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<CopyTo public="1" set="method">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CopyTo public="1" set="method"><f a="index:array:arrayIndex:count">
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
				<CopyTo public="1" set="method"><f a="array:arrayIndex">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<overloads><GetEnumerator public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IEnumerator"/>
</f></GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<BinarySearch public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" set="method"><f a="index:count:value:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="value:comparer">
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<GetRange public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></GetRange>
		<SetRange public="1" set="method"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></SetRange>
		<TrimToSize public="1" set="method"><f a=""><x path="Void"/></f></TrimToSize>
		<Sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<overloads><ToArray public="1" set="method"><f a="type">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></ToArray></overloads>
		</ToArray>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList"/>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<m_InnerArrayList><c path="cs.system.collections.ArrayList"/></m_InnerArrayList>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_Capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method" override="1"><f a=""><d/></f></get_SyncRoot>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CopyTo public="1" set="method"><f a="index:array:arrayIndex:count">
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
				<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<overloads><GetEnumerator public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IEnumerator"/>
</f></GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" set="method"><f a="index:count:value:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="value:comparer">
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1"><f a=""><d/></f></Clone>
		<GetRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></GetRange>
		<TrimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<overloads><ToArray public="1" set="method"><f a="elementType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method"><f a="innerArrayList">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_RangedArrayList" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_Capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CopyTo public="1" set="method"><f a="index:array:arrayIndex:count">
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
				<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<overloads><GetEnumerator public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IEnumerator"/>
</f></GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" set="method"><f a="index:count:value:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="value:comparer">
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1"><f a=""><d/></f></Clone>
		<GetRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></GetRange>
		<TrimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<overloads><ToArray public="1" set="method"><f a="elementType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method"><f a="innerList:index:count">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.RangedArrayList"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_FixedSizeArrayListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<ErrorMessage get="null" set="null"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":protected"/></meta>
		</get_ErrorMessage>
		<get_Capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<AddRange public="1" set="method" override="1"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<TrimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></TrimToSize>
		<new final="1" public="1" set="method"><f a="innerList">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.FixedSizeArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ReadOnlyArrayListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList_FixedSizeArrayListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<ErrorMessage get="null" set="null" override="1"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":protected"/></meta>
		</get_ErrorMessage>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></SetRange>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<new final="1" public="1" set="method"><f a="innerArrayList">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ReadOnlyArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SynchronizedArrayListWrapper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_Capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method" override="1"><f a=""><d/></f></get_SyncRoot>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CopyTo public="1" set="method"><f a="index:array:arrayIndex:count">
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
				<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<overloads><GetEnumerator public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IEnumerator"/>
</f></GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" set="method"><f a="index:count:value:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="value:comparer">
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1"><f a=""><d/></f></Clone>
		<GetRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></GetRange>
		<TrimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<overloads><ToArray public="1" set="method"><f a="elementType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></ToArray></overloads>
		</ToArray>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SynchronizedArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListAdapter_EnumeratorWithRange" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" public="1" set="method"><f a="enumerator:index:count">
	<c path="cs.system.collections.IEnumerator"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListAdapter.EnumeratorWithRange"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListAdapter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<extends path="cs.system.collections.ArrayList"/>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Item public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_Capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_SyncRoot public="1" set="method" override="1"><f a=""><d/></f></get_SyncRoot>
		<Add public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Int"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="value:startIndex:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="value:startIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1"><f a="index:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></Insert>
		<InsertRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></InsertRange>
		<Remove public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Void"/>
</f></Remove>
		<RemoveAt public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<RemoveRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Reverse public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1"><f a="index:c">
	<x path="Int"/>
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CopyTo public="1" set="method"><f a="index:array:arrayIndex:count">
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
				<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
			</overloads>
		</CopyTo>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<overloads><GetEnumerator public="1" set="method"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IEnumerator"/>
</f></GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1"><f a="c">
	<c path="cs.system.collections.ICollection"/>
	<x path="Void"/>
</f></AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<overloads>
				<BinarySearch public="1" set="method"><f a="index:count:value:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
				<BinarySearch public="1" set="method"><f a="value:comparer">
	<d/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Int"/>
</f></BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1"><f a=""><d/></f></Clone>
		<GetRange public="1" set="method" override="1"><f a="index:count">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.ArrayList"/>
</f></GetRange>
		<TrimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Sort public="1" set="method"><f a="index:count:comparer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
				<Sort public="1" set="method"><f a="comparer">
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<overloads><ToArray public="1" set="method"><f a="elementType">
	<c path="cs.system.Type"/>
	<c path="cs.system.Array"/>
</f></ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method"><f a="adaptee">
	<c path="cs.system.collections.IList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListAdapter"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SimpleEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" public="1" set="method"><f a="list">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SimpleEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" public="1" set="method">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="list:index:count">
	<c path="cs.system.collections.ArrayList"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.DictionaryEntry" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.DictionaryEntry" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Value public="1" get="accessor" set="accessor"><d/></Value>
		<Key public="1" get="accessor" set="accessor"><d/></Key>
		<get_Key final="1" public="1" set="method"><f a=""><d/></f></get_Key>
		<set_Key final="1" public="1" set="method"><f a="value">
	<d/>
	<d/>
</f></set_Key>
		<get_Value final="1" public="1" set="method"><f a=""><d/></f></get_Value>
		<set_Value final="1" public="1" set="method"><f a="value">
	<d/>
	<d/>
</f></set_Value>
		<new final="1" public="1" set="method"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.DictionaryEntry"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IDictionary" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IDictionary" extern="1" interface="1">
		<extends path="cs.system.collections.ICollection"/>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><d/></extends>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<get_IsFixedSize public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Item public="1" set="method"><f a="key">
	<d/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<get_Keys public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Keys>
		<get_Values public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Values>
		<Add public="1" set="method"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="key">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f></GetEnumerator>
		<Remove public="1" set="method"><f a="key">
	<d/>
	<x path="Void"/>
</f></Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IDictionary"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.IDeserializationCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IDeserializationCallback" extern="1" interface="1">
		<OnDeserialization public="1" set="method"><f a="sender">
	<d/>
	<x path="Void"/>
</f></OnDeserialization>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IDeserializationCallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IDictionary"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Synchronized public="1" set="method" static="1"><f a="table">
	<c path="cs.system.collections.Hashtable"/>
	<c path="cs.system.collections.Hashtable"/>
</f></Synchronized>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<EqualityComparer get="null" set="null"><c path="cs.system.collections.IEqualityComparer"/></EqualityComparer>
		<hcp get="null" set="null"><c path="cs.system.collections.IHashCodeProvider"/></hcp>
		<comparer get="null" set="null"><c path="cs.system.collections.IComparer"/></comparer>
		<set_comparer final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.IComparer"/>
				<c path="cs.system.collections.IComparer"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_comparer>
		<get_comparer final="1" set="method">
			<f a=""><c path="cs.system.collections.IComparer"/></f>
			<meta><m n=":protected"/></meta>
		</get_comparer>
		<set_hcp final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.IHashCodeProvider"/>
				<c path="cs.system.collections.IHashCodeProvider"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_hcp>
		<get_hcp final="1" set="method">
			<f a=""><c path="cs.system.collections.IHashCodeProvider"/></f>
			<meta><m n=":protected"/></meta>
		</get_hcp>
		<get_EqualityComparer final="1" set="method">
			<f a=""><c path="cs.system.collections.IEqualityComparer"/></f>
			<meta><m n=":protected"/></meta>
		</get_EqualityComparer>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<get_IsFixedSize public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Keys public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Keys>
		<get_Values public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Values>
		<get_Item public="1" set="method"><f a="key">
	<d/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<CopyTo public="1" set="method"><f a="array:arrayIndex">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<Add public="1" set="method"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="key">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetEnumerator>
		<Remove public="1" set="method"><f a="key">
	<d/>
	<x path="Void"/>
</f></Remove>
		<ContainsKey public="1" set="method"><f a="key">
	<d/>
	<x path="Bool"/>
</f></ContainsKey>
		<ContainsValue public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></ContainsValue>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<OnDeserialization public="1" set="method"><f a="sender">
	<d/>
	<x path="Void"/>
</f></OnDeserialization>
		<GetHash set="method">
			<f a="key">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetHash>
		<KeyEquals set="method">
			<f a="item:key">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</KeyEquals>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="capacity:loadFactor:equalityComparer">
	<x path="Int"/>
	<x path="Single"/>
	<c path="cs.system.collections.IEqualityComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity:equalityComparer">
	<x path="Int"/>
	<c path="cs.system.collections.IEqualityComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="equalityComparer">
	<c path="cs.system.collections.IEqualityComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d:loadFactor:equalityComparer">
	<c path="cs.system.collections.IDictionary"/>
	<x path="Single"/>
	<c path="cs.system.collections.IEqualityComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d:equalityComparer">
	<c path="cs.system.collections.IDictionary"/>
	<c path="cs.system.collections.IEqualityComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="hcp:comparer">
	<c path="cs.system.collections.IHashCodeProvider"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d:hcp:comparer">
	<c path="cs.system.collections.IDictionary"/>
	<c path="cs.system.collections.IHashCodeProvider"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d">
	<c path="cs.system.collections.IDictionary"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d:loadFactor">
	<c path="cs.system.collections.IDictionary"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="d:loadFactor:hcp:comparer">
	<c path="cs.system.collections.IDictionary"/>
	<x path="Single"/>
	<c path="cs.system.collections.IHashCodeProvider"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity:hcp:comparer">
	<x path="Int"/>
	<c path="cs.system.collections.IHashCodeProvider"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity:loadFactor">
	<x path="Int"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity:loadFactor:hcp:comparer">
	<x path="Int"/>
	<x path="Single"/>
	<c path="cs.system.collections.IHashCodeProvider"/>
	<c path="cs.system.collections.IComparer"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_SyncHashtable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<extends path="cs.system.collections.Hashtable"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<Values public="1" get="accessor" set="null" override="1"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null" override="1"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<GetObjectData public="1" set="method" override="1"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<get_Count public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method" override="1"><f a=""><d/></f></get_SyncRoot>
		<get_IsFixedSize public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsFixedSize>
		<get_IsReadOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_Keys public="1" set="method" override="1"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Keys>
		<get_Values public="1" set="method" override="1"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Values>
		<get_Item public="1" set="method" override="1"><f a="key">
	<d/>
	<d/>
</f></get_Item>
		<set_Item public="1" set="method" override="1"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></set_Item>
		<CopyTo public="1" set="method" override="1"><f a="array:arrayIndex">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<Add public="1" set="method" override="1"><f a="key:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></Add>
		<Clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method" override="1"><f a="key">
	<d/>
	<x path="Bool"/>
</f></Contains>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetEnumerator>
		<Remove public="1" set="method" override="1"><f a="key">
	<d/>
	<x path="Void"/>
</f></Remove>
		<ContainsKey public="1" set="method" override="1"><f a="key">
	<d/>
	<x path="Bool"/>
</f></ContainsKey>
		<ContainsValue public="1" set="method" override="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></ContainsValue>
		<Clone public="1" set="method" override="1"><f a=""><d/></f></Clone>
		<new final="1" public="1" set="method"><f a="host">
	<c path="cs.system.collections.Hashtable"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.SyncHashtable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_HashValues" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo public="1" set="method"><f a="array:arrayIndex">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<new final="1" public="1" set="method"><f a="host">
	<c path="cs.system.collections.Hashtable"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.HashValues"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_HashKeys" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo public="1" set="method"><f a="array:arrayIndex">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<new final="1" public="1" set="method"><f a="host">
	<c path="cs.system.collections.Hashtable"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.HashKeys"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IDictionaryEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IDictionaryEnumerator" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerator"/>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<Key public="1" get="accessor" set="null"><d/></Key>
		<Entry public="1" get="accessor" set="null"><c path="cs.system.collections.DictionaryEntry"/></Entry>
		<get_Entry public="1" set="method"><f a=""><c path="cs.system.collections.DictionaryEntry"/></f></get_Entry>
		<get_Key public="1" set="method"><f a=""><d/></f></get_Key>
		<get_Value public="1" set="method"><f a=""><d/></f></get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IDictionaryEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_Enumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1" final="1">
		<implements path="cs.system.collections.IDictionaryEnumerator"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<Key public="1" get="accessor" set="null"><d/></Key>
		<Entry public="1" get="accessor" set="null"><c path="cs.system.collections.DictionaryEntry"/></Entry>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<get_Entry final="1" public="1" set="method"><f a=""><c path="cs.system.collections.DictionaryEntry"/></f></get_Entry>
		<get_Key final="1" public="1" set="method"><f a=""><d/></f></get_Key>
		<get_Value final="1" public="1" set="method"><f a=""><d/></f></get_Value>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<new final="1" public="1" set="method">
			<f a="host:mode">
				<c path="cs.system.collections.Hashtable"/>
				<e path="cs.system.collections.Hashtable_EnumeratorMode"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="host">
	<c path="cs.system.collections.Hashtable"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.Enumerator"</e></m>
		</meta>
	</class>
	<enum path="cs.system.collections.Hashtable_EnumeratorMode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable">
		<KEY_MODE><meta><m n=":csNative"><e>0</e></m></meta></KEY_MODE>
		<VALUE_MODE><meta><m n=":csNative"><e>1</e></m></meta></VALUE_MODE>
		<ENTRY_MODE><meta><m n=":csNative"><e>2</e></m></meta></ENTRY_MODE>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Collections.Hashtable.EnumeratorMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.serialization.IObjectReference" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IObjectReference" extern="1" interface="1">
		<GetRealObject public="1" set="method"><f a="context">
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<d/>
</f></GetRealObject>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IObjectReference"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_KeyMarker" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.runtime.serialization.IObjectReference"/>
		<Removed public="1" set="null" static="1">
			<c path="cs.system.collections.Hashtable_KeyMarker"/>
			<meta><m n=":readOnly"/></meta>
		</Removed>
		<GetRealObject final="1" public="1" set="method"><f a="context">
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<d/>
</f></GetRealObject>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.KeyMarker"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_Slot" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.Slot"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IComparer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IComparer" extern="1" interface="1">
		<Compare public="1" set="method"><f a="x:y">
	<d/>
	<d/>
	<x path="Int"/>
</f></Compare>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IComparer"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEqualityComparer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IEqualityComparer" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Collections.IEqualityComparer"</e></m>
</meta></class>
	<class path="cs.system.collections.IHashCodeProvider" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.IHashCodeProvider" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Collections.IHashCodeProvider"</e></m>
</meta></class>
	<class path="cs.system.collections.ReadOnlyCollectionBase" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.ReadOnlyCollectionBase" extern="1" abstract="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<InnerList get="null" set="null"><c path="cs.system.collections.ArrayList"/></InnerList>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetEnumerator>
		<get_InnerList final="1" set="method">
			<f a=""><c path="cs.system.collections.ArrayList"/></f>
			<meta><m n=":protected"/></meta>
		</get_InnerList>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ReadOnlyCollectionBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.ICollection_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.ICollection_1" extern="1" interface="1">
		<extends path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.generic.ICollection_1.T0"/></extends>
		<extends path="cs.system.collections.IEnumerable"/>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<Add public="1" set="method"><f a="item">
	<c path="cs.system.collections.generic.ICollection_1.T0"/>
	<x path="Void"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Contains public="1" set="method"><f a="item">
	<c path="cs.system.collections.generic.ICollection_1.T0"/>
	<x path="Bool"/>
</f></Contains>
		<CopyTo public="1" set="method"><f a="array:arrayIndex">
	<c path="cs.NativeArray"><c path="cs.system.collections.generic.ICollection_1.T0"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<Remove public="1" set="method"><f a="item">
	<c path="cs.system.collections.generic.ICollection_1.T0"/>
	<x path="Bool"/>
</f></Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.ICollection`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.IComparer_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IComparer_1" extern="1" interface="1">
		<Compare public="1" set="method"><f a="x:y">
	<c path="cs.system.collections.generic.IComparer_1.T0"/>
	<c path="cs.system.collections.generic.IComparer_1.T0"/>
	<x path="Int"/>
</f></Compare>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IComparer`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.IList_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IList_1" extern="1" interface="1">
		<extends path="cs.system.collections.generic.ICollection_1"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<extends path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<IndexOf public="1" set="method"><f a="item">
	<c path="cs.system.collections.generic.IList_1.T0"/>
	<x path="Int"/>
</f></IndexOf>
		<Insert public="1" set="method"><f a="index:item">
	<x path="Int"/>
	<c path="cs.system.collections.generic.IList_1.T0"/>
	<x path="Void"/>
</f></Insert>
		<RemoveAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<get_Item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="cs.system.collections.generic.IList_1.T0"/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<c path="cs.system.collections.generic.IList_1.T0"/>
	<x path="Void"/>
</f></set_Item>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IList`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.objectmodel.ReadOnlyCollection_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.collections.objectmodel.ReadOnlyCollection_1" extern="1">
		<implements path="cs.system.collections.generic.ICollection_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<Items get="null" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></Items>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<Contains final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Contains>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.NativeArray"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetEnumerator>
		<IndexOf final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</IndexOf>
		<get_Count final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_Items final="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></f>
			<meta><m n=":protected"/></meta>
		</get_Items>
		<get_Item final="1" public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</get_Item>
		<new final="1" public="1" set="method"><f a="list">
	<c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ObjectModel.ReadOnlyCollection`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.specialized.StringDictionary" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.collections.specialized.StringDictionary" extern="1">
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Item public="1" set="method"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></get_Item>
		<set_Item public="1" set="method"><f a="key:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></set_Item>
		<get_Keys public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Keys>
		<get_Values public="1" set="method"><f a=""><c path="cs.system.collections.ICollection"/></f></get_Values>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<Add public="1" set="method"><f a="key:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></Add>
		<Clear public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<ContainsKey public="1" set="method"><f a="key">
	<c path="String"/>
	<x path="Bool"/>
</f></ContainsKey>
		<ContainsValue public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></ContainsValue>
		<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<Remove public="1" set="method"><f a="key">
	<c path="String"/>
	<x path="Void"/>
</f></Remove>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Specialized.StringDictionary"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.IComponent" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.IComponent" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<Disposed>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Disposed>
		<Site public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISite"/></Site>
		<add_Disposed public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_Disposed>
		<remove_Disposed public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_Disposed>
		<get_Site public="1" set="method"><f a=""><c path="cs.system.componentmodel.ISite"/></f></get_Site>
		<set_Site public="1" set="method"><f a="value">
	<c path="cs.system.componentmodel.ISite"/>
	<c path="cs.system.componentmodel.ISite"/>
</f></set_Site>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.IComponent"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.Component" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.Component" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.componentmodel.IComponent"/>
		<Disposed>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Disposed>
		<Events get="null" set="null"><c path="cs.system.componentmodel.EventHandlerList"/></Events>
		<DesignMode get="null" set="null"><x path="Bool"/></DesignMode>
		<Container public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IContainer"/></Container>
		<Site public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISite"/></Site>
		<CanRaiseEvents get="null" set="null"><x path="Bool"/></CanRaiseEvents>
		<add_Disposed final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_Disposed>
		<remove_Disposed final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_Disposed>
		<get_CanRaiseEvents set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_CanRaiseEvents>
		<get_Site public="1" set="method"><f a=""><c path="cs.system.componentmodel.ISite"/></f></get_Site>
		<set_Site public="1" set="method"><f a="value">
	<c path="cs.system.componentmodel.ISite"/>
	<c path="cs.system.componentmodel.ISite"/>
</f></set_Site>
		<get_Container final="1" public="1" set="method"><f a=""><c path="cs.system.componentmodel.IContainer"/></f></get_Container>
		<get_DesignMode final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_DesignMode>
		<get_Events final="1" set="method">
			<f a=""><c path="cs.system.componentmodel.EventHandlerList"/></f>
			<meta><m n=":protected"/></meta>
		</get_Events>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Dispose set="method">
	<f a="release_all">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</Dispose></overloads>
		</Dispose>
		<GetService set="method">
			<f a="service">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetService>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.Component"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ComponentCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.ComponentCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.componentmodel.IComponent"/>
			</f>
			<overloads><get_Item public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.componentmodel.IComponent"/>
</f></get_Item></overloads>
		</get_Item>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.NativeArray"><c path="cs.system.componentmodel.IComponent"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<new final="1" public="1" set="method"><f a="components">
	<c path="cs.NativeArray"><c path="cs.system.componentmodel.IComponent"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ComponentCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.EventHandlerList" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.EventHandlerList" extern="1" final="1">
		<implements path="cs.system.IDisposable"/>
		<get_Item final="1" public="1" set="method"><f a="key">
	<d/>
	<c path="cs.system.Delegate"/>
</f></get_Item>
		<set_Item final="1" public="1" set="method"><f a="key:value">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></set_Item>
		<AddHandler final="1" public="1" set="method"><f a="key:value">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></AddHandler>
		<AddHandlers final="1" public="1" set="method"><f a="listToAddFrom">
	<c path="cs.system.componentmodel.EventHandlerList"/>
	<x path="Void"/>
</f></AddHandlers>
		<RemoveHandler final="1" public="1" set="method"><f a="key:value">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></RemoveHandler>
		<Dispose final="1" public="1" set="method"><f a=""><x path="Void"/></f></Dispose>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.EventHandlerList"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.IContainer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.IContainer" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<Components public="1" get="accessor" set="null"><c path="cs.system.componentmodel.ComponentCollection"/></Components>
		<get_Components public="1" set="method"><f a=""><c path="cs.system.componentmodel.ComponentCollection"/></f></get_Components>
		<Add public="1" set="method">
			<f a="component">
				<c path="cs.system.componentmodel.IComponent"/>
				<x path="Void"/>
			</f>
			<overloads><Add public="1" set="method"><f a="component:name">
	<c path="cs.system.componentmodel.IComponent"/>
	<c path="String"/>
	<x path="Void"/>
</f></Add></overloads>
		</Add>
		<Remove public="1" set="method"><f a="component">
	<c path="cs.system.componentmodel.IComponent"/>
	<x path="Void"/>
</f></Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.IContainer"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ISite" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.ISite" extern="1" interface="1">
		<extends path="cs.system.IServiceProvider"/>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<DesignMode public="1" get="accessor" set="null"><x path="Bool"/></DesignMode>
		<Container public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IContainer"/></Container>
		<Component public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IComponent"/></Component>
		<get_Component public="1" set="method"><f a=""><c path="cs.system.componentmodel.IComponent"/></f></get_Component>
		<get_Container public="1" set="method"><f a=""><c path="cs.system.componentmodel.IContainer"/></f></get_Container>
		<get_DesignMode public="1" set="method"><f a=""><x path="Bool"/></f></get_DesignMode>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ISite"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ISynchronizeInvoke" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.componentmodel.ISynchronizeInvoke" extern="1" interface="1">
		<InvokeRequired public="1" get="accessor" set="null"><x path="Bool"/></InvokeRequired>
		<get_InvokeRequired public="1" set="method"><f a=""><x path="Bool"/></f></get_InvokeRequired>
		<BeginInvoke public="1" set="method"><f a="method:args">
	<c path="cs.system.Delegate"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<d/>
</f></EndInvoke>
		<Invoke public="1" set="method"><f a="method:args">
	<c path="cs.system.Delegate"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ISynchronizeInvoke"</e></m>
		</meta>
	</class>
	<enum path="cs.system.configuration.assemblies.AssemblyHashAlgorithm" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.configuration.assemblies.AssemblyHashAlgorithm">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<MD5><meta><m n=":csNative"><e>32771</e></m></meta></MD5>
		<SHA1><meta><m n=":csNative"><e>32772</e></m></meta></SHA1>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Configuration.Assemblies.AssemblyHashAlgorithm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.configuration.assemblies.AssemblyVersionCompatibility" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.configuration.assemblies.AssemblyVersionCompatibility">
		<SameMachine><meta><m n=":csNative"><e>1</e></m></meta></SameMachine>
		<SameProcess><meta><m n=":csNative"><e>2</e></m></meta></SameProcess>
		<SameDomain><meta><m n=":csNative"><e>3</e></m></meta></SameDomain>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Configuration.Assemblies.AssemblyVersionCompatibility"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.DataReceivedEventArgs" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<Data public="1" get="accessor" set="null"><c path="String"/></Data>
		<get_Data final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Data>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.DataReceivedEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Delegate_DataReceivedEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" module="cs.system.diagnostics.DataReceivedEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:e:callback:object">
	<d/>
	<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.DataReceivedEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.diagnostics.DataReceivedEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.diagnostics._DataReceivedEventHandler.DataReceivedEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" private="1" module="cs.system.diagnostics.DataReceivedEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.diagnostics._DataReceivedEventHandler.DataReceivedEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" private="1" module="cs.system.diagnostics.DataReceivedEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.diagnostics.FileVersionInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.FileVersionInfo" extern="1" final="1">
		<GetVersionInfo public="1" set="method" static="1"><f a="fileName">
	<c path="String"/>
	<c path="cs.system.diagnostics.FileVersionInfo"/>
</f></GetVersionInfo>
		<SpecialBuild public="1" get="accessor" set="null"><c path="String"/></SpecialBuild>
		<ProductVersion public="1" get="accessor" set="null"><c path="String"/></ProductVersion>
		<ProductPrivatePart public="1" get="accessor" set="null"><x path="Int"/></ProductPrivatePart>
		<ProductName public="1" get="accessor" set="null"><c path="String"/></ProductName>
		<ProductMinorPart public="1" get="accessor" set="null"><x path="Int"/></ProductMinorPart>
		<ProductMajorPart public="1" get="accessor" set="null"><x path="Int"/></ProductMajorPart>
		<ProductBuildPart public="1" get="accessor" set="null"><x path="Int"/></ProductBuildPart>
		<PrivateBuild public="1" get="accessor" set="null"><c path="String"/></PrivateBuild>
		<OriginalFilename public="1" get="accessor" set="null"><c path="String"/></OriginalFilename>
		<LegalTrademarks public="1" get="accessor" set="null"><c path="String"/></LegalTrademarks>
		<LegalCopyright public="1" get="accessor" set="null"><c path="String"/></LegalCopyright>
		<Language public="1" get="accessor" set="null"><c path="String"/></Language>
		<IsSpecialBuild public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialBuild>
		<IsPrivateBuild public="1" get="accessor" set="null"><x path="Bool"/></IsPrivateBuild>
		<IsPreRelease public="1" get="accessor" set="null"><x path="Bool"/></IsPreRelease>
		<IsPatched public="1" get="accessor" set="null"><x path="Bool"/></IsPatched>
		<IsDebug public="1" get="accessor" set="null"><x path="Bool"/></IsDebug>
		<InternalName public="1" get="accessor" set="null"><c path="String"/></InternalName>
		<FileVersion public="1" get="accessor" set="null"><c path="String"/></FileVersion>
		<FilePrivatePart public="1" get="accessor" set="null"><x path="Int"/></FilePrivatePart>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<FileMinorPart public="1" get="accessor" set="null"><x path="Int"/></FileMinorPart>
		<FileMajorPart public="1" get="accessor" set="null"><x path="Int"/></FileMajorPart>
		<FileDescription public="1" get="accessor" set="null"><c path="String"/></FileDescription>
		<FileBuildPart public="1" get="accessor" set="null"><x path="Int"/></FileBuildPart>
		<CompanyName public="1" get="accessor" set="null"><c path="String"/></CompanyName>
		<Comments public="1" get="accessor" set="null"><c path="String"/></Comments>
		<get_Comments final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Comments>
		<get_CompanyName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CompanyName>
		<get_FileBuildPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_FileBuildPart>
		<get_FileDescription final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FileDescription>
		<get_FileMajorPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_FileMajorPart>
		<get_FileMinorPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_FileMinorPart>
		<get_FileName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FileName>
		<get_FilePrivatePart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_FilePrivatePart>
		<get_FileVersion final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FileVersion>
		<get_InternalName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_InternalName>
		<get_IsDebug final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsDebug>
		<get_IsPatched final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPatched>
		<get_IsPreRelease final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPreRelease>
		<get_IsPrivateBuild final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivateBuild>
		<get_IsSpecialBuild final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialBuild>
		<get_Language final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Language>
		<get_LegalCopyright final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LegalCopyright>
		<get_LegalTrademarks final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LegalTrademarks>
		<get_OriginalFilename final="1" public="1" set="method"><f a=""><c path="String"/></f></get_OriginalFilename>
		<get_PrivateBuild final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PrivateBuild>
		<get_ProductBuildPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ProductBuildPart>
		<get_ProductMajorPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ProductMajorPart>
		<get_ProductMinorPart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ProductMinorPart>
		<get_ProductName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ProductName>
		<get_ProductPrivatePart final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ProductPrivatePart>
		<get_ProductVersion final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ProductVersion>
		<get_SpecialBuild final="1" public="1" set="method"><f a=""><c path="String"/></f></get_SpecialBuild>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.FileVersionInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.WaitHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.WaitHandle" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<InvalidHandle set="null" static="1">
			<c path="cs.system.IntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</InvalidHandle>
		<WaitTimeout public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</WaitTimeout>
		<WaitAll public="1" set="method" static="1">
			<f a="waitHandles">
				<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
				<x path="Bool"/>
			</f>
			<overloads>
				<WaitAll public="1" set="method"><f a="waitHandles:timeout">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></WaitAll>
				<WaitAll public="1" set="method"><f a="waitHandles:millisecondsTimeout">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></WaitAll>
				<WaitAll public="1" set="method"><f a="waitHandles:timeout:exitContext">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></WaitAll>
				<WaitAll public="1" set="method"><f a="waitHandles:millisecondsTimeout:exitContext">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></WaitAll>
			</overloads>
		</WaitAll>
		<WaitAny public="1" set="method" static="1">
			<f a="waitHandles">
				<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
				<x path="Int"/>
			</f>
			<overloads>
				<WaitAny public="1" set="method"><f a="waitHandles:timeout:exitContext">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></WaitAny>
				<WaitAny public="1" set="method"><f a="waitHandles:millisecondsTimeout">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></WaitAny>
				<WaitAny public="1" set="method"><f a="waitHandles:timeout">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<c path="cs.system.TimeSpan"/>
	<x path="Int"/>
</f></WaitAny>
				<WaitAny public="1" set="method"><f a="waitHandles:millisecondsTimeout:exitContext">
	<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></WaitAny>
			</overloads>
		</WaitAny>
		<SignalAndWait public="1" set="method" static="1">
			<f a="toSignal:toWaitOn">
				<c path="cs.system.threading.WaitHandle"/>
				<c path="cs.system.threading.WaitHandle"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<SignalAndWait public="1" set="method"><f a="toSignal:toWaitOn:timeout:exitContext">
	<c path="cs.system.threading.WaitHandle"/>
	<c path="cs.system.threading.WaitHandle"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></SignalAndWait>
				<SignalAndWait public="1" set="method"><f a="toSignal:toWaitOn:millisecondsTimeout:exitContext">
	<c path="cs.system.threading.WaitHandle"/>
	<c path="cs.system.threading.WaitHandle"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></SignalAndWait>
			</overloads>
		</SignalAndWait>
		<SafeWaitHandle public="1" get="accessor" set="accessor"><c path="microsoft.win32.safehandles.SafeWaitHandle"/></SafeWaitHandle>
		<Handle public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></Handle>
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<get_Handle public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Handle>
		<set_Handle public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_Handle>
		<Dispose set="method">
			<f a="explicitDisposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":protected"/>
			</meta>
		</Dispose>
		<get_SafeWaitHandle final="1" public="1" set="method"><f a=""><c path="microsoft.win32.safehandles.SafeWaitHandle"/></f></get_SafeWaitHandle>
		<set_SafeWaitHandle final="1" public="1" set="method"><f a="value">
	<c path="microsoft.win32.safehandles.SafeWaitHandle"/>
	<c path="microsoft.win32.safehandles.SafeWaitHandle"/>
</f></set_SafeWaitHandle>
		<WaitOne public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads>
				<WaitOne public="1" set="method"><f a="timeout:exitContext">
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></WaitOne>
				<WaitOne public="1" set="method"><f a="timeout">
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></WaitOne>
				<WaitOne public="1" set="method"><f a="millisecondsTimeout">
	<x path="Int"/>
	<x path="Bool"/>
</f></WaitOne>
				<WaitOne public="1" set="method"><f a="millisecondsTimeout:exitContext">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></WaitOne>
			</overloads>
		</WaitOne>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.WaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process_ProcessWaitHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.threading.WaitHandle"/>
		<new final="1" public="1" set="method"><f a="handle">
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcessWaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a=""><x path="Void"/></f></Invoke>
		<BeginInvoke public="1" set="method"><f a="callback:object">
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.AsyncReadHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.diagnostics.Process_AsyncReadHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.diagnostics._Process.Process_AsyncReadHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" private="1" module="cs.system.diagnostics.Process" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.diagnostics._Process.Process_AsyncReadHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" private="1" module="cs.system.diagnostics.Process" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.diagnostics.Process_ProcessAsyncReader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1" final="1">
		<WaitHandle public="1" get="accessor" set="null"><c path="cs.system.threading.WaitHandle"/></WaitHandle>
		<IsCompleted public="1" get="accessor" set="null"><x path="Bool"/></IsCompleted>
		<ReadHandler public="1"><x path="cs.system.diagnostics.Process_AsyncReadHandler"/></ReadHandler>
		<EndCalled public="1"><x path="Int"/></EndCalled>
		<ares public="1"><d/></ares>
		<operation public="1"><x path="Int"/></operation>
		<completed_sync public="1"><x path="Bool"/></completed_sync>
		<total public="1"><x path="Int"/></total>
		<acc_socket public="1"><d/></acc_socket>
		<ReuseSocket public="1"><x path="Bool"/></ReuseSocket>
		<Buffers public="1"><d/></Buffers>
		<port public="1"><x path="Int"/></port>
		<Addresses public="1"><c path="cs.NativeArray"><d/></c></Addresses>
		<AcceptSocket public="1"><d/></AcceptSocket>
		<SockFlags public="1"><x path="Int"/></SockFlags>
		<Size public="1"><x path="Int"/></Size>
		<Offset public="1"><x path="Int"/></Offset>
		<EndPoint public="1"><d/></EndPoint>
		<delayedException public="1"><c path="cs.system.Exception"/></delayedException>
		<wait_handle public="1"><c path="cs.system.threading.ManualResetEvent"/></wait_handle>
		<callback public="1"><x path="cs.system.AsyncCallback"/></callback>
		<state public="1"><d/></state>
		<handle public="1"><c path="cs.system.IntPtr"/></handle>
		<Sock public="1"><d/></Sock>
		<AddInput final="1" public="1" set="method"><f a=""><x path="Void"/></f></AddInput>
		<get_IsCompleted final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsCompleted>
		<get_WaitHandle final="1" public="1" set="method"><f a=""><c path="cs.system.threading.WaitHandle"/></f></get_WaitHandle>
		<Close final="1" public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<new final="1" public="1" set="method"><f a="process:handle:err_out">
	<c path="cs.system.diagnostics.Process"/>
	<c path="cs.system.IntPtr"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcessAsyncReader"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.Process_AsyncModes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process">
		<NoneYet><meta><m n=":csNative"><e>0</e></m></meta></NoneYet>
		<SyncOutput><meta><m n=":csNative"><e>1</e></m></meta></SyncOutput>
		<SyncError><meta><m n=":csNative"><e>2</e></m></meta></SyncError>
		<AsyncOutput><meta><m n=":csNative"><e>4</e></m></meta></AsyncOutput>
		<AsyncError><meta><m n=":csNative"><e>8</e></m></meta></AsyncError>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.Process.AsyncModes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.Process_ProcInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<LoadUserProfile public="1"><x path="Bool"/></LoadUserProfile>
		<Password public="1"><c path="cs.system.IntPtr"/></Password>
		<Domain public="1"><c path="String"/></Domain>
		<UserName public="1"><c path="String"/></UserName>
		<envValues public="1"><c path="cs.NativeArray"><c path="String"/></c></envValues>
		<envKeys public="1"><c path="cs.NativeArray"><c path="String"/></c></envKeys>
		<tid public="1"><x path="Int"/></tid>
		<pid public="1"><x path="Int"/></pid>
		<thread_handle public="1"><c path="cs.system.IntPtr"/></thread_handle>
		<process_handle public="1"><c path="cs.system.IntPtr"/></process_handle>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<EnterDebugMode public="1" set="method" static="1"><f a=""><x path="Void"/></f></EnterDebugMode>
		<GetCurrentProcess public="1" set="method" static="1"><f a=""><c path="cs.system.diagnostics.Process"/></f></GetCurrentProcess>
		<GetProcessById public="1" set="method" static="1">
			<f a="processId">
				<x path="Int"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<overloads><GetProcessById public="1" set="method"><f a="processId:machineName">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.diagnostics.Process"/>
</f></GetProcessById></overloads>
		</GetProcessById>
		<GetProcesses public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c></f>
			<overloads><GetProcesses public="1" set="method"><f a="machineName">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
</f></GetProcesses></overloads>
		</GetProcesses>
		<GetProcessesByName public="1" set="method" static="1">
			<f a="processName">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
			</f>
			<overloads><GetProcessesByName public="1" set="method"><f a="processName:machineName">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
</f></GetProcessesByName></overloads>
		</GetProcessesByName>
		<LeaveDebugMode public="1" set="method" static="1"><f a=""><x path="Void"/></f></LeaveDebugMode>
		<Start public="1" set="method" static="1">
			<f a="startInfo">
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<overloads>
				<Start public="1" set="method"><f a="fileName:arguments:username:password:domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.security.SecureString"/>
	<c path="String"/>
	<c path="cs.system.diagnostics.Process"/>
</f></Start>
				<Start public="1" set="method"><f a="fileName:username:password:domain">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.security.SecureString"/>
	<c path="String"/>
	<c path="cs.system.diagnostics.Process"/>
</f></Start>
				<Start public="1" set="method"><f a="fileName:arguments">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.diagnostics.Process"/>
</f></Start>
				<Start public="1" set="method"><f a="fileName">
	<c path="String"/>
	<c path="cs.system.diagnostics.Process"/>
</f></Start>
			</overloads>
		</Start>
		<_Start public="1" set="method" static="1">
			<f a="startInfo">
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<meta><m n=":native"><e>"Start"</e></m></meta>
			<overloads>
				<Start public="1" set="method">
					<f a="fileName:arguments:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":native"><e>"Start"</e></m></meta>
				</Start>
				<Start public="1" set="method">
					<f a="fileName:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":native"><e>"Start"</e></m></meta>
				</Start>
				<Start public="1" set="method">
					<f a="fileName:arguments">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":native"><e>"Start"</e></m></meta>
				</Start>
				<Start public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":native"><e>"Start"</e></m></meta>
				</Start>
			</overloads>
		</_Start>
		<Exited>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Exited>
		<ErrorDataReceived>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ErrorDataReceived>
		<OutputDataReceived>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</OutputDataReceived>
		<WorkingSet64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></WorkingSet64>
		<VirtualMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></VirtualMemorySize64>
		<PrivateMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PrivateMemorySize64>
		<WorkingSet public="1" get="accessor" set="null"><x path="Int"/></WorkingSet>
		<VirtualMemorySize public="1" get="accessor" set="null"><x path="Int"/></VirtualMemorySize>
		<UserProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></UserProcessorTime>
		<TotalProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TotalProcessorTime>
		<Threads public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessThreadCollection"/></Threads>
		<SynchronizingObject public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISynchronizeInvoke"/></SynchronizingObject>
		<StartTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></StartTime>
		<StartInfo public="1" get="accessor" set="accessor"><c path="cs.system.diagnostics.ProcessStartInfo"/></StartInfo>
		<StandardOutput public="1" get="accessor" set="null"><c path="cs.system.io.StreamReader"/></StandardOutput>
		<StandardInput public="1" get="accessor" set="null"><c path="cs.system.io.StreamWriter"/></StandardInput>
		<StandardError public="1" get="accessor" set="null"><c path="cs.system.io.StreamReader"/></StandardError>
		<Responding public="1" get="accessor" set="null"><x path="Bool"/></Responding>
		<ProcessorAffinity public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></ProcessorAffinity>
		<ProcessName public="1" get="accessor" set="null"><c path="String"/></ProcessName>
		<PrivilegedProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></PrivilegedProcessorTime>
		<SessionId public="1" get="accessor" set="null"><x path="Int"/></SessionId>
		<PrivateMemorySize public="1" get="accessor" set="null"><x path="Int"/></PrivateMemorySize>
		<PriorityClass public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ProcessPriorityClass"/></PriorityClass>
		<PriorityBoostEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></PriorityBoostEnabled>
		<PeakWorkingSet64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakWorkingSet64>
		<PeakVirtualMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakVirtualMemorySize64>
		<PeakPagedMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakPagedMemorySize64>
		<PagedSystemMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PagedSystemMemorySize64>
		<PagedMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PagedMemorySize64>
		<NonpagedSystemMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></NonpagedSystemMemorySize64>
		<PeakWorkingSet public="1" get="accessor" set="null"><x path="Int"/></PeakWorkingSet>
		<PeakVirtualMemorySize public="1" get="accessor" set="null"><x path="Int"/></PeakVirtualMemorySize>
		<PeakPagedMemorySize public="1" get="accessor" set="null"><x path="Int"/></PeakPagedMemorySize>
		<PagedSystemMemorySize public="1" get="accessor" set="null"><x path="Int"/></PagedSystemMemorySize>
		<PagedMemorySize public="1" get="accessor" set="null"><x path="Int"/></PagedMemorySize>
		<NonpagedSystemMemorySize public="1" get="accessor" set="null"><x path="Int"/></NonpagedSystemMemorySize>
		<Modules public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessModuleCollection"/></Modules>
		<MinWorkingSet public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></MinWorkingSet>
		<MaxWorkingSet public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></MaxWorkingSet>
		<MainWindowTitle public="1" get="accessor" set="null"><c path="String"/></MainWindowTitle>
		<MainWindowHandle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></MainWindowHandle>
		<MainModule public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessModule"/></MainModule>
		<MachineName public="1" get="accessor" set="null"><c path="String"/></MachineName>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<HasExited public="1" get="accessor" set="null"><x path="Bool"/></HasExited>
		<HandleCount public="1" get="accessor" set="null"><x path="Int"/></HandleCount>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<ExitTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></ExitTime>
		<ExitCode public="1" get="accessor" set="null"><x path="Int"/></ExitCode>
		<EnableRaisingEvents public="1" get="accessor" set="accessor"><x path="Bool"/></EnableRaisingEvents>
		<BasePriority public="1" get="accessor" set="null"><x path="Int"/></BasePriority>
		<add_OutputDataReceived final="1" public="1" set="method"><f a="value">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="Void"/>
</f></add_OutputDataReceived>
		<remove_OutputDataReceived final="1" public="1" set="method"><f a="value">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="Void"/>
</f></remove_OutputDataReceived>
		<add_ErrorDataReceived final="1" public="1" set="method"><f a="value">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="Void"/>
</f></add_ErrorDataReceived>
		<remove_ErrorDataReceived final="1" public="1" set="method"><f a="value">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="Void"/>
</f></remove_ErrorDataReceived>
		<add_Exited final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></add_Exited>
		<remove_Exited final="1" public="1" set="method"><f a="value">
	<x path="cs.system.EventHandler"/>
	<x path="Void"/>
</f></remove_Exited>
		<get_BasePriority final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_BasePriority>
		<get_EnableRaisingEvents final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_EnableRaisingEvents>
		<set_EnableRaisingEvents final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_EnableRaisingEvents>
		<get_ExitCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ExitCode>
		<get_ExitTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_ExitTime>
		<get_Handle final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Handle>
		<get_HandleCount final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_HandleCount>
		<get_HasExited final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_HasExited>
		<get_Id final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Id>
		<get_MachineName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_MachineName>
		<get_MainModule final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.ProcessModule"/></f></get_MainModule>
		<get_MainWindowHandle final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_MainWindowHandle>
		<get_MainWindowTitle final="1" public="1" set="method"><f a=""><c path="String"/></f></get_MainWindowTitle>
		<get_MaxWorkingSet final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_MaxWorkingSet>
		<set_MaxWorkingSet final="1" public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_MaxWorkingSet>
		<get_MinWorkingSet final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_MinWorkingSet>
		<set_MinWorkingSet final="1" public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_MinWorkingSet>
		<get_Modules final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.ProcessModuleCollection"/></f></get_Modules>
		<get_NonpagedSystemMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_NonpagedSystemMemorySize>
		<get_PagedMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PagedMemorySize>
		<get_PagedSystemMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PagedSystemMemorySize>
		<get_PeakPagedMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PeakPagedMemorySize>
		<get_PeakVirtualMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PeakVirtualMemorySize>
		<get_PeakWorkingSet final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PeakWorkingSet>
		<get_NonpagedSystemMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_NonpagedSystemMemorySize64>
		<get_PagedMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PagedMemorySize64>
		<get_PagedSystemMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PagedSystemMemorySize64>
		<get_PeakPagedMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PeakPagedMemorySize64>
		<get_PeakVirtualMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PeakVirtualMemorySize64>
		<get_PeakWorkingSet64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PeakWorkingSet64>
		<get_PriorityBoostEnabled final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_PriorityBoostEnabled>
		<set_PriorityBoostEnabled final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_PriorityBoostEnabled>
		<get_PriorityClass final="1" public="1" set="method"><f a=""><e path="cs.system.diagnostics.ProcessPriorityClass"/></f></get_PriorityClass>
		<set_PriorityClass final="1" public="1" set="method"><f a="value">
	<e path="cs.system.diagnostics.ProcessPriorityClass"/>
	<e path="cs.system.diagnostics.ProcessPriorityClass"/>
</f></set_PriorityClass>
		<get_PrivateMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PrivateMemorySize>
		<get_SessionId final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_SessionId>
		<get_PrivilegedProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_PrivilegedProcessorTime>
		<get_ProcessName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ProcessName>
		<get_ProcessorAffinity final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_ProcessorAffinity>
		<set_ProcessorAffinity final="1" public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_ProcessorAffinity>
		<get_Responding final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Responding>
		<get_StandardError final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamReader"/></f></get_StandardError>
		<get_StandardInput final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamWriter"/></f></get_StandardInput>
		<get_StandardOutput final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamReader"/></f></get_StandardOutput>
		<get_StartInfo final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.ProcessStartInfo"/></f></get_StartInfo>
		<set_StartInfo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.diagnostics.ProcessStartInfo"/>
	<c path="cs.system.diagnostics.ProcessStartInfo"/>
</f></set_StartInfo>
		<get_StartTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_StartTime>
		<get_SynchronizingObject final="1" public="1" set="method"><f a=""><c path="cs.system.componentmodel.ISynchronizeInvoke"/></f></get_SynchronizingObject>
		<set_SynchronizingObject final="1" public="1" set="method"><f a="value">
	<c path="cs.system.componentmodel.ISynchronizeInvoke"/>
	<c path="cs.system.componentmodel.ISynchronizeInvoke"/>
</f></set_SynchronizingObject>
		<get_Threads final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.ProcessThreadCollection"/></f></get_Threads>
		<get_TotalProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_TotalProcessorTime>
		<get_UserProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_UserProcessorTime>
		<get_VirtualMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_VirtualMemorySize>
		<get_WorkingSet final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_WorkingSet>
		<get_PrivateMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_PrivateMemorySize64>
		<get_VirtualMemorySize64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_VirtualMemorySize64>
		<get_WorkingSet64 final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_WorkingSet64>
		<Close final="1" public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<CloseMainWindow final="1" public="1" set="method"><f a=""><x path="Bool"/></f></CloseMainWindow>
		<Kill final="1" public="1" set="method"><f a=""><x path="Void"/></f></Kill>
		<Refresh final="1" public="1" set="method"><f a=""><x path="Void"/></f></Refresh>
		<Start final="1" public="1" set="method"><f a=""><x path="Bool"/></f></Start>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<WaitForExit final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><WaitForExit final="1" public="1" set="method"><f a="milliseconds">
	<x path="Int"/>
	<x path="Bool"/>
</f></WaitForExit></overloads>
		</WaitForExit>
		<WaitForInputIdle final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><WaitForInputIdle final="1" public="1" set="method"><f a="milliseconds">
	<x path="Int"/>
	<x path="Bool"/>
</f></WaitForInputIdle></overloads>
		</WaitForInputIdle>
		<BeginOutputReadLine final="1" public="1" set="method"><f a=""><x path="Void"/></f></BeginOutputReadLine>
		<CancelOutputRead final="1" public="1" set="method"><f a=""><x path="Void"/></f></CancelOutputRead>
		<BeginErrorReadLine final="1" public="1" set="method"><f a=""><x path="Void"/></f></BeginErrorReadLine>
		<CancelErrorRead final="1" public="1" set="method"><f a=""><x path="Void"/></f></CancelErrorRead>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Dispose>
		<OnExited final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</OnExited>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessModule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessModule" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<ModuleName public="1" get="accessor" set="null"><c path="String"/></ModuleName>
		<ModuleMemorySize public="1" get="accessor" set="null"><x path="Int"/></ModuleMemorySize>
		<FileVersionInfo public="1" get="accessor" set="null"><c path="cs.system.diagnostics.FileVersionInfo"/></FileVersionInfo>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<EntryPointAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></EntryPointAddress>
		<BaseAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></BaseAddress>
		<get_BaseAddress final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_BaseAddress>
		<get_EntryPointAddress final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_EntryPointAddress>
		<get_FileName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FileName>
		<get_FileVersionInfo final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.FileVersionInfo"/></f></get_FileVersionInfo>
		<get_ModuleMemorySize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ModuleMemorySize>
		<get_ModuleName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ModuleName>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessModule"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessModuleCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessModuleCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="cs.system.diagnostics.ProcessModule"/>
</f></get_Item>
		<Contains final="1" public="1" set="method"><f a="module">
	<c path="cs.system.diagnostics.ProcessModule"/>
	<x path="Bool"/>
</f></Contains>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessModule"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<IndexOf final="1" public="1" set="method"><f a="module">
	<c path="cs.system.diagnostics.ProcessModule"/>
	<x path="Int"/>
</f></IndexOf>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" public="1" set="method"><f a="processModules">
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessModule"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessModuleCollection"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ProcessPriorityClass" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessPriorityClass">
		<Normal><meta><m n=":csNative"><e>32</e></m></meta></Normal>
		<Idle><meta><m n=":csNative"><e>64</e></m></meta></Idle>
		<High><meta><m n=":csNative"><e>128</e></m></meta></High>
		<RealTime><meta><m n=":csNative"><e>256</e></m></meta></RealTime>
		<BelowNormal><meta><m n=":csNative"><e>16384</e></m></meta></BelowNormal>
		<AboveNormal><meta><m n=":csNative"><e>32768</e></m></meta></AboveNormal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ProcessPriorityClass"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.ProcessStartInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessStartInfo" extern="1" final="1">
		<Password public="1" get="accessor" set="accessor"><c path="cs.system.security.SecureString"/></Password>
		<Domain public="1" get="accessor" set="accessor"><c path="String"/></Domain>
		<UserName public="1" get="accessor" set="accessor"><c path="String"/></UserName>
		<LoadUserProfile public="1" get="accessor" set="accessor"><x path="Bool"/></LoadUserProfile>
		<WorkingDirectory public="1" get="accessor" set="accessor"><c path="String"/></WorkingDirectory>
		<WindowStyle public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ProcessWindowStyle"/></WindowStyle>
		<Verbs public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></Verbs>
		<Verb public="1" get="accessor" set="accessor"><c path="String"/></Verb>
		<UseShellExecute public="1" get="accessor" set="accessor"><x path="Bool"/></UseShellExecute>
		<StandardOutputEncoding public="1" get="accessor" set="accessor"><c path="cs.system.text.Encoding"/></StandardOutputEncoding>
		<StandardErrorEncoding public="1" get="accessor" set="accessor"><c path="cs.system.text.Encoding"/></StandardErrorEncoding>
		<RedirectStandardOutput public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardOutput>
		<RedirectStandardInput public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardInput>
		<RedirectStandardError public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardError>
		<FileName public="1" get="accessor" set="accessor"><c path="String"/></FileName>
		<ErrorDialogParentHandle public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></ErrorDialogParentHandle>
		<ErrorDialog public="1" get="accessor" set="accessor"><x path="Bool"/></ErrorDialog>
		<EnvironmentVariables public="1" get="accessor" set="null"><c path="cs.system.collections.specialized.StringDictionary"/></EnvironmentVariables>
		<CreateNoWindow public="1" get="accessor" set="accessor"><x path="Bool"/></CreateNoWindow>
		<Arguments public="1" get="accessor" set="accessor"><c path="String"/></Arguments>
		<get_Arguments final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Arguments>
		<set_Arguments final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Arguments>
		<get_CreateNoWindow final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CreateNoWindow>
		<set_CreateNoWindow final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_CreateNoWindow>
		<get_EnvironmentVariables final="1" public="1" set="method"><f a=""><c path="cs.system.collections.specialized.StringDictionary"/></f></get_EnvironmentVariables>
		<get_ErrorDialog final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_ErrorDialog>
		<set_ErrorDialog final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ErrorDialog>
		<get_ErrorDialogParentHandle final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_ErrorDialogParentHandle>
		<set_ErrorDialogParentHandle final="1" public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_ErrorDialogParentHandle>
		<get_FileName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FileName>
		<set_FileName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_FileName>
		<get_RedirectStandardError final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_RedirectStandardError>
		<set_RedirectStandardError final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_RedirectStandardError>
		<get_RedirectStandardInput final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_RedirectStandardInput>
		<set_RedirectStandardInput final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_RedirectStandardInput>
		<get_RedirectStandardOutput final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_RedirectStandardOutput>
		<set_RedirectStandardOutput final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_RedirectStandardOutput>
		<get_StandardErrorEncoding final="1" public="1" set="method"><f a=""><c path="cs.system.text.Encoding"/></f></get_StandardErrorEncoding>
		<set_StandardErrorEncoding final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.Encoding"/>
	<c path="cs.system.text.Encoding"/>
</f></set_StandardErrorEncoding>
		<get_StandardOutputEncoding final="1" public="1" set="method"><f a=""><c path="cs.system.text.Encoding"/></f></get_StandardOutputEncoding>
		<set_StandardOutputEncoding final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.Encoding"/>
	<c path="cs.system.text.Encoding"/>
</f></set_StandardOutputEncoding>
		<get_UseShellExecute final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_UseShellExecute>
		<set_UseShellExecute final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_UseShellExecute>
		<get_Verb final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Verb>
		<set_Verb final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Verb>
		<get_Verbs final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_Verbs>
		<get_WindowStyle final="1" public="1" set="method"><f a=""><e path="cs.system.diagnostics.ProcessWindowStyle"/></f></get_WindowStyle>
		<set_WindowStyle final="1" public="1" set="method"><f a="value">
	<e path="cs.system.diagnostics.ProcessWindowStyle"/>
	<e path="cs.system.diagnostics.ProcessWindowStyle"/>
</f></set_WindowStyle>
		<get_WorkingDirectory final="1" public="1" set="method"><f a=""><c path="String"/></f></get_WorkingDirectory>
		<set_WorkingDirectory final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_WorkingDirectory>
		<get_LoadUserProfile final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_LoadUserProfile>
		<set_LoadUserProfile final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_LoadUserProfile>
		<get_UserName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_UserName>
		<set_UserName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_UserName>
		<get_Domain final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Domain>
		<set_Domain final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Domain>
		<get_Password final="1" public="1" set="method"><f a=""><c path="cs.system.security.SecureString"/></f></get_Password>
		<set_Password final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.SecureString"/>
	<c path="cs.system.security.SecureString"/>
</f></set_Password>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="filename:arguments">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="filename">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessStartInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessThread" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessThread" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<WaitReason public="1" get="accessor" set="null"><e path="cs.system.diagnostics.ThreadWaitReason"/></WaitReason>
		<UserProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></UserProcessorTime>
		<TotalProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TotalProcessorTime>
		<ThreadState public="1" get="accessor" set="null"><e path="cs.system.diagnostics.ThreadState"/></ThreadState>
		<StartTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></StartTime>
		<StartAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></StartAddress>
		<ProcessorAffinity public="1" get="null" set="accessor"><c path="cs.system.IntPtr"/></ProcessorAffinity>
		<PrivilegedProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></PrivilegedProcessorTime>
		<PriorityLevel public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ThreadPriorityLevel"/></PriorityLevel>
		<PriorityBoostEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></PriorityBoostEnabled>
		<IdealProcessor public="1" get="null" set="accessor"><x path="Int"/></IdealProcessor>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<CurrentPriority public="1" get="accessor" set="null"><x path="Int"/></CurrentPriority>
		<BasePriority public="1" get="accessor" set="null"><x path="Int"/></BasePriority>
		<get_BasePriority final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_BasePriority>
		<get_CurrentPriority final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_CurrentPriority>
		<get_Id final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Id>
		<set_IdealProcessor final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_IdealProcessor>
		<get_PriorityBoostEnabled final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_PriorityBoostEnabled>
		<set_PriorityBoostEnabled final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_PriorityBoostEnabled>
		<get_PriorityLevel final="1" public="1" set="method"><f a=""><e path="cs.system.diagnostics.ThreadPriorityLevel"/></f></get_PriorityLevel>
		<set_PriorityLevel final="1" public="1" set="method"><f a="value">
	<e path="cs.system.diagnostics.ThreadPriorityLevel"/>
	<e path="cs.system.diagnostics.ThreadPriorityLevel"/>
</f></set_PriorityLevel>
		<get_PrivilegedProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_PrivilegedProcessorTime>
		<set_ProcessorAffinity final="1" public="1" set="method"><f a="value">
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
</f></set_ProcessorAffinity>
		<get_StartAddress final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_StartAddress>
		<get_StartTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_StartTime>
		<get_ThreadState final="1" public="1" set="method"><f a=""><e path="cs.system.diagnostics.ThreadState"/></f></get_ThreadState>
		<get_TotalProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_TotalProcessorTime>
		<get_UserProcessorTime final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_UserProcessorTime>
		<get_WaitReason final="1" public="1" set="method"><f a=""><e path="cs.system.diagnostics.ThreadWaitReason"/></f></get_WaitReason>
		<ResetIdealProcessor final="1" public="1" set="method"><f a=""><x path="Void"/></f></ResetIdealProcessor>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessThread"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessThreadCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessThreadCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="cs.system.diagnostics.ProcessThread"/>
</f></get_Item>
		<Add final="1" public="1" set="method"><f a="thread">
	<c path="cs.system.diagnostics.ProcessThread"/>
	<x path="Int"/>
</f></Add>
		<Contains final="1" public="1" set="method"><f a="thread">
	<c path="cs.system.diagnostics.ProcessThread"/>
	<x path="Bool"/>
</f></Contains>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessThread"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<IndexOf final="1" public="1" set="method"><f a="thread">
	<c path="cs.system.diagnostics.ProcessThread"/>
	<x path="Int"/>
</f></IndexOf>
		<Insert final="1" public="1" set="method"><f a="index:thread">
	<x path="Int"/>
	<c path="cs.system.diagnostics.ProcessThread"/>
	<x path="Void"/>
</f></Insert>
		<Remove final="1" public="1" set="method"><f a="thread">
	<c path="cs.system.diagnostics.ProcessThread"/>
	<x path="Void"/>
</f></Remove>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" public="1" set="method"><f a="processThreads">
	<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessThread"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessThreadCollection"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ProcessWindowStyle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessWindowStyle">
		<Normal><meta><m n=":csNative"><e>0</e></m></meta></Normal>
		<Hidden><meta><m n=":csNative"><e>1</e></m></meta></Hidden>
		<Minimized><meta><m n=":csNative"><e>2</e></m></meta></Minimized>
		<Maximized><meta><m n=":csNative"><e>3</e></m></meta></Maximized>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ProcessWindowStyle"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.StackFrame" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.StackFrame" extern="1">
		<OFFSET_UNKNOWN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</OFFSET_UNKNOWN>
		<GetFileLineNumber public="1" set="method"><f a=""><x path="Int"/></f></GetFileLineNumber>
		<GetFileColumnNumber public="1" set="method"><f a=""><x path="Int"/></f></GetFileColumnNumber>
		<GetFileName public="1" set="method"><f a=""><c path="String"/></f></GetFileName>
		<GetILOffset public="1" set="method"><f a=""><x path="Int"/></f></GetILOffset>
		<GetMethod public="1" set="method"><f a=""><c path="cs.system.reflection.MethodBase"/></f></GetMethod>
		<GetNativeOffset public="1" set="method"><f a=""><x path="Int"/></f></GetNativeOffset>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="fileName:lineNumber:colNumber">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName:lineNumber">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="skipFrames:fNeedFileInfo">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="skipFrames">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fNeedFileInfo">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.StackFrame"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.StackTrace" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.StackTrace" extern="1">
		<METHODS_TO_SKIP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</METHODS_TO_SKIP>
		<FrameCount public="1" get="accessor" set="null"><x path="Int"/></FrameCount>
		<get_FrameCount public="1" set="method"><f a=""><x path="Int"/></f></get_FrameCount>
		<GetFrame public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="cs.system.diagnostics.StackFrame"/>
</f></GetFrame>
		<GetFrames public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.diagnostics.StackFrame"/></c></f></GetFrames>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="targetThread:needFileInfo">
	<c path="cs.system.threading.Thread"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="frame">
	<c path="cs.system.diagnostics.StackFrame"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="e:skipFrames:fNeedFileInfo">
	<c path="cs.system.Exception"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="e:skipFrames">
	<c path="cs.system.Exception"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="e:fNeedFileInfo">
	<c path="cs.system.Exception"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="e">
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="skipFrames:fNeedFileInfo">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="skipFrames">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fNeedFileInfo">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.StackTrace"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ThreadPriorityLevel" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadPriorityLevel">
		<Idle><meta><m n=":csNative"><e>-15</e></m></meta></Idle>
		<Lowest><meta><m n=":csNative"><e>-2</e></m></meta></Lowest>
		<BelowNormal><meta><m n=":csNative"><e>-1</e></m></meta></BelowNormal>
		<Normal><meta><m n=":csNative"><e>0</e></m></meta></Normal>
		<AboveNormal><meta><m n=":csNative"><e>1</e></m></meta></AboveNormal>
		<Highest><meta><m n=":csNative"><e>2</e></m></meta></Highest>
		<TimeCritical><meta><m n=":csNative"><e>15</e></m></meta></TimeCritical>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadPriorityLevel"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.diagnostics.ThreadState" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadState">
		<Initialized><meta><m n=":csNative"><e>0</e></m></meta></Initialized>
		<Ready><meta><m n=":csNative"><e>1</e></m></meta></Ready>
		<Running><meta><m n=":csNative"><e>2</e></m></meta></Running>
		<Standby><meta><m n=":csNative"><e>3</e></m></meta></Standby>
		<Terminated><meta><m n=":csNative"><e>4</e></m></meta></Terminated>
		<Wait><meta><m n=":csNative"><e>5</e></m></meta></Wait>
		<Transition><meta><m n=":csNative"><e>6</e></m></meta></Transition>
		<Unknown><meta><m n=":csNative"><e>7</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.diagnostics.ThreadWaitReason" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadWaitReason">
		<Executive><meta><m n=":csNative"><e>0</e></m></meta></Executive>
		<FreePage><meta><m n=":csNative"><e>1</e></m></meta></FreePage>
		<PageIn><meta><m n=":csNative"><e>2</e></m></meta></PageIn>
		<SystemAllocation><meta><m n=":csNative"><e>3</e></m></meta></SystemAllocation>
		<ExecutionDelay><meta><m n=":csNative"><e>4</e></m></meta></ExecutionDelay>
		<Suspended><meta><m n=":csNative"><e>5</e></m></meta></Suspended>
		<UserRequest><meta><m n=":csNative"><e>6</e></m></meta></UserRequest>
		<EventPairHigh><meta><m n=":csNative"><e>7</e></m></meta></EventPairHigh>
		<EventPairLow><meta><m n=":csNative"><e>8</e></m></meta></EventPairLow>
		<LpcReceive><meta><m n=":csNative"><e>9</e></m></meta></LpcReceive>
		<LpcReply><meta><m n=":csNative"><e>10</e></m></meta></LpcReply>
		<VirtualMemory><meta><m n=":csNative"><e>11</e></m></meta></VirtualMemory>
		<PageOut><meta><m n=":csNative"><e>12</e></m></meta></PageOut>
		<Unknown><meta><m n=":csNative"><e>13</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadWaitReason"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.ISymbolDocumentWriter" extern="1" interface="1">
		<SetCheckSum public="1" set="method"><f a="algorithmId:checkSum">
	<c path="cs.system.Guid"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCheckSum>
		<SetSource public="1" set="method"><f a="source">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetSource>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.ISymbolDocumentWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.symbolstore.ISymbolWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.ISymbolWriter" extern="1" interface="1">
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<CloseMethod public="1" set="method"><f a=""><x path="Void"/></f></CloseMethod>
		<CloseNamespace public="1" set="method"><f a=""><x path="Void"/></f></CloseNamespace>
		<CloseScope public="1" set="method"><f a="endOffset">
	<x path="Int"/>
	<x path="Void"/>
</f></CloseScope>
		<DefineDocument public="1" set="method"><f a="url:language:languageVendor:documentType">
	<c path="String"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
</f></DefineDocument>
		<DefineField public="1" set="method"><f a="parent:name:attributes:signature:addrKind:addr1:addr2:addr3">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<c path="String"/>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></DefineField>
		<DefineGlobalVariable public="1" set="method"><f a="name:attributes:signature:addrKind:addr1:addr2:addr3">
	<c path="String"/>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></DefineGlobalVariable>
		<DefineLocalVariable public="1" set="method"><f a="name:attributes:signature:addrKind:addr1:addr2:addr3:startOffset:endOffset">
	<c path="String"/>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></DefineLocalVariable>
		<DefineParameter public="1" set="method"><f a="name:attributes:sequence:addrKind:addr1:addr2:addr3">
	<c path="String"/>
	<e path="cs.system.reflection.ParameterAttributes"/>
	<x path="Int"/>
	<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></DefineParameter>
		<DefineSequencePoints public="1" set="method"><f a="document:offsets:lines:columns:endLines:endColumns">
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></DefineSequencePoints>
		<Initialize public="1" set="method"><f a="emitter:filename:fFullBuild">
	<c path="cs.system.IntPtr"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></Initialize>
		<OpenMethod public="1" set="method"><f a="method">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<x path="Void"/>
</f></OpenMethod>
		<OpenNamespace public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></OpenNamespace>
		<OpenScope public="1" set="method"><f a="startOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></OpenScope>
		<SetMethodSourceRange public="1" set="method"><f a="startDoc:startLine:startColumn:endDoc:endLine:endColumn">
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetMethodSourceRange>
		<SetScopeRange public="1" set="method"><f a="scopeID:startOffset:endOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></SetScopeRange>
		<SetSymAttribute public="1" set="method"><f a="parent:name:data">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetSymAttribute>
		<SetUnderlyingWriter public="1" set="method"><f a="underlyingWriter">
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></SetUnderlyingWriter>
		<SetUserEntryPoint public="1" set="method"><f a="entryMethod">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<x path="Void"/>
</f></SetUserEntryPoint>
		<UsingNamespace public="1" set="method"><f a="fullName">
	<c path="String"/>
	<x path="Void"/>
</f></UsingNamespace>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.ISymbolWriter"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.symbolstore.SymAddressKind" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.SymAddressKind">
		<ILOffset><meta><m n=":csNative"><e>1</e></m></meta></ILOffset>
		<NativeRVA><meta><m n=":csNative"><e>2</e></m></meta></NativeRVA>
		<NativeRegister><meta><m n=":csNative"><e>3</e></m></meta></NativeRegister>
		<NativeRegisterRelative><meta><m n=":csNative"><e>4</e></m></meta></NativeRegisterRelative>
		<NativeOffset><meta><m n=":csNative"><e>5</e></m></meta></NativeOffset>
		<NativeRegisterRegister><meta><m n=":csNative"><e>6</e></m></meta></NativeRegisterRegister>
		<NativeRegisterStack><meta><m n=":csNative"><e>7</e></m></meta></NativeRegisterStack>
		<NativeStackRegister><meta><m n=":csNative"><e>8</e></m></meta></NativeStackRegister>
		<BitField><meta><m n=":csNative"><e>9</e></m></meta></BitField>
		<NativeSectionOffset><meta><m n=":csNative"><e>10</e></m></meta></NativeSectionOffset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.SymAddressKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.symbolstore.SymbolToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.SymbolToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<GetToken final="1" public="1" set="method"><f a=""><x path="Int"/></f></GetToken>
		<new final="1" public="1" set="method"><f a="val">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.SymbolToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.Calendar" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.Calendar" extern="1" abstract="1">
		<implements path="cs.system.ICloneable"/>
		<CurrentEra public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</CurrentEra>
		<ReadOnly public="1" set="method" static="1"><f a="calendar">
	<c path="cs.system.globalization.Calendar"/>
	<c path="cs.system.globalization.Calendar"/>
</f></ReadOnly>
		<TwoDigitYearMax public="1" get="accessor" set="accessor"><x path="Int"/></TwoDigitYearMax>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<MinSupportedDateTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></MinSupportedDateTime>
		<MaxSupportedDateTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></MaxSupportedDateTime>
		<AlgorithmType public="1" get="accessor" set="null"><e path="cs.system.globalization.CalendarAlgorithmType"/></AlgorithmType>
		<Eras public="1" get="accessor" set="null"><c path="cs.NativeArray"><x path="Int"/></c></Eras>
		<get_Eras abstract="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><x path="Int"/></c></f></get_Eras>
		<get_AlgorithmType public="1" set="method"><f a=""><e path="cs.system.globalization.CalendarAlgorithmType"/></f></get_AlgorithmType>
		<get_MaxSupportedDateTime public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_MaxSupportedDateTime>
		<get_MinSupportedDateTime public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_MinSupportedDateTime>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<GetLeapMonth public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetLeapMonth public="1" set="method"><f a="year:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetLeapMonth></overloads>
		</GetLeapMonth>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_TwoDigitYearMax public="1" set="method"><f a=""><x path="Int"/></f></get_TwoDigitYearMax>
		<set_TwoDigitYearMax public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_TwoDigitYearMax>
		<AddDays public="1" set="method"><f a="time:days">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddDays>
		<AddHours public="1" set="method"><f a="time:hours">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddHours>
		<AddMilliseconds public="1" set="method"><f a="time:milliseconds">
	<c path="cs.system.DateTime"/>
	<x path="Float"/>
	<c path="cs.system.DateTime"/>
</f></AddMilliseconds>
		<AddMinutes public="1" set="method"><f a="time:minutes">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddMinutes>
		<AddMonths abstract="1" public="1" set="method"><f a="time:months">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddMonths>
		<AddSeconds public="1" set="method"><f a="time:seconds">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddSeconds>
		<AddWeeks public="1" set="method"><f a="time:weeks">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddWeeks>
		<AddYears abstract="1" public="1" set="method"><f a="time:years">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></AddYears>
		<GetDayOfMonth abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetDayOfMonth>
		<GetDayOfWeek abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<e path="cs.system.DayOfWeek"/>
</f></GetDayOfWeek>
		<GetDayOfYear abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetDayOfYear>
		<GetDaysInMonth public="1" set="method">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetDaysInMonth abstract="1" public="1" set="method"><f a="year:month:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetDaysInMonth></overloads>
		</GetDaysInMonth>
		<GetDaysInYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetDaysInYear abstract="1" public="1" set="method"><f a="year:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetDaysInYear></overloads>
		</GetDaysInYear>
		<GetEra abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetEra>
		<GetHour public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetHour>
		<GetMilliseconds public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Float"/>
</f></GetMilliseconds>
		<GetMinute public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetMinute>
		<GetMonth abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetMonth>
		<GetMonthsInYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetMonthsInYear abstract="1" public="1" set="method"><f a="year:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetMonthsInYear></overloads>
		</GetMonthsInYear>
		<GetSecond public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetSecond>
		<GetWeekOfYear public="1" set="method"><f a="time:rule:firstDayOfWeek">
	<c path="cs.system.DateTime"/>
	<e path="cs.system.globalization.CalendarWeekRule"/>
	<e path="cs.system.DayOfWeek"/>
	<x path="Int"/>
</f></GetWeekOfYear>
		<GetYear abstract="1" public="1" set="method"><f a="time">
	<c path="cs.system.DateTime"/>
	<x path="Int"/>
</f></GetYear>
		<IsLeapDay public="1" set="method">
			<f a="year:month:day">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLeapDay abstract="1" public="1" set="method"><f a="year:month:day:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLeapDay></overloads>
		</IsLeapDay>
		<IsLeapMonth public="1" set="method">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLeapMonth abstract="1" public="1" set="method"><f a="year:month:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLeapMonth></overloads>
		</IsLeapMonth>
		<IsLeapYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><IsLeapYear abstract="1" public="1" set="method"><f a="year:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsLeapYear></overloads>
		</IsLeapYear>
		<ToDateTime public="1" set="method">
			<f a="year:month:day:hour:minute:second:millisecond">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<overloads><ToDateTime abstract="1" public="1" set="method"><f a="year:month:day:hour:minute:second:millisecond:era">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime></overloads>
		</ToDateTime>
		<ToFourDigitYear public="1" set="method"><f a="year">
	<x path="Int"/>
	<x path="Int"/>
</f></ToFourDigitYear>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.Calendar"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CalendarAlgorithmType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CalendarAlgorithmType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<SolarCalendar><meta><m n=":csNative"><e>1</e></m></meta></SolarCalendar>
		<LunarCalendar><meta><m n=":csNative"><e>2</e></m></meta></LunarCalendar>
		<LunisolarCalendar><meta><m n=":csNative"><e>3</e></m></meta></LunisolarCalendar>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CalendarAlgorithmType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.globalization.CalendarWeekRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CalendarWeekRule">
		<FirstDay><meta><m n=":csNative"><e>0</e></m></meta></FirstDay>
		<FirstFullWeek><meta><m n=":csNative"><e>1</e></m></meta></FirstFullWeek>
		<FirstFourDayWeek><meta><m n=":csNative"><e>2</e></m></meta></FirstFourDayWeek>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CalendarWeekRule"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.CompareInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CompareInfo" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<GetCompareInfo public="1" set="method" static="1">
			<f a="culture">
				<x path="Int"/>
				<c path="cs.system.globalization.CompareInfo"/>
			</f>
			<overloads>
				<GetCompareInfo public="1" set="method"><f a="name:assembly">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.globalization.CompareInfo"/>
</f></GetCompareInfo>
				<GetCompareInfo public="1" set="method"><f a="culture:assembly">
	<x path="Int"/>
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.globalization.CompareInfo"/>
</f></GetCompareInfo>
				<GetCompareInfo public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.globalization.CompareInfo"/>
</f></GetCompareInfo>
			</overloads>
		</GetCompareInfo>
		<IsSortable public="1" set="method" static="1">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSortable public="1" set="method"><f a="text">
	<c path="String"/>
	<x path="Bool"/>
</f></IsSortable></overloads>
		</IsSortable>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<Compare public="1" set="method">
			<f a="string1:string2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<Compare public="1" set="method"><f a="string1:offset1:length1:string2:offset2:length2:options">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="string1:offset1:length1:string2:offset2:length2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="string1:offset1:string2:offset2:options">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="string1:offset1:string2:offset2">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Compare>
				<Compare public="1" set="method"><f a="string1:string2:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></Compare>
			</overloads>
		</Compare>
		<GetSortKey public="1" set="method">
			<f a="source">
				<c path="String"/>
				<c path="cs.system.globalization.SortKey"/>
			</f>
			<overloads><GetSortKey public="1" set="method"><f a="source:options">
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<c path="cs.system.globalization.SortKey"/>
</f></GetSortKey></overloads>
		</GetSortKey>
		<IndexOf public="1" set="method">
			<f a="source:value">
				<c path="String"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<overloads>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:count:options">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:count:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:count">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:options">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:count">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:startIndex">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></IndexOf>
				<IndexOf public="1" set="method"><f a="source:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></IndexOf>
			</overloads>
		</IndexOf>
		<IsPrefix public="1" set="method">
			<f a="source:prefix">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><IsPrefix public="1" set="method"><f a="source:prefix:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Bool"/>
</f></IsPrefix></overloads>
		</IsPrefix>
		<IsSuffix public="1" set="method">
			<f a="source:suffix">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><IsSuffix public="1" set="method"><f a="source:suffix:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Bool"/>
</f></IsSuffix></overloads>
		</IsSuffix>
		<LastIndexOf public="1" set="method">
			<f a="source:value">
				<c path="String"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<overloads>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:count:options">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:count:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:count">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:options">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:count">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:startIndex">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value:options">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<e path="cs.system.globalization.CompareOptions"/>
	<x path="Int"/>
</f></LastIndexOf>
				<LastIndexOf public="1" set="method"><f a="source:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></LastIndexOf>
			</overloads>
		</LastIndexOf>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_LCID final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_LCID>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.CompareInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CompareOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CompareOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<IgnoreNonSpace><meta><m n=":csNative"><e>2</e></m></meta></IgnoreNonSpace>
		<IgnoreSymbols><meta><m n=":csNative"><e>4</e></m></meta></IgnoreSymbols>
		<IgnoreKanaType><meta><m n=":csNative"><e>8</e></m></meta></IgnoreKanaType>
		<IgnoreWidth><meta><m n=":csNative"><e>16</e></m></meta></IgnoreWidth>
		<OrdinalIgnoreCase><meta><m n=":csNative"><e>268435456</e></m></meta></OrdinalIgnoreCase>
		<StringSort><meta><m n=":csNative"><e>536870912</e></m></meta></StringSort>
		<Ordinal><meta><m n=":csNative"><e>1073741824</e></m></meta></Ordinal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CompareOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.CultureInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CultureInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InstalledUICulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></InstalledUICulture>
		<CurrentUICulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></CurrentUICulture>
		<CurrentCulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></CurrentCulture>
		<InvariantCulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></InvariantCulture>
		<get_InvariantCulture public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_InvariantCulture>
		<CreateSpecificCulture public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></CreateSpecificCulture>
		<get_CurrentCulture public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_CurrentCulture>
		<get_CurrentUICulture public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_CurrentUICulture>
		<GetCultures public="1" set="method" static="1"><f a="types">
	<e path="cs.system.globalization.CultureTypes"/>
	<c path="cs.NativeArray"><c path="cs.system.globalization.CultureInfo"/></c>
</f></GetCultures>
		<ReadOnly public="1" set="method" static="1"><f a="ci">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></ReadOnly>
		<get_InstalledUICulture public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_InstalledUICulture>
		<GetCultureInfo public="1" set="method" static="1">
			<f a="culture">
				<x path="Int"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<overloads>
				<GetCultureInfo public="1" set="method"><f a="name:altName">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></GetCultureInfo>
				<GetCultureInfo public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></GetCultureInfo>
			</overloads>
		</GetCultureInfo>
		<GetCultureInfoByIetfLanguageTag public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></GetCultureInfoByIetfLanguageTag>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<EnglishName public="1" get="accessor" set="null"><c path="String"/></EnglishName>
		<DisplayName public="1" get="accessor" set="null"><c path="String"/></DisplayName>
		<DateTimeFormat public="1" get="accessor" set="accessor"><c path="cs.system.globalization.DateTimeFormatInfo"/></DateTimeFormat>
		<NumberFormat public="1" get="accessor" set="accessor"><c path="cs.system.globalization.NumberFormatInfo"/></NumberFormat>
		<IsNeutralCulture public="1" get="accessor" set="null"><x path="Bool"/></IsNeutralCulture>
		<CompareInfo public="1" get="accessor" set="null"><c path="cs.system.globalization.CompareInfo"/></CompareInfo>
		<UseUserOverride public="1" get="accessor" set="null"><x path="Bool"/></UseUserOverride>
		<TwoLetterISOLanguageName public="1" get="accessor" set="null"><c path="String"/></TwoLetterISOLanguageName>
		<ThreeLetterWindowsLanguageName public="1" get="accessor" set="null"><c path="String"/></ThreeLetterWindowsLanguageName>
		<ThreeLetterISOLanguageName public="1" get="accessor" set="null"><c path="String"/></ThreeLetterISOLanguageName>
		<TextInfo public="1" get="accessor" set="null"><c path="cs.system.globalization.TextInfo"/></TextInfo>
		<Parent public="1" get="accessor" set="null"><c path="cs.system.globalization.CultureInfo"/></Parent>
		<OptionalCalendars public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="cs.system.globalization.Calendar"/></c></OptionalCalendars>
		<Calendar public="1" get="accessor" set="null"><c path="cs.system.globalization.Calendar"/></Calendar>
		<NativeName public="1" get="accessor" set="null"><c path="String"/></NativeName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<KeyboardLayoutId public="1" get="accessor" set="null"><x path="Int"/></KeyboardLayoutId>
		<IetfLanguageTag public="1" get="accessor" set="null"><c path="String"/></IetfLanguageTag>
		<CultureTypes public="1" get="accessor" set="null"><e path="cs.system.globalization.CultureTypes"/></CultureTypes>
		<get_CultureTypes final="1" public="1" set="method"><f a=""><e path="cs.system.globalization.CultureTypes"/></f></get_CultureTypes>
		<GetConsoleFallbackUICulture final="1" public="1" set="method"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></GetConsoleFallbackUICulture>
		<get_IetfLanguageTag final="1" public="1" set="method"><f a=""><c path="String"/></f></get_IetfLanguageTag>
		<get_KeyboardLayoutId public="1" set="method"><f a=""><x path="Int"/></f></get_KeyboardLayoutId>
		<get_LCID public="1" set="method"><f a=""><x path="Int"/></f></get_LCID>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_NativeName public="1" set="method"><f a=""><c path="String"/></f></get_NativeName>
		<get_Calendar public="1" set="method"><f a=""><c path="cs.system.globalization.Calendar"/></f></get_Calendar>
		<get_OptionalCalendars public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.globalization.Calendar"/></c></f></get_OptionalCalendars>
		<get_Parent public="1" set="method"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_Parent>
		<get_TextInfo public="1" set="method"><f a=""><c path="cs.system.globalization.TextInfo"/></f></get_TextInfo>
		<get_ThreeLetterISOLanguageName public="1" set="method"><f a=""><c path="String"/></f></get_ThreeLetterISOLanguageName>
		<get_ThreeLetterWindowsLanguageName public="1" set="method"><f a=""><c path="String"/></f></get_ThreeLetterWindowsLanguageName>
		<get_TwoLetterISOLanguageName public="1" set="method"><f a=""><c path="String"/></f></get_TwoLetterISOLanguageName>
		<get_UseUserOverride final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_UseUserOverride>
		<ClearCachedData final="1" public="1" set="method"><f a=""><x path="Void"/></f></ClearCachedData>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_CompareInfo public="1" set="method"><f a=""><c path="cs.system.globalization.CompareInfo"/></f></get_CompareInfo>
		<get_IsNeutralCulture public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNeutralCulture>
		<get_NumberFormat public="1" set="method"><f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f></get_NumberFormat>
		<set_NumberFormat public="1" set="method"><f a="value">
	<c path="cs.system.globalization.NumberFormatInfo"/>
	<c path="cs.system.globalization.NumberFormatInfo"/>
</f></set_NumberFormat>
		<get_DateTimeFormat public="1" set="method"><f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f></get_DateTimeFormat>
		<set_DateTimeFormat public="1" set="method"><f a="value">
	<c path="cs.system.globalization.DateTimeFormatInfo"/>
	<c path="cs.system.globalization.DateTimeFormatInfo"/>
</f></set_DateTimeFormat>
		<get_DisplayName public="1" set="method"><f a=""><c path="String"/></f></get_DisplayName>
		<get_EnglishName public="1" set="method"><f a=""><c path="String"/></f></get_EnglishName>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<GetFormat public="1" set="method"><f a="formatType">
	<c path="cs.system.Type"/>
	<d/>
</f></GetFormat>
		<new final="1" public="1" set="method">
			<f a="culture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="name:useUserOverride">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="culture:useUserOverride">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.CultureInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CultureTypes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.CultureTypes">
		<NeutralCultures><meta><m n=":csNative"><e>1</e></m></meta></NeutralCultures>
		<SpecificCultures><meta><m n=":csNative"><e>2</e></m></meta></SpecificCultures>
		<InstalledWin32Cultures><meta><m n=":csNative"><e>4</e></m></meta></InstalledWin32Cultures>
		<AllCultures><meta><m n=":csNative"><e>7</e></m></meta></AllCultures>
		<UserCustomCulture><meta><m n=":csNative"><e>8</e></m></meta></UserCustomCulture>
		<ReplacementCultures><meta><m n=":csNative"><e>16</e></m></meta></ReplacementCultures>
		<WindowsOnlyCultures><meta><m n=":csNative"><e>32</e></m></meta></WindowsOnlyCultures>
		<FrameworkCultures><meta><m n=":csNative"><e>64</e></m></meta></FrameworkCultures>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CultureTypes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.DateTimeFormatInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.DateTimeFormatInfo" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InvariantInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.DateTimeFormatInfo"/></InvariantInfo>
		<CurrentInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.DateTimeFormatInfo"/></CurrentInfo>
		<GetInstance public="1" set="method" static="1"><f a="provider">
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.globalization.DateTimeFormatInfo"/>
</f></GetInstance>
		<ReadOnly public="1" set="method" static="1"><f a="dtfi">
	<c path="cs.system.globalization.DateTimeFormatInfo"/>
	<c path="cs.system.globalization.DateTimeFormatInfo"/>
</f></ReadOnly>
		<get_CurrentInfo public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f></get_CurrentInfo>
		<get_InvariantInfo public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f></get_InvariantInfo>
		<ShortestDayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></ShortestDayNames>
		<NativeCalendarName public="1" get="accessor" set="null"><c path="String"/></NativeCalendarName>
		<MonthGenitiveNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></MonthGenitiveNames>
		<AbbreviatedMonthGenitiveNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedMonthGenitiveNames>
		<UniversalSortableDateTimePattern public="1" get="accessor" set="null"><c path="String"/></UniversalSortableDateTimePattern>
		<SortableDateTimePattern public="1" get="accessor" set="null"><c path="String"/></SortableDateTimePattern>
		<RFC1123Pattern public="1" get="accessor" set="null"><c path="String"/></RFC1123Pattern>
		<CalendarWeekRule public="1" get="accessor" set="accessor"><e path="cs.system.globalization.CalendarWeekRule"/></CalendarWeekRule>
		<Calendar public="1" get="accessor" set="accessor"><c path="cs.system.globalization.Calendar"/></Calendar>
		<FirstDayOfWeek public="1" get="accessor" set="accessor"><e path="cs.system.DayOfWeek"/></FirstDayOfWeek>
		<FullDateTimePattern public="1" get="accessor" set="accessor"><c path="String"/></FullDateTimePattern>
		<YearMonthPattern public="1" get="accessor" set="accessor"><c path="String"/></YearMonthPattern>
		<MonthDayPattern public="1" get="accessor" set="accessor"><c path="String"/></MonthDayPattern>
		<LongTimePattern public="1" get="accessor" set="accessor"><c path="String"/></LongTimePattern>
		<ShortTimePattern public="1" get="accessor" set="accessor"><c path="String"/></ShortTimePattern>
		<ShortDatePattern public="1" get="accessor" set="accessor"><c path="String"/></ShortDatePattern>
		<LongDatePattern public="1" get="accessor" set="accessor"><c path="String"/></LongDatePattern>
		<TimeSeparator public="1" get="accessor" set="accessor"><c path="String"/></TimeSeparator>
		<DateSeparator public="1" get="accessor" set="accessor"><c path="String"/></DateSeparator>
		<PMDesignator public="1" get="accessor" set="accessor"><c path="String"/></PMDesignator>
		<AMDesignator public="1" get="accessor" set="accessor"><c path="String"/></AMDesignator>
		<MonthNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></MonthNames>
		<DayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></DayNames>
		<AbbreviatedMonthNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedMonthNames>
		<AbbreviatedDayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedDayNames>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<GetFormat final="1" public="1" set="method"><f a="formatType">
	<c path="cs.system.Type"/>
	<d/>
</f></GetFormat>
		<GetAbbreviatedEraName final="1" public="1" set="method"><f a="era">
	<x path="Int"/>
	<c path="String"/>
</f></GetAbbreviatedEraName>
		<GetAbbreviatedMonthName final="1" public="1" set="method"><f a="month">
	<x path="Int"/>
	<c path="String"/>
</f></GetAbbreviatedMonthName>
		<GetEra final="1" public="1" set="method"><f a="eraName">
	<c path="String"/>
	<x path="Int"/>
</f></GetEra>
		<GetEraName final="1" public="1" set="method"><f a="era">
	<x path="Int"/>
	<c path="String"/>
</f></GetEraName>
		<GetMonthName final="1" public="1" set="method"><f a="month">
	<x path="Int"/>
	<c path="String"/>
</f></GetMonthName>
		<get_AbbreviatedDayNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_AbbreviatedDayNames>
		<set_AbbreviatedDayNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_AbbreviatedDayNames>
		<get_AbbreviatedMonthNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_AbbreviatedMonthNames>
		<set_AbbreviatedMonthNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_AbbreviatedMonthNames>
		<get_DayNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_DayNames>
		<set_DayNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_DayNames>
		<get_MonthNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_MonthNames>
		<set_MonthNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_MonthNames>
		<get_AMDesignator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_AMDesignator>
		<set_AMDesignator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_AMDesignator>
		<get_PMDesignator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PMDesignator>
		<set_PMDesignator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PMDesignator>
		<get_DateSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DateSeparator>
		<set_DateSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_DateSeparator>
		<get_TimeSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_TimeSeparator>
		<set_TimeSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_TimeSeparator>
		<get_LongDatePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LongDatePattern>
		<set_LongDatePattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LongDatePattern>
		<get_ShortDatePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ShortDatePattern>
		<set_ShortDatePattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShortDatePattern>
		<get_ShortTimePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ShortTimePattern>
		<set_ShortTimePattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ShortTimePattern>
		<get_LongTimePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_LongTimePattern>
		<set_LongTimePattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LongTimePattern>
		<get_MonthDayPattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_MonthDayPattern>
		<set_MonthDayPattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_MonthDayPattern>
		<get_YearMonthPattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_YearMonthPattern>
		<set_YearMonthPattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_YearMonthPattern>
		<get_FullDateTimePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FullDateTimePattern>
		<set_FullDateTimePattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_FullDateTimePattern>
		<get_FirstDayOfWeek final="1" public="1" set="method"><f a=""><e path="cs.system.DayOfWeek"/></f></get_FirstDayOfWeek>
		<set_FirstDayOfWeek final="1" public="1" set="method"><f a="value">
	<e path="cs.system.DayOfWeek"/>
	<e path="cs.system.DayOfWeek"/>
</f></set_FirstDayOfWeek>
		<get_Calendar final="1" public="1" set="method"><f a=""><c path="cs.system.globalization.Calendar"/></f></get_Calendar>
		<set_Calendar final="1" public="1" set="method"><f a="value">
	<c path="cs.system.globalization.Calendar"/>
	<c path="cs.system.globalization.Calendar"/>
</f></set_Calendar>
		<get_CalendarWeekRule final="1" public="1" set="method"><f a=""><e path="cs.system.globalization.CalendarWeekRule"/></f></get_CalendarWeekRule>
		<set_CalendarWeekRule final="1" public="1" set="method"><f a="value">
	<e path="cs.system.globalization.CalendarWeekRule"/>
	<e path="cs.system.globalization.CalendarWeekRule"/>
</f></set_CalendarWeekRule>
		<get_RFC1123Pattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_RFC1123Pattern>
		<get_SortableDateTimePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_SortableDateTimePattern>
		<get_UniversalSortableDateTimePattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_UniversalSortableDateTimePattern>
		<GetAllDateTimePatterns final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<overloads><GetAllDateTimePatterns final="1" public="1" set="method"><f a="format">
	<t path="cs.types.Char16"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetAllDateTimePatterns></overloads>
		</GetAllDateTimePatterns>
		<GetDayName final="1" public="1" set="method"><f a="dayofweek">
	<e path="cs.system.DayOfWeek"/>
	<c path="String"/>
</f></GetDayName>
		<GetAbbreviatedDayName final="1" public="1" set="method"><f a="dayofweek">
	<e path="cs.system.DayOfWeek"/>
	<c path="String"/>
</f></GetAbbreviatedDayName>
		<get_AbbreviatedMonthGenitiveNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_AbbreviatedMonthGenitiveNames>
		<set_AbbreviatedMonthGenitiveNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_AbbreviatedMonthGenitiveNames>
		<get_MonthGenitiveNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_MonthGenitiveNames>
		<set_MonthGenitiveNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_MonthGenitiveNames>
		<get_NativeCalendarName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NativeCalendarName>
		<get_ShortestDayNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_ShortestDayNames>
		<set_ShortestDayNames final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_ShortestDayNames>
		<GetShortestDayName final="1" public="1" set="method"><f a="dayOfWeek">
	<e path="cs.system.DayOfWeek"/>
	<c path="String"/>
</f></GetShortestDayName>
		<SetAllDateTimePatterns final="1" public="1" set="method"><f a="patterns:format">
	<c path="cs.NativeArray"><c path="String"/></c>
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></SetAllDateTimePatterns>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.DateTimeFormatInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.DateTimeStyles" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.DateTimeStyles">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<AllowLeadingWhite><meta><m n=":csNative"><e>1</e></m></meta></AllowLeadingWhite>
		<AllowTrailingWhite><meta><m n=":csNative"><e>2</e></m></meta></AllowTrailingWhite>
		<AllowInnerWhite><meta><m n=":csNative"><e>4</e></m></meta></AllowInnerWhite>
		<AllowWhiteSpaces><meta><m n=":csNative"><e>7</e></m></meta></AllowWhiteSpaces>
		<NoCurrentDateDefault><meta><m n=":csNative"><e>8</e></m></meta></NoCurrentDateDefault>
		<AdjustToUniversal><meta><m n=":csNative"><e>16</e></m></meta></AdjustToUniversal>
		<AssumeLocal><meta><m n=":csNative"><e>32</e></m></meta></AssumeLocal>
		<AssumeUniversal><meta><m n=":csNative"><e>64</e></m></meta></AssumeUniversal>
		<RoundtripKind><meta><m n=":csNative"><e>128</e></m></meta></RoundtripKind>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.DateTimeStyles"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.DaylightTime" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.DaylightTime" extern="1">
		<Delta public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></Delta>
		<End public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></End>
		<Start public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></Start>
		<get_Start final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_Start>
		<get_End final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_End>
		<get_Delta final="1" public="1" set="method"><f a=""><c path="cs.system.TimeSpan"/></f></get_Delta>
		<new final="1" public="1" set="method"><f a="start:end:delta">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
	<c path="cs.system.TimeSpan"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.DaylightTime"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.DigitShapes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.DigitShapes">
		<Context><meta><m n=":csNative"><e>0</e></m></meta></Context>
		<None><meta><m n=":csNative"><e>1</e></m></meta></None>
		<NativeNational><meta><m n=":csNative"><e>2</e></m></meta></NativeNational>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.DigitShapes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.NumberFormatInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.NumberFormatInfo" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InvariantInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.NumberFormatInfo"/></InvariantInfo>
		<CurrentInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.NumberFormatInfo"/></CurrentInfo>
		<get_CurrentInfo public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f></get_CurrentInfo>
		<get_InvariantInfo public="1" set="method" static="1"><f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f></get_InvariantInfo>
		<ReadOnly public="1" set="method" static="1"><f a="nfi">
	<c path="cs.system.globalization.NumberFormatInfo"/>
	<c path="cs.system.globalization.NumberFormatInfo"/>
</f></ReadOnly>
		<GetInstance public="1" set="method" static="1"><f a="formatProvider">
	<c path="cs.system.IFormatProvider"/>
	<c path="cs.system.globalization.NumberFormatInfo"/>
</f></GetInstance>
		<PositiveSign public="1" get="accessor" set="accessor"><c path="String"/></PositiveSign>
		<PositiveInfinitySymbol public="1" get="accessor" set="accessor"><c path="String"/></PositiveInfinitySymbol>
		<PerMilleSymbol public="1" get="accessor" set="accessor"><c path="String"/></PerMilleSymbol>
		<PercentSymbol public="1" get="accessor" set="accessor"><c path="String"/></PercentSymbol>
		<PercentPositivePattern public="1" get="accessor" set="accessor"><x path="Int"/></PercentPositivePattern>
		<PercentNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></PercentNegativePattern>
		<PercentGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></PercentGroupSizes>
		<PercentGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></PercentGroupSeparator>
		<PercentDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></PercentDecimalSeparator>
		<PercentDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></PercentDecimalDigits>
		<NumberNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></NumberNegativePattern>
		<NumberGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></NumberGroupSizes>
		<NumberGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></NumberGroupSeparator>
		<NumberDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></NumberDecimalSeparator>
		<NumberDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></NumberDecimalDigits>
		<NegativeSign public="1" get="accessor" set="accessor"><c path="String"/></NegativeSign>
		<NegativeInfinitySymbol public="1" get="accessor" set="accessor"><c path="String"/></NegativeInfinitySymbol>
		<DigitSubstitution public="1" get="accessor" set="accessor"><e path="cs.system.globalization.DigitShapes"/></DigitSubstitution>
		<NativeDigits public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></NativeDigits>
		<NaNSymbol public="1" get="accessor" set="accessor"><c path="String"/></NaNSymbol>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<CurrencySymbol public="1" get="accessor" set="accessor"><c path="String"/></CurrencySymbol>
		<CurrencyPositivePattern public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyPositivePattern>
		<CurrencyNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyNegativePattern>
		<CurrencyGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></CurrencyGroupSizes>
		<CurrencyGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></CurrencyGroupSeparator>
		<CurrencyDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></CurrencyDecimalSeparator>
		<CurrencyDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyDecimalDigits>
		<get_CurrencyDecimalDigits final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_CurrencyDecimalDigits>
		<set_CurrencyDecimalDigits final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CurrencyDecimalDigits>
		<get_CurrencyDecimalSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CurrencyDecimalSeparator>
		<set_CurrencyDecimalSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CurrencyDecimalSeparator>
		<get_CurrencyGroupSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CurrencyGroupSeparator>
		<set_CurrencyGroupSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CurrencyGroupSeparator>
		<get_CurrencyGroupSizes final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><x path="Int"/></c></f></get_CurrencyGroupSizes>
		<set_CurrencyGroupSizes final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></set_CurrencyGroupSizes>
		<get_CurrencyNegativePattern final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_CurrencyNegativePattern>
		<set_CurrencyNegativePattern final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CurrencyNegativePattern>
		<get_CurrencyPositivePattern final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_CurrencyPositivePattern>
		<set_CurrencyPositivePattern final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CurrencyPositivePattern>
		<get_CurrencySymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CurrencySymbol>
		<set_CurrencySymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CurrencySymbol>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_NaNSymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NaNSymbol>
		<set_NaNSymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NaNSymbol>
		<get_NativeDigits final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_NativeDigits>
		<set_NativeDigits final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_NativeDigits>
		<get_DigitSubstitution final="1" public="1" set="method"><f a=""><e path="cs.system.globalization.DigitShapes"/></f></get_DigitSubstitution>
		<set_DigitSubstitution final="1" public="1" set="method"><f a="value">
	<e path="cs.system.globalization.DigitShapes"/>
	<e path="cs.system.globalization.DigitShapes"/>
</f></set_DigitSubstitution>
		<get_NegativeInfinitySymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NegativeInfinitySymbol>
		<set_NegativeInfinitySymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NegativeInfinitySymbol>
		<get_NegativeSign final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NegativeSign>
		<set_NegativeSign final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NegativeSign>
		<get_NumberDecimalDigits final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_NumberDecimalDigits>
		<set_NumberDecimalDigits final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_NumberDecimalDigits>
		<get_NumberDecimalSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NumberDecimalSeparator>
		<set_NumberDecimalSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NumberDecimalSeparator>
		<get_NumberGroupSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_NumberGroupSeparator>
		<set_NumberGroupSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NumberGroupSeparator>
		<get_NumberGroupSizes final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><x path="Int"/></c></f></get_NumberGroupSizes>
		<set_NumberGroupSizes final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></set_NumberGroupSizes>
		<get_NumberNegativePattern final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_NumberNegativePattern>
		<set_NumberNegativePattern final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_NumberNegativePattern>
		<get_PercentDecimalDigits final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PercentDecimalDigits>
		<set_PercentDecimalDigits final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_PercentDecimalDigits>
		<get_PercentDecimalSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PercentDecimalSeparator>
		<set_PercentDecimalSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PercentDecimalSeparator>
		<get_PercentGroupSeparator final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PercentGroupSeparator>
		<set_PercentGroupSeparator final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PercentGroupSeparator>
		<get_PercentGroupSizes final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><x path="Int"/></c></f></get_PercentGroupSizes>
		<set_PercentGroupSizes final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></set_PercentGroupSizes>
		<get_PercentNegativePattern final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PercentNegativePattern>
		<set_PercentNegativePattern final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_PercentNegativePattern>
		<get_PercentPositivePattern final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_PercentPositivePattern>
		<set_PercentPositivePattern final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_PercentPositivePattern>
		<get_PercentSymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PercentSymbol>
		<set_PercentSymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PercentSymbol>
		<get_PerMilleSymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PerMilleSymbol>
		<set_PerMilleSymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PerMilleSymbol>
		<get_PositiveInfinitySymbol final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PositiveInfinitySymbol>
		<set_PositiveInfinitySymbol final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PositiveInfinitySymbol>
		<get_PositiveSign final="1" public="1" set="method"><f a=""><c path="String"/></f></get_PositiveSign>
		<set_PositiveSign final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_PositiveSign>
		<GetFormat final="1" public="1" set="method"><f a="formatType">
	<c path="cs.system.Type"/>
	<d/>
</f></GetFormat>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.NumberFormatInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.NumberStyles" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.NumberStyles">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<AllowLeadingWhite><meta><m n=":csNative"><e>1</e></m></meta></AllowLeadingWhite>
		<AllowTrailingWhite><meta><m n=":csNative"><e>2</e></m></meta></AllowTrailingWhite>
		<AllowLeadingSign><meta><m n=":csNative"><e>4</e></m></meta></AllowLeadingSign>
		<Integer><meta><m n=":csNative"><e>7</e></m></meta></Integer>
		<AllowTrailingSign><meta><m n=":csNative"><e>8</e></m></meta></AllowTrailingSign>
		<AllowParentheses><meta><m n=":csNative"><e>16</e></m></meta></AllowParentheses>
		<AllowDecimalPoint><meta><m n=":csNative"><e>32</e></m></meta></AllowDecimalPoint>
		<AllowThousands><meta><m n=":csNative"><e>64</e></m></meta></AllowThousands>
		<Number><meta><m n=":csNative"><e>111</e></m></meta></Number>
		<AllowExponent><meta><m n=":csNative"><e>128</e></m></meta></AllowExponent>
		<Float><meta><m n=":csNative"><e>167</e></m></meta></Float>
		<AllowCurrencySymbol><meta><m n=":csNative"><e>256</e></m></meta></AllowCurrencySymbol>
		<Currency><meta><m n=":csNative"><e>383</e></m></meta></Currency>
		<Any><meta><m n=":csNative"><e>511</e></m></meta></Any>
		<AllowHexSpecifier><meta><m n=":csNative"><e>512</e></m></meta></AllowHexSpecifier>
		<HexNumber><meta><m n=":csNative"><e>515</e></m></meta></HexNumber>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.NumberStyles"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.SortKey" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.SortKey" extern="1">
		<Compare public="1" set="method" static="1"><f a="sortkey1:sortkey2">
	<c path="cs.system.globalization.SortKey"/>
	<c path="cs.system.globalization.SortKey"/>
	<x path="Int"/>
</f></Compare>
		<KeyData public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></KeyData>
		<OriginalString public="1" get="accessor" set="null"><c path="String"/></OriginalString>
		<get_OriginalString public="1" set="method"><f a=""><c path="String"/></f></get_OriginalString>
		<get_KeyData public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></get_KeyData>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.SortKey"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.TextInfo_Data" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.TextInfo" module="cs.system.globalization.TextInfo" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<list_sep public="1"><t path="cs.types.UInt8"/></list_sep>
		<oem public="1"><x path="Int"/></oem>
		<mac public="1"><x path="Int"/></mac>
		<ebcdic public="1"><x path="Int"/></ebcdic>
		<ansi public="1"><x path="Int"/></ansi>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.TextInfo.Data"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.TextInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.TextInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<ReadOnly public="1" set="method" static="1"><f a="textInfo">
	<c path="cs.system.globalization.TextInfo"/>
	<c path="cs.system.globalization.TextInfo"/>
</f></ReadOnly>
		<IsRightToLeft public="1" get="accessor" set="null"><x path="Bool"/></IsRightToLeft>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<CultureName public="1" get="accessor" set="null"><c path="String"/></CultureName>
		<OEMCodePage public="1" get="accessor" set="null"><x path="Int"/></OEMCodePage>
		<MacCodePage public="1" get="accessor" set="null"><x path="Int"/></MacCodePage>
		<ListSeparator public="1" get="accessor" set="accessor"><c path="String"/></ListSeparator>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<EBCDICCodePage public="1" get="accessor" set="null"><x path="Int"/></EBCDICCodePage>
		<ANSICodePage public="1" get="accessor" set="null"><x path="Int"/></ANSICodePage>
		<get_ANSICodePage public="1" set="method"><f a=""><x path="Int"/></f></get_ANSICodePage>
		<get_EBCDICCodePage public="1" set="method"><f a=""><x path="Int"/></f></get_EBCDICCodePage>
		<get_LCID final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_LCID>
		<get_ListSeparator public="1" set="method"><f a=""><c path="String"/></f></get_ListSeparator>
		<set_ListSeparator public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_ListSeparator>
		<get_MacCodePage public="1" set="method"><f a=""><x path="Int"/></f></get_MacCodePage>
		<get_OEMCodePage public="1" set="method"><f a=""><x path="Int"/></f></get_OEMCodePage>
		<get_CultureName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CultureName>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsRightToLeft final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsRightToLeft>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<ToTitleCase final="1" public="1" set="method"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></ToTitleCase>
		<ToLower public="1" set="method">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<overloads><ToLower public="1" set="method"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></ToLower></overloads>
		</ToLower>
		<ToUpper public="1" set="method">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<overloads><ToUpper public="1" set="method"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></ToUpper></overloads>
		</ToUpper>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.TextInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.UnicodeCategory" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.globalization.UnicodeCategory">
		<UppercaseLetter><meta><m n=":csNative"><e>0</e></m></meta></UppercaseLetter>
		<LowercaseLetter><meta><m n=":csNative"><e>1</e></m></meta></LowercaseLetter>
		<TitlecaseLetter><meta><m n=":csNative"><e>2</e></m></meta></TitlecaseLetter>
		<ModifierLetter><meta><m n=":csNative"><e>3</e></m></meta></ModifierLetter>
		<OtherLetter><meta><m n=":csNative"><e>4</e></m></meta></OtherLetter>
		<NonSpacingMark><meta><m n=":csNative"><e>5</e></m></meta></NonSpacingMark>
		<SpacingCombiningMark><meta><m n=":csNative"><e>6</e></m></meta></SpacingCombiningMark>
		<EnclosingMark><meta><m n=":csNative"><e>7</e></m></meta></EnclosingMark>
		<DecimalDigitNumber><meta><m n=":csNative"><e>8</e></m></meta></DecimalDigitNumber>
		<LetterNumber><meta><m n=":csNative"><e>9</e></m></meta></LetterNumber>
		<OtherNumber><meta><m n=":csNative"><e>10</e></m></meta></OtherNumber>
		<SpaceSeparator><meta><m n=":csNative"><e>11</e></m></meta></SpaceSeparator>
		<LineSeparator><meta><m n=":csNative"><e>12</e></m></meta></LineSeparator>
		<ParagraphSeparator><meta><m n=":csNative"><e>13</e></m></meta></ParagraphSeparator>
		<Control><meta><m n=":csNative"><e>14</e></m></meta></Control>
		<Format><meta><m n=":csNative"><e>15</e></m></meta></Format>
		<Surrogate><meta><m n=":csNative"><e>16</e></m></meta></Surrogate>
		<PrivateUse><meta><m n=":csNative"><e>17</e></m></meta></PrivateUse>
		<ConnectorPunctuation><meta><m n=":csNative"><e>18</e></m></meta></ConnectorPunctuation>
		<DashPunctuation><meta><m n=":csNative"><e>19</e></m></meta></DashPunctuation>
		<OpenPunctuation><meta><m n=":csNative"><e>20</e></m></meta></OpenPunctuation>
		<ClosePunctuation><meta><m n=":csNative"><e>21</e></m></meta></ClosePunctuation>
		<InitialQuotePunctuation><meta><m n=":csNative"><e>22</e></m></meta></InitialQuotePunctuation>
		<FinalQuotePunctuation><meta><m n=":csNative"><e>23</e></m></meta></FinalQuotePunctuation>
		<OtherPunctuation><meta><m n=":csNative"><e>24</e></m></meta></OtherPunctuation>
		<MathSymbol><meta><m n=":csNative"><e>25</e></m></meta></MathSymbol>
		<CurrencySymbol><meta><m n=":csNative"><e>26</e></m></meta></CurrencySymbol>
		<ModifierSymbol><meta><m n=":csNative"><e>27</e></m></meta></ModifierSymbol>
		<OtherSymbol><meta><m n=":csNative"><e>28</e></m></meta></OtherSymbol>
		<OtherNotAssigned><meta><m n=":csNative"><e>29</e></m></meta></OtherNotAssigned>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.UnicodeCategory"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.Directory" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.Directory" extern="1" final="1">
		<CreateDirectory public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.DirectoryInfo"/>
			</f>
			<overloads><CreateDirectory public="1" set="method"><f a="path:directorySecurity">
	<c path="String"/>
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	<c path="cs.system.io.DirectoryInfo"/>
</f></CreateDirectory></overloads>
		</CreateDirectory>
		<Delete public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><Delete public="1" set="method"><f a="path:recursive">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></Delete></overloads>
		</Delete>
		<Exists public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></Exists>
		<GetLastAccessTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastAccessTime>
		<GetLastAccessTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastAccessTimeUtc>
		<GetLastWriteTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastWriteTime>
		<GetLastWriteTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastWriteTimeUtc>
		<GetCreationTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetCreationTime>
		<GetCreationTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetCreationTimeUtc>
		<GetCurrentDirectory public="1" set="method" static="1"><f a=""><c path="String"/></f></GetCurrentDirectory>
		<GetDirectories public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads>
				<GetDirectories public="1" set="method"><f a="path:searchPattern:searchOption">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.io.SearchOption"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetDirectories>
				<GetDirectories public="1" set="method"><f a="path:searchPattern">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetDirectories>
			</overloads>
		</GetDirectories>
		<GetDirectoryRoot public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></GetDirectoryRoot>
		<GetFiles public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads>
				<GetFiles public="1" set="method"><f a="path:searchPattern:searchOption">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.io.SearchOption"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetFiles>
				<GetFiles public="1" set="method"><f a="path:searchPattern">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetFiles>
			</overloads>
		</GetFiles>
		<GetFileSystemEntries public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads><GetFileSystemEntries public="1" set="method"><f a="path:searchPattern">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></GetFileSystemEntries></overloads>
		</GetFileSystemEntries>
		<GetLogicalDrives public="1" set="method" static="1"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetLogicalDrives>
		<GetParent public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.DirectoryInfo"/>
</f></GetParent>
		<Move public="1" set="method" static="1"><f a="sourceDirName:destDirName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></Move>
		<SetAccessControl public="1" set="method" static="1"><f a="path:directorySecurity">
	<c path="String"/>
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<SetCreationTime public="1" set="method" static="1"><f a="path:creationTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetCreationTime>
		<SetCreationTimeUtc public="1" set="method" static="1"><f a="path:creationTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetCreationTimeUtc>
		<SetCurrentDirectory public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></SetCurrentDirectory>
		<SetLastAccessTime public="1" set="method" static="1"><f a="path:lastAccessTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastAccessTime>
		<SetLastAccessTimeUtc public="1" set="method" static="1"><f a="path:lastAccessTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastAccessTimeUtc>
		<SetLastWriteTime public="1" set="method" static="1"><f a="path:lastWriteTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastWriteTime>
		<SetLastWriteTimeUtc public="1" set="method" static="1"><f a="path:lastWriteTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastWriteTimeUtc>
		<GetAccessControl public="1" set="method" static="1">
			<f a="path:includeSections">
				<c path="String"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
			</f>
			<overloads><GetAccessControl public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
</f></GetAccessControl></overloads>
		</GetAccessControl>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.Directory"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.FileSystemInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileSystemInfo" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<LastWriteTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastWriteTimeUtc>
		<LastWriteTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastWriteTime>
		<LastAccessTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastAccessTimeUtc>
		<LastAccessTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastAccessTime>
		<CreationTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></CreationTimeUtc>
		<CreationTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></CreationTime>
		<Attributes public="1" get="accessor" set="accessor"><e path="cs.system.io.FileAttributes"/></Attributes>
		<Extension public="1" get="accessor" set="null"><c path="String"/></Extension>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null"><x path="Bool"/></Exists>
		<OriginalPath><c path="String"/></OriginalPath>
		<FullPath><c path="String"/></FullPath>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<get_Exists abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Exists>
		<get_Name abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_FullName public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_Extension final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Extension>
		<get_Attributes final="1" public="1" set="method"><f a=""><e path="cs.system.io.FileAttributes"/></f></get_Attributes>
		<set_Attributes final="1" public="1" set="method"><f a="value">
	<e path="cs.system.io.FileAttributes"/>
	<e path="cs.system.io.FileAttributes"/>
</f></set_Attributes>
		<get_CreationTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_CreationTime>
		<set_CreationTime final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_CreationTime>
		<get_CreationTimeUtc final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_CreationTimeUtc>
		<set_CreationTimeUtc final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_CreationTimeUtc>
		<get_LastAccessTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_LastAccessTime>
		<set_LastAccessTime final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_LastAccessTime>
		<get_LastAccessTimeUtc final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_LastAccessTimeUtc>
		<set_LastAccessTimeUtc final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_LastAccessTimeUtc>
		<get_LastWriteTime final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_LastWriteTime>
		<set_LastWriteTime final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_LastWriteTime>
		<get_LastWriteTimeUtc final="1" public="1" set="method"><f a=""><c path="cs.system.DateTime"/></f></get_LastWriteTimeUtc>
		<set_LastWriteTimeUtc final="1" public="1" set="method"><f a="value">
	<c path="cs.system.DateTime"/>
	<c path="cs.system.DateTime"/>
</f></set_LastWriteTimeUtc>
		<Delete abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></Delete>
		<Refresh final="1" public="1" set="method"><f a=""><x path="Void"/></f></Refresh>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" set="method">
	<f a="info:context">
		<c path="cs.system.runtime.serialization.SerializationInfo"/>
		<c path="cs.system.runtime.serialization.StreamingContext"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileSystemInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.DirectoryInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.DirectoryInfo" extern="1" final="1">
		<extends path="cs.system.io.FileSystemInfo"/>
		<Root public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Root>
		<Parent public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Parent>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null" override="1"><x path="Bool"/></Exists>
		<get_Exists public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_Exists>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Parent final="1" public="1" set="method"><f a=""><c path="cs.system.io.DirectoryInfo"/></f></get_Parent>
		<get_Root final="1" public="1" set="method"><f a=""><c path="cs.system.io.DirectoryInfo"/></f></get_Root>
		<Create final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Create final="1" public="1" set="method"><f a="directorySecurity">
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	<x path="Void"/>
</f></Create></overloads>
		</Create>
		<CreateSubdirectory final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.DirectoryInfo"/>
			</f>
			<overloads><CreateSubdirectory final="1" public="1" set="method"><f a="path:directorySecurity">
	<c path="String"/>
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	<c path="cs.system.io.DirectoryInfo"/>
</f></CreateSubdirectory></overloads>
		</CreateSubdirectory>
		<GetFiles final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c></f>
			<overloads>
				<GetFiles final="1" public="1" set="method"><f a="searchPattern:searchOption">
	<c path="String"/>
	<e path="cs.system.io.SearchOption"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c>
</f></GetFiles>
				<GetFiles final="1" public="1" set="method"><f a="searchPattern">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c>
</f></GetFiles>
			</overloads>
		</GetFiles>
		<GetDirectories final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c></f>
			<overloads>
				<GetDirectories final="1" public="1" set="method"><f a="searchPattern:searchOption">
	<c path="String"/>
	<e path="cs.system.io.SearchOption"/>
	<c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c>
</f></GetDirectories>
				<GetDirectories final="1" public="1" set="method"><f a="searchPattern">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c>
</f></GetDirectories>
			</overloads>
		</GetDirectories>
		<GetFileSystemInfos final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileSystemInfo"/></c></f>
			<overloads><GetFileSystemInfos final="1" public="1" set="method"><f a="searchPattern">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileSystemInfo"/></c>
</f></GetFileSystemInfos></overloads>
		</GetFileSystemInfos>
		<Delete public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<overloads><Delete final="1" public="1" set="method"><f a="recursive">
	<x path="Bool"/>
	<x path="Void"/>
</f></Delete></overloads>
		</Delete>
		<MoveTo final="1" public="1" set="method"><f a="destDirName">
	<c path="String"/>
	<x path="Void"/>
</f></MoveTo>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.DirectorySecurity"/></f>
			<overloads><GetAccessControl final="1" public="1" set="method"><f a="includeSections">
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
</f></GetAccessControl></overloads>
		</GetAccessControl>
		<SetAccessControl final="1" public="1" set="method"><f a="directorySecurity">
	<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<new final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.DirectoryInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.File" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.File" extern="1" final="1">
		<AppendAllText public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><AppendAllText public="1" set="method"><f a="path:contents:encoding">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></AppendAllText></overloads>
		</AppendAllText>
		<AppendText public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.StreamWriter"/>
</f></AppendText>
		<Copy public="1" set="method" static="1">
			<f a="sourceFileName:destFileName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><Copy public="1" set="method"><f a="sourceFileName:destFileName:overwrite">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></Copy></overloads>
		</Copy>
		<Create public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<overloads>
				<Create public="1" set="method"><f a="path:bufferSize:options:fileSecurity">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.io.FileOptions"/>
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
	<c path="cs.system.io.FileStream"/>
</f></Create>
				<Create public="1" set="method"><f a="path:bufferSize:options">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.io.FileOptions"/>
	<c path="cs.system.io.FileStream"/>
</f></Create>
				<Create public="1" set="method"><f a="path:bufferSize">
	<c path="String"/>
	<x path="Int"/>
	<c path="cs.system.io.FileStream"/>
</f></Create>
			</overloads>
		</Create>
		<CreateText public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.StreamWriter"/>
</f></CreateText>
		<Delete public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></Delete>
		<Exists public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></Exists>
		<GetAccessControl public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.security.accesscontrol.FileSecurity"/>
			</f>
			<overloads><GetAccessControl public="1" set="method"><f a="path:includeSections">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
</f></GetAccessControl></overloads>
		</GetAccessControl>
		<GetAttributes public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<e path="cs.system.io.FileAttributes"/>
</f></GetAttributes>
		<GetCreationTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetCreationTime>
		<GetCreationTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetCreationTimeUtc>
		<GetLastAccessTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastAccessTime>
		<GetLastAccessTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastAccessTimeUtc>
		<GetLastWriteTime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastWriteTime>
		<GetLastWriteTimeUtc public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetLastWriteTimeUtc>
		<Move public="1" set="method" static="1"><f a="sourceFileName:destFileName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></Move>
		<Open public="1" set="method" static="1">
			<f a="path:mode">
				<c path="String"/>
				<e path="cs.system.io.FileMode"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<overloads>
				<Open public="1" set="method"><f a="path:mode:access:share">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<c path="cs.system.io.FileStream"/>
</f></Open>
				<Open public="1" set="method"><f a="path:mode:access">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<c path="cs.system.io.FileStream"/>
</f></Open>
			</overloads>
		</Open>
		<OpenRead public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.FileStream"/>
</f></OpenRead>
		<OpenText public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.StreamReader"/>
</f></OpenText>
		<OpenWrite public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.system.io.FileStream"/>
</f></OpenWrite>
		<Replace public="1" set="method" static="1">
			<f a="sourceFileName:destinationFileName:destinationBackupFileName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><Replace public="1" set="method"><f a="sourceFileName:destinationFileName:destinationBackupFileName:ignoreMetadataErrors">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></Replace></overloads>
		</Replace>
		<SetAccessControl public="1" set="method" static="1"><f a="path:fileSecurity">
	<c path="String"/>
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<SetAttributes public="1" set="method" static="1"><f a="path:fileAttributes">
	<c path="String"/>
	<e path="cs.system.io.FileAttributes"/>
	<x path="Void"/>
</f></SetAttributes>
		<SetCreationTime public="1" set="method" static="1"><f a="path:creationTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetCreationTime>
		<SetCreationTimeUtc public="1" set="method" static="1"><f a="path:creationTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetCreationTimeUtc>
		<SetLastAccessTime public="1" set="method" static="1"><f a="path:lastAccessTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastAccessTime>
		<SetLastAccessTimeUtc public="1" set="method" static="1"><f a="path:lastAccessTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastAccessTimeUtc>
		<SetLastWriteTime public="1" set="method" static="1"><f a="path:lastWriteTime">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastWriteTime>
		<SetLastWriteTimeUtc public="1" set="method" static="1"><f a="path:lastWriteTimeUtc">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></SetLastWriteTimeUtc>
		<ReadAllBytes public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></ReadAllBytes>
		<ReadAllLines public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads><ReadAllLines public="1" set="method"><f a="path:encoding">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></ReadAllLines></overloads>
		</ReadAllLines>
		<ReadAllText public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><ReadAllText public="1" set="method"><f a="path:encoding">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<c path="String"/>
</f></ReadAllText></overloads>
		</ReadAllText>
		<WriteAllBytes public="1" set="method" static="1"><f a="path:bytes">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></WriteAllBytes>
		<WriteAllLines public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<overloads><WriteAllLines public="1" set="method"><f a="path:contents:encoding">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></WriteAllLines></overloads>
		</WriteAllLines>
		<WriteAllText public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><WriteAllText public="1" set="method"><f a="path:contents:encoding">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></WriteAllText></overloads>
		</WriteAllText>
		<Encrypt public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></Encrypt>
		<Decrypt public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></Decrypt>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.File"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.FileAccess" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileAccess">
		<Read><meta><m n=":csNative"><e>1</e></m></meta></Read>
		<Write><meta><m n=":csNative"><e>2</e></m></meta></Write>
		<ReadWrite><meta><m n=":csNative"><e>3</e></m></meta></ReadWrite>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileAccess"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileAttributes">
		<ReadOnly><meta><m n=":csNative"><e>1</e></m></meta></ReadOnly>
		<Hidden><meta><m n=":csNative"><e>2</e></m></meta></Hidden>
		<System><meta><m n=":csNative"><e>4</e></m></meta></System>
		<Directory><meta><m n=":csNative"><e>16</e></m></meta></Directory>
		<Archive><meta><m n=":csNative"><e>32</e></m></meta></Archive>
		<Device><meta><m n=":csNative"><e>64</e></m></meta></Device>
		<Normal><meta><m n=":csNative"><e>128</e></m></meta></Normal>
		<Temporary><meta><m n=":csNative"><e>256</e></m></meta></Temporary>
		<SparseFile><meta><m n=":csNative"><e>512</e></m></meta></SparseFile>
		<ReparsePoint><meta><m n=":csNative"><e>1024</e></m></meta></ReparsePoint>
		<Compressed><meta><m n=":csNative"><e>2048</e></m></meta></Compressed>
		<Offline><meta><m n=":csNative"><e>4096</e></m></meta></Offline>
		<NotContentIndexed><meta><m n=":csNative"><e>8192</e></m></meta></NotContentIndexed>
		<Encrypted><meta><m n=":csNative"><e>16384</e></m></meta></Encrypted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.FileInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileInfo" extern="1" final="1">
		<extends path="cs.system.io.FileSystemInfo"/>
		<Directory public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Directory>
		<DirectoryName public="1" get="accessor" set="null"><c path="String"/></DirectoryName>
		<Length public="1" get="accessor" set="null"><x path="haxe.Int64"/></Length>
		<IsReadOnly public="1" get="accessor" set="accessor"><x path="Bool"/></IsReadOnly>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null" override="1"><x path="Bool"/></Exists>
		<get_Exists public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_Exists>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<set_IsReadOnly final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_IsReadOnly>
		<Encrypt final="1" public="1" set="method"><f a=""><x path="Void"/></f></Encrypt>
		<Decrypt final="1" public="1" set="method"><f a=""><x path="Void"/></f></Decrypt>
		<get_Length final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Length>
		<get_DirectoryName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DirectoryName>
		<get_Directory final="1" public="1" set="method"><f a=""><c path="cs.system.io.DirectoryInfo"/></f></get_Directory>
		<OpenText final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamReader"/></f></OpenText>
		<CreateText final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamWriter"/></f></CreateText>
		<AppendText final="1" public="1" set="method"><f a=""><c path="cs.system.io.StreamWriter"/></f></AppendText>
		<Create final="1" public="1" set="method"><f a=""><c path="cs.system.io.FileStream"/></f></Create>
		<OpenRead final="1" public="1" set="method"><f a=""><c path="cs.system.io.FileStream"/></f></OpenRead>
		<OpenWrite final="1" public="1" set="method"><f a=""><c path="cs.system.io.FileStream"/></f></OpenWrite>
		<Open final="1" public="1" set="method">
			<f a="mode">
				<e path="cs.system.io.FileMode"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<overloads>
				<Open final="1" public="1" set="method"><f a="mode:access:share">
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<c path="cs.system.io.FileStream"/>
</f></Open>
				<Open final="1" public="1" set="method"><f a="mode:access">
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<c path="cs.system.io.FileStream"/>
</f></Open>
			</overloads>
		</Open>
		<Delete public="1" set="method" override="1"><f a=""><x path="Void"/></f></Delete>
		<MoveTo final="1" public="1" set="method"><f a="destFileName">
	<c path="String"/>
	<x path="Void"/>
</f></MoveTo>
		<CopyTo final="1" public="1" set="method">
			<f a="destFileName">
				<c path="String"/>
				<c path="cs.system.io.FileInfo"/>
			</f>
			<overloads><CopyTo final="1" public="1" set="method"><f a="destFileName:overwrite">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.io.FileInfo"/>
</f></CopyTo></overloads>
		</CopyTo>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.FileSecurity"/></f>
			<overloads><GetAccessControl final="1" public="1" set="method"><f a="includeSections">
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
</f></GetAccessControl></overloads>
		</GetAccessControl>
		<Replace final="1" public="1" set="method">
			<f a="destinationFileName:destinationBackupFileName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.io.FileInfo"/>
			</f>
			<overloads><Replace final="1" public="1" set="method"><f a="destinationFileName:destinationBackupFileName:ignoreMetadataErrors">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.io.FileInfo"/>
</f></Replace></overloads>
		</Replace>
		<SetAccessControl final="1" public="1" set="method"><f a="fileSecurity">
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<new final="1" public="1" set="method"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.FileMode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileMode">
		<CreateNew><meta><m n=":csNative"><e>1</e></m></meta></CreateNew>
		<Create><meta><m n=":csNative"><e>2</e></m></meta></Create>
		<Open><meta><m n=":csNative"><e>3</e></m></meta></Open>
		<OpenOrCreate><meta><m n=":csNative"><e>4</e></m></meta></OpenOrCreate>
		<Truncate><meta><m n=":csNative"><e>5</e></m></meta></Truncate>
		<Append><meta><m n=":csNative"><e>6</e></m></meta></Append>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileOptions">
		<WriteThrough><meta><m n=":csNative"><e>-2147483648</e></m></meta></WriteThrough>
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Encrypted><meta><m n=":csNative"><e>16384</e></m></meta></Encrypted>
		<DeleteOnClose><meta><m n=":csNative"><e>67108864</e></m></meta></DeleteOnClose>
		<SequentialScan><meta><m n=":csNative"><e>134217728</e></m></meta></SequentialScan>
		<RandomAccess><meta><m n=":csNative"><e>268435456</e></m></meta></RandomAccess>
		<Asynchronous><meta><m n=":csNative"><e>1073741824</e></m></meta></Asynchronous>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileShare" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileShare">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Read><meta><m n=":csNative"><e>1</e></m></meta></Read>
		<Write><meta><m n=":csNative"><e>2</e></m></meta></Write>
		<ReadWrite><meta><m n=":csNative"><e>3</e></m></meta></ReadWrite>
		<Delete><meta><m n=":csNative"><e>4</e></m></meta></Delete>
		<Inheritable><meta><m n=":csNative"><e>16</e></m></meta></Inheritable>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileShare"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.FileStream_Delegate_WriteDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="buffer:offset:count:callback:object">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream.WriteDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.io.FileStream_WriteDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream">
		<from><icast field="FromHaxeFunction"><f a="::">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.io.FileStream_Delegate_WriteDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.io._FileStream.FileStream_WriteDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.io._FileStream.FileStream_WriteDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.io.FileStream_Delegate_ReadDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="buffer:offset:count:callback:object">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Int"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream.ReadDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.io.FileStream_ReadDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream">
		<from><icast field="FromHaxeFunction"><f a="::">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></icast></from>
		<this><c path="cs.system.io.FileStream_Delegate_ReadDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.io._FileStream.FileStream_ReadDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.io._FileStream.FileStream_ReadDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.io.Stream" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.Stream" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.Stream"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized public="1" set="method" static="1"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.io.Stream"/>
</f></Synchronized>
		<WriteTimeout public="1" get="accessor" set="accessor"><x path="Int"/></WriteTimeout>
		<ReadTimeout public="1" get="accessor" set="accessor"><x path="Int"/></ReadTimeout>
		<Position public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null"><x path="haxe.Int64"/></Length>
		<CanTimeout public="1" get="accessor" set="null"><x path="Bool"/></CanTimeout>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanSeek public="1" get="accessor" set="null"><x path="Bool"/></CanSeek>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<get_CanRead abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanSeek abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CanSeek>
		<get_CanWrite abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_CanTimeout public="1" set="method"><f a=""><x path="Bool"/></f></get_CanTimeout>
		<get_Length abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Length>
		<get_Position abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Position>
		<set_Position abstract="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></set_Position>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</Dispose></overloads>
		</Dispose>
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<get_ReadTimeout public="1" set="method"><f a=""><x path="Int"/></f></get_ReadTimeout>
		<set_ReadTimeout public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_ReadTimeout>
		<get_WriteTimeout public="1" set="method"><f a=""><x path="Int"/></f></get_WriteTimeout>
		<set_WriteTimeout public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_WriteTimeout>
		<CreateWaitHandle set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta><m n=":protected"/></meta>
		</CreateWaitHandle>
		<Flush abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></Flush>
		<Read abstract="1" public="1" set="method"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read>
		<ReadByte public="1" set="method"><f a=""><x path="Int"/></f></ReadByte>
		<Seek abstract="1" public="1" set="method"><f a="offset:origin">
	<x path="haxe.Int64"/>
	<e path="cs.system.io.SeekOrigin"/>
	<x path="haxe.Int64"/>
</f></Seek>
		<SetLength abstract="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetLength>
		<Write abstract="1" public="1" set="method"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
		<WriteByte public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></WriteByte>
		<BeginRead public="1" set="method"><f a="buffer:offset:count:callback:state">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginRead>
		<BeginWrite public="1" set="method"><f a="buffer:offset:count:callback:state">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginWrite>
		<EndRead public="1" set="method"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<x path="Int"/>
</f></EndRead>
		<EndWrite public="1" set="method"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndWrite>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.Stream"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.FileStream" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" extern="1">
		<extends path="cs.system.io.Stream"/>
		<SafeFileHandle public="1" get="accessor" set="null"><c path="microsoft.win32.safehandles.SafeFileHandle"/></SafeFileHandle>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<Position public="1" get="accessor" set="accessor" override="1"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null" override="1"><x path="haxe.Int64"/></Length>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsAsync public="1" get="accessor" set="null"><x path="Bool"/></IsAsync>
		<CanSeek public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanSeek>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<get_CanRead public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanWrite public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_CanSeek public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanSeek>
		<get_IsAsync public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAsync>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Length public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></get_Length>
		<get_Position public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></get_Position>
		<set_Position public="1" set="method" override="1"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></set_Position>
		<get_Handle public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Handle>
		<get_SafeFileHandle public="1" set="method"><f a=""><c path="microsoft.win32.safehandles.SafeFileHandle"/></f></get_SafeFileHandle>
		<ReadByte public="1" set="method" override="1"><f a=""><x path="Int"/></f></ReadByte>
		<WriteByte public="1" set="method" override="1"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></WriteByte>
		<Read public="1" set="method" override="1"><f a="array:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read>
		<BeginRead public="1" set="method" override="1"><f a="array:offset:numBytes:userCallback:stateObject">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginRead>
		<EndRead public="1" set="method" override="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<x path="Int"/>
</f></EndRead>
		<Write public="1" set="method" override="1"><f a="array:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
		<BeginWrite public="1" set="method" override="1"><f a="array:offset:numBytes:userCallback:stateObject">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginWrite>
		<EndWrite public="1" set="method" override="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndWrite>
		<Seek public="1" set="method" override="1"><f a="offset:origin">
	<x path="haxe.Int64"/>
	<e path="cs.system.io.SeekOrigin"/>
	<x path="haxe.Int64"/>
</f></Seek>
		<SetLength public="1" set="method" override="1"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetLength>
		<Flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></Flush>
		<Lock public="1" set="method"><f a="position:length">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Lock>
		<Unlock public="1" set="method"><f a="position:length">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Unlock>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Dispose>
		<GetAccessControl final="1" public="1" set="method"><f a=""><c path="cs.system.security.accesscontrol.FileSecurity"/></f></GetAccessControl>
		<SetAccessControl final="1" public="1" set="method"><f a="fileSecurity">
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="handle:access">
				<c path="cs.system.IntPtr"/>
				<e path="cs.system.io.FileAccess"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="path:mode:rights:share:bufferSize:options:fileSecurity">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Int"/>
	<e path="cs.system.io.FileOptions"/>
	<c path="cs.system.security.accesscontrol.FileSecurity"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:rights:share:bufferSize:options">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Int"/>
	<e path="cs.system.io.FileOptions"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access:bufferSize:isAsync">
	<c path="microsoft.win32.safehandles.SafeFileHandle"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access:bufferSize">
	<c path="microsoft.win32.safehandles.SafeFileHandle"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access">
	<c path="microsoft.win32.safehandles.SafeFileHandle"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:access:share:bufferSize:options">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Int"/>
	<e path="cs.system.io.FileOptions"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:access:share:bufferSize:useAsync">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:access:share:bufferSize">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:access:share">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<e path="cs.system.io.FileShare"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode:access">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:mode">
	<c path="String"/>
	<e path="cs.system.io.FileMode"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access:ownsHandle:bufferSize:isAsync">
	<c path="cs.system.IntPtr"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access:ownsHandle:bufferSize">
	<c path="cs.system.IntPtr"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle:access:ownsHandle">
	<c path="cs.system.IntPtr"/>
	<e path="cs.system.io.FileAccess"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.MemoryStream" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.MemoryStream" extern="1">
		<extends path="cs.system.io.Stream"/>
		<Position public="1" get="accessor" set="accessor" override="1"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null" override="1"><x path="haxe.Int64"/></Length>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanSeek public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanSeek>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<get_CanRead public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanSeek public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanSeek>
		<get_CanWrite public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_Capacity public="1" set="method"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_Length public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></get_Length>
		<get_Position public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></get_Position>
		<set_Position public="1" set="method" override="1"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></set_Position>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Dispose>
		<Flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></Flush>
		<GetBuffer public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetBuffer>
		<Read public="1" set="method" override="1"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read>
		<ReadByte public="1" set="method" override="1"><f a=""><x path="Int"/></f></ReadByte>
		<Seek public="1" set="method" override="1"><f a="offset:loc">
	<x path="haxe.Int64"/>
	<e path="cs.system.io.SeekOrigin"/>
	<x path="haxe.Int64"/>
</f></Seek>
		<SetLength public="1" set="method" override="1"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></SetLength>
		<ToArray public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></ToArray>
		<Write public="1" set="method" override="1"><f a="buffer:offset:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
		<WriteByte public="1" set="method" override="1"><f a="value">
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></WriteByte>
		<WriteTo public="1" set="method"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<x path="Void"/>
</f></WriteTo>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="buffer:index:count:writable:publiclyVisible">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="buffer:index:count:writable">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="buffer:writable">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.MemoryStream"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.SearchOption" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.SearchOption">
		<TopDirectoryOnly><meta><m n=":csNative"><e>0</e></m></meta></TopDirectoryOnly>
		<AllDirectories><meta><m n=":csNative"><e>1</e></m></meta></AllDirectories>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.SearchOption"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.SeekOrigin" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.SeekOrigin">
		<Begin><meta><m n=":csNative"><e>0</e></m></meta></Begin>
		<Current><meta><m n=":csNative"><e>1</e></m></meta></Current>
		<End><meta><m n=":csNative"><e>2</e></m></meta></End>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.SeekOrigin"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.TextReader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.TextReader" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.TextReader"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized public="1" set="method" static="1"><f a="reader">
	<c path="cs.system.io.TextReader"/>
	<c path="cs.system.io.TextReader"/>
</f></Synchronized>
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</Dispose></overloads>
		</Dispose>
		<Peek public="1" set="method"><f a=""><x path="Int"/></f></Peek>
		<Read public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><Read public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read></overloads>
		</Read>
		<ReadBlock public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ReadBlock>
		<ReadLine public="1" set="method"><f a=""><c path="String"/></f></ReadLine>
		<ReadToEnd public="1" set="method"><f a=""><c path="String"/></f></ReadToEnd>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamReader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.StreamReader" extern="1">
		<extends path="cs.system.io.TextReader"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.StreamReader"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<EndOfStream public="1" get="accessor" set="null"><x path="Bool"/></EndOfStream>
		<CurrentEncoding public="1" get="accessor" set="null"><c path="cs.system.text.Encoding"/></CurrentEncoding>
		<BaseStream public="1" get="accessor" set="null"><c path="cs.system.io.Stream"/></BaseStream>
		<get_BaseStream public="1" set="method"><f a=""><c path="cs.system.io.Stream"/></f></get_BaseStream>
		<get_CurrentEncoding public="1" set="method"><f a=""><c path="cs.system.text.Encoding"/></f></get_CurrentEncoding>
		<get_EndOfStream final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_EndOfStream>
		<Close public="1" set="method" override="1"><f a=""><x path="Void"/></f></Close>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Dispose>
		<DiscardBufferedData final="1" public="1" set="method"><f a=""><x path="Void"/></f></DiscardBufferedData>
		<Peek public="1" set="method" override="1"><f a=""><x path="Int"/></f></Peek>
		<Read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><Read public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read></overloads>
		</Read>
		<ReadLine public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadLine>
		<ReadToEnd public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadToEnd>
		<new final="1" public="1" set="method">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="path:encoding:detectEncodingFromByteOrderMarks:bufferSize">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:encoding:detectEncodingFromByteOrderMarks">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:encoding">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:detectEncodingFromByteOrderMarks">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:encoding:detectEncodingFromByteOrderMarks:bufferSize">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:encoding:detectEncodingFromByteOrderMarks">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:encoding">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:detectEncodingFromByteOrderMarks">
	<c path="cs.system.io.Stream"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamReader_NullStreamReader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.StreamReader" module="cs.system.io.StreamReader" extern="1">
		<extends path="cs.system.io.StreamReader"/>
		<CurrentEncoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></CurrentEncoding>
		<BaseStream public="1" get="accessor" set="null" override="1"><c path="cs.system.io.Stream"/></BaseStream>
		<Peek public="1" set="method" override="1"><f a=""><x path="Int"/></f></Peek>
		<Read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><Read public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Read></overloads>
		</Read>
		<ReadLine public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadLine>
		<ReadToEnd public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadToEnd>
		<get_BaseStream public="1" set="method" override="1"><f a=""><c path="cs.system.io.Stream"/></f></get_BaseStream>
		<get_CurrentEncoding public="1" set="method" override="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_CurrentEncoding>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamReader.NullStreamReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.TextWriter" extern="1" abstract="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.TextWriter"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized public="1" set="method" static="1"><f a="writer">
	<c path="cs.system.io.TextWriter"/>
	<c path="cs.system.io.TextWriter"/>
</f></Synchronized>
		<NewLine public="1" get="accessor" set="accessor"><c path="String"/></NewLine>
		<FormatProvider public="1" get="accessor" set="null"><c path="cs.system.IFormatProvider"/></FormatProvider>
		<Encoding public="1" get="accessor" set="null"><c path="cs.system.text.Encoding"/></Encoding>
		<CoreNewLine><c path="cs.NativeArray"><t path="cs.types.Char16"/></c></CoreNewLine>
		<get_Encoding abstract="1" public="1" set="method"><f a=""><c path="cs.system.text.Encoding"/></f></get_Encoding>
		<get_FormatProvider public="1" set="method"><f a=""><c path="cs.system.IFormatProvider"/></f></get_FormatProvider>
		<get_NewLine public="1" set="method"><f a=""><c path="String"/></f></get_NewLine>
		<set_NewLine public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_NewLine>
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<Dispose set="method">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads><Dispose final="1" public="1" set="method"><f a=""><x path="Void"/></f></Dispose></overloads>
		</Dispose>
		<Flush public="1" set="method"><f a=""><x path="Void"/></f></Flush>
		<Write public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Write public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg">
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="format:arg0">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></Write>
			</overloads>
		</Write>
		<WriteLine public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<WriteLine public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="buffer:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg">
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="format:arg0">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Single"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<d/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></WriteLine>
				<WriteLine public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></WriteLine>
			</overloads>
		</WriteLine>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" set="method">
	<f a="formatProvider">
		<c path="cs.system.IFormatProvider"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.StreamWriter" extern="1">
		<extends path="cs.system.io.TextWriter"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.StreamWriter"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Encoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></Encoding>
		<BaseStream public="1" get="accessor" set="null"><c path="cs.system.io.Stream"/></BaseStream>
		<AutoFlush public="1" get="accessor" set="accessor"><x path="Bool"/></AutoFlush>
		<get_AutoFlush public="1" set="method"><f a=""><x path="Bool"/></f></get_AutoFlush>
		<set_AutoFlush public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_AutoFlush>
		<get_BaseStream public="1" set="method"><f a=""><c path="cs.system.io.Stream"/></f></get_BaseStream>
		<get_Encoding public="1" set="method" override="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_Encoding>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Dispose>
		<Flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></Flush>
		<Write public="1" set="method" override="1">
			<f a="buffer:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Write public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="buffer">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></Write>
			</overloads>
		</Write>
		<Close public="1" set="method" override="1"><f a=""><x path="Void"/></f></Close>
		<new final="1" public="1" set="method">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="path:append:encoding:bufferSize">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:append:encoding">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path:append">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:encoding:bufferSize">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="stream:encoding">
	<c path="cs.system.io.Stream"/>
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextReader_NullTextReader" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.TextReader" module="cs.system.io.TextReader" extern="1">
		<extends path="cs.system.io.TextReader"/>
		<ReadLine public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadLine>
		<ReadToEnd public="1" set="method" override="1"><f a=""><c path="String"/></f></ReadToEnd>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextReader.NullTextReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextWriter_NullTextWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.io.TextWriter" module="cs.system.io.TextWriter" extern="1" final="1">
		<extends path="cs.system.io.TextWriter"/>
		<Encoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></Encoding>
		<get_Encoding public="1" set="method" override="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_Encoding>
		<Write public="1" set="method" override="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Write public="1" set="method"><f a="value:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Write>
				<Write public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></Write>
			</overloads>
		</Write>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextWriter.NullTextWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_GetHostAddressesCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="hostName">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="hostName:callback:object">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostAddressesCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostAddressesCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostAddressesCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostAddressesCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="hostAddress">
	<c path="cs.system.net.IPAddress"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="hostAddress:callback:object">
	<c path="cs.system.net.IPAddress"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostEntryIPCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostEntryIPCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.net.IPAddress"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostEntryIPCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostEntryIPCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="hostName">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="hostName:callback:object">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostEntryNameCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostEntryNameCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostEntryNameCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostEntryNameCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.net.Dns_Delegate_ResolveCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="hostName">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="hostName:callback:object">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.ResolveCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_ResolveCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_ResolveCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_ResolveCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_ResolveCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.net.Dns_Delegate_GetHostByNameCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="hostName">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="hostName:callback:object">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostByNameCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostByNameCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostByNameCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostByNameCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.net.Dns" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.Dns" extern="1" final="1">
		<BeginGetHostByName public="1" set="method" static="1"><f a="hostName:requestCallback:stateObject">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginGetHostByName>
		<BeginResolve public="1" set="method" static="1"><f a="hostName:requestCallback:stateObject">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginResolve>
		<BeginGetHostAddresses public="1" set="method" static="1"><f a="hostNameOrAddress:requestCallback:stateObject">
	<c path="String"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginGetHostAddresses>
		<BeginGetHostEntry public="1" set="method" static="1">
			<f a="hostNameOrAddress:requestCallback:stateObject">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<overloads><BeginGetHostEntry public="1" set="method"><f a="address:requestCallback:stateObject">
	<c path="cs.system.net.IPAddress"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginGetHostEntry></overloads>
		</BeginGetHostEntry>
		<EndGetHostByName public="1" set="method" static="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndGetHostByName>
		<EndResolve public="1" set="method" static="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndResolve>
		<EndGetHostAddresses public="1" set="method" static="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></EndGetHostAddresses>
		<EndGetHostEntry public="1" set="method" static="1"><f a="asyncResult">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></EndGetHostEntry>
		<GetHostByAddress public="1" set="method" static="1">
			<f a="address">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<overloads><GetHostByAddress public="1" set="method"><f a="address">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></GetHostByAddress></overloads>
		</GetHostByAddress>
		<GetHostEntry public="1" set="method" static="1">
			<f a="hostNameOrAddress">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<overloads><GetHostEntry public="1" set="method"><f a="address">
	<c path="cs.system.net.IPAddress"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></GetHostEntry></overloads>
		</GetHostEntry>
		<GetHostAddresses public="1" set="method" static="1"><f a="hostNameOrAddress">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></GetHostAddresses>
		<GetHostByName public="1" set="method" static="1"><f a="hostName">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></GetHostByName>
		<GetHostName public="1" set="method" static="1"><f a=""><c path="String"/></f></GetHostName>
		<Resolve public="1" set="method" static="1"><f a="hostName">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></Resolve>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.IPAddress" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.IPAddress" extern="1">
		<IPv6None public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6None>
		<IPv6Loopback public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6Loopback>
		<IPv6Any public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6Any>
		<None public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</None>
		<Loopback public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Loopback>
		<Broadcast public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Broadcast>
		<Any public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Any>
		<HostToNetworkOrder public="1" set="method" static="1">
			<f a="host">
				<t path="cs.types.Int16"/>
				<t path="cs.types.Int16"/>
			</f>
			<overloads>
				<HostToNetworkOrder public="1" set="method"><f a="host">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></HostToNetworkOrder>
				<HostToNetworkOrder public="1" set="method"><f a="host">
	<x path="Int"/>
	<x path="Int"/>
</f></HostToNetworkOrder>
			</overloads>
		</HostToNetworkOrder>
		<NetworkToHostOrder public="1" set="method" static="1">
			<f a="network">
				<t path="cs.types.Int16"/>
				<t path="cs.types.Int16"/>
			</f>
			<overloads>
				<NetworkToHostOrder public="1" set="method"><f a="network">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></NetworkToHostOrder>
				<NetworkToHostOrder public="1" set="method"><f a="network">
	<x path="Int"/>
	<x path="Int"/>
</f></NetworkToHostOrder>
			</overloads>
		</NetworkToHostOrder>
		<Parse public="1" set="method" static="1"><f a="ipString">
	<c path="String"/>
	<c path="cs.system.net.IPAddress"/>
</f></Parse>
		<TryParse public="1" set="method" static="1"><f a="ipString:address">
	<c path="String"/>
	<t path="cs.Out"><c path="cs.system.net.IPAddress"/></t>
	<x path="Bool"/>
</f></TryParse>
		<IsLoopback public="1" set="method" static="1"><f a="addr">
	<c path="cs.system.net.IPAddress"/>
	<x path="Bool"/>
</f></IsLoopback>
		<AddressFamily public="1" get="accessor" set="null"><e path="cs.system.net.sockets.AddressFamily"/></AddressFamily>
		<ScopeId public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></ScopeId>
		<IsIPv6Multicast public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6Multicast>
		<IsIPv6SiteLocal public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6SiteLocal>
		<IsIPv6LinkLocal public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6LinkLocal>
		<Address public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></Address>
		<get_Address final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_Address>
		<set_Address final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></set_Address>
		<get_IsIPv6LinkLocal final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsIPv6LinkLocal>
		<get_IsIPv6SiteLocal final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsIPv6SiteLocal>
		<get_IsIPv6Multicast final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsIPv6Multicast>
		<get_ScopeId final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_ScopeId>
		<set_ScopeId final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></set_ScopeId>
		<GetAddressBytes final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetAddressBytes>
		<get_AddressFamily final="1" public="1" set="method"><f a=""><e path="cs.system.net.sockets.AddressFamily"/></f></get_AddressFamily>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a="addr">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="address:scopeId">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="address">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.IPAddress"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.IPHostEntry" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.IPHostEntry" extern="1">
		<HostName public="1" get="accessor" set="accessor"><c path="String"/></HostName>
		<Aliases public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></Aliases>
		<AddressList public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c></AddressList>
		<get_AddressList final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c></f></get_AddressList>
		<set_AddressList final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></set_AddressList>
		<get_Aliases final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_Aliases>
		<set_Aliases final="1" public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></set_Aliases>
		<get_HostName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_HostName>
		<set_HostName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_HostName>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.IPHostEntry"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.AddressFamily" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.net.sockets.AddressFamily">
		<Unknown><meta><m n=":csNative"><e>-1</e></m></meta></Unknown>
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Unix><meta><m n=":csNative"><e>1</e></m></meta></Unix>
		<InterNetwork><meta><m n=":csNative"><e>2</e></m></meta></InterNetwork>
		<ImpLink><meta><m n=":csNative"><e>3</e></m></meta></ImpLink>
		<Pup><meta><m n=":csNative"><e>4</e></m></meta></Pup>
		<Chaos><meta><m n=":csNative"><e>5</e></m></meta></Chaos>
		<NS><meta><m n=":csNative"><e>6</e></m></meta></NS>
		<Ipx><meta><m n=":csNative"><e>6</e></m></meta></Ipx>
		<Iso><meta><m n=":csNative"><e>7</e></m></meta></Iso>
		<Osi><meta><m n=":csNative"><e>7</e></m></meta></Osi>
		<Ecma><meta><m n=":csNative"><e>8</e></m></meta></Ecma>
		<DataKit><meta><m n=":csNative"><e>9</e></m></meta></DataKit>
		<Ccitt><meta><m n=":csNative"><e>10</e></m></meta></Ccitt>
		<Sna><meta><m n=":csNative"><e>11</e></m></meta></Sna>
		<DecNet><meta><m n=":csNative"><e>12</e></m></meta></DecNet>
		<DataLink><meta><m n=":csNative"><e>13</e></m></meta></DataLink>
		<Lat><meta><m n=":csNative"><e>14</e></m></meta></Lat>
		<HyperChannel><meta><m n=":csNative"><e>15</e></m></meta></HyperChannel>
		<AppleTalk><meta><m n=":csNative"><e>16</e></m></meta></AppleTalk>
		<NetBios><meta><m n=":csNative"><e>17</e></m></meta></NetBios>
		<VoiceView><meta><m n=":csNative"><e>18</e></m></meta></VoiceView>
		<FireFox><meta><m n=":csNative"><e>19</e></m></meta></FireFox>
		<Banyan><meta><m n=":csNative"><e>21</e></m></meta></Banyan>
		<Atm><meta><m n=":csNative"><e>22</e></m></meta></Atm>
		<InterNetworkV6><meta><m n=":csNative"><e>23</e></m></meta></InterNetworkV6>
		<Cluster><meta><m n=":csNative"><e>24</e></m></meta></Cluster>
		<Ieee12844><meta><m n=":csNative"><e>25</e></m></meta></Ieee12844>
		<Irda><meta><m n=":csNative"><e>26</e></m></meta></Irda>
		<NetworkDesigners><meta><m n=":csNative"><e>28</e></m></meta></NetworkDesigners>
		<Max><meta><m n=":csNative"><e>29</e></m></meta></Max>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.AddressFamily"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Assembly_ResourceCloseHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" module="cs.system.reflection.Assembly" extern="1">
		<OnClose final="1" public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.EventArgs"/>
	<x path="Void"/>
</f></OnClose>
		<new final="1" public="1" set="method"><f a="module">
	<c path="cs.system.reflection.Module"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly.ResourceCloseHandler"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Assembly_ResolveEventHolder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" module="cs.system.reflection.Assembly" extern="1">
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<add_ModuleResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></add_ModuleResolve>
		<remove_ModuleResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ModuleResolve>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly.ResolveEventHolder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Assembly" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Assembly" extern="1" interface="1">
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<GlobalAssemblyCache public="1" get="accessor" set="null"><x path="Bool"/></GlobalAssemblyCache>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<Location public="1" get="accessor" set="null"><c path="String"/></Location>
		<EntryPoint public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<add_ModuleResolve public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></add_ModuleResolve>
		<remove_ModuleResolve public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ModuleResolve>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<overloads>
				<GetType public="1" set="method"><f a="name:throwOnError:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
				<GetType public="1" set="method"><f a="name:throwOnError">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
				<GetType public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.Type"/>
</f></GetType>
			</overloads>
		</GetType>
		<get_CodeBase public="1" set="method"><f a=""><c path="String"/></f></get_CodeBase>
		<get_EscapedCodeBase public="1" set="method"><f a=""><c path="String"/></f></get_EscapedCodeBase>
		<GetName public="1" set="method">
			<f a=""><c path="cs.system.reflection.AssemblyName"/></f>
			<overloads><GetName public="1" set="method"><f a="copiedName">
	<x path="Bool"/>
	<c path="cs.system.reflection.AssemblyName"/>
</f></GetName></overloads>
		</GetName>
		<get_FullName public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_EntryPoint public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></get_EntryPoint>
		<GetExportedTypes public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetExportedTypes>
		<GetTypes public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetTypes>
		<GetManifestResourceStream public="1" set="method">
			<f a="type:name">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<overloads><GetManifestResourceStream public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.io.Stream"/>
</f></GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<GetFile public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.io.FileStream"/>
</f></GetFile>
		<GetFiles public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c></f>
			<overloads><GetFiles public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
</f></GetFiles></overloads>
		</GetFiles>
		<GetManifestResourceNames public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetManifestResourceNames>
		<GetManifestResourceInfo public="1" set="method"><f a="resourceName">
	<c path="String"/>
	<c path="cs.system.reflection.ManifestResourceInfo"/>
</f></GetManifestResourceInfo>
		<get_Location public="1" set="method"><f a=""><c path="String"/></f></get_Location>
		<get_Evidence public="1" set="method"><f a=""><c path="cs.system.security.policy.Evidence"/></f></get_Evidence>
		<GetCustomAttributes public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="inherit">
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetSatelliteAssembly public="1" set="method">
			<f a="culture">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads><GetSatelliteAssembly public="1" set="method"><f a="culture:version">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.Version"/>
	<c path="cs.system.reflection.Assembly"/>
</f></GetSatelliteAssembly></overloads>
		</GetSatelliteAssembly>
		<LoadModule public="1" set="method">
			<f a="moduleName:rawModule">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Module"/>
			</f>
			<overloads><LoadModule public="1" set="method"><f a="moduleName:rawModule:rawSymbolStore">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Module"/>
</f></LoadModule></overloads>
		</LoadModule>
		<CreateInstance public="1" set="method">
			<f a="typeName">
				<c path="String"/>
				<d/>
			</f>
			<overloads>
				<CreateInstance public="1" set="method"><f a="typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes">
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstance>
				<CreateInstance public="1" set="method"><f a="typeName:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<GetLoadedModules public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<overloads><GetLoadedModules public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
</f></GetLoadedModules></overloads>
		</GetLoadedModules>
		<GetModules public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<overloads><GetModules public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
</f></GetModules></overloads>
		</GetModules>
		<GetModule public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.reflection.Module"/>
</f></GetModule>
		<GetReferencedAssemblies public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.AssemblyName"/></c></f></GetReferencedAssemblies>
		<get_GlobalAssemblyCache public="1" set="method"><f a=""><x path="Bool"/></f></get_GlobalAssemblyCache>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Assembly"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Assembly" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._Assembly"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<implements path="cs.system.security.IEvidenceFactory"/>
		<CreateQualifiedName public="1" set="method" static="1"><f a="assemblyName:typeName">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></CreateQualifiedName>
		<GetAssembly public="1" set="method" static="1"><f a="type">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.Assembly"/>
</f></GetAssembly>
		<GetEntryAssembly public="1" set="method" static="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></GetEntryAssembly>
		<LoadFrom public="1" set="method" static="1">
			<f a="assemblyFile">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads>
				<LoadFrom public="1" set="method"><f a="assemblyFile:securityEvidence:hashValue:hashAlgorithm">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
	<c path="cs.system.reflection.Assembly"/>
</f></LoadFrom>
				<LoadFrom public="1" set="method"><f a="assemblyFile:securityEvidence">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></LoadFrom>
			</overloads>
		</LoadFrom>
		<LoadFile public="1" set="method" static="1">
			<f a="path:securityEvidence">
				<c path="String"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads><LoadFile public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
</f></LoadFile></overloads>
		</LoadFile>
		<Load public="1" set="method" static="1">
			<f a="assemblyString">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads>
				<Load public="1" set="method"><f a="rawAssembly:rawSymbolStore:securityEvidence">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="rawAssembly:rawSymbolStore">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="rawAssembly">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyRef:assemblySecurity">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyRef">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
				<Load public="1" set="method"><f a="assemblyString:assemblySecurity">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></Load>
			</overloads>
		</Load>
		<ReflectionOnlyLoad public="1" set="method" static="1">
			<f a="rawAssembly">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads><ReflectionOnlyLoad public="1" set="method"><f a="assemblyString">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
</f></ReflectionOnlyLoad></overloads>
		</ReflectionOnlyLoad>
		<ReflectionOnlyLoadFrom public="1" set="method" static="1"><f a="assemblyFile">
	<c path="String"/>
	<c path="cs.system.reflection.Assembly"/>
</f></ReflectionOnlyLoadFrom>
		<LoadWithPartialName public="1" set="method" static="1">
			<f a="partialName">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads><LoadWithPartialName public="1" set="method"><f a="partialName:securityEvidence">
	<c path="String"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.reflection.Assembly"/>
</f></LoadWithPartialName></overloads>
		</LoadWithPartialName>
		<GetExecutingAssembly public="1" set="method" static="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></GetExecutingAssembly>
		<GetCallingAssembly public="1" set="method" static="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></GetCallingAssembly>
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<GlobalAssemblyCache public="1" get="accessor" set="null"><x path="Bool"/></GlobalAssemblyCache>
		<ManifestModule public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></ManifestModule>
		<ReflectionOnly public="1" get="accessor" set="null"><x path="Bool"/></ReflectionOnly>
		<HostContext public="1" get="accessor" set="null"><x path="haxe.Int64"/></HostContext>
		<ImageRuntimeVersion public="1" get="accessor" set="null"><c path="String"/></ImageRuntimeVersion>
		<Location public="1" get="accessor" set="null"><c path="String"/></Location>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<EntryPoint public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<add_ModuleResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></add_ModuleResolve>
		<remove_ModuleResolve final="1" public="1" set="method"><f a="value">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="Void"/>
</f></remove_ModuleResolve>
		<get_CodeBase public="1" set="method"><f a=""><c path="String"/></f></get_CodeBase>
		<get_EscapedCodeBase public="1" set="method"><f a=""><c path="String"/></f></get_EscapedCodeBase>
		<get_FullName public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_EntryPoint public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></get_EntryPoint>
		<get_Evidence public="1" set="method"><f a=""><c path="cs.system.security.policy.Evidence"/></f></get_Evidence>
		<get_Location public="1" set="method"><f a=""><c path="String"/></f></get_Location>
		<get_ImageRuntimeVersion public="1" set="method"><f a=""><c path="String"/></f></get_ImageRuntimeVersion>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetFiles public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c></f>
			<overloads><GetFiles public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
</f></GetFiles></overloads>
		</GetFiles>
		<GetFile public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.io.FileStream"/>
</f></GetFile>
		<GetManifestResourceStream public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<overloads><GetManifestResourceStream public="1" set="method"><f a="type:name">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<c path="cs.system.io.Stream"/>
</f></GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<GetTypes public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetTypes>
		<GetExportedTypes public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetExportedTypes>
		<GetType public="1" set="method">
			<f a="name:throwOnError">
				<c path="String"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
			<overloads>
				<GetType final="1" public="1" set="method">
					<f a="name:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
					</meta>
				</GetType>
			</overloads>
		</GetType>
		<GetName public="1" set="method">
			<f a="copiedName">
				<x path="Bool"/>
				<c path="cs.system.reflection.AssemblyName"/>
			</f>
			<overloads><GetName public="1" set="method"><f a=""><c path="cs.system.reflection.AssemblyName"/></f></GetName></overloads>
		</GetName>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<LoadModule final="1" public="1" set="method">
			<f a="moduleName:rawModule">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Module"/>
			</f>
			<overloads><LoadModule final="1" public="1" set="method"><f a="moduleName:rawModule:rawSymbolStore">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.reflection.Module"/>
</f></LoadModule></overloads>
		</LoadModule>
		<CreateInstance final="1" public="1" set="method">
			<f a="typeName">
				<c path="String"/>
				<d/>
			</f>
			<overloads>
				<CreateInstance final="1" public="1" set="method"><f a="typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes">
	<c path="String"/>
	<x path="Bool"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></CreateInstance>
				<CreateInstance final="1" public="1" set="method"><f a="typeName:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></CreateInstance>
			</overloads>
		</CreateInstance>
		<GetLoadedModules final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<overloads><GetLoadedModules final="1" public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
</f></GetLoadedModules></overloads>
		</GetLoadedModules>
		<GetModules final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<overloads><GetModules final="1" public="1" set="method"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
</f></GetModules></overloads>
		</GetModules>
		<GetManifestResourceNames public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetManifestResourceNames>
		<GetManifestResourceInfo public="1" set="method"><f a="resourceName">
	<c path="String"/>
	<c path="cs.system.reflection.ManifestResourceInfo"/>
</f></GetManifestResourceInfo>
		<get_HostContext final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></get_HostContext>
		<get_ReflectionOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_ReflectionOnly>
		<GetModule final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.reflection.Module"/>
</f></GetModule>
		<GetReferencedAssemblies final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.AssemblyName"/></c></f></GetReferencedAssemblies>
		<GetSatelliteAssembly final="1" public="1" set="method">
			<f a="culture">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<overloads><GetSatelliteAssembly final="1" public="1" set="method"><f a="culture:version">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.Version"/>
	<c path="cs.system.reflection.Assembly"/>
</f></GetSatelliteAssembly></overloads>
		</GetSatelliteAssembly>
		<get_ManifestModule final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Module"/></f></get_ManifestModule>
		<get_GlobalAssemblyCache final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_GlobalAssemblyCache>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._AssemblyName" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._AssemblyName" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._AssemblyName"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.AssemblyName" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.AssemblyName" extern="1" final="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.interopservices._AssemblyName"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<ReferenceMatchesDefinition public="1" set="method" static="1"><f a="reference:definition">
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.system.reflection.AssemblyName"/>
	<x path="Bool"/>
</f></ReferenceMatchesDefinition>
		<GetAssemblyName public="1" set="method" static="1"><f a="assemblyFile">
	<c path="String"/>
	<c path="cs.system.reflection.AssemblyName"/>
</f></GetAssemblyName>
		<VersionCompatibility public="1" get="accessor" set="accessor"><e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/></VersionCompatibility>
		<Version public="1" get="accessor" set="accessor"><c path="cs.system.Version"/></Version>
		<KeyPair public="1" get="accessor" set="accessor"><c path="cs.system.reflection.StrongNameKeyPair"/></KeyPair>
		<HashAlgorithm public="1" get="accessor" set="accessor"><e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/></HashAlgorithm>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<Flags public="1" get="accessor" set="accessor"><e path="cs.system.reflection.AssemblyNameFlags"/></Flags>
		<CultureInfo public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CultureInfo>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="accessor"><c path="String"/></CodeBase>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<ProcessorArchitecture public="1" get="accessor" set="accessor"><e path="cs.system.reflection.ProcessorArchitecture"/></ProcessorArchitecture>
		<get_ProcessorArchitecture final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.ProcessorArchitecture"/></f></get_ProcessorArchitecture>
		<set_ProcessorArchitecture final="1" public="1" set="method"><f a="value">
	<e path="cs.system.reflection.ProcessorArchitecture"/>
	<e path="cs.system.reflection.ProcessorArchitecture"/>
</f></set_ProcessorArchitecture>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<get_CodeBase final="1" public="1" set="method"><f a=""><c path="String"/></f></get_CodeBase>
		<set_CodeBase final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_CodeBase>
		<get_EscapedCodeBase final="1" public="1" set="method"><f a=""><c path="String"/></f></get_EscapedCodeBase>
		<get_CultureInfo final="1" public="1" set="method"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_CultureInfo>
		<set_CultureInfo final="1" public="1" set="method"><f a="value">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></set_CultureInfo>
		<get_Flags final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.AssemblyNameFlags"/></f></get_Flags>
		<set_Flags final="1" public="1" set="method"><f a="value">
	<e path="cs.system.reflection.AssemblyNameFlags"/>
	<e path="cs.system.reflection.AssemblyNameFlags"/>
</f></set_Flags>
		<get_FullName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FullName>
		<get_HashAlgorithm final="1" public="1" set="method"><f a=""><e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/></f></get_HashAlgorithm>
		<set_HashAlgorithm final="1" public="1" set="method"><f a="value">
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
	<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
</f></set_HashAlgorithm>
		<get_KeyPair final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.StrongNameKeyPair"/></f></get_KeyPair>
		<set_KeyPair final="1" public="1" set="method"><f a="value">
	<c path="cs.system.reflection.StrongNameKeyPair"/>
	<c path="cs.system.reflection.StrongNameKeyPair"/>
</f></set_KeyPair>
		<get_Version final="1" public="1" set="method"><f a=""><c path="cs.system.Version"/></f></get_Version>
		<set_Version final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
</f></set_Version>
		<get_VersionCompatibility final="1" public="1" set="method"><f a=""><e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/></f></get_VersionCompatibility>
		<set_VersionCompatibility final="1" public="1" set="method"><f a="value">
	<e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/>
	<e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/>
</f></set_VersionCompatibility>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<GetPublicKey final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetPublicKey>
		<GetPublicKeyToken final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetPublicKeyToken>
		<SetPublicKey final="1" public="1" set="method"><f a="publicKey">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetPublicKey>
		<SetPublicKeyToken final="1" public="1" set="method"><f a="publicKeyToken">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetPublicKeyToken>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<Clone final="1" public="1" set="method"><f a=""><d/></f></Clone>
		<OnDeserialization final="1" public="1" set="method"><f a="sender">
	<d/>
	<x path="Void"/>
</f></OnDeserialization>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="assemblyName">
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.AssemblyName"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.AssemblyNameFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.AssemblyNameFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<PublicKey><meta><m n=":csNative"><e>1</e></m></meta></PublicKey>
		<Retargetable><meta><m n=":csNative"><e>256</e></m></meta></Retargetable>
		<EnableJITcompileOptimizer><meta><m n=":csNative"><e>16384</e></m></meta></EnableJITcompileOptimizer>
		<EnableJITcompileTracking><meta><m n=":csNative"><e>32768</e></m></meta></EnableJITcompileTracking>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.AssemblyNameFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Binder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Binder" extern="1" abstract="1">
		<BindToField abstract="1" public="1" set="method"><f a="bindingAttr:match:value:culture">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	<d/>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></BindToField>
		<BindToMethod abstract="1" public="1" set="method"><f a="bindingAttr:match:args:modifiers:culture:names:state">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
	<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<t path="cs.Out"><d/></t>
	<c path="cs.system.reflection.MethodBase"/>
</f></BindToMethod>
		<ChangeType abstract="1" public="1" set="method"><f a="value:type:culture">
	<d/>
	<c path="cs.system.Type"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></ChangeType>
		<ReorderArgumentArray abstract="1" public="1" set="method"><f a="args:state">
	<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
	<d/>
	<x path="Void"/>
</f></ReorderArgumentArray>
		<SelectMethod abstract="1" public="1" set="method"><f a="bindingAttr:match:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodBase"/>
</f></SelectMethod>
		<SelectProperty abstract="1" public="1" set="method"><f a="bindingAttr:match:returnType:indexes:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></SelectProperty>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Binder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Binder_Default" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Binder" module="cs.system.reflection.Binder" extern="1" final="1">
		<extends path="cs.system.reflection.Binder"/>
		<BindToField public="1" set="method" override="1"><f a="bindingAttr:match:value:culture">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	<d/>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></BindToField>
		<BindToMethod public="1" set="method" override="1"><f a="bindingAttr:match:args:modifiers:culture:names:state">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
	<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<t path="cs.Out"><d/></t>
	<c path="cs.system.reflection.MethodBase"/>
</f></BindToMethod>
		<ChangeType public="1" set="method" override="1"><f a="value:type:culture">
	<d/>
	<c path="cs.system.Type"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></ChangeType>
		<ReorderArgumentArray public="1" set="method" override="1"><f a="args:state">
	<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
	<d/>
	<x path="Void"/>
</f></ReorderArgumentArray>
		<SelectMethod public="1" set="method" override="1"><f a="bindingAttr:match:types:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodBase"/>
</f></SelectMethod>
		<SelectProperty public="1" set="method" override="1"><f a="bindingAttr:match:returnType:indexes:modifiers">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.PropertyInfo"/>
</f></SelectProperty>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Binder.Default"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.BindingFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.BindingFlags">
		<Default><meta><m n=":csNative"><e>0</e></m></meta></Default>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<DeclaredOnly><meta><m n=":csNative"><e>2</e></m></meta></DeclaredOnly>
		<Instance><meta><m n=":csNative"><e>4</e></m></meta></Instance>
		<Static><meta><m n=":csNative"><e>8</e></m></meta></Static>
		<Public><meta><m n=":csNative"><e>16</e></m></meta></Public>
		<NonPublic><meta><m n=":csNative"><e>32</e></m></meta></NonPublic>
		<FlattenHierarchy><meta><m n=":csNative"><e>64</e></m></meta></FlattenHierarchy>
		<InvokeMethod><meta><m n=":csNative"><e>256</e></m></meta></InvokeMethod>
		<CreateInstance><meta><m n=":csNative"><e>512</e></m></meta></CreateInstance>
		<GetField><meta><m n=":csNative"><e>1024</e></m></meta></GetField>
		<SetField><meta><m n=":csNative"><e>2048</e></m></meta></SetField>
		<GetProperty><meta><m n=":csNative"><e>4096</e></m></meta></GetProperty>
		<SetProperty><meta><m n=":csNative"><e>8192</e></m></meta></SetProperty>
		<PutDispProperty><meta><m n=":csNative"><e>16384</e></m></meta></PutDispProperty>
		<PutRefDispProperty><meta><m n=":csNative"><e>32768</e></m></meta></PutRefDispProperty>
		<ExactBinding><meta><m n=":csNative"><e>65536</e></m></meta></ExactBinding>
		<SuppressChangeType><meta><m n=":csNative"><e>131072</e></m></meta></SuppressChangeType>
		<OptionalParamBinding><meta><m n=":csNative"><e>262144</e></m></meta></OptionalParamBinding>
		<IgnoreReturn><meta><m n=":csNative"><e>16777216</e></m></meta></IgnoreReturn>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.BindingFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.CallingConventions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.CallingConventions">
		<Standard><meta><m n=":csNative"><e>1</e></m></meta></Standard>
		<VarArgs><meta><m n=":csNative"><e>2</e></m></meta></VarArgs>
		<Any><meta><m n=":csNative"><e>3</e></m></meta></Any>
		<HasThis><meta><m n=":csNative"><e>32</e></m></meta></HasThis>
		<ExplicitThis><meta><m n=":csNative"><e>64</e></m></meta></ExplicitThis>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.CallingConventions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._MethodBase" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodBase" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Invoke public="1" set="method"><f a="obj:invokeAttr:binder:parameters:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></Invoke>
				<Invoke public="1" set="method"><f a="obj:parameters">
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></Invoke>
			</overloads>
		</Invoke>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_CallingConvention public="1" set="method"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_IsAbstract public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsConstructor public="1" set="method"><f a=""><x path="Bool"/></f></get_IsConstructor>
		<get_IsFamily public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsFamilyAndAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsFinal public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFinal>
		<get_IsHideBySig public="1" set="method"><f a=""><x path="Bool"/></f></get_IsHideBySig>
		<get_IsPrivate public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsStatic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_IsVirtual public="1" set="method"><f a=""><x path="Bool"/></f></get_IsVirtual>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_MethodHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MethodBase" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodBase" extern="1" abstract="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._MethodBase"/>
		<GetCurrentMethod public="1" set="method" static="1"><f a=""><c path="cs.system.reflection.MethodBase"/></f></GetCurrentMethod>
		<GetMethodFromHandle public="1" set="method" static="1">
			<f a="handle">
				<c path="cs.system.RuntimeMethodHandle"/>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<overloads><GetMethodFromHandle public="1" set="method"><f a="handle:declaringType">
	<c path="cs.system.RuntimeMethodHandle"/>
	<c path="cs.system.RuntimeTypeHandle"/>
	<c path="cs.system.reflection.MethodBase"/>
</f></GetMethodFromHandle></overloads>
		</GetMethodFromHandle>
		<IsGenericMethod public="1" get="accessor" set="null"><x path="Bool"/></IsGenericMethod>
		<IsGenericMethodDefinition public="1" get="accessor" set="null"><x path="Bool"/></IsGenericMethodDefinition>
		<ContainsGenericParameters public="1" get="accessor" set="null"><x path="Bool"/></ContainsGenericParameters>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<GetMethodImplementationFlags abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters abstract="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<Invoke final="1" public="1" set="method">
			<f a="obj:parameters">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
			<overloads><Invoke abstract="1" public="1" set="method">
	<f a="obj:invokeAttr:binder:parameters:culture">
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<get_MethodHandle abstract="1" public="1" set="method"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_Attributes abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_CallingConvention public="1" set="method"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_IsPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsPrivate final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsFamily final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsFamilyAndAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsStatic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_IsFinal final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFinal>
		<get_IsVirtual final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsVirtual>
		<get_IsHideBySig final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsHideBySig>
		<get_IsAbstract final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsSpecialName final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsConstructor final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsConstructor>
		<GetGenericArguments public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<get_ContainsGenericParameters public="1" set="method"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_IsGenericMethodDefinition public="1" set="method"><f a=""><x path="Bool"/></f></get_IsGenericMethodDefinition>
		<get_IsGenericMethod public="1" set="method"><f a=""><x path="Bool"/></f></get_IsGenericMethod>
		<GetMethodBody public="1" set="method"><f a=""><c path="cs.system.reflection.MethodBody"/></f></GetMethodBody>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ConstructorInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ConstructorInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<Invoke_5 public="1" set="method"><f a="parameters">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></Invoke_5>
		<Invoke_3 public="1" set="method"><f a="obj:parameters">
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></Invoke_3>
		<Invoke_4 public="1" set="method"><f a="invokeAttr:binder:parameters:culture">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></Invoke_4>
		<Invoke_2 public="1" set="method"><f a="obj:invokeAttr:binder:parameters:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></Invoke_2>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_CallingConvention public="1" set="method"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_IsAbstract public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsConstructor public="1" set="method"><f a=""><x path="Bool"/></f></get_IsConstructor>
		<get_IsFamily public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsFamilyAndAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsFinal public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFinal>
		<get_IsHideBySig public="1" set="method"><f a=""><x path="Bool"/></f></get_IsHideBySig>
		<get_IsPrivate public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsStatic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_IsVirtual public="1" set="method"><f a=""><x path="Bool"/></f></get_IsVirtual>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_MethodHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ConstructorInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ConstructorInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ConstructorInfo" extern="1" abstract="1">
		<extends path="cs.system.reflection.MethodBase"/>
		<implements path="cs.system.runtime.interopservices._ConstructorInfo"/>
		<TypeConstructorName public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</TypeConstructorName>
		<ConstructorName public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</ConstructorName>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<Invoke final="1" public="1" set="method" override="1">
			<f a="parameters">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
			<overloads><Invoke abstract="1" public="1" set="method">
	<f a="invokeAttr:binder:parameters:culture">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ConstructorInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.EventAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<ReservedMask><meta><m n=":csNative"><e>1024</e></m></meta></ReservedMask>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.EventAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="dele">
	<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1.T0"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="dele:callback:object">
	<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1.T0"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.StaticAddEvent`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_StaticAddEvent_1" params="T0" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_StaticAddEvent_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_StaticAddEvent_1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.reflection.EventInfo_Delegate_AddEvent_2" params="T0:T1" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="_this:dele">
	<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T0"/>
	<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T1"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="_this:dele:callback:object">
	<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T0"/>
	<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T1"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.AddEvent`2"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_AddEvent_2" params="T0:T1" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T1"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
	<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
	<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
</c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_AddEvent_2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_AddEvent_2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="_this:dele">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="_this:dele:callback:object">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.AddEventAdapter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_AddEventAdapter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_AddEventAdapter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_AddEventAdapter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.runtime.interopservices._EventInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EventInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsMulticast public="1" get="accessor" set="null"><x path="Bool"/></IsMulticast>
		<EventHandlerType public="1" get="accessor" set="null"><c path="cs.system.Type"/></EventHandlerType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.EventAttributes"/></Attributes>
		<AddEventHandler public="1" set="method"><f a="target:handler">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></AddEventHandler>
		<GetAddMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetAddMethod public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetAddMethod></overloads>
		</GetAddMethod>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<GetRaiseMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetRaiseMethod public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetRaiseMethod></overloads>
		</GetRaiseMethod>
		<GetRemoveMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetRemoveMethod public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetRemoveMethod></overloads>
		</GetRemoveMethod>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<RemoveEventHandler public="1" set="method"><f a="target:handler">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></RemoveEventHandler>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.EventAttributes"/></f></get_Attributes>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_EventHandlerType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_EventHandlerType>
		<get_IsMulticast public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMulticast>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EventInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.EventInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" extern="1" abstract="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._EventInfo"/>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsMulticast public="1" get="accessor" set="null"><x path="Bool"/></IsMulticast>
		<EventHandlerType public="1" get="accessor" set="null"><c path="cs.system.Type"/></EventHandlerType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.EventAttributes"/></Attributes>
		<get_Attributes abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.EventAttributes"/></f></get_Attributes>
		<get_EventHandlerType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_EventHandlerType>
		<get_IsMulticast final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMulticast>
		<get_IsSpecialName final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<AddEventHandler final="1" public="1" set="method"><f a="target:handler">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></AddEventHandler>
		<GetAddMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetAddMethod abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetAddMethod></overloads>
		</GetAddMethod>
		<GetRaiseMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetRaiseMethod abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetRaiseMethod></overloads>
		</GetRaiseMethod>
		<GetRemoveMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetRemoveMethod abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetRemoveMethod></overloads>
		</GetRemoveMethod>
		<GetOtherMethods public="1" set="method">
			<f a="nonPublic">
				<x path="Bool"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<overloads><GetOtherMethods final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f></GetOtherMethods></overloads>
		</GetOtherMethods>
		<RemoveEventHandler final="1" public="1" set="method"><f a="target:handler">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></RemoveEventHandler>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ExceptionHandlingClause" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ExceptionHandlingClause" extern="1" final="1">
		<TryOffset public="1" get="accessor" set="null"><x path="Int"/></TryOffset>
		<TryLength public="1" get="accessor" set="null"><x path="Int"/></TryLength>
		<HandlerOffset public="1" get="accessor" set="null"><x path="Int"/></HandlerOffset>
		<HandlerLength public="1" get="accessor" set="null"><x path="Int"/></HandlerLength>
		<Flags public="1" get="accessor" set="null"><e path="cs.system.reflection.ExceptionHandlingClauseOptions"/></Flags>
		<FilterOffset public="1" get="accessor" set="null"><x path="Int"/></FilterOffset>
		<CatchType public="1" get="accessor" set="null"><c path="cs.system.Type"/></CatchType>
		<get_CatchType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_CatchType>
		<get_FilterOffset final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_FilterOffset>
		<get_Flags final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.ExceptionHandlingClauseOptions"/></f></get_Flags>
		<get_HandlerLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_HandlerLength>
		<get_HandlerOffset final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_HandlerOffset>
		<get_TryLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_TryLength>
		<get_TryOffset final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_TryOffset>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ExceptionHandlingClause"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.ExceptionHandlingClauseOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ExceptionHandlingClauseOptions">
		<Clause><meta><m n=":csNative"><e>0</e></m></meta></Clause>
		<Filter><meta><m n=":csNative"><e>1</e></m></meta></Filter>
		<Finally><meta><m n=":csNative"><e>2</e></m></meta></Finally>
		<Fault><meta><m n=":csNative"><e>4</e></m></meta></Fault>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ExceptionHandlingClauseOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.FieldAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.FieldAttributes">
		<PrivateScope><meta><m n=":csNative"><e>0</e></m></meta></PrivateScope>
		<Private><meta><m n=":csNative"><e>1</e></m></meta></Private>
		<FamANDAssem><meta><m n=":csNative"><e>2</e></m></meta></FamANDAssem>
		<Assembly><meta><m n=":csNative"><e>3</e></m></meta></Assembly>
		<Family><meta><m n=":csNative"><e>4</e></m></meta></Family>
		<FamORAssem><meta><m n=":csNative"><e>5</e></m></meta></FamORAssem>
		<Public><meta><m n=":csNative"><e>6</e></m></meta></Public>
		<FieldAccessMask><meta><m n=":csNative"><e>7</e></m></meta></FieldAccessMask>
		<Static><meta><m n=":csNative"><e>16</e></m></meta></Static>
		<InitOnly><meta><m n=":csNative"><e>32</e></m></meta></InitOnly>
		<Literal><meta><m n=":csNative"><e>64</e></m></meta></Literal>
		<NotSerialized><meta><m n=":csNative"><e>128</e></m></meta></NotSerialized>
		<HasFieldRVA><meta><m n=":csNative"><e>256</e></m></meta></HasFieldRVA>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<HasFieldMarshal><meta><m n=":csNative"><e>4096</e></m></meta></HasFieldMarshal>
		<PinvokeImpl><meta><m n=":csNative"><e>8192</e></m></meta></PinvokeImpl>
		<HasDefault><meta><m n=":csNative"><e>32768</e></m></meta></HasDefault>
		<ReservedMask><meta><m n=":csNative"><e>38144</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.FieldAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._FieldInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._FieldInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPinvokeImpl public="1" get="accessor" set="null"><x path="Bool"/></IsPinvokeImpl>
		<IsNotSerialized public="1" get="accessor" set="null"><x path="Bool"/></IsNotSerialized>
		<IsLiteral public="1" get="accessor" set="null"><x path="Bool"/></IsLiteral>
		<IsInitOnly public="1" get="accessor" set="null"><x path="Bool"/></IsInitOnly>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<FieldType public="1" get="accessor" set="null"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<GetValue public="1" set="method"><f a="obj">
	<d/>
	<d/>
</f></GetValue>
		<GetValueDirect public="1" set="method"><f a="obj">
	<c path="cs.system.TypedReference"/>
	<d/>
</f></GetValueDirect>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<SetValue public="1" set="method">
			<f a="obj:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<overloads><SetValue public="1" set="method"><f a="obj:value:invokeAttr:binder:culture">
	<d/>
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Void"/>
</f></SetValue></overloads>
		</SetValue>
		<SetValueDirect public="1" set="method"><f a="obj:value">
	<c path="cs.system.TypedReference"/>
	<d/>
	<x path="Void"/>
</f></SetValueDirect>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.FieldAttributes"/></f></get_Attributes>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_FieldHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeFieldHandle"/></f></get_FieldHandle>
		<get_FieldType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_FieldType>
		<get_IsAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsFamily public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsFamilyAndAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsInitOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInitOnly>
		<get_IsLiteral public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLiteral>
		<get_IsNotSerialized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNotSerialized>
		<get_IsPinvokeImpl public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPinvokeImpl>
		<get_IsPrivate public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsStatic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._FieldInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.FieldInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.FieldInfo" extern="1" abstract="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._FieldInfo"/>
		<GetFieldFromHandle public="1" set="method" static="1">
			<f a="handle">
				<c path="cs.system.RuntimeFieldHandle"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<overloads><GetFieldFromHandle public="1" set="method"><f a="handle:declaringType">
	<c path="cs.system.RuntimeFieldHandle"/>
	<c path="cs.system.RuntimeTypeHandle"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetFieldFromHandle></overloads>
		</GetFieldFromHandle>
		<IsNotSerialized public="1" get="accessor" set="null"><x path="Bool"/></IsNotSerialized>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPinvokeImpl public="1" get="accessor" set="null"><x path="Bool"/></IsPinvokeImpl>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsInitOnly public="1" get="accessor" set="null"><x path="Bool"/></IsInitOnly>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsLiteral public="1" get="accessor" set="null"><x path="Bool"/></IsLiteral>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<FieldType public="1" get="accessor" set="null"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<get_Attributes abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.FieldAttributes"/></f></get_Attributes>
		<get_FieldHandle abstract="1" public="1" set="method"><f a=""><c path="cs.system.RuntimeFieldHandle"/></f></get_FieldHandle>
		<get_FieldType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_FieldType>
		<GetValue abstract="1" public="1" set="method"><f a="obj">
	<d/>
	<d/>
</f></GetValue>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_IsLiteral final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLiteral>
		<get_IsStatic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_IsInitOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInitOnly>
		<get_IsPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsPrivate final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsFamily final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsFamilyAndAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsPinvokeImpl final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPinvokeImpl>
		<get_IsSpecialName final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsNotSerialized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsNotSerialized>
		<SetValue abstract="1" public="1" set="method">
			<f a="obj:value:invokeAttr:binder:culture">
				<d/>
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.globalization.CultureInfo"/>
				<x path="Void"/>
			</f>
			<overloads><SetValue final="1" public="1" set="method"><f a="obj:value">
	<d/>
	<d/>
	<x path="Void"/>
</f></SetValue></overloads>
		</SetValue>
		<GetValueDirect public="1" set="method"><f a="obj">
	<c path="cs.system.TypedReference"/>
	<d/>
</f></GetValueDirect>
		<SetValueDirect public="1" set="method"><f a="obj:value">
	<c path="cs.system.TypedReference"/>
	<d/>
	<x path="Void"/>
</f></SetValueDirect>
		<GetOptionalCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetRequiredCustomModifiers>
		<GetRawConstantValue public="1" set="method"><f a=""><d/></f></GetRawConstantValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.FieldInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.GenericParameterAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.GenericParameterAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Covariant><meta><m n=":csNative"><e>1</e></m></meta></Covariant>
		<Contravariant><meta><m n=":csNative"><e>2</e></m></meta></Contravariant>
		<VarianceMask><meta><m n=":csNative"><e>3</e></m></meta></VarianceMask>
		<ReferenceTypeConstraint><meta><m n=":csNative"><e>4</e></m></meta></ReferenceTypeConstraint>
		<NotNullableValueTypeConstraint><meta><m n=":csNative"><e>8</e></m></meta></NotNullableValueTypeConstraint>
		<DefaultConstructorConstraint><meta><m n=":csNative"><e>16</e></m></meta></DefaultConstructorConstraint>
		<SpecialConstraintMask><meta><m n=":csNative"><e>28</e></m></meta></SpecialConstraintMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.GenericParameterAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ImageFileMachine" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ImageFileMachine">
		<I386><meta><m n=":csNative"><e>332</e></m></meta></I386>
		<IA64><meta><m n=":csNative"><e>512</e></m></meta></IA64>
		<AMD64><meta><m n=":csNative"><e>34404</e></m></meta></AMD64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ImageFileMachine"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.InterfaceMapping" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.InterfaceMapping" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<TargetType public="1"><c path="cs.system.Type"/></TargetType>
		<TargetMethods public="1"><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></TargetMethods>
		<InterfaceType public="1"><c path="cs.system.Type"/></InterfaceType>
		<InterfaceMethods public="1"><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></InterfaceMethods>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.InterfaceMapping"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.LocalVariableInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.LocalVariableInfo" extern="1">
		<LocalType public="1" get="accessor" set="null"><c path="cs.system.Type"/></LocalType>
		<LocalIndex public="1" get="accessor" set="null"><x path="Int"/></LocalIndex>
		<IsPinned public="1" get="accessor" set="null"><x path="Bool"/></IsPinned>
		<get_IsPinned public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPinned>
		<get_LocalIndex public="1" set="method"><f a=""><x path="Int"/></f></get_LocalIndex>
		<get_LocalType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_LocalType>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.LocalVariableInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ManifestResourceInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ManifestResourceInfo" extern="1">
		<ResourceLocation public="1" get="accessor" set="null"><e path="cs.system.reflection.ResourceLocation"/></ResourceLocation>
		<ReferencedAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></ReferencedAssembly>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<get_FileName public="1" set="method"><f a=""><c path="String"/></f></get_FileName>
		<get_ReferencedAssembly public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_ReferencedAssembly>
		<get_ResourceLocation public="1" set="method"><f a=""><e path="cs.system.reflection.ResourceLocation"/></f></get_ResourceLocation>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ManifestResourceInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Delegate_MemberFilter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" module="cs.system.reflection.MemberFilter" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="m:filterCriteria">
	<c path="cs.system.reflection.MemberInfo"/>
	<d/>
	<x path="Bool"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="m:filterCriteria:callback:object">
	<c path="cs.system.reflection.MemberInfo"/>
	<d/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Bool"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MemberFilter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.MemberFilter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="cs.system.reflection.MemberInfo"/>
	<d/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_MemberFilter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._MemberFilter.MemberFilter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" private="1" module="cs.system.reflection.MemberFilter" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._MemberFilter.MemberFilter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" private="1" module="cs.system.reflection.MemberFilter" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.reflection.MemberTypes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberTypes">
		<Constructor><meta><m n=":csNative"><e>1</e></m></meta></Constructor>
		<Event><meta><m n=":csNative"><e>2</e></m></meta></Event>
		<Field><meta><m n=":csNative"><e>4</e></m></meta></Field>
		<Method><meta><m n=":csNative"><e>8</e></m></meta></Method>
		<Property><meta><m n=":csNative"><e>16</e></m></meta></Property>
		<TypeInfo><meta><m n=":csNative"><e>32</e></m></meta></TypeInfo>
		<Custom><meta><m n=":csNative"><e>64</e></m></meta></Custom>
		<NestedType><meta><m n=":csNative"><e>128</e></m></meta></NestedType>
		<All><meta><m n=":csNative"><e>191</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MemberTypes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.MethodAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodAttributes">
		<PrivateScope><meta><m n=":csNative"><e>0</e></m></meta></PrivateScope>
		<ReuseSlot><meta><m n=":csNative"><e>0</e></m></meta></ReuseSlot>
		<Private><meta><m n=":csNative"><e>1</e></m></meta></Private>
		<FamANDAssem><meta><m n=":csNative"><e>2</e></m></meta></FamANDAssem>
		<Assembly><meta><m n=":csNative"><e>3</e></m></meta></Assembly>
		<Family><meta><m n=":csNative"><e>4</e></m></meta></Family>
		<FamORAssem><meta><m n=":csNative"><e>5</e></m></meta></FamORAssem>
		<Public><meta><m n=":csNative"><e>6</e></m></meta></Public>
		<MemberAccessMask><meta><m n=":csNative"><e>7</e></m></meta></MemberAccessMask>
		<UnmanagedExport><meta><m n=":csNative"><e>8</e></m></meta></UnmanagedExport>
		<Static><meta><m n=":csNative"><e>16</e></m></meta></Static>
		<Final><meta><m n=":csNative"><e>32</e></m></meta></Final>
		<Virtual><meta><m n=":csNative"><e>64</e></m></meta></Virtual>
		<HideBySig><meta><m n=":csNative"><e>128</e></m></meta></HideBySig>
		<VtableLayoutMask><meta><m n=":csNative"><e>256</e></m></meta></VtableLayoutMask>
		<NewSlot><meta><m n=":csNative"><e>256</e></m></meta></NewSlot>
		<CheckAccessOnOverride><meta><m n=":csNative"><e>512</e></m></meta></CheckAccessOnOverride>
		<Abstract><meta><m n=":csNative"><e>1024</e></m></meta></Abstract>
		<SpecialName><meta><m n=":csNative"><e>2048</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>4096</e></m></meta></RTSpecialName>
		<PinvokeImpl><meta><m n=":csNative"><e>8192</e></m></meta></PinvokeImpl>
		<HasSecurity><meta><m n=":csNative"><e>16384</e></m></meta></HasSecurity>
		<RequireSecObject><meta><m n=":csNative"><e>32768</e></m></meta></RequireSecObject>
		<ReservedMask><meta><m n=":csNative"><e>53248</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MethodAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.MethodBody" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodBody" extern="1" final="1">
		<MaxStackSize public="1" get="accessor" set="null"><x path="Int"/></MaxStackSize>
		<LocalSignatureMetadataToken public="1" get="accessor" set="null"><x path="Int"/></LocalSignatureMetadataToken>
		<InitLocals public="1" get="accessor" set="null"><x path="Bool"/></InitLocals>
		<LocalVariables public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.LocalVariableInfo"/></c></LocalVariables>
		<ExceptionHandlingClauses public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.ExceptionHandlingClause"/></c></ExceptionHandlingClauses>
		<get_ExceptionHandlingClauses final="1" public="1" set="method"><f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.ExceptionHandlingClause"/></c></f></get_ExceptionHandlingClauses>
		<get_LocalVariables final="1" public="1" set="method"><f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.LocalVariableInfo"/></c></f></get_LocalVariables>
		<get_InitLocals final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_InitLocals>
		<get_LocalSignatureMetadataToken final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_LocalSignatureMetadataToken>
		<get_MaxStackSize final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MaxStackSize>
		<GetILAsByteArray final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetILAsByteArray>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodBody"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.MethodImplAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodImplAttributes">
		<IL><meta><m n=":csNative"><e>0</e></m></meta></IL>
		<Managed><meta><m n=":csNative"><e>0</e></m></meta></Managed>
		<Native><meta><m n=":csNative"><e>1</e></m></meta></Native>
		<OPTIL><meta><m n=":csNative"><e>2</e></m></meta></OPTIL>
		<CodeTypeMask><meta><m n=":csNative"><e>3</e></m></meta></CodeTypeMask>
		<Runtime><meta><m n=":csNative"><e>3</e></m></meta></Runtime>
		<ManagedMask><meta><m n=":csNative"><e>4</e></m></meta></ManagedMask>
		<Unmanaged><meta><m n=":csNative"><e>4</e></m></meta></Unmanaged>
		<NoInlining><meta><m n=":csNative"><e>8</e></m></meta></NoInlining>
		<ForwardRef><meta><m n=":csNative"><e>16</e></m></meta></ForwardRef>
		<Synchronized><meta><m n=":csNative"><e>32</e></m></meta></Synchronized>
		<NoOptimization><meta><m n=":csNative"><e>64</e></m></meta></NoOptimization>
		<PreserveSig><meta><m n=":csNative"><e>128</e></m></meta></PreserveSig>
		<InternalCall><meta><m n=":csNative"><e>4096</e></m></meta></InternalCall>
		<MaxMethodImplVal><meta><m n=":csNative"><e>65535</e></m></meta></MaxMethodImplVal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MethodImplAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._MethodInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodInfo" extern="1" interface="1">
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetBaseDefinition public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></GetBaseDefinition>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Invoke public="1" set="method"><f a="obj:invokeAttr:binder:parameters:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></Invoke>
				<Invoke public="1" set="method"><f a="obj:parameters">
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></Invoke>
			</overloads>
		</Invoke>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_CallingConvention public="1" set="method"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_IsAbstract public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAbstract>
		<get_IsAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAssembly>
		<get_IsConstructor public="1" set="method"><f a=""><x path="Bool"/></f></get_IsConstructor>
		<get_IsFamily public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamily>
		<get_IsFamilyAndAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFamilyOrAssembly>
		<get_IsFinal public="1" set="method"><f a=""><x path="Bool"/></f></get_IsFinal>
		<get_IsHideBySig public="1" set="method"><f a=""><x path="Bool"/></f></get_IsHideBySig>
		<get_IsPrivate public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPrivate>
		<get_IsPublic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_IsStatic public="1" set="method"><f a=""><x path="Bool"/></f></get_IsStatic>
		<get_IsVirtual public="1" set="method"><f a=""><x path="Bool"/></f></get_IsVirtual>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_MethodHandle public="1" set="method"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_ReturnType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReturnType>
		<get_ReturnTypeCustomAttributes public="1" set="method"><f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f></get_ReturnTypeCustomAttributes>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MethodInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodInfo" extern="1" abstract="1">
		<extends path="cs.system.reflection.MethodBase"/>
		<implements path="cs.system.runtime.interopservices._MethodInfo"/>
		<ReturnParameter public="1" get="accessor" set="null"><c path="cs.system.reflection.ParameterInfo"/></ReturnParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<IsGenericMethodDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethodDefinition>
		<IsGenericMethod public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethod>
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<GetBaseDefinition abstract="1" public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></GetBaseDefinition>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_ReturnType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReturnType>
		<get_ReturnTypeCustomAttributes abstract="1" public="1" set="method"><f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f></get_ReturnTypeCustomAttributes>
		<GetGenericMethodDefinition public="1" set="method"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></GetGenericMethodDefinition>
		<MakeGenericMethod public="1" set="method"><f a="typeArguments">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></MakeGenericMethod>
		<GetGenericArguments public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<get_IsGenericMethod public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericMethod>
		<get_IsGenericMethodDefinition public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericMethodDefinition>
		<get_ContainsGenericParameters public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_ReturnParameter public="1" set="method"><f a=""><c path="cs.system.reflection.ParameterInfo"/></f></get_ReturnParameter>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Module" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Module" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Module"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Module" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.Module" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._Module"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<FilterTypeNameIgnoreCase public="1" set="null" static="1">
			<x path="cs.system.reflection.TypeFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterTypeNameIgnoreCase>
		<FilterTypeName public="1" set="null" static="1">
			<x path="cs.system.reflection.TypeFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterTypeName>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<FullyQualifiedName public="1" get="accessor" set="null"><c path="String"/></FullyQualifiedName>
		<ModuleVersionId public="1" get="accessor" set="null"><c path="cs.system.Guid"/></ModuleVersionId>
		<MDStreamVersion public="1" get="accessor" set="null"><x path="Int"/></MDStreamVersion>
		<ScopeName public="1" get="accessor" set="null"><c path="String"/></ScopeName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<ModuleHandle public="1" get="accessor" set="null"><c path="cs.system.ModuleHandle"/></ModuleHandle>
		<get_ModuleHandle final="1" public="1" set="method"><f a=""><c path="cs.system.ModuleHandle"/></f></get_ModuleHandle>
		<GetField final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<overloads><GetField public="1" set="method"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField></overloads>
		</GetField>
		<GetFields final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<overloads><GetFields public="1" set="method"><f a="bindingFlags">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields></overloads>
		</GetFields>
		<GetMethod final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<overloads>
				<GetMethod final="1" public="1" set="method"><f a="name:bindingAttr:binder:callConvention:types:modifiers">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
				<GetMethod final="1" public="1" set="method"><f a="name:types">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
			</overloads>
		</GetMethod>
		<GetMethods final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<overloads><GetMethods final="1" public="1" set="method"><f a="bindingFlags">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods></overloads>
		</GetMethods>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetType public="1" set="method">
			<f a="className">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads>
				<GetType public="1" set="method"><f a="className:throwOnError:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
				<GetType public="1" set="method"><f a="className:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
			</overloads>
		</GetType>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<ResolveField final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<overloads><ResolveField final="1" public="1" set="method"><f a="metadataToken:genericTypeArguments:genericMethodArguments">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.FieldInfo"/>
</f></ResolveField></overloads>
		</ResolveField>
		<ResolveMember final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.MemberInfo"/>
			</f>
			<overloads><ResolveMember final="1" public="1" set="method"><f a="metadataToken:genericTypeArguments:genericMethodArguments">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MemberInfo"/>
</f></ResolveMember></overloads>
		</ResolveMember>
		<ResolveMethod final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<overloads><ResolveMethod final="1" public="1" set="method"><f a="metadataToken:genericTypeArguments:genericMethodArguments">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodBase"/>
</f></ResolveMethod></overloads>
		</ResolveMethod>
		<ResolveType final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads><ResolveType final="1" public="1" set="method"><f a="metadataToken:genericTypeArguments:genericMethodArguments">
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.Type"/>
</f></ResolveType></overloads>
		</ResolveType>
		<get_Assembly final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ScopeName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_ScopeName>
		<get_MDStreamVersion final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MDStreamVersion>
		<get_ModuleVersionId final="1" public="1" set="method"><f a=""><c path="cs.system.Guid"/></f></get_ModuleVersionId>
		<get_FullyQualifiedName public="1" set="method"><f a=""><c path="String"/></f></get_FullyQualifiedName>
		<IsResource final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsResource>
		<FindTypes public="1" set="method"><f a="filter:filterCriteria">
	<x path="cs.system.reflection.TypeFilter"/>
	<d/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></FindTypes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<get_MetadataToken public="1" set="method"><f a=""><x path="Int"/></f></get_MetadataToken>
		<GetMethodImpl set="method">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetPEKind public="1" set="method"><f a="peKind:machine">
	<t path="cs.Out"><e path="cs.system.reflection.PortableExecutableKinds"/></t>
	<t path="cs.Out"><e path="cs.system.reflection.ImageFileMachine"/></t>
	<x path="Void"/>
</f></GetPEKind>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<ResolveString final="1" public="1" set="method"><f a="metadataToken">
	<x path="Int"/>
	<c path="String"/>
</f></ResolveString>
		<ResolveSignature final="1" public="1" set="method"><f a="metadataToken">
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></ResolveSignature>
		<GetSignerCertificate final="1" public="1" set="method"><f a=""><c path="cs.system.security.cryptography.x509certificates.X509Certificate"/></f></GetSignerCertificate>
		<GetTypes public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetTypes>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Module"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Delegate_ModuleResolveEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" module="cs.system.reflection.ModuleResolveEventHandler" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="sender:e">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Module"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="sender:e:callback:object">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.reflection.Module"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ModuleResolveEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.ModuleResolveEventHandler" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Module"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._ModuleResolveEventHandler.ModuleResolveEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" private="1" module="cs.system.reflection.ModuleResolveEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._ModuleResolveEventHandler.ModuleResolveEventHandler_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" private="1" module="cs.system.reflection.ModuleResolveEventHandler" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.reflection.ParameterAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<In><meta><m n=":csNative"><e>1</e></m></meta></In>
		<Out><meta><m n=":csNative"><e>2</e></m></meta></Out>
		<Lcid><meta><m n=":csNative"><e>4</e></m></meta></Lcid>
		<Retval><meta><m n=":csNative"><e>8</e></m></meta></Retval>
		<Optional><meta><m n=":csNative"><e>16</e></m></meta></Optional>
		<HasDefault><meta><m n=":csNative"><e>4096</e></m></meta></HasDefault>
		<HasFieldMarshal><meta><m n=":csNative"><e>8192</e></m></meta></HasFieldMarshal>
		<Reserved3><meta><m n=":csNative"><e>16384</e></m></meta></Reserved3>
		<Reserved4><meta><m n=":csNative"><e>32768</e></m></meta></Reserved4>
		<ReservedMask><meta><m n=":csNative"><e>61440</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ParameterAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ParameterInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ParameterInfo" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ParameterInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ParameterInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterInfo" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._ParameterInfo"/>
		<RawDefaultValue public="1" get="accessor" set="null"><d/></RawDefaultValue>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<Position public="1" get="accessor" set="null"><x path="Int"/></Position>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Member public="1" get="accessor" set="null"><c path="cs.system.reflection.MemberInfo"/></Member>
		<IsRetval public="1" get="accessor" set="null"><x path="Bool"/></IsRetval>
		<IsOut public="1" get="accessor" set="null"><x path="Bool"/></IsOut>
		<IsOptional public="1" get="accessor" set="null"><x path="Bool"/></IsOptional>
		<IsLcid public="1" get="accessor" set="null"><x path="Bool"/></IsLcid>
		<IsIn public="1" get="accessor" set="null"><x path="Bool"/></IsIn>
		<DefaultValue public="1" get="accessor" set="null"><d/></DefaultValue>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.ParameterAttributes"/></Attributes>
		<ParameterType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ParameterType>
		<AttrsImpl><e path="cs.system.reflection.ParameterAttributes"/></AttrsImpl>
		<PositionImpl><x path="Int"/></PositionImpl>
		<NameImpl><c path="String"/></NameImpl>
		<MemberImpl><c path="cs.system.reflection.MemberInfo"/></MemberImpl>
		<DefaultValueImpl><d/></DefaultValueImpl>
		<ClassImpl><c path="cs.system.Type"/></ClassImpl>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_ParameterType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ParameterType>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.ParameterAttributes"/></f></get_Attributes>
		<get_DefaultValue public="1" set="method"><f a=""><d/></f></get_DefaultValue>
		<get_IsIn final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsIn>
		<get_IsLcid final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsLcid>
		<get_IsOptional final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsOptional>
		<get_IsOut final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsOut>
		<get_IsRetval final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsRetval>
		<get_Member public="1" set="method"><f a=""><c path="cs.system.reflection.MemberInfo"/></f></get_Member>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Position public="1" set="method"><f a=""><x path="Int"/></f></get_Position>
		<get_MetadataToken final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MetadataToken>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetOptionalCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetRequiredCustomModifiers>
		<get_RawDefaultValue public="1" set="method"><f a=""><d/></f></get_RawDefaultValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ParameterInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ParameterModifier" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterModifier" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<get_Item final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_Item>
		<set_Item final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></set_Item>
		<new final="1" public="1" set="method"><f a="parameterCount">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ParameterModifier"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.PortableExecutableKinds" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.PortableExecutableKinds">
		<NotAPortableExecutableImage><meta><m n=":csNative"><e>0</e></m></meta></NotAPortableExecutableImage>
		<ILOnly><meta><m n=":csNative"><e>1</e></m></meta></ILOnly>
		<Required32Bit><meta><m n=":csNative"><e>2</e></m></meta></Required32Bit>
		<PE32Plus><meta><m n=":csNative"><e>4</e></m></meta></PE32Plus>
		<Unmanaged32Bit><meta><m n=":csNative"><e>8</e></m></meta></Unmanaged32Bit>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.PortableExecutableKinds"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ProcessorArchitecture" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ProcessorArchitecture">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<MSIL><meta><m n=":csNative"><e>1</e></m></meta></MSIL>
		<X86><meta><m n=":csNative"><e>2</e></m></meta></X86>
		<IA64><meta><m n=":csNative"><e>3</e></m></meta></IA64>
		<Amd64><meta><m n=":csNative"><e>4</e></m></meta></Amd64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ProcessorArchitecture"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.PropertyAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.PropertyAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<HasDefault><meta><m n=":csNative"><e>4096</e></m></meta></HasDefault>
		<Reserved2><meta><m n=":csNative"><e>8192</e></m></meta></Reserved2>
		<Reserved3><meta><m n=":csNative"><e>16384</e></m></meta></Reserved3>
		<Reserved4><meta><m n=":csNative"><e>32768</e></m></meta></Reserved4>
		<ReservedMask><meta><m n=":csNative"><e>62464</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.PropertyAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._PropertyInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._PropertyInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<PropertyType public="1" get="accessor" set="null"><c path="cs.system.Type"/></PropertyType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<GetAccessors public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<overloads><GetAccessors public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetAccessors></overloads>
		</GetAccessors>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetGetMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetGetMethod public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetGetMethod></overloads>
		</GetGetMethod>
		<GetIndexParameters public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetIndexParameters>
		<GetSetMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetSetMethod public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetSetMethod></overloads>
		</GetSetMethod>
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<GetType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></GetType>
		<GetValue public="1" set="method">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<overloads><GetValue public="1" set="method"><f a="obj:invokeAttr:binder:index:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></GetValue></overloads>
		</GetValue>
		<IsDefined public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<SetValue public="1" set="method">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<overloads><SetValue public="1" set="method"><f a="obj:value:invokeAttr:binder:index:culture">
	<d/>
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Void"/>
</f></SetValue></overloads>
		</SetValue>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<get_Attributes public="1" set="method"><f a=""><e path="cs.system.reflection.PropertyAttributes"/></f></get_Attributes>
		<get_CanRead public="1" set="method"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanWrite public="1" set="method"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_DeclaringType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_IsSpecialName public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_MemberType public="1" set="method"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_PropertyType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_PropertyType>
		<get_ReflectedType public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._PropertyInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.PropertyInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.PropertyInfo" extern="1" abstract="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._PropertyInfo"/>
		<PropertyType public="1" get="accessor" set="null"><c path="cs.system.Type"/></PropertyType>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<get_Attributes abstract="1" public="1" set="method"><f a=""><e path="cs.system.reflection.PropertyAttributes"/></f></get_Attributes>
		<get_CanRead abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanWrite abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_IsSpecialName final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSpecialName>
		<get_MemberType public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MemberTypes"/></f></get_MemberType>
		<get_PropertyType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_PropertyType>
		<GetAccessors final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<overloads><GetAccessors abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetAccessors></overloads>
		</GetAccessors>
		<GetGetMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetGetMethod abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetGetMethod></overloads>
		</GetGetMethod>
		<GetIndexParameters abstract="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetIndexParameters>
		<GetSetMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<overloads><GetSetMethod abstract="1" public="1" set="method"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetSetMethod></overloads>
		</GetSetMethod>
		<GetValue public="1" set="method">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<overloads><GetValue abstract="1" public="1" set="method"><f a="obj:invokeAttr:binder:index:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></GetValue></overloads>
		</GetValue>
		<SetValue public="1" set="method">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<overloads><SetValue abstract="1" public="1" set="method"><f a="obj:value:invokeAttr:binder:index:culture">
	<d/>
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Void"/>
</f></SetValue></overloads>
		</SetValue>
		<GetOptionalCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetRequiredCustomModifiers>
		<GetConstantValue public="1" set="method"><f a=""><d/></f></GetConstantValue>
		<GetRawConstantValue public="1" set="method"><f a=""><d/></f></GetRawConstantValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.PropertyInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.ResourceAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ResourceAttributes">
		<Public><meta><m n=":csNative"><e>1</e></m></meta></Public>
		<Private><meta><m n=":csNative"><e>2</e></m></meta></Private>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ResourceAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ResourceLocation" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.ResourceLocation">
		<Embedded><meta><m n=":csNative"><e>1</e></m></meta></Embedded>
		<ContainedInAnotherAssembly><meta><m n=":csNative"><e>2</e></m></meta></ContainedInAnotherAssembly>
		<ContainedInManifestFile><meta><m n=":csNative"><e>4</e></m></meta></ContainedInManifestFile>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ResourceLocation"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.StrongNameKeyPair" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.StrongNameKeyPair" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<PublicKey public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></PublicKey>
		<get_PublicKey final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></get_PublicKey>
		<new final="1" public="1" set="method">
			<f a="keyPairArray">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="keyPairContainer">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="keyPairFile">
	<c path="cs.system.io.FileStream"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.StrongNameKeyPair"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.TargetInvocationException" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TargetInvocationException" extern="1" final="1">
		<extends path="cs.system.ApplicationException"/>
		<new final="1" public="1" set="method">
			<f a="inner">
				<c path="cs.system.Exception"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="message:inner">
	<c path="String"/>
	<c path="cs.system.Exception"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.TargetInvocationException"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.TypeAttributes" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeAttributes">
		<NotPublic><meta><m n=":csNative"><e>0</e></m></meta></NotPublic>
		<AutoLayout><meta><m n=":csNative"><e>0</e></m></meta></AutoLayout>
		<Class><meta><m n=":csNative"><e>0</e></m></meta></Class>
		<AnsiClass><meta><m n=":csNative"><e>0</e></m></meta></AnsiClass>
		<Public><meta><m n=":csNative"><e>1</e></m></meta></Public>
		<NestedPublic><meta><m n=":csNative"><e>2</e></m></meta></NestedPublic>
		<NestedPrivate><meta><m n=":csNative"><e>3</e></m></meta></NestedPrivate>
		<NestedFamily><meta><m n=":csNative"><e>4</e></m></meta></NestedFamily>
		<NestedAssembly><meta><m n=":csNative"><e>5</e></m></meta></NestedAssembly>
		<NestedFamANDAssem><meta><m n=":csNative"><e>6</e></m></meta></NestedFamANDAssem>
		<VisibilityMask><meta><m n=":csNative"><e>7</e></m></meta></VisibilityMask>
		<NestedFamORAssem><meta><m n=":csNative"><e>7</e></m></meta></NestedFamORAssem>
		<SequentialLayout><meta><m n=":csNative"><e>8</e></m></meta></SequentialLayout>
		<ExplicitLayout><meta><m n=":csNative"><e>16</e></m></meta></ExplicitLayout>
		<LayoutMask><meta><m n=":csNative"><e>24</e></m></meta></LayoutMask>
		<ClassSemanticsMask><meta><m n=":csNative"><e>32</e></m></meta></ClassSemanticsMask>
		<Interface><meta><m n=":csNative"><e>32</e></m></meta></Interface>
		<Abstract><meta><m n=":csNative"><e>128</e></m></meta></Abstract>
		<Sealed><meta><m n=":csNative"><e>256</e></m></meta></Sealed>
		<SpecialName><meta><m n=":csNative"><e>1024</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>2048</e></m></meta></RTSpecialName>
		<Import><meta><m n=":csNative"><e>4096</e></m></meta></Import>
		<Serializable><meta><m n=":csNative"><e>8192</e></m></meta></Serializable>
		<UnicodeClass><meta><m n=":csNative"><e>65536</e></m></meta></UnicodeClass>
		<AutoClass><meta><m n=":csNative"><e>131072</e></m></meta></AutoClass>
		<StringFormatMask><meta><m n=":csNative"><e>196608</e></m></meta></StringFormatMask>
		<CustomFormatClass><meta><m n=":csNative"><e>196608</e></m></meta></CustomFormatClass>
		<HasSecurity><meta><m n=":csNative"><e>262144</e></m></meta></HasSecurity>
		<ReservedMask><meta><m n=":csNative"><e>264192</e></m></meta></ReservedMask>
		<BeforeFieldInit><meta><m n=":csNative"><e>1048576</e></m></meta></BeforeFieldInit>
		<CustomFormatMask><meta><m n=":csNative"><e>12582912</e></m></meta></CustomFormatMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.TypeAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Delegate_TypeFilter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" module="cs.system.reflection.TypeFilter" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="m:filterCriteria">
	<c path="cs.system.Type"/>
	<d/>
	<x path="Bool"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="m:filterCriteria:callback:object">
	<c path="cs.system.Type"/>
	<d/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Bool"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.TypeFilter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.TypeFilter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="cs.system.Type"/>
	<d/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_TypeFilter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._TypeFilter.TypeFilter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" private="1" module="cs.system.reflection.TypeFilter" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.reflection._TypeFilter.TypeFilter_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" private="1" module="cs.system.reflection.TypeFilter" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.runtime.interopservices._AssemblyBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._AssemblyBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._AssemblyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.AssemblyBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.AssemblyBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.Assembly"/>
		<implements path="cs.system.runtime.interopservices._AssemblyBuilder"/>
		<ReflectionOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></ReflectionOnly>
		<ImageRuntimeVersion public="1" get="accessor" set="null" override="1"><c path="String"/></ImageRuntimeVersion>
		<Location public="1" get="accessor" set="null" override="1"><c path="String"/></Location>
		<EntryPoint public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<CodeBase public="1" get="accessor" set="null" override="1"><c path="String"/></CodeBase>
		<get_CodeBase public="1" set="method" override="1"><f a=""><c path="String"/></f></get_CodeBase>
		<get_EntryPoint public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></get_EntryPoint>
		<get_Location public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Location>
		<get_ImageRuntimeVersion public="1" set="method" override="1"><f a=""><c path="String"/></f></get_ImageRuntimeVersion>
		<get_ReflectionOnly public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_ReflectionOnly>
		<AddResourceFile final="1" public="1" set="method">
			<f a="name:fileName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><AddResourceFile final="1" public="1" set="method"><f a="name:fileName:attribute">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.reflection.ResourceAttributes"/>
	<x path="Void"/>
</f></AddResourceFile></overloads>
		</AddResourceFile>
		<DefineDynamicModule final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.ModuleBuilder"/>
			</f>
			<overloads>
				<DefineDynamicModule final="1" public="1" set="method"><f a="name:fileName:emitSymbolInfo">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.reflection.emit.ModuleBuilder"/>
</f></DefineDynamicModule>
				<DefineDynamicModule final="1" public="1" set="method"><f a="name:fileName">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.reflection.emit.ModuleBuilder"/>
</f></DefineDynamicModule>
				<DefineDynamicModule final="1" public="1" set="method"><f a="name:emitSymbolInfo">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.reflection.emit.ModuleBuilder"/>
</f></DefineDynamicModule>
			</overloads>
		</DefineDynamicModule>
		<DefineResource final="1" public="1" set="method">
			<f a="name:description:fileName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.resources.IResourceWriter"/>
			</f>
			<overloads><DefineResource final="1" public="1" set="method"><f a="name:description:fileName:attribute">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.reflection.ResourceAttributes"/>
	<c path="cs.system.resources.IResourceWriter"/>
</f></DefineResource></overloads>
		</DefineResource>
		<DefineUnmanagedResource final="1" public="1" set="method">
			<f a="resource">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads><DefineUnmanagedResource final="1" public="1" set="method"><f a="resourceFileName">
	<c path="String"/>
	<x path="Void"/>
</f></DefineUnmanagedResource></overloads>
		</DefineUnmanagedResource>
		<DefineVersionInfoResource final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><DefineVersionInfoResource final="1" public="1" set="method"><f a="product:productVersion:company:copyright:trademark">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></DefineVersionInfoResource></overloads>
		</DefineVersionInfoResource>
		<GetDynamicModule final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.reflection.emit.ModuleBuilder"/>
</f></GetDynamicModule>
		<GetExportedTypes public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetExportedTypes>
		<GetFile public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.io.FileStream"/>
</f></GetFile>
		<GetFiles public="1" set="method" override="1"><f a="getResourceModules">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
</f></GetFiles>
		<GetManifestResourceInfo public="1" set="method" override="1"><f a="resourceName">
	<c path="String"/>
	<c path="cs.system.reflection.ManifestResourceInfo"/>
</f></GetManifestResourceInfo>
		<GetManifestResourceNames public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetManifestResourceNames>
		<GetManifestResourceStream public="1" set="method" override="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<overloads><GetManifestResourceStream public="1" set="method"><f a="type:name">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<c path="cs.system.io.Stream"/>
</f></GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<Save final="1" public="1" set="method">
			<f a="assemblyFileName:portableExecutableKind:imageFileMachine">
				<c path="String"/>
				<e path="cs.system.reflection.PortableExecutableKinds"/>
				<e path="cs.system.reflection.ImageFileMachine"/>
				<x path="Void"/>
			</f>
			<overloads><Save final="1" public="1" set="method"><f a="assemblyFileName">
	<c path="String"/>
	<x path="Void"/>
</f></Save></overloads>
		</Save>
		<SetEntryPoint final="1" public="1" set="method">
			<f a="entryMethod">
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Void"/>
			</f>
			<overloads><SetEntryPoint final="1" public="1" set="method"><f a="entryMethod:fileKind">
	<c path="cs.system.reflection.MethodInfo"/>
	<e path="cs.system.reflection.emit.PEFileKinds"/>
	<x path="Void"/>
</f></SetEntryPoint></overloads>
		</SetEntryPoint>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.AssemblyBuilder"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.AssemblyBuilderAccess" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.AssemblyBuilderAccess">
		<Run><meta><m n=":csNative"><e>1</e></m></meta></Run>
		<Save><meta><m n=":csNative"><e>2</e></m></meta></Save>
		<RunAndSave><meta><m n=":csNative"><e>3</e></m></meta></RunAndSave>
		<ReflectionOnly><meta><m n=":csNative"><e>6</e></m></meta></ReflectionOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.AssemblyBuilderAccess"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ConstructorBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ConstructorBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ConstructorBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ConstructorBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ConstructorBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.ConstructorInfo"/>
		<implements path="cs.system.runtime.interopservices._ConstructorBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<Signature public="1" get="accessor" set="null"><c path="String"/></Signature>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<MethodHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<InitLocals public="1" get="accessor" set="accessor"><x path="Bool"/></InitLocals>
		<CallingConvention public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<get_CallingConvention public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_InitLocals final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_InitLocals>
		<set_InitLocals final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_InitLocals>
		<GetMethodImplementationFlags public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<Invoke public="1" set="method" override="1">
			<f a="obj:invokeAttr:binder:parameters:culture">
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
			<overloads><Invoke public="1" set="method">
	<f a="invokeAttr:binder:parameters:culture">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<get_MethodHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_Attributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_ReturnType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ReturnType>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Signature final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Signature>
		<AddDeclarativeSecurity final="1" public="1" set="method"><f a="action:pset">
	<e path="cs.system.security.permissions.SecurityAction"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Void"/>
</f></AddDeclarativeSecurity>
		<DefineParameter final="1" public="1" set="method"><f a="iSequence:attributes:strParamName">
	<x path="Int"/>
	<e path="cs.system.reflection.ParameterAttributes"/>
	<c path="String"/>
	<c path="cs.system.reflection.emit.ParameterBuilder"/>
</f></DefineParameter>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetILGenerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ILGenerator"/></f>
			<overloads><GetILGenerator final="1" public="1" set="method"><f a="streamSize">
	<x path="Int"/>
	<c path="cs.system.reflection.emit.ILGenerator"/>
</f></GetILGenerator></overloads>
		</GetILGenerator>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetImplementationFlags final="1" public="1" set="method"><f a="attributes">
	<e path="cs.system.reflection.MethodImplAttributes"/>
	<x path="Void"/>
</f></SetImplementationFlags>
		<GetModule final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Module"/></f></GetModule>
		<GetToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.MethodToken"/></f></GetToken>
		<SetSymCustomAttribute final="1" public="1" set="method"><f a="name:data">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetSymCustomAttribute>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ConstructorBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.CustomAttributeBuilder_CustomAttributeInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.CustomAttributeBuilder" module="cs.system.reflection.emit.CustomAttributeBuilder" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<namedParamValues public="1"><c path="cs.NativeArray"><d/></c></namedParamValues>
		<namedParamNames public="1"><c path="cs.NativeArray"><c path="String"/></c></namedParamNames>
		<ctorArgs public="1"><c path="cs.NativeArray"><d/></c></ctorArgs>
		<ctor public="1"><c path="cs.system.reflection.ConstructorInfo"/></ctor>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._CustomAttributeBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._CustomAttributeBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._CustomAttributeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.CustomAttributeBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.CustomAttributeBuilder" extern="1">
		<implements path="cs.system.runtime.interopservices._CustomAttributeBuilder"/>
		<new final="1" public="1" set="method">
			<f a="con:constructorArgs">
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="con:constructorArgs:namedProperties:propertyValues:namedFields:fieldValues">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="con:constructorArgs:namedProperties:propertyValues">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="con:constructorArgs:namedFields:fieldValues">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.CustomAttributeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._EnumBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EnumBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EnumBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EnumBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EnumBuilder" extern="1" final="1">
		<extends path="cs.system.Type"/>
		<implements path="cs.system.runtime.interopservices._EnumBuilder"/>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<UnderlyingField public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.FieldBuilder"/></UnderlyingField>
		<TypeToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.TypeToken"/></TypeToken>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<get_Assembly public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_AssemblyQualifiedName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_AssemblyQualifiedName>
		<get_BaseType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_BaseType>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_FullName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_FullName>
		<get_GUID public="1" set="method" override="1"><f a=""><c path="cs.system.Guid"/></f></get_GUID>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Namespace public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Namespace>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_TypeHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeTypeHandle"/></f></get_TypeHandle>
		<get_TypeToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.TypeToken"/></f></get_TypeToken>
		<get_UnderlyingField final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.FieldBuilder"/></f></get_UnderlyingField>
		<get_UnderlyingSystemType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<CreateType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></CreateType>
		<DefineLiteral final="1" public="1" set="method"><f a="literalName:literalValue">
	<c path="String"/>
	<d/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineLiteral>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":protected"/></meta>
		</GetAttributeFlagsImpl>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetConstructorImpl>
		<GetConstructors public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
</f></GetConstructors>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetElementType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></GetElementType>
		<GetEvent public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.EventInfo"/>
</f></GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<overloads><GetEvents public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
</f></GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField>
		<GetFields public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields>
		<GetInterface public="1" set="method" override="1"><f a="name:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetInterface>
		<GetInterfaceMap public="1" set="method" override="1"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.InterfaceMapping"/>
</f></GetInterfaceMap>
		<GetInterfaces public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetInterfaces>
		<GetMember public="1" set="method" override="1"><f a="name:type:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
		<GetMembers public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetMethods public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods>
		<GetNestedType public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.Type"/>
</f></GetNestedType>
		<GetNestedTypes public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetNestedTypes>
		<GetProperties public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</HasElementTypeImpl>
		<InvokeMember public="1" set="method" override="1"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsValueTypeImpl>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<overloads><MakeArrayType public="1" set="method"><f a="rank">
	<x path="Int"/>
	<c path="cs.system.Type"/>
</f></MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakeByRefType>
		<MakePointerType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakePointerType>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EnumBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._EventBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EventBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EventBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EventBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EventBuilder" extern="1" final="1">
		<implements path="cs.system.runtime.interopservices._EventBuilder"/>
		<AddOtherMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></AddOtherMethod>
		<GetEventToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.EventToken"/></f></GetEventToken>
		<SetAddOnMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></SetAddOnMethod>
		<SetRaiseMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></SetRaiseMethod>
		<SetRemoveOnMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></SetRemoveOnMethod>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EventBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EventToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EventToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.EventToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.EventToken"/>
	<c path="cs.system.reflection.emit.EventToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.EventToken"/>
	<c path="cs.system.reflection.emit.EventToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EventToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._FieldBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._FieldBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._FieldBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.FieldBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FieldBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.FieldInfo"/>
		<implements path="cs.system.runtime.interopservices._FieldBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<FieldType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<get_Attributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.FieldAttributes"/></f></get_Attributes>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_FieldHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeFieldHandle"/></f></get_FieldHandle>
		<get_FieldType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_FieldType>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.FieldToken"/></f></GetToken>
		<GetValue public="1" set="method" override="1"><f a="obj">
	<d/>
	<d/>
</f></GetValue>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<SetConstant final="1" public="1" set="method"><f a="defaultValue">
	<d/>
	<x path="Void"/>
</f></SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetMarshal final="1" public="1" set="method"><f a="unmanagedMarshal">
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
	<x path="Void"/>
</f></SetMarshal>
		<SetOffset final="1" public="1" set="method"><f a="iOffset">
	<x path="Int"/>
	<x path="Void"/>
</f></SetOffset>
		<SetValue public="1" set="method" override="1"><f a="obj:val:invokeAttr:binder:culture">
	<d/>
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Void"/>
</f></SetValue>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.FieldBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.FieldToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FieldToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.FieldToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.FieldToken"/>
	<c path="cs.system.reflection.emit.FieldToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.FieldToken"/>
	<c path="cs.system.reflection.emit.FieldToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.FieldToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.FlowControl" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FlowControl">
		<Branch><meta><m n=":csNative"><e>0</e></m></meta></Branch>
		<Break><meta><m n=":csNative"><e>1</e></m></meta></Break>
		<Call><meta><m n=":csNative"><e>2</e></m></meta></Call>
		<Cond_Branch><meta><m n=":csNative"><e>3</e></m></meta></Cond_Branch>
		<Meta><meta><m n=":csNative"><e>4</e></m></meta></Meta>
		<Next><meta><m n=":csNative"><e>5</e></m></meta></Next>
		<Phi><meta><m n=":csNative"><e>6</e></m></meta></Phi>
		<Return><meta><m n=":csNative"><e>7</e></m></meta></Return>
		<Throw><meta><m n=":csNative"><e>8</e></m></meta></Throw>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.FlowControl"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.emit.GenericTypeParameterBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.GenericTypeParameterBuilder" extern="1" final="1">
		<extends path="cs.system.Type"/>
		<DeclaringMethod public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterPosition public="1" get="accessor" set="null" override="1"><x path="Int"/></GenericParameterPosition>
		<GenericParameterAttributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<IsGenericTypeDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericTypeDefinition>
		<IsGenericType public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericType>
		<IsGenericParameter public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<SetBaseTypeConstraint final="1" public="1" set="method"><f a="baseTypeConstraint">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></SetBaseTypeConstraint>
		<SetInterfaceConstraints final="1" public="1" set="method"><f a="interfaceConstraints">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<x path="Void"/>
</f></SetInterfaceConstraints>
		<SetGenericParameterAttributes final="1" public="1" set="method"><f a="genericParameterAttributes">
	<e path="cs.system.reflection.GenericParameterAttributes"/>
	<x path="Void"/>
</f></SetGenericParameterAttributes>
		<IsSubclassOf public="1" set="method" override="1"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsSubclassOf>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":protected"/></meta>
		</GetAttributeFlagsImpl>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetConstructorImpl>
		<GetConstructors public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
</f></GetConstructors>
		<GetEvent public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.EventInfo"/>
</f></GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<overloads><GetEvents public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
</f></GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField>
		<GetFields public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields>
		<GetInterface public="1" set="method" override="1"><f a="name:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetInterface>
		<GetInterfaces public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetInterfaces>
		<GetMembers public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers>
		<GetMember public="1" set="method" override="1"><f a="name:type:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
		<GetMethods public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetNestedType public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.Type"/>
</f></GetNestedType>
		<GetNestedTypes public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetNestedTypes>
		<GetProperties public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</HasElementTypeImpl>
		<IsAssignableFrom public="1" set="method" override="1"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsAssignableFrom>
		<IsInstanceOfType public="1" set="method" override="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></IsInstanceOfType>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsValueTypeImpl>
		<InvokeMember public="1" set="method" override="1"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
		<GetElementType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></GetElementType>
		<get_UnderlyingSystemType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<get_Assembly public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_AssemblyQualifiedName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_AssemblyQualifiedName>
		<get_BaseType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_BaseType>
		<get_FullName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_FullName>
		<get_GUID public="1" set="method" override="1"><f a=""><c path="cs.system.Guid"/></f></get_GUID>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetInterfaceMap public="1" set="method" override="1"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.InterfaceMapping"/>
</f></GetInterfaceMap>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Namespace public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Namespace>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_TypeHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeTypeHandle"/></f></get_TypeHandle>
		<GetGenericArguments public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<GetGenericTypeDefinition public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></GetGenericTypeDefinition>
		<get_ContainsGenericParameters public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_IsGenericParameter public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericParameter>
		<get_IsGenericType public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericType>
		<get_IsGenericTypeDefinition public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericTypeDefinition>
		<get_GenericParameterAttributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f></get_GenericParameterAttributes>
		<get_GenericParameterPosition public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_GenericParameterPosition>
		<GetGenericParameterConstraints public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericParameterConstraints>
		<get_DeclaringMethod public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.MethodBase"/></f></get_DeclaringMethod>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<overloads><MakeArrayType public="1" set="method"><f a="rank">
	<x path="Int"/>
	<c path="cs.system.Type"/>
</f></MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakeByRefType>
		<MakeGenericType public="1" set="method" override="1"><f a="typeArguments">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.Type"/>
</f></MakeGenericType>
		<MakePointerType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakePointerType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.GenericTypeParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator_LabelData" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" module="cs.system.reflection.emit.ILGenerator" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<maxStack public="1"><x path="Int"/></maxStack>
		<addr public="1"><x path="Int"/></addr>
		<new final="1" public="1" set="method"><f a="addr:maxStack">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator.LabelData"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator_LabelFixup" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" module="cs.system.reflection.emit.ILGenerator" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<label_idx public="1"><x path="Int"/></label_idx>
		<pos public="1"><x path="Int"/></pos>
		<offset public="1"><x path="Int"/></offset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator.LabelFixup"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ILGenerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ILGenerator" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ILGenerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" extern="1">
		<implements path="cs.system.runtime.interopservices._ILGenerator"/>
		<BeginCatchBlock public="1" set="method"><f a="exceptionType">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></BeginCatchBlock>
		<BeginExceptFilterBlock public="1" set="method"><f a=""><x path="Void"/></f></BeginExceptFilterBlock>
		<BeginExceptionBlock public="1" set="method"><f a=""><c path="cs.system.reflection.emit.Label"/></f></BeginExceptionBlock>
		<BeginFaultBlock public="1" set="method"><f a=""><x path="Void"/></f></BeginFaultBlock>
		<BeginFinallyBlock public="1" set="method"><f a=""><x path="Void"/></f></BeginFinallyBlock>
		<BeginScope public="1" set="method"><f a=""><x path="Void"/></f></BeginScope>
		<DeclareLocal public="1" set="method">
			<f a="localType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.LocalBuilder"/>
			</f>
			<overloads><DeclareLocal public="1" set="method"><f a="localType:pinned">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.system.reflection.emit.LocalBuilder"/>
</f></DeclareLocal></overloads>
		</DeclareLocal>
		<DefineLabel public="1" set="method"><f a=""><c path="cs.system.reflection.emit.Label"/></f></DefineLabel>
		<Emit public="1" set="method">
			<f a="opcode">
				<c path="cs.system.reflection.emit.OpCode"/>
				<x path="Void"/>
			</f>
			<overloads>
				<Emit public="1" set="method"><f a="opcode:cls">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:str">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="String"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="Single"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:signature">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
	<x path="Void"/>
</f></Emit>
				<Emit final="1" public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<t path="cs.types.Int8"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:meth">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:local">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.emit.LocalBuilder"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:labels">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.emit.Label"/></c>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:label">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.emit.Label"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="Int"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<t path="cs.types.Int16"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:field">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.FieldInfo"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="Float"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:con">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.ConstructorInfo"/>
	<x path="Void"/>
</f></Emit>
				<Emit public="1" set="method"><f a="opcode:arg">
	<c path="cs.system.reflection.emit.OpCode"/>
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></Emit>
			</overloads>
		</Emit>
		<EmitCall public="1" set="method"><f a="opcode:methodInfo:optionalParameterTypes">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<x path="Void"/>
</f></EmitCall>
		<EmitCalli public="1" set="method">
			<f a="opcode:unmanagedCallConv:returnType:parameterTypes">
				<c path="cs.system.reflection.emit.OpCode"/>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<x path="Void"/>
			</f>
			<overloads><EmitCalli public="1" set="method"><f a="opcode:callingConvention:returnType:parameterTypes:optionalParameterTypes">
	<c path="cs.system.reflection.emit.OpCode"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<x path="Void"/>
</f></EmitCalli></overloads>
		</EmitCalli>
		<EmitWriteLine public="1" set="method">
			<f a="fld">
				<c path="cs.system.reflection.FieldInfo"/>
				<x path="Void"/>
			</f>
			<overloads>
				<EmitWriteLine public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></EmitWriteLine>
				<EmitWriteLine public="1" set="method"><f a="localBuilder">
	<c path="cs.system.reflection.emit.LocalBuilder"/>
	<x path="Void"/>
</f></EmitWriteLine>
			</overloads>
		</EmitWriteLine>
		<EndExceptionBlock public="1" set="method"><f a=""><x path="Void"/></f></EndExceptionBlock>
		<EndScope public="1" set="method"><f a=""><x path="Void"/></f></EndScope>
		<MarkLabel public="1" set="method"><f a="loc">
	<c path="cs.system.reflection.emit.Label"/>
	<x path="Void"/>
</f></MarkLabel>
		<MarkSequencePoint public="1" set="method"><f a="document:startLine:startColumn:endLine:endColumn">
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></MarkSequencePoint>
		<ThrowException public="1" set="method"><f a="excType">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></ThrowException>
		<UsingNamespace public="1" set="method"><f a="usingNamespace">
	<c path="String"/>
	<x path="Void"/>
</f></UsingNamespace>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.Label" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.Label" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.Label"/>
	<c path="cs.system.reflection.emit.Label"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.Label"/>
	<c path="cs.system.reflection.emit.Label"/>
	<x path="Bool"/>
</f></op_Inequality>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.Label"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._LocalBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._LocalBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._LocalBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.LocalBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.LocalBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.LocalVariableInfo"/>
		<implements path="cs.system.runtime.interopservices._LocalBuilder"/>
		<LocalIndex public="1" get="accessor" set="null" override="1"><x path="Int"/></LocalIndex>
		<IsPinned public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsPinned>
		<LocalType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></LocalType>
		<SetLocalSymInfo final="1" public="1" set="method">
			<f a="name:startOffset:endOffset">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><SetLocalSymInfo final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></SetLocalSymInfo></overloads>
		</SetLocalSymInfo>
		<get_LocalType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_LocalType>
		<get_IsPinned public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsPinned>
		<get_LocalIndex public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_LocalIndex>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.LocalBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._MethodBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.MethodBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.MethodBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.MethodInfo"/>
		<implements path="cs.system.runtime.interopservices._MethodBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<IsGenericMethod public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethod>
		<IsGenericMethodDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethodDefinition>
		<Signature public="1" get="accessor" set="null"><c path="String"/></Signature>
		<CallingConvention public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<ReturnType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReturnType>
		<MethodHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<InitLocals public="1" get="accessor" set="accessor"><x path="Bool"/></InitLocals>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<get_ContainsGenericParameters public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_InitLocals final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_InitLocals>
		<set_InitLocals final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_InitLocals>
		<get_MethodHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeMethodHandle"/></f></get_MethodHandle>
		<get_ReturnType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReturnType>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Attributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MethodAttributes"/></f></get_Attributes>
		<get_ReturnTypeCustomAttributes public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f></get_ReturnTypeCustomAttributes>
		<get_CallingConvention public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.CallingConventions"/></f></get_CallingConvention>
		<get_Signature final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Signature>
		<GetToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.MethodToken"/></f></GetToken>
		<GetBaseDefinition public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></GetBaseDefinition>
		<GetMethodImplementationFlags public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f></GetMethodImplementationFlags>
		<GetParameters public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetParameters>
		<GetModule final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.Module"/></f></GetModule>
		<CreateMethodBody final="1" public="1" set="method"><f a="il:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CreateMethodBody>
		<Invoke public="1" set="method" override="1">
			<f a="obj:invokeAttr:binder:parameters:culture">
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Invoke>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetILGenerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ILGenerator"/></f>
			<overloads><GetILGenerator final="1" public="1" set="method"><f a="size">
	<x path="Int"/>
	<c path="cs.system.reflection.emit.ILGenerator"/>
</f></GetILGenerator></overloads>
		</GetILGenerator>
		<DefineParameter final="1" public="1" set="method"><f a="position:attributes:strParamName">
	<x path="Int"/>
	<e path="cs.system.reflection.ParameterAttributes"/>
	<c path="String"/>
	<c path="cs.system.reflection.emit.ParameterBuilder"/>
</f></DefineParameter>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetImplementationFlags final="1" public="1" set="method"><f a="attributes">
	<e path="cs.system.reflection.MethodImplAttributes"/>
	<x path="Void"/>
</f></SetImplementationFlags>
		<AddDeclarativeSecurity final="1" public="1" set="method"><f a="action:pset">
	<e path="cs.system.security.permissions.SecurityAction"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Void"/>
</f></AddDeclarativeSecurity>
		<SetMarshal final="1" public="1" set="method"><f a="unmanagedMarshal">
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
	<x path="Void"/>
</f></SetMarshal>
		<SetSymCustomAttribute final="1" public="1" set="method"><f a="name:data">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetSymCustomAttribute>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<MakeGenericMethod public="1" set="method" override="1"><f a="typeArguments">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></MakeGenericMethod>
		<get_IsGenericMethodDefinition public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericMethodDefinition>
		<get_IsGenericMethod public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericMethod>
		<GetGenericMethodDefinition public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.MethodInfo"/></f></GetGenericMethodDefinition>
		<GetGenericArguments public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<DefineGenericParameters final="1" public="1" set="method"><f a="names">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.emit.GenericTypeParameterBuilder"/></c>
</f></DefineGenericParameters>
		<SetReturnType final="1" public="1" set="method"><f a="returnType">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></SetReturnType>
		<SetParameters final="1" public="1" set="method"><f a="parameterTypes">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<x path="Void"/>
</f></SetParameters>
		<SetSignature final="1" public="1" set="method"><f a="returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<x path="Void"/>
</f></SetSignature>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.MethodBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.MethodToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.MethodToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.MethodToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.MethodToken"/>
	<c path="cs.system.reflection.emit.MethodToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.MethodToken"/>
	<c path="cs.system.reflection.emit.MethodToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.MethodToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ModuleBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ModuleBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ModuleBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ModuleBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ModuleBuilder" extern="1">
		<extends path="cs.system.reflection.Module"/>
		<implements path="cs.system.runtime.interopservices._ModuleBuilder"/>
		<FullyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></FullyQualifiedName>
		<get_FullyQualifiedName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_FullyQualifiedName>
		<IsTransient final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsTransient>
		<CreateGlobalFunctions final="1" public="1" set="method"><f a=""><x path="Void"/></f></CreateGlobalFunctions>
		<DefineInitializedData final="1" public="1" set="method"><f a="name:data:attributes">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineInitializedData>
		<DefineUninitializedData final="1" public="1" set="method"><f a="name:size:attributes">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineUninitializedData>
		<DefineGlobalMethod final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<overloads>
				<DefineGlobalMethod final="1" public="1" set="method"><f a="name:attributes:callingConvention:returnType:requiredReturnTypeCustomModifiers:optionalReturnTypeCustomModifiers:parameterTypes:requiredParameterTypeCustomModifiers:optionalParameterTypeCustomModifiers">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineGlobalMethod>
				<DefineGlobalMethod final="1" public="1" set="method"><f a="name:attributes:callingConvention:returnType:parameterTypes">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineGlobalMethod>
			</overloads>
		</DefineGlobalMethod>
		<DefinePInvokeMethod final="1" public="1" set="method">
			<f a="name:dllName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<e path="cs.system.runtime.interopservices.CharSet"/>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<overloads><DefinePInvokeMethod final="1" public="1" set="method"><f a="name:dllName:entryName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<e path="cs.system.runtime.interopservices.CallingConvention"/>
	<e path="cs.system.runtime.interopservices.CharSet"/>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefinePInvokeMethod></overloads>
		</DefinePInvokeMethod>
		<DefineType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.TypeBuilder"/>
			</f>
			<overloads>
				<DefineType final="1" public="1" set="method"><f a="name:attr:parent:packingSize:typesize">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<e path="cs.system.reflection.emit.PackingSize"/>
	<x path="Int"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
				<DefineType final="1" public="1" set="method"><f a="name:attr:parent:packsize">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<e path="cs.system.reflection.emit.PackingSize"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
				<DefineType final="1" public="1" set="method"><f a="name:attr:parent:typesize">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<x path="Int"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
				<DefineType final="1" public="1" set="method"><f a="name:attr:parent:interfaces">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
				<DefineType final="1" public="1" set="method"><f a="name:attr:parent">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
				<DefineType final="1" public="1" set="method"><f a="name:attr">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineType>
			</overloads>
		</DefineType>
		<GetArrayMethod final="1" public="1" set="method"><f a="arrayClass:methodName:callingConvention:returnType:parameterTypes">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetArrayMethod>
		<DefineEnum final="1" public="1" set="method"><f a="name:visibility:underlyingType">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.EnumBuilder"/>
</f></DefineEnum>
		<GetType public="1" set="method" override="1">
			<f a="className">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<overloads>
				<GetType public="1" set="method"><f a="className:throwOnError:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
				<GetType public="1" set="method"><f a="className:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetType>
			</overloads>
		</GetType>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<GetSymWriter final="1" public="1" set="method"><f a=""><c path="cs.system.diagnostics.symbolstore.ISymbolWriter"/></f></GetSymWriter>
		<DefineDocument final="1" public="1" set="method"><f a="url:language:languageVendor:documentType">
	<c path="String"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
</f></DefineDocument>
		<GetTypes public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetTypes>
		<DefineResource final="1" public="1" set="method">
			<f a="name:description:attribute">
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.ResourceAttributes"/>
				<c path="cs.system.resources.IResourceWriter"/>
			</f>
			<overloads><DefineResource final="1" public="1" set="method"><f a="name:description">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.resources.IResourceWriter"/>
</f></DefineResource></overloads>
		</DefineResource>
		<DefineUnmanagedResource final="1" public="1" set="method">
			<f a="resource">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads><DefineUnmanagedResource final="1" public="1" set="method"><f a="resourceFileName">
	<c path="String"/>
	<x path="Void"/>
</f></DefineUnmanagedResource></overloads>
		</DefineUnmanagedResource>
		<DefineManifestResource final="1" public="1" set="method"><f a="name:stream:attribute">
	<c path="String"/>
	<c path="cs.system.io.Stream"/>
	<e path="cs.system.reflection.ResourceAttributes"/>
	<x path="Void"/>
</f></DefineManifestResource>
		<SetSymCustomAttribute final="1" public="1" set="method"><f a="name:data">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetSymCustomAttribute>
		<SetUserEntryPoint final="1" public="1" set="method"><f a="entryPoint">
	<c path="cs.system.reflection.MethodInfo"/>
	<x path="Void"/>
</f></SetUserEntryPoint>
		<GetMethodToken final="1" public="1" set="method"><f a="method">
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.system.reflection.emit.MethodToken"/>
</f></GetMethodToken>
		<GetArrayMethodToken final="1" public="1" set="method"><f a="arrayClass:methodName:callingConvention:returnType:parameterTypes">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.MethodToken"/>
</f></GetArrayMethodToken>
		<GetConstructorToken final="1" public="1" set="method"><f a="con">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.system.reflection.emit.MethodToken"/>
</f></GetConstructorToken>
		<GetFieldToken final="1" public="1" set="method"><f a="field">
	<c path="cs.system.reflection.FieldInfo"/>
	<c path="cs.system.reflection.emit.FieldToken"/>
</f></GetFieldToken>
		<GetSignatureToken final="1" public="1" set="method">
			<f a="sigBytes:sigLength">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<c path="cs.system.reflection.emit.SignatureToken"/>
			</f>
			<overloads><GetSignatureToken final="1" public="1" set="method"><f a="sigHelper">
	<c path="cs.system.reflection.emit.SignatureHelper"/>
	<c path="cs.system.reflection.emit.SignatureToken"/>
</f></GetSignatureToken></overloads>
		</GetSignatureToken>
		<GetStringConstant final="1" public="1" set="method"><f a="str">
	<c path="String"/>
	<c path="cs.system.reflection.emit.StringToken"/>
</f></GetStringConstant>
		<GetTypeToken final="1" public="1" set="method">
			<f a="type">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.TypeToken"/>
			</f>
			<overloads><GetTypeToken final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.reflection.emit.TypeToken"/>
</f></GetTypeToken></overloads>
		</GetTypeToken>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ModuleBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.OpCode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OpCode" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.OpCode"/>
	<c path="cs.system.reflection.emit.OpCode"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Value public="1" get="accessor" set="null"><t path="cs.types.Int16"/></Value>
		<StackBehaviourPush public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.StackBehaviour"/></StackBehaviourPush>
		<StackBehaviourPop public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.StackBehaviour"/></StackBehaviourPop>
		<FlowControl public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.FlowControl"/></FlowControl>
		<OperandType public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.OperandType"/></OperandType>
		<OpCodeType public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.OpCodeType"/></OpCodeType>
		<Size public="1" get="accessor" set="null"><x path="Int"/></Size>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Size final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Size>
		<get_OpCodeType final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.OpCodeType"/></f></get_OpCodeType>
		<get_OperandType final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.OperandType"/></f></get_OperandType>
		<get_FlowControl final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.FlowControl"/></f></get_FlowControl>
		<get_StackBehaviourPop final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.StackBehaviour"/></f></get_StackBehaviourPop>
		<get_StackBehaviourPush final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.StackBehaviour"/></f></get_StackBehaviourPush>
		<get_Value final="1" public="1" set="method"><f a=""><t path="cs.types.Int16"/></f></get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.OpCode"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.OpCodeType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OpCodeType">
		<Annotation><meta><m n=":csNative"><e>0</e></m></meta></Annotation>
		<Macro><meta><m n=":csNative"><e>1</e></m></meta></Macro>
		<Nternal><meta><m n=":csNative"><e>2</e></m></meta></Nternal>
		<Objmodel><meta><m n=":csNative"><e>3</e></m></meta></Objmodel>
		<Prefix><meta><m n=":csNative"><e>4</e></m></meta></Prefix>
		<Primitive><meta><m n=":csNative"><e>5</e></m></meta></Primitive>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.OpCodeType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.OperandType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OperandType">
		<InlineBrTarget><meta><m n=":csNative"><e>0</e></m></meta></InlineBrTarget>
		<InlineField><meta><m n=":csNative"><e>1</e></m></meta></InlineField>
		<InlineI><meta><m n=":csNative"><e>2</e></m></meta></InlineI>
		<InlineI8><meta><m n=":csNative"><e>3</e></m></meta></InlineI8>
		<InlineMethod><meta><m n=":csNative"><e>4</e></m></meta></InlineMethod>
		<InlineNone><meta><m n=":csNative"><e>5</e></m></meta></InlineNone>
		<InlinePhi><meta><m n=":csNative"><e>6</e></m></meta></InlinePhi>
		<InlineR><meta><m n=":csNative"><e>7</e></m></meta></InlineR>
		<InlineSig><meta><m n=":csNative"><e>9</e></m></meta></InlineSig>
		<InlineString><meta><m n=":csNative"><e>10</e></m></meta></InlineString>
		<InlineSwitch><meta><m n=":csNative"><e>11</e></m></meta></InlineSwitch>
		<InlineTok><meta><m n=":csNative"><e>12</e></m></meta></InlineTok>
		<InlineType><meta><m n=":csNative"><e>13</e></m></meta></InlineType>
		<InlineVar><meta><m n=":csNative"><e>14</e></m></meta></InlineVar>
		<ShortInlineBrTarget><meta><m n=":csNative"><e>15</e></m></meta></ShortInlineBrTarget>
		<ShortInlineI><meta><m n=":csNative"><e>16</e></m></meta></ShortInlineI>
		<ShortInlineR><meta><m n=":csNative"><e>17</e></m></meta></ShortInlineR>
		<ShortInlineVar><meta><m n=":csNative"><e>18</e></m></meta></ShortInlineVar>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.OperandType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.PEFileKinds" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PEFileKinds">
		<Dll><meta><m n=":csNative"><e>1</e></m></meta></Dll>
		<ConsoleApplication><meta><m n=":csNative"><e>2</e></m></meta></ConsoleApplication>
		<WindowApplication><meta><m n=":csNative"><e>3</e></m></meta></WindowApplication>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.PEFileKinds"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.PackingSize" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PackingSize">
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Size1><meta><m n=":csNative"><e>1</e></m></meta></Size1>
		<Size2><meta><m n=":csNative"><e>2</e></m></meta></Size2>
		<Size4><meta><m n=":csNative"><e>4</e></m></meta></Size4>
		<Size8><meta><m n=":csNative"><e>8</e></m></meta></Size8>
		<Size16><meta><m n=":csNative"><e>16</e></m></meta></Size16>
		<Size32><meta><m n=":csNative"><e>32</e></m></meta></Size32>
		<Size64><meta><m n=":csNative"><e>64</e></m></meta></Size64>
		<Size128><meta><m n=":csNative"><e>128</e></m></meta></Size128>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.PackingSize"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ParameterBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ParameterBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ParameterBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ParameterBuilder" extern="1">
		<implements path="cs.system.runtime.interopservices._ParameterBuilder"/>
		<Position public="1" get="accessor" set="null"><x path="Int"/></Position>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsOptional public="1" get="accessor" set="null"><x path="Bool"/></IsOptional>
		<IsOut public="1" get="accessor" set="null"><x path="Bool"/></IsOut>
		<IsIn public="1" get="accessor" set="null"><x path="Bool"/></IsIn>
		<Attributes public="1" get="accessor" set="null"><x path="Int"/></Attributes>
		<get_Attributes public="1" set="method"><f a=""><x path="Int"/></f></get_Attributes>
		<get_IsIn final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsIn>
		<get_IsOut final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsOut>
		<get_IsOptional final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsOptional>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Position public="1" set="method"><f a=""><x path="Int"/></f></get_Position>
		<GetToken public="1" set="method"><f a=""><c path="cs.system.reflection.emit.ParameterToken"/></f></GetToken>
		<SetConstant public="1" set="method"><f a="defaultValue">
	<d/>
	<x path="Void"/>
</f></SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetMarshal public="1" set="method"><f a="unmanagedMarshal">
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
	<x path="Void"/>
</f></SetMarshal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ParameterToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ParameterToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.ParameterToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.ParameterToken"/>
	<c path="cs.system.reflection.emit.ParameterToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.ParameterToken"/>
	<c path="cs.system.reflection.emit.ParameterToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ParameterToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._PropertyBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._PropertyBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._PropertyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.PropertyBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PropertyBuilder" extern="1" final="1">
		<extends path="cs.system.reflection.PropertyInfo"/>
		<implements path="cs.system.runtime.interopservices._PropertyBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<PropertyType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></PropertyType>
		<PropertyToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.PropertyToken"/></PropertyToken>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<get_Attributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.PropertyAttributes"/></f></get_Attributes>
		<get_CanRead public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanRead>
		<get_CanWrite public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_CanWrite>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_PropertyToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.PropertyToken"/></f></get_PropertyToken>
		<get_PropertyType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_PropertyType>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<AddOtherMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></AddOtherMethod>
		<GetAccessors public="1" set="method" override="1"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetAccessors>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetGetMethod public="1" set="method" override="1"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetGetMethod>
		<GetIndexParameters public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f></GetIndexParameters>
		<GetSetMethod public="1" set="method" override="1"><f a="nonPublic">
	<x path="Bool"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetSetMethod>
		<GetValue public="1" set="method" override="1">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<overloads><GetValue public="1" set="method"><f a="obj:invokeAttr:binder:index:culture">
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<d/>
</f></GetValue></overloads>
		</GetValue>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<SetConstant final="1" public="1" set="method"><f a="defaultValue">
	<d/>
	<x path="Void"/>
</f></SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetGetMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></SetGetMethod>
		<SetSetMethod final="1" public="1" set="method"><f a="mdBuilder">
	<c path="cs.system.reflection.emit.MethodBuilder"/>
	<x path="Void"/>
</f></SetSetMethod>
		<SetValue public="1" set="method" override="1">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<overloads><SetValue public="1" set="method"><f a="obj:value:invokeAttr:binder:index:culture">
	<d/>
	<d/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<x path="Void"/>
</f></SetValue></overloads>
		</SetValue>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.PropertyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.PropertyToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PropertyToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.PropertyToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.PropertyToken"/>
	<c path="cs.system.reflection.emit.PropertyToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.PropertyToken"/>
	<c path="cs.system.reflection.emit.PropertyToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.PropertyToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.SignatureHelper_SignatureHelperType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureHelper" module="cs.system.reflection.emit.SignatureHelper">
		<HELPER_FIELD><meta><m n=":csNative"><e>0</e></m></meta></HELPER_FIELD>
		<HELPER_LOCAL><meta><m n=":csNative"><e>1</e></m></meta></HELPER_LOCAL>
		<HELPER_METHOD><meta><m n=":csNative"><e>2</e></m></meta></HELPER_METHOD>
		<HELPER_PROPERTY><meta><m n=":csNative"><e>3</e></m></meta></HELPER_PROPERTY>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureHelper.SignatureHelperType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._SignatureHelper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._SignatureHelper" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._SignatureHelper"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.SignatureHelper" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureHelper" extern="1" final="1">
		<implements path="cs.system.runtime.interopservices._SignatureHelper"/>
		<GetFieldSigHelper public="1" set="method" static="1"><f a="mod">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetFieldSigHelper>
		<GetLocalVarSigHelper public="1" set="method" static="1">
			<f a="mod">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<overloads><GetLocalVarSigHelper public="1" set="method"><f a=""><c path="cs.system.reflection.emit.SignatureHelper"/></f></GetLocalVarSigHelper></overloads>
		</GetLocalVarSigHelper>
		<GetMethodSigHelper public="1" set="method" static="1">
			<f a="callingConvention:returnType">
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<overloads>
				<GetMethodSigHelper public="1" set="method"><f a="mod:returnType:parameterTypes">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetMethodSigHelper>
				<GetMethodSigHelper public="1" set="method"><f a="mod:unmanagedCallConv:returnType">
	<c path="cs.system.reflection.Module"/>
	<e path="cs.system.runtime.interopservices.CallingConvention"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetMethodSigHelper>
				<GetMethodSigHelper public="1" set="method"><f a="mod:callingConvention:returnType">
	<c path="cs.system.reflection.Module"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetMethodSigHelper>
				<GetMethodSigHelper public="1" set="method"><f a="unmanagedCallingConvention:returnType">
	<e path="cs.system.runtime.interopservices.CallingConvention"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetMethodSigHelper>
			</overloads>
		</GetMethodSigHelper>
		<GetPropertySigHelper public="1" set="method" static="1">
			<f a="mod:returnType:parameterTypes">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<overloads><GetPropertySigHelper public="1" set="method"><f a="mod:returnType:requiredReturnTypeCustomModifiers:optionalReturnTypeCustomModifiers:parameterTypes:requiredParameterTypeCustomModifiers:optionalParameterTypeCustomModifiers">
	<c path="cs.system.reflection.Module"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.SignatureHelper"/>
</f></GetPropertySigHelper></overloads>
		</GetPropertySigHelper>
		<AddArguments final="1" public="1" set="method"><f a="arguments:requiredCustomModifiers:optionalCustomModifiers">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<x path="Void"/>
</f></AddArguments>
		<AddArgument final="1" public="1" set="method">
			<f a="argument:pinned">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<AddArgument final="1" public="1" set="method"><f a="clsArgument">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></AddArgument>
				<AddArgument final="1" public="1" set="method"><f a="argument:requiredCustomModifiers:optionalCustomModifiers">
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<x path="Void"/>
</f></AddArgument>
			</overloads>
		</AddArgument>
		<AddSentinel final="1" public="1" set="method"><f a=""><x path="Void"/></f></AddSentinel>
		<GetSignature final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetSignature>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureHelper"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.SignatureToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.SignatureToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.SignatureToken"/>
	<c path="cs.system.reflection.emit.SignatureToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.SignatureToken"/>
	<c path="cs.system.reflection.emit.SignatureToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.StackBehaviour" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.StackBehaviour">
		<Pop0><meta><m n=":csNative"><e>0</e></m></meta></Pop0>
		<Pop1><meta><m n=":csNative"><e>1</e></m></meta></Pop1>
		<Pop1_pop1><meta><m n=":csNative"><e>2</e></m></meta></Pop1_pop1>
		<Popi><meta><m n=":csNative"><e>3</e></m></meta></Popi>
		<Popi_pop1><meta><m n=":csNative"><e>4</e></m></meta></Popi_pop1>
		<Popi_popi><meta><m n=":csNative"><e>5</e></m></meta></Popi_popi>
		<Popi_popi8><meta><m n=":csNative"><e>6</e></m></meta></Popi_popi8>
		<Popi_popi_popi><meta><m n=":csNative"><e>7</e></m></meta></Popi_popi_popi>
		<Popi_popr4><meta><m n=":csNative"><e>8</e></m></meta></Popi_popr4>
		<Popi_popr8><meta><m n=":csNative"><e>9</e></m></meta></Popi_popr8>
		<Popref><meta><m n=":csNative"><e>10</e></m></meta></Popref>
		<Popref_pop1><meta><m n=":csNative"><e>11</e></m></meta></Popref_pop1>
		<Popref_popi><meta><m n=":csNative"><e>12</e></m></meta></Popref_popi>
		<Popref_popi_popi><meta><m n=":csNative"><e>13</e></m></meta></Popref_popi_popi>
		<Popref_popi_popi8><meta><m n=":csNative"><e>14</e></m></meta></Popref_popi_popi8>
		<Popref_popi_popr4><meta><m n=":csNative"><e>15</e></m></meta></Popref_popi_popr4>
		<Popref_popi_popr8><meta><m n=":csNative"><e>16</e></m></meta></Popref_popi_popr8>
		<Popref_popi_popref><meta><m n=":csNative"><e>17</e></m></meta></Popref_popi_popref>
		<Push0><meta><m n=":csNative"><e>18</e></m></meta></Push0>
		<Push1><meta><m n=":csNative"><e>19</e></m></meta></Push1>
		<Push1_push1><meta><m n=":csNative"><e>20</e></m></meta></Push1_push1>
		<Pushi><meta><m n=":csNative"><e>21</e></m></meta></Pushi>
		<Pushi8><meta><m n=":csNative"><e>22</e></m></meta></Pushi8>
		<Pushr4><meta><m n=":csNative"><e>23</e></m></meta></Pushr4>
		<Pushr8><meta><m n=":csNative"><e>24</e></m></meta></Pushr8>
		<Pushref><meta><m n=":csNative"><e>25</e></m></meta></Pushref>
		<Varpop><meta><m n=":csNative"><e>26</e></m></meta></Varpop>
		<Varpush><meta><m n=":csNative"><e>27</e></m></meta></Varpush>
		<Popref_popi_pop1><meta><m n=":csNative"><e>28</e></m></meta></Popref_popi_pop1>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.StackBehaviour"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.emit.StringToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.StringToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.StringToken"/>
	<c path="cs.system.reflection.emit.StringToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.StringToken"/>
	<c path="cs.system.reflection.emit.StringToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.StringToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._TypeBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._TypeBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._TypeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.TypeBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.TypeBuilder" extern="1" final="1">
		<extends path="cs.system.Type"/>
		<implements path="cs.system.runtime.interopservices._TypeBuilder"/>
		<UnspecifiedTypeSize public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</UnspecifiedTypeSize>
		<GetConstructor public="1" set="method" static="1"><f a="type:constructor">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.system.reflection.ConstructorInfo"/>
</f></GetConstructor>
		<_GetConstructor public="1" set="method" static="1">
			<f a="type:constructor">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":native"><e>"GetConstructor"</e></m></meta>
		</_GetConstructor>
		<GetMethod public="1" set="method" static="1"><f a="type:method">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.system.reflection.MethodInfo"/>
</f></GetMethod>
		<_GetMethod public="1" set="method" static="1">
			<f a="type:method">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":native"><e>"GetMethod"</e></m></meta>
		</_GetMethod>
		<GetField public="1" set="method" static="1"><f a="type:field">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.FieldInfo"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField>
		<_GetField public="1" set="method" static="1">
			<f a="type:field">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.FieldInfo"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":native"><e>"GetField"</e></m></meta>
		</_GetField>
		<DeclaringMethod public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterPosition public="1" get="accessor" set="null" override="1"><x path="Int"/></GenericParameterPosition>
		<IsGenericType public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericType>
		<IsGenericTypeDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericTypeDefinition>
		<GenericParameterAttributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<IsGenericParameter public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<TypeToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.TypeToken"/></TypeToken>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Size public="1" get="accessor" set="null"><x path="Int"/></Size>
		<PackingSize public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.PackingSize"/></PackingSize>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":protected"/></meta>
		</GetAttributeFlagsImpl>
		<get_Assembly public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Assembly"/></f></get_Assembly>
		<get_AssemblyQualifiedName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_AssemblyQualifiedName>
		<get_BaseType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_BaseType>
		<get_DeclaringType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_DeclaringType>
		<IsSubclassOf public="1" set="method" override="1"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsSubclassOf>
		<get_UnderlyingSystemType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_UnderlyingSystemType>
		<get_FullName public="1" set="method" override="1"><f a=""><c path="String"/></f></get_FullName>
		<get_GUID public="1" set="method" override="1"><f a=""><c path="cs.system.Guid"/></f></get_GUID>
		<get_Module public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.Module"/></f></get_Module>
		<get_Name public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Name>
		<get_Namespace public="1" set="method" override="1"><f a=""><c path="String"/></f></get_Namespace>
		<get_PackingSize final="1" public="1" set="method"><f a=""><e path="cs.system.reflection.emit.PackingSize"/></f></get_PackingSize>
		<get_Size final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Size>
		<get_ReflectedType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_ReflectedType>
		<AddDeclarativeSecurity final="1" public="1" set="method"><f a="action:pset">
	<e path="cs.system.security.permissions.SecurityAction"/>
	<c path="cs.system.security.PermissionSet"/>
	<x path="Void"/>
</f></AddDeclarativeSecurity>
		<AddInterfaceImplementation final="1" public="1" set="method"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></AddInterfaceImplementation>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetConstructorImpl>
		<IsDefined public="1" set="method" override="1"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<overloads><GetCustomAttributes public="1" set="method"><f a="attributeType:inherit">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
	<c path="cs.NativeArray"><d/></c>
</f></GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<DefineNestedType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.TypeBuilder"/>
			</f>
			<overloads>
				<DefineNestedType final="1" public="1" set="method"><f a="name:attr:parent:packSize">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<e path="cs.system.reflection.emit.PackingSize"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineNestedType>
				<DefineNestedType final="1" public="1" set="method"><f a="name:attr:parent:typeSize">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<x path="Int"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineNestedType>
				<DefineNestedType final="1" public="1" set="method"><f a="name:attr:parent:interfaces">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineNestedType>
				<DefineNestedType final="1" public="1" set="method"><f a="name:attr:parent">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineNestedType>
				<DefineNestedType final="1" public="1" set="method"><f a="name:attr">
	<c path="String"/>
	<e path="cs.system.reflection.TypeAttributes"/>
	<c path="cs.system.reflection.emit.TypeBuilder"/>
</f></DefineNestedType>
			</overloads>
		</DefineNestedType>
		<DefineConstructor final="1" public="1" set="method">
			<f a="attributes:callingConvention:parameterTypes">
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.ConstructorBuilder"/>
			</f>
			<overloads><DefineConstructor final="1" public="1" set="method"><f a="attributes:callingConvention:parameterTypes:requiredCustomModifiers:optionalCustomModifiers">
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.ConstructorBuilder"/>
</f></DefineConstructor></overloads>
		</DefineConstructor>
		<DefineDefaultConstructor final="1" public="1" set="method"><f a="attributes">
	<e path="cs.system.reflection.MethodAttributes"/>
	<c path="cs.system.reflection.emit.ConstructorBuilder"/>
</f></DefineDefaultConstructor>
		<DefineMethod final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<overloads>
				<DefineMethod final="1" public="1" set="method"><f a="name:attributes:callingConvention">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineMethod>
				<DefineMethod final="1" public="1" set="method"><f a="name:attributes">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineMethod>
				<DefineMethod final="1" public="1" set="method"><f a="name:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineMethod>
				<DefineMethod final="1" public="1" set="method"><f a="name:attributes:callingConvention:returnType:parameterTypes">
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefineMethod>
			</overloads>
		</DefineMethod>
		<DefinePInvokeMethod final="1" public="1" set="method">
			<f a="name:dllName:entryName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<e path="cs.system.runtime.interopservices.CharSet"/>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<overloads>
				<DefinePInvokeMethod final="1" public="1" set="method"><f a="name:dllName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<e path="cs.system.runtime.interopservices.CallingConvention"/>
	<e path="cs.system.runtime.interopservices.CharSet"/>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefinePInvokeMethod>
				<DefinePInvokeMethod final="1" public="1" set="method"><f a="name:dllName:entryName:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers:nativeCallConv:nativeCharSet">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.reflection.MethodAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<e path="cs.system.runtime.interopservices.CallingConvention"/>
	<e path="cs.system.runtime.interopservices.CharSet"/>
	<c path="cs.system.reflection.emit.MethodBuilder"/>
</f></DefinePInvokeMethod>
			</overloads>
		</DefinePInvokeMethod>
		<DefineMethodOverride final="1" public="1" set="method"><f a="methodInfoBody:methodInfoDeclaration">
	<c path="cs.system.reflection.MethodInfo"/>
	<c path="cs.system.reflection.MethodInfo"/>
	<x path="Void"/>
</f></DefineMethodOverride>
		<DefineField final="1" public="1" set="method">
			<f a="fieldName:type:attributes">
				<c path="String"/>
				<c path="cs.system.Type"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<overloads><DefineField final="1" public="1" set="method"><f a="fieldName:type:requiredCustomModifiers:optionalCustomModifiers:attributes">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineField></overloads>
		</DefineField>
		<DefineProperty final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.PropertyAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.PropertyBuilder"/>
			</f>
			<overloads>
				<DefineProperty final="1" public="1" set="method"><f a="name:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
	<c path="String"/>
	<e path="cs.system.reflection.PropertyAttributes"/>
	<e path="cs.system.reflection.CallingConventions"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.PropertyBuilder"/>
</f></DefineProperty>
				<DefineProperty final="1" public="1" set="method"><f a="name:attributes:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
	<c path="String"/>
	<e path="cs.system.reflection.PropertyAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
	<c path="cs.system.reflection.emit.PropertyBuilder"/>
</f></DefineProperty>
			</overloads>
		</DefineProperty>
		<DefineTypeInitializer final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.ConstructorBuilder"/></f></DefineTypeInitializer>
		<CreateType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></CreateType>
		<GetConstructors public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
</f></GetConstructors>
		<GetElementType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></GetElementType>
		<GetEvent public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.EventInfo"/>
</f></GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<overloads><GetEvents public="1" set="method"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
</f></GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.FieldInfo"/>
</f></GetField>
		<GetFields public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
</f></GetFields>
		<GetInterface public="1" set="method" override="1"><f a="name:ignoreCase">
	<c path="String"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
</f></GetInterface>
		<GetInterfaces public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetInterfaces>
		<GetMember public="1" set="method" override="1"><f a="name:type:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.MemberTypes"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMember>
		<GetMembers public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
</f></GetMembers>
		<GetMethods public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
</f></GetMethods>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetMethodImpl>
		<GetNestedType public="1" set="method" override="1"><f a="name:bindingAttr">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.Type"/>
</f></GetNestedType>
		<GetNestedTypes public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
</f></GetNestedTypes>
		<GetProperties public="1" set="method" override="1"><f a="bindingAttr">
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
</f></GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":protected"/></meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</HasElementTypeImpl>
		<InvokeMember public="1" set="method" override="1"><f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
	<c path="String"/>
	<e path="cs.system.reflection.BindingFlags"/>
	<c path="cs.system.reflection.Binder"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<d/>
</f></InvokeMember>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</IsValueTypeImpl>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<overloads><MakeArrayType public="1" set="method"><f a="rank">
	<x path="Int"/>
	<c path="cs.system.Type"/>
</f></MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakeByRefType>
		<MakeGenericType public="1" set="method" override="1"><f a="typeArguments">
	<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	<c path="cs.system.Type"/>
</f></MakeGenericType>
		<MakePointerType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></MakePointerType>
		<get_TypeHandle public="1" set="method" override="1"><f a=""><c path="cs.system.RuntimeTypeHandle"/></f></get_TypeHandle>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<overloads><SetCustomAttribute final="1" public="1" set="method"><f a="con:binaryAttribute">
	<c path="cs.system.reflection.ConstructorInfo"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<DefineEvent final="1" public="1" set="method"><f a="name:attributes:eventtype">
	<c path="String"/>
	<e path="cs.system.reflection.EventAttributes"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.emit.EventBuilder"/>
</f></DefineEvent>
		<DefineInitializedData final="1" public="1" set="method"><f a="name:data:attributes">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineInitializedData>
		<DefineUninitializedData final="1" public="1" set="method"><f a="name:size:attributes">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.reflection.FieldAttributes"/>
	<c path="cs.system.reflection.emit.FieldBuilder"/>
</f></DefineUninitializedData>
		<get_TypeToken final="1" public="1" set="method"><f a=""><c path="cs.system.reflection.emit.TypeToken"/></f></get_TypeToken>
		<SetParent final="1" public="1" set="method"><f a="parent">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></SetParent>
		<GetInterfaceMap public="1" set="method" override="1"><f a="interfaceType">
	<c path="cs.system.Type"/>
	<c path="cs.system.reflection.InterfaceMapping"/>
</f></GetInterfaceMap>
		<ToString public="1" set="method" override="1"><f a=""><c path="String"/></f></ToString>
		<IsAssignableFrom public="1" set="method" override="1"><f a="c">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsAssignableFrom>
		<IsCreated final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsCreated>
		<GetGenericArguments public="1" set="method" override="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f></GetGenericArguments>
		<GetGenericTypeDefinition public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></GetGenericTypeDefinition>
		<get_ContainsGenericParameters public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_ContainsGenericParameters>
		<get_IsGenericParameter public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericParameter>
		<get_GenericParameterAttributes public="1" set="method" override="1"><f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f></get_GenericParameterAttributes>
		<get_IsGenericTypeDefinition public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericTypeDefinition>
		<get_IsGenericType public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsGenericType>
		<get_GenericParameterPosition public="1" set="method" override="1"><f a=""><x path="Int"/></f></get_GenericParameterPosition>
		<get_DeclaringMethod public="1" set="method" override="1"><f a=""><c path="cs.system.reflection.MethodBase"/></f></get_DeclaringMethod>
		<DefineGenericParameters final="1" public="1" set="method"><f a="names">
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.NativeArray"><c path="cs.system.reflection.emit.GenericTypeParameterBuilder"/></c>
</f></DefineGenericParameters>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.TypeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.TypeToken" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.TypeToken" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.TypeToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.TypeToken"/>
	<c path="cs.system.reflection.emit.TypeToken"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.reflection.emit.TypeToken"/>
	<c path="cs.system.reflection.emit.TypeToken"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.TypeToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.UnmanagedMarshal" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.UnmanagedMarshal" extern="1" final="1">
		<DefineByValArray public="1" set="method" static="1"><f a="elemCount">
	<x path="Int"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineByValArray>
		<DefineByValTStr public="1" set="method" static="1"><f a="elemCount">
	<x path="Int"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineByValTStr>
		<DefineLPArray public="1" set="method" static="1"><f a="elemType">
	<e path="cs.system.runtime.interopservices.UnmanagedType"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineLPArray>
		<DefineSafeArray public="1" set="method" static="1"><f a="elemType">
	<e path="cs.system.runtime.interopservices.UnmanagedType"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineSafeArray>
		<DefineUnmanagedMarshal public="1" set="method" static="1"><f a="unmanagedType">
	<e path="cs.system.runtime.interopservices.UnmanagedType"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineUnmanagedMarshal>
		<DefineCustom public="1" set="method" static="1"><f a="typeref:cookie:mtype:id">
	<c path="cs.system.Type"/>
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.Guid"/>
	<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
</f></DefineCustom>
		<IIDGuid public="1" get="accessor" set="null"><c path="cs.system.Guid"/></IIDGuid>
		<GetUnmanagedType public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.UnmanagedType"/></GetUnmanagedType>
		<ElementCount public="1" get="accessor" set="null"><x path="Int"/></ElementCount>
		<BaseType public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.UnmanagedType"/></BaseType>
		<get_BaseType final="1" public="1" set="method"><f a=""><e path="cs.system.runtime.interopservices.UnmanagedType"/></f></get_BaseType>
		<get_ElementCount final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ElementCount>
		<get_GetUnmanagedType final="1" public="1" set="method"><f a=""><e path="cs.system.runtime.interopservices.UnmanagedType"/></f></get_GetUnmanagedType>
		<get_IIDGuid final="1" public="1" set="method"><f a=""><c path="cs.system.Guid"/></f></get_IIDGuid>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.UnmanagedMarshal"</e></m>
		</meta>
	</class>
	<class path="cs.system.resources.IResourceWriter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.resources.IResourceWriter" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<AddResource public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<AddResource public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></AddResource>
				<AddResource public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></AddResource>
			</overloads>
		</AddResource>
		<Close public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<Generate public="1" set="method"><f a=""><x path="Void"/></f></Generate>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Resources.IResourceWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.constrainedexecution.CriticalFinalizerObject" extern="1" abstract="1">
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.ConstrainedExecution.CriticalFinalizerObject"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.hosting.ActivationArguments" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.hosting.ActivationArguments" extern="1" final="1">
		<ApplicationIdentity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<ActivationData public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></ActivationData>
		<ActivationContext public="1" get="accessor" set="null"><c path="cs.system.ActivationContext"/></ActivationContext>
		<get_ActivationContext final="1" public="1" set="method"><f a=""><c path="cs.system.ActivationContext"/></f></get_ActivationContext>
		<get_ActivationData final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></get_ActivationData>
		<get_ApplicationIdentity final="1" public="1" set="method"><f a=""><c path="cs.system.ApplicationIdentity"/></f></get_ApplicationIdentity>
		<new final="1" public="1" set="method">
			<f a="activationData">
				<c path="cs.system.ActivationContext"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="applicationIdentity:activationData">
	<c path="cs.system.ApplicationIdentity"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="activationContext:activationData">
	<c path="cs.system.ActivationContext"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="applicationIdentity">
	<c path="cs.system.ApplicationIdentity"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Hosting.ActivationArguments"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.hosting.ApplicationActivator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.hosting.ApplicationActivator" extern="1">
		<CreateInstanceHelper set="method" static="1">
			<f a="adSetup">
				<c path="cs.system.AppDomainSetup"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CreateInstanceHelper>
		<CreateInstance public="1" set="method">
			<f a="activationContext">
				<c path="cs.system.ActivationContext"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<overloads><CreateInstance public="1" set="method"><f a="activationContext:activationCustomData">
	<c path="cs.system.ActivationContext"/>
	<c path="cs.NativeArray"><c path="String"/></c>
	<c path="cs.system.runtime.remoting.ObjectHandle"/>
</f></CreateInstance></overloads>
		</CreateInstance>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Hosting.ApplicationActivator"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.interopservices.CallingConvention" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.CallingConvention">
		<Winapi><meta><m n=":csNative"><e>1</e></m></meta></Winapi>
		<Cdecl><meta><m n=":csNative"><e>2</e></m></meta></Cdecl>
		<StdCall><meta><m n=":csNative"><e>3</e></m></meta></StdCall>
		<ThisCall><meta><m n=":csNative"><e>4</e></m></meta></ThisCall>
		<FastCall><meta><m n=":csNative"><e>5</e></m></meta></FastCall>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.CallingConvention"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.runtime.interopservices.CharSet" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.CharSet">
		<None><meta><m n=":csNative"><e>1</e></m></meta></None>
		<Ansi><meta><m n=":csNative"><e>2</e></m></meta></Ansi>
		<Unicode><meta><m n=":csNative"><e>3</e></m></meta></Unicode>
		<Auto><meta><m n=":csNative"><e>4</e></m></meta></Auto>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.CharSet"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.runtime.interopservices.LayoutKind" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.LayoutKind">
		<Sequential><meta><m n=":csNative"><e>0</e></m></meta></Sequential>
		<Explicit><meta><m n=":csNative"><e>2</e></m></meta></Explicit>
		<Auto><meta><m n=":csNative"><e>3</e></m></meta></Auto>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.LayoutKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices.SafeHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.SafeHandle" extern="1" abstract="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.IDisposable"/>
		<IsInvalid public="1" get="accessor" set="null"><x path="Bool"/></IsInvalid>
		<IsClosed public="1" get="accessor" set="null"><x path="Bool"/></IsClosed>
		<handle><c path="cs.system.IntPtr"/></handle>
		<Close final="1" public="1" set="method"><f a=""><x path="Void"/></f></Close>
		<DangerousAddRef final="1" public="1" set="method"><f a="success">
	<t path="cs.Ref"><x path="Bool"/></t>
	<x path="Void"/>
</f></DangerousAddRef>
		<DangerousGetHandle final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></DangerousGetHandle>
		<DangerousRelease final="1" public="1" set="method"><f a=""><x path="Void"/></f></DangerousRelease>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</Dispose></overloads>
		</Dispose>
		<SetHandleAsInvalid final="1" public="1" set="method"><f a=""><x path="Void"/></f></SetHandleAsInvalid>
		<ReleaseHandle abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</ReleaseHandle>
		<SetHandle final="1" set="method">
			<f a="handle">
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</SetHandle>
		<get_IsClosed final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsClosed>
		<get_IsInvalid abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInvalid>
		<new final="1" set="method">
			<f a="invalidHandleValue:ownsHandle">
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices.SafeHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices.StructLayoutAttribute" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.StructLayoutAttribute" extern="1" final="1">
		<extends path="cs.system.Attribute"/>
		<Value public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.LayoutKind"/></Value>
		<Size public="1"><x path="Int"/></Size>
		<Pack public="1"><x path="Int"/></Pack>
		<CharSet public="1"><e path="cs.system.runtime.interopservices.CharSet"/></CharSet>
		<get_Value final="1" public="1" set="method"><f a=""><e path="cs.system.runtime.interopservices.LayoutKind"/></f></get_Value>
		<new final="1" public="1" set="method">
			<f a="layoutKind">
				<t path="cs.types.Int16"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="layoutKind">
	<e path="cs.system.runtime.interopservices.LayoutKind"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices.StructLayoutAttribute"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.interopservices.UnmanagedType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.UnmanagedType">
		<Bool><meta><m n=":csNative"><e>2</e></m></meta></Bool>
		<I1><meta><m n=":csNative"><e>3</e></m></meta></I1>
		<U1><meta><m n=":csNative"><e>4</e></m></meta></U1>
		<I2><meta><m n=":csNative"><e>5</e></m></meta></I2>
		<U2><meta><m n=":csNative"><e>6</e></m></meta></U2>
		<I4><meta><m n=":csNative"><e>7</e></m></meta></I4>
		<U4><meta><m n=":csNative"><e>8</e></m></meta></U4>
		<I8><meta><m n=":csNative"><e>9</e></m></meta></I8>
		<U8><meta><m n=":csNative"><e>10</e></m></meta></U8>
		<R4><meta><m n=":csNative"><e>11</e></m></meta></R4>
		<R8><meta><m n=":csNative"><e>12</e></m></meta></R8>
		<Currency><meta><m n=":csNative"><e>15</e></m></meta></Currency>
		<BStr><meta><m n=":csNative"><e>19</e></m></meta></BStr>
		<LPStr><meta><m n=":csNative"><e>20</e></m></meta></LPStr>
		<LPWStr><meta><m n=":csNative"><e>21</e></m></meta></LPWStr>
		<LPTStr><meta><m n=":csNative"><e>22</e></m></meta></LPTStr>
		<ByValTStr><meta><m n=":csNative"><e>23</e></m></meta></ByValTStr>
		<IUnknown><meta><m n=":csNative"><e>25</e></m></meta></IUnknown>
		<IDispatch><meta><m n=":csNative"><e>26</e></m></meta></IDispatch>
		<Struct><meta><m n=":csNative"><e>27</e></m></meta></Struct>
		<Interface><meta><m n=":csNative"><e>28</e></m></meta></Interface>
		<SafeArray><meta><m n=":csNative"><e>29</e></m></meta></SafeArray>
		<ByValArray><meta><m n=":csNative"><e>30</e></m></meta></ByValArray>
		<SysInt><meta><m n=":csNative"><e>31</e></m></meta></SysInt>
		<SysUInt><meta><m n=":csNative"><e>32</e></m></meta></SysUInt>
		<VBByRefStr><meta><m n=":csNative"><e>34</e></m></meta></VBByRefStr>
		<AnsiBStr><meta><m n=":csNative"><e>35</e></m></meta></AnsiBStr>
		<TBStr><meta><m n=":csNative"><e>36</e></m></meta></TBStr>
		<VariantBool><meta><m n=":csNative"><e>37</e></m></meta></VariantBool>
		<FunctionPtr><meta><m n=":csNative"><e>38</e></m></meta></FunctionPtr>
		<AsAny><meta><m n=":csNative"><e>40</e></m></meta></AsAny>
		<LPArray><meta><m n=":csNative"><e>42</e></m></meta></LPArray>
		<LPStruct><meta><m n=":csNative"><e>43</e></m></meta></LPStruct>
		<CustomMarshaler><meta><m n=":csNative"><e>44</e></m></meta></CustomMarshaler>
		<Error><meta><m n=":csNative"><e>45</e></m></meta></Error>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.UnmanagedType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._Thread" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Thread" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method"><f a="riid:rgszNames:cNames:lcid:rgDispId">
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetIDsOfNames>
		<GetTypeInfo public="1" set="method"><f a="iTInfo:lcid:ppTInfo">
	<x path="UInt"/>
	<x path="UInt"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></GetTypeInfo>
		<GetTypeInfoCount public="1" set="method"><f a="pcTInfo">
	<t path="cs.Out"><x path="UInt"/></t>
	<x path="Void"/>
</f></GetTypeInfoCount>
		<Invoke public="1" set="method"><f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
	<x path="UInt"/>
	<t path="cs.Ref"><c path="cs.system.Guid"/></t>
	<x path="UInt"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Thread"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IChannelInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IChannelInfo" extern="1" interface="1">
		<ChannelData public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><d/></c></ChannelData>
		<get_ChannelData public="1" set="method"><f a=""><c path="cs.NativeArray"><d/></c></f></get_ChannelData>
		<set_ChannelData public="1" set="method"><f a="value">
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><d/></c>
</f></set_ChannelData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IChannelInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IEnvoyInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IEnvoyInfo" extern="1" interface="1">
		<EnvoySinks public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></EnvoySinks>
		<get_EnvoySinks public="1" set="method"><f a=""><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></f></get_EnvoySinks>
		<set_EnvoySinks public="1" set="method"><f a="value">
	<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
	<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
</f></set_EnvoySinks>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IEnvoyInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IObjectHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IObjectHandle" extern="1" interface="1">
		<Unwrap public="1" set="method"><f a=""><d/></f></Unwrap>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IObjectHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IRemotingTypeInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IRemotingTypeInfo" extern="1" interface="1">
		<TypeName public="1" get="accessor" set="accessor"><c path="String"/></TypeName>
		<get_TypeName public="1" set="method"><f a=""><c path="String"/></f></get_TypeName>
		<set_TypeName public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_TypeName>
		<CanCastTo public="1" set="method"><f a="fromType:o">
	<c path="cs.system.Type"/>
	<d/>
	<x path="Bool"/>
</f></CanCastTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IRemotingTypeInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.ObjRef" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.ObjRef" extern="1">
		<implements path="cs.system.runtime.serialization.IObjectReference"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<URI public="1" get="accessor" set="accessor"><c path="String"/></URI>
		<TypeInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IRemotingTypeInfo"/></TypeInfo>
		<EnvoyInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IEnvoyInfo"/></EnvoyInfo>
		<ChannelInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IChannelInfo"/></ChannelInfo>
		<get_ChannelInfo public="1" set="method"><f a=""><c path="cs.system.runtime.remoting.IChannelInfo"/></f></get_ChannelInfo>
		<set_ChannelInfo public="1" set="method"><f a="value">
	<c path="cs.system.runtime.remoting.IChannelInfo"/>
	<c path="cs.system.runtime.remoting.IChannelInfo"/>
</f></set_ChannelInfo>
		<get_EnvoyInfo public="1" set="method"><f a=""><c path="cs.system.runtime.remoting.IEnvoyInfo"/></f></get_EnvoyInfo>
		<set_EnvoyInfo public="1" set="method"><f a="value">
	<c path="cs.system.runtime.remoting.IEnvoyInfo"/>
	<c path="cs.system.runtime.remoting.IEnvoyInfo"/>
</f></set_EnvoyInfo>
		<get_TypeInfo public="1" set="method"><f a=""><c path="cs.system.runtime.remoting.IRemotingTypeInfo"/></f></get_TypeInfo>
		<set_TypeInfo public="1" set="method"><f a="value">
	<c path="cs.system.runtime.remoting.IRemotingTypeInfo"/>
	<c path="cs.system.runtime.remoting.IRemotingTypeInfo"/>
</f></set_TypeInfo>
		<get_URI public="1" set="method"><f a=""><c path="String"/></f></get_URI>
		<set_URI public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_URI>
		<GetObjectData public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<GetRealObject public="1" set="method"><f a="context">
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<d/>
</f></GetRealObject>
		<IsFromThisAppDomain final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsFromThisAppDomain>
		<IsFromThisProcess final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsFromThisProcess>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="o:requestedType">
	<c path="cs.system.MarshalByRefObject"/>
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.ObjRef"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.ObjectHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.ObjectHandle" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.runtime.remoting.IObjectHandle"/>
		<InitializeLifetimeService public="1" set="method" override="1"><f a=""><d/></f></InitializeLifetimeService>
		<Unwrap final="1" public="1" set="method"><f a=""><d/></f></Unwrap>
		<new final="1" public="1" set="method"><f a="o">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.ObjectHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Context_NamedSlots" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.Context" module="cs.system.runtime.remoting.contexts.Context" extern="1">
		<namedSlots public="1" static="1"><c path="cs.system.collections.Hashtable"/></namedSlots>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.Context.NamedSlots"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Context" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.Context" extern="1">
		<DefaultContext public="1" get="accessor" set="null" static="1"><c path="cs.system.runtime.remoting.contexts.Context"/></DefaultContext>
		<get_DefaultContext public="1" set="method" static="1"><f a=""><c path="cs.system.runtime.remoting.contexts.Context"/></f></get_DefaultContext>
		<RegisterDynamicProperty public="1" set="method" static="1"><f a="prop:obj:ctx">
	<c path="cs.system.runtime.remoting.contexts.IDynamicProperty"/>
	<c path="cs.system.ContextBoundObject"/>
	<c path="cs.system.runtime.remoting.contexts.Context"/>
	<x path="Bool"/>
</f></RegisterDynamicProperty>
		<UnregisterDynamicProperty public="1" set="method" static="1"><f a="name:obj:ctx">
	<c path="String"/>
	<c path="cs.system.ContextBoundObject"/>
	<c path="cs.system.runtime.remoting.contexts.Context"/>
	<x path="Bool"/>
</f></UnregisterDynamicProperty>
		<AllocateDataSlot public="1" set="method" static="1"><f a=""><c path="cs.system.LocalDataStoreSlot"/></f></AllocateDataSlot>
		<AllocateNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.LocalDataStoreSlot"/>
</f></AllocateNamedDataSlot>
		<FreeNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></FreeNamedDataSlot>
		<GetData public="1" set="method" static="1"><f a="slot">
	<c path="cs.system.LocalDataStoreSlot"/>
	<d/>
</f></GetData>
		<GetNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.LocalDataStoreSlot"/>
</f></GetNamedDataSlot>
		<SetData public="1" set="method" static="1"><f a="slot:data">
	<c path="cs.system.LocalDataStoreSlot"/>
	<d/>
	<x path="Void"/>
</f></SetData>
		<ContextProperties public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="cs.system.runtime.remoting.contexts.IContextProperty"/></c></ContextProperties>
		<ContextID public="1" get="accessor" set="null"><x path="Int"/></ContextID>
		<get_ContextID public="1" set="method"><f a=""><x path="Int"/></f></get_ContextID>
		<get_ContextProperties public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="cs.system.runtime.remoting.contexts.IContextProperty"/></c></f></get_ContextProperties>
		<GetProperty public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.runtime.remoting.contexts.IContextProperty"/>
</f></GetProperty>
		<SetProperty public="1" set="method"><f a="prop">
	<c path="cs.system.runtime.remoting.contexts.IContextProperty"/>
	<x path="Void"/>
</f></SetProperty>
		<Freeze public="1" set="method"><f a=""><x path="Void"/></f></Freeze>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<DoCallBack final="1" public="1" set="method"><f a="deleg">
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="Void"/>
</f></DoCallBack>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.Context"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" module="cs.system.runtime.remoting.contexts.CrossContextDelegate" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a=""><x path="Void"/></f></Invoke>
		<BeginInvoke public="1" set="method"><f a="callback:object">
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.CrossContextDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.runtime.remoting.contexts.CrossContextDelegate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.runtime.remoting.contexts._CrossContextDelegate.CrossContextDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" private="1" module="cs.system.runtime.remoting.contexts.CrossContextDelegate" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.runtime.remoting.contexts._CrossContextDelegate.CrossContextDelegate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" private="1" module="cs.system.runtime.remoting.contexts.CrossContextDelegate" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.runtime.remoting.contexts.IContextProperty" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.IContextProperty" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<Freeze public="1" set="method"><f a="newContext">
	<c path="cs.system.runtime.remoting.contexts.Context"/>
	<x path="Void"/>
</f></Freeze>
		<IsNewContextOK public="1" set="method"><f a="newCtx">
	<c path="cs.system.runtime.remoting.contexts.Context"/>
	<x path="Bool"/>
</f></IsNewContextOK>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.IContextProperty"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.IDynamicProperty" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.IDynamicProperty" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.IDynamicProperty"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessage" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessage" extern="1" interface="1">
		<Properties public="1" get="accessor" set="null"><c path="cs.system.collections.IDictionary"/></Properties>
		<get_Properties public="1" set="method"><f a=""><c path="cs.system.collections.IDictionary"/></f></get_Properties>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessage"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessageCtrl" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessageCtrl" extern="1" interface="1">
		<Cancel public="1" set="method"><f a="msToCancel">
	<x path="Int"/>
	<x path="Void"/>
</f></Cancel>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessageCtrl"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessageSink" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessageSink" extern="1" interface="1">
		<NextSink public="1" get="accessor" set="null"><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></NextSink>
		<SyncProcessMessage public="1" set="method"><f a="msg">
	<c path="cs.system.runtime.remoting.messaging.IMessage"/>
	<c path="cs.system.runtime.remoting.messaging.IMessage"/>
</f></SyncProcessMessage>
		<AsyncProcessMessage public="1" set="method"><f a="msg:replySink">
	<c path="cs.system.runtime.remoting.messaging.IMessage"/>
	<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
	<c path="cs.system.runtime.remoting.messaging.IMessageCtrl"/>
</f></AsyncProcessMessage>
		<get_NextSink public="1" set="method"><f a=""><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></f></get_NextSink>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessageSink"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.IFormatterConverter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IFormatterConverter" extern="1" interface="1">
		<Convert public="1" set="method">
			<f a="value:type">
				<d/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<overloads><Convert public="1" set="method"><f a="value:typeCode">
	<d/>
	<e path="cs.system.TypeCode"/>
	<d/>
</f></Convert></overloads>
		</Convert>
		<ToBoolean public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></ToBoolean>
		<ToByte public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt8"/>
</f></ToByte>
		<ToChar public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Char16"/>
</f></ToChar>
		<ToDateTime public="1" set="method"><f a="value">
	<d/>
	<c path="cs.system.DateTime"/>
</f></ToDateTime>
		<ToDecimal public="1" set="method"><f a="value">
	<d/>
	<c path="cs.system.Decimal"/>
</f></ToDecimal>
		<ToDouble public="1" set="method"><f a="value">
	<d/>
	<x path="Float"/>
</f></ToDouble>
		<ToInt16 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Int16"/>
</f></ToInt16>
		<ToInt32 public="1" set="method"><f a="value">
	<d/>
	<x path="Int"/>
</f></ToInt32>
		<ToInt64 public="1" set="method"><f a="value">
	<d/>
	<x path="haxe.Int64"/>
</f></ToInt64>
		<ToSByte public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.Int8"/>
</f></ToSByte>
		<ToSingle public="1" set="method"><f a="value">
	<d/>
	<x path="Single"/>
</f></ToSingle>
		<ToString public="1" set="method"><f a="value">
	<d/>
	<c path="String"/>
</f></ToString>
		<ToUInt16 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt16"/>
</f></ToUInt16>
		<ToUInt32 public="1" set="method"><f a="value">
	<d/>
	<x path="UInt"/>
</f></ToUInt32>
		<ToUInt64 public="1" set="method"><f a="value">
	<d/>
	<t path="cs.types.UInt64"/>
</f></ToUInt64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IFormatterConverter"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationEntry" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationEntry" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<ObjectType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ObjectType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ObjectType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ObjectType>
		<get_Value final="1" public="1" set="method"><f a=""><d/></f></get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationEntry"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationInfo" extern="1" final="1">
		<MemberCount public="1" get="accessor" set="null"><x path="Int"/></MemberCount>
		<FullTypeName public="1" get="accessor" set="accessor"><c path="String"/></FullTypeName>
		<AssemblyName public="1" get="accessor" set="accessor"><c path="String"/></AssemblyName>
		<get_AssemblyName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_AssemblyName>
		<set_AssemblyName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_AssemblyName>
		<get_FullTypeName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_FullTypeName>
		<set_FullTypeName final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_FullTypeName>
		<get_MemberCount final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MemberCount>
		<AddValue final="1" public="1" set="method">
			<f a="name:value:type">
				<c path="String"/>
				<d/>
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<overloads>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="Single"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="cs.system.Decimal"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.Int8"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.UInt8"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.UInt16"/>
	<x path="Void"/>
</f></AddValue>
				<AddValue final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<t path="cs.types.Int16"/>
	<x path="Void"/>
</f></AddValue>
			</overloads>
		</AddValue>
		<GetValue final="1" public="1" set="method"><f a="name:type">
	<c path="String"/>
	<c path="cs.system.Type"/>
	<d/>
</f></GetValue>
		<SetType final="1" public="1" set="method"><f a="type">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></SetType>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.runtime.serialization.SerializationInfoEnumerator"/></f></GetEnumerator>
		<GetBoolean final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></GetBoolean>
		<GetByte final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.UInt8"/>
</f></GetByte>
		<GetChar final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.Char16"/>
</f></GetChar>
		<GetDateTime final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.DateTime"/>
</f></GetDateTime>
		<GetDecimal final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.Decimal"/>
</f></GetDecimal>
		<GetDouble final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></GetDouble>
		<GetInt16 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.Int16"/>
</f></GetInt16>
		<GetInt32 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Int"/>
</f></GetInt32>
		<GetInt64 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></GetInt64>
		<GetSByte final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.Int8"/>
</f></GetSByte>
		<GetSingle final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Single"/>
</f></GetSingle>
		<GetString final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></GetString>
		<GetUInt16 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.UInt16"/>
</f></GetUInt16>
		<GetUInt32 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="UInt"/>
</f></GetUInt32>
		<GetUInt64 final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="cs.types.UInt64"/>
</f></GetUInt64>
		<new final="1" public="1" set="method"><f a="type:converter">
	<c path="cs.system.Type"/>
	<c path="cs.system.runtime.serialization.IFormatterConverter"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationInfoEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationInfoEnumerator" extern="1" final="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<ObjectType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ObjectType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Current public="1" get="accessor" set="null">
			<c path="cs.system.runtime.serialization.SerializationEntry"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<get_Current final="1" public="1" set="method">
			<f a=""><c path="cs.system.runtime.serialization.SerializationEntry"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</get_Current>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_ObjectType final="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_ObjectType>
		<get_Value final="1" public="1" set="method"><f a=""><d/></f></get_Value>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationInfoEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.StreamingContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.StreamingContext" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<State public="1" get="accessor" set="null"><e path="cs.system.runtime.serialization.StreamingContextStates"/></State>
		<Context public="1" get="accessor" set="null"><d/></Context>
		<get_Context final="1" public="1" set="method"><f a=""><d/></f></get_Context>
		<get_State final="1" public="1" set="method"><f a=""><e path="cs.system.runtime.serialization.StreamingContextStates"/></f></get_State>
		<new final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.runtime.serialization.StreamingContextStates"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="state:additional">
	<e path="cs.system.runtime.serialization.StreamingContextStates"/>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.StreamingContext"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.serialization.StreamingContextStates" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.StreamingContextStates">
		<CrossProcess><meta><m n=":csNative"><e>1</e></m></meta></CrossProcess>
		<CrossMachine><meta><m n=":csNative"><e>2</e></m></meta></CrossMachine>
		<File><meta><m n=":csNative"><e>4</e></m></meta></File>
		<Persistence><meta><m n=":csNative"><e>8</e></m></meta></Persistence>
		<Remoting><meta><m n=":csNative"><e>16</e></m></meta></Remoting>
		<Other><meta><m n=":csNative"><e>32</e></m></meta></Other>
		<Clone><meta><m n=":csNative"><e>64</e></m></meta></Clone>
		<CrossAppDomain><meta><m n=":csNative"><e>128</e></m></meta></CrossAppDomain>
		<All><meta><m n=":csNative"><e>255</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.Serialization.StreamingContextStates"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.HostSecurityManager" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.HostSecurityManager" extern="1">
		<Flags public="1" get="accessor" set="null"><e path="cs.system.security.HostSecurityManagerOptions"/></Flags>
		<DomainPolicy public="1" get="accessor" set="null"><c path="cs.system.security.policy.PolicyLevel"/></DomainPolicy>
		<get_DomainPolicy public="1" set="method"><f a=""><c path="cs.system.security.policy.PolicyLevel"/></f></get_DomainPolicy>
		<get_Flags public="1" set="method"><f a=""><e path="cs.system.security.HostSecurityManagerOptions"/></f></get_Flags>
		<DetermineApplicationTrust public="1" set="method"><f a="applicationEvidence:activatorEvidence:context">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.TrustManagerContext"/>
	<c path="cs.system.security.policy.ApplicationTrust"/>
</f></DetermineApplicationTrust>
		<ProvideAppDomainEvidence public="1" set="method"><f a="inputEvidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.Evidence"/>
</f></ProvideAppDomainEvidence>
		<ProvideAssemblyEvidence public="1" set="method"><f a="loadedAssembly:inputEvidence">
	<c path="cs.system.reflection.Assembly"/>
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.Evidence"/>
</f></ProvideAssemblyEvidence>
		<ResolvePolicy public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.PermissionSet"/>
</f></ResolvePolicy>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.HostSecurityManager"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.HostSecurityManagerOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.HostSecurityManagerOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<HostAppDomainEvidence><meta><m n=":csNative"><e>1</e></m></meta></HostAppDomainEvidence>
		<HostPolicyLevel><meta><m n=":csNative"><e>2</e></m></meta></HostPolicyLevel>
		<HostAssemblyEvidence><meta><m n=":csNative"><e>4</e></m></meta></HostAssemblyEvidence>
		<HostDetermineApplicationTrust><meta><m n=":csNative"><e>8</e></m></meta></HostDetermineApplicationTrust>
		<HostResolvePolicy><meta><m n=":csNative"><e>16</e></m></meta></HostResolvePolicy>
		<AllFlags><meta><m n=":csNative"><e>31</e></m></meta></AllFlags>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.HostSecurityManagerOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.ISecurityEncodable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.ISecurityEncodable" extern="1" interface="1">
		<FromXml public="1" set="method"><f a="e">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></FromXml>
		<ToXml public="1" set="method"><f a=""><c path="cs.system.security.SecurityElement"/></f></ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.ISecurityEncodable"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IPermission" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.IPermission" extern="1" interface="1">
		<extends path="cs.system.security.ISecurityEncodable"/>
		<Copy public="1" set="method"><f a=""><c path="cs.system.security.IPermission"/></f></Copy>
		<Demand public="1" set="method"><f a=""><x path="Void"/></f></Demand>
		<Intersect public="1" set="method"><f a="target">
	<c path="cs.system.security.IPermission"/>
	<c path="cs.system.security.IPermission"/>
</f></Intersect>
		<IsSubsetOf public="1" set="method"><f a="target">
	<c path="cs.system.security.IPermission"/>
	<x path="Bool"/>
</f></IsSubsetOf>
		<Union public="1" set="method"><f a="target">
	<c path="cs.system.security.IPermission"/>
	<c path="cs.system.security.IPermission"/>
</f></Union>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IPermission"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.ISecurityPolicyEncodable" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.ISecurityPolicyEncodable" extern="1" interface="1">
		<FromXml public="1" set="method"><f a="e:level">
	<c path="cs.system.security.SecurityElement"/>
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></FromXml>
		<ToXml public="1" set="method"><f a="level">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<c path="cs.system.security.SecurityElement"/>
</f></ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.ISecurityPolicyEncodable"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IStackWalk" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.IStackWalk" extern="1" interface="1">
		<Assert public="1" set="method"><f a=""><x path="Void"/></f></Assert>
		<Demand public="1" set="method"><f a=""><x path="Void"/></f></Demand>
		<Deny public="1" set="method"><f a=""><x path="Void"/></f></Deny>
		<PermitOnly public="1" set="method"><f a=""><x path="Void"/></f></PermitOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IStackWalk"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.PermissionSet" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.PermissionSet" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.IStackWalk"/>
		<ConvertPermissionSet public="1" set="method" static="1"><f a="inFormat:inData:outFormat">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></ConvertPermissionSet>
		<RevertAssert public="1" set="method" static="1"><f a=""><x path="Void"/></f></RevertAssert>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<AddPermission final="1" public="1" set="method"><f a="perm">
	<c path="cs.system.security.IPermission"/>
	<c path="cs.system.security.IPermission"/>
</f></AddPermission>
		<Assert final="1" public="1" set="method"><f a=""><x path="Void"/></f></Assert>
		<Copy public="1" set="method"><f a=""><c path="cs.system.security.PermissionSet"/></f></Copy>
		<CopyTo public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<Demand final="1" public="1" set="method"><f a=""><x path="Void"/></f></Demand>
		<Deny final="1" public="1" set="method"><f a=""><x path="Void"/></f></Deny>
		<FromXml public="1" set="method"><f a="et">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></FromXml>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<IsSubsetOf final="1" public="1" set="method"><f a="target">
	<c path="cs.system.security.PermissionSet"/>
	<x path="Bool"/>
</f></IsSubsetOf>
		<PermitOnly final="1" public="1" set="method"><f a=""><x path="Void"/></f></PermitOnly>
		<ContainsNonCodeAccessPermissions final="1" public="1" set="method"><f a=""><x path="Bool"/></f></ContainsNonCodeAccessPermissions>
		<GetPermission final="1" public="1" set="method"><f a="permClass">
	<c path="cs.system.Type"/>
	<c path="cs.system.security.IPermission"/>
</f></GetPermission>
		<Intersect final="1" public="1" set="method"><f a="other">
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
</f></Intersect>
		<IsEmpty final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsEmpty>
		<IsUnrestricted final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsUnrestricted>
		<RemovePermission final="1" public="1" set="method"><f a="permClass">
	<c path="cs.system.Type"/>
	<c path="cs.system.security.IPermission"/>
</f></RemovePermission>
		<SetPermission final="1" public="1" set="method"><f a="perm">
	<c path="cs.system.security.IPermission"/>
	<c path="cs.system.security.IPermission"/>
</f></SetPermission>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<ToXml public="1" set="method"><f a=""><c path="cs.system.security.SecurityElement"/></f></ToXml>
		<Union final="1" public="1" set="method"><f a="other">
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
</f></Union>
		<get_Count public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsSynchronized public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_IsReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_SyncRoot public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<new final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.security.permissions.PermissionState"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="permSet">
	<c path="cs.system.security.PermissionSet"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.PermissionSet"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.NamedPermissionSet" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.NamedPermissionSet" extern="1" final="1">
		<extends path="cs.system.security.PermissionSet"/>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<Description public="1" get="accessor" set="accessor"><c path="String"/></Description>
		<get_Description final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Description>
		<set_Description final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Description>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<Copy public="1" set="method" override="1">
			<f a=""><c path="cs.system.security.PermissionSet"/></f>
			<overloads><Copy final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.security.NamedPermissionSet"/>
</f></Copy></overloads>
		</Copy>
		<FromXml public="1" set="method" override="1"><f a="et">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></FromXml>
		<ToXml public="1" set="method" override="1"><f a=""><c path="cs.system.security.SecurityElement"/></f></ToXml>
		<new final="1" public="1" set="method">
			<f a="name:permSet">
				<c path="String"/>
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="permSet">
	<c path="cs.system.security.NamedPermissionSet"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="name:state">
	<c path="String"/>
	<e path="cs.system.security.permissions.PermissionState"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.NamedPermissionSet"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.PolicyLevelType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.PolicyLevelType">
		<User><meta><m n=":csNative"><e>0</e></m></meta></User>
		<Machine><meta><m n=":csNative"><e>1</e></m></meta></Machine>
		<Enterprise><meta><m n=":csNative"><e>2</e></m></meta></Enterprise>
		<AppDomain><meta><m n=":csNative"><e>3</e></m></meta></AppDomain>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.PolicyLevelType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.SecureString" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.SecureString" extern="1" final="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.IDisposable"/>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Length final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Length>
		<AppendChar final="1" public="1" set="method"><f a="c">
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></AppendChar>
		<Clear final="1" public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<Copy final="1" public="1" set="method"><f a=""><c path="cs.system.security.SecureString"/></f></Copy>
		<Dispose final="1" public="1" set="method"><f a=""><x path="Void"/></f></Dispose>
		<InsertAt final="1" public="1" set="method"><f a="index:c">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></InsertAt>
		<IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsReadOnly>
		<MakeReadOnly final="1" public="1" set="method"><f a=""><x path="Void"/></f></MakeReadOnly>
		<RemoveAt final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></RemoveAt>
		<SetAt final="1" public="1" set="method"><f a="index:c">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></SetAt>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecureString"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityElement_SecurityAttribute" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityElement" module="cs.system.security.SecurityElement" extern="1">
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_Value final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Value>
		<new final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityElement.SecurityAttribute"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityElement" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityElement" extern="1" final="1">
		<Escape public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></Escape>
		<FromString public="1" set="method" static="1"><f a="xml">
	<c path="String"/>
	<c path="cs.system.security.SecurityElement"/>
</f></FromString>
		<IsValidAttributeName public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></IsValidAttributeName>
		<IsValidAttributeValue public="1" set="method" static="1"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></IsValidAttributeValue>
		<IsValidTag public="1" set="method" static="1"><f a="tag">
	<c path="String"/>
	<x path="Bool"/>
</f></IsValidTag>
		<IsValidText public="1" set="method" static="1"><f a="text">
	<c path="String"/>
	<x path="Bool"/>
</f></IsValidText>
		<Text public="1" get="accessor" set="accessor"><c path="String"/></Text>
		<Tag public="1" get="accessor" set="accessor"><c path="String"/></Tag>
		<Children public="1" get="accessor" set="accessor"><c path="cs.system.collections.ArrayList"/></Children>
		<Attributes public="1" get="accessor" set="accessor"><c path="cs.system.collections.Hashtable"/></Attributes>
		<get_Attributes final="1" public="1" set="method"><f a=""><c path="cs.system.collections.Hashtable"/></f></get_Attributes>
		<set_Attributes final="1" public="1" set="method"><f a="value">
	<c path="cs.system.collections.Hashtable"/>
	<c path="cs.system.collections.Hashtable"/>
</f></set_Attributes>
		<get_Children final="1" public="1" set="method"><f a=""><c path="cs.system.collections.ArrayList"/></f></get_Children>
		<set_Children final="1" public="1" set="method"><f a="value">
	<c path="cs.system.collections.ArrayList"/>
	<c path="cs.system.collections.ArrayList"/>
</f></set_Children>
		<get_Tag final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Tag>
		<set_Tag final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Tag>
		<get_Text final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Text>
		<set_Text final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Text>
		<AddAttribute final="1" public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></AddAttribute>
		<AddChild final="1" public="1" set="method"><f a="child">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></AddChild>
		<Attribute final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></Attribute>
		<Copy final="1" public="1" set="method"><f a=""><c path="cs.system.security.SecurityElement"/></f></Copy>
		<Equal final="1" public="1" set="method"><f a="other">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Bool"/>
</f></Equal>
		<SearchForChildByTag final="1" public="1" set="method"><f a="tag">
	<c path="String"/>
	<c path="cs.system.security.SecurityElement"/>
</f></SearchForChildByTag>
		<SearchForTextOfTag final="1" public="1" set="method"><f a="tag">
	<c path="String"/>
	<c path="String"/>
</f></SearchForTextOfTag>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method">
			<f a="tag">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="tag:text">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityElement"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityState" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityState" extern="1" abstract="1">
		<EnsureState abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></EnsureState>
		<IsStateAvailable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></IsStateAvailable>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityState"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.AccessControlModification" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlModification">
		<Add><meta><m n=":csNative"><e>0</e></m></meta></Add>
		<Set><meta><m n=":csNative"><e>1</e></m></meta></Set>
		<Reset><meta><m n=":csNative"><e>2</e></m></meta></Reset>
		<Remove><meta><m n=":csNative"><e>3</e></m></meta></Remove>
		<RemoveAll><meta><m n=":csNative"><e>4</e></m></meta></RemoveAll>
		<RemoveSpecific><meta><m n=":csNative"><e>5</e></m></meta></RemoveSpecific>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlModification"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.AccessControlSections" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlSections">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Audit><meta><m n=":csNative"><e>1</e></m></meta></Audit>
		<Access><meta><m n=":csNative"><e>2</e></m></meta></Access>
		<Owner><meta><m n=":csNative"><e>4</e></m></meta></Owner>
		<Group><meta><m n=":csNative"><e>8</e></m></meta></Group>
		<All><meta><m n=":csNative"><e>15</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlSections"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.AccessControlType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlType">
		<Allow><meta><m n=":csNative"><e>0</e></m></meta></Allow>
		<Deny><meta><m n=":csNative"><e>1</e></m></meta></Deny>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.AuthorizationRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuthorizationRule" extern="1" abstract="1">
		<AccessMask get="null" set="null"><x path="Int"/></AccessMask>
		<PropagationFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.PropagationFlags"/></PropagationFlags>
		<IsInherited public="1" get="accessor" set="null"><x path="Bool"/></IsInherited>
		<InheritanceFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.InheritanceFlags"/></InheritanceFlags>
		<IdentityReference public="1" get="accessor" set="null"><c path="cs.system.security.principal.IdentityReference"/></IdentityReference>
		<get_IdentityReference final="1" public="1" set="method"><f a=""><c path="cs.system.security.principal.IdentityReference"/></f></get_IdentityReference>
		<get_InheritanceFlags final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.InheritanceFlags"/></f></get_InheritanceFlags>
		<get_IsInherited final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsInherited>
		<get_PropagationFlags final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.PropagationFlags"/></f></get_PropagationFlags>
		<get_AccessMask final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":protected"/></meta>
		</get_AccessMask>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuthorizationRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.AccessRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessRule" extern="1" abstract="1">
		<extends path="cs.system.security.accesscontrol.AuthorizationRule"/>
		<AccessControlType public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.AccessControlType"/></AccessControlType>
		<get_AccessControlType final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.AccessControlType"/></f></get_AccessControlType>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.AuditFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuditFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Success><meta><m n=":csNative"><e>1</e></m></meta></Success>
		<Failure><meta><m n=":csNative"><e>2</e></m></meta></Failure>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AuditFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.AuditRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuditRule" extern="1" abstract="1">
		<extends path="cs.system.security.accesscontrol.AuthorizationRule"/>
		<AuditFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.AuditFlags"/></AuditFlags>
		<get_AuditFlags final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.AuditFlags"/></f></get_AuditFlags>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags:auditFlags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuditRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.AuthorizationRuleCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuthorizationRuleCollection" extern="1" final="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="cs.system.security.accesscontrol.AuthorizationRule"/>
</f></get_Item>
		<CopyTo final="1" public="1" set="method"><f a="rules:index">
	<c path="cs.NativeArray"><c path="cs.system.security.accesscontrol.AuthorizationRule"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuthorizationRuleCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.ObjectSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.ObjectSecurity" extern="1" abstract="1">
		<IsSddlConversionSupported public="1" set="method" static="1"><f a=""><x path="Bool"/></f></IsSddlConversionSupported>
		<OwnerModified get="null" set="null"><x path="Bool"/></OwnerModified>
		<IsDS get="null" set="null"><x path="Bool"/></IsDS>
		<IsContainer get="null" set="null"><x path="Bool"/></IsContainer>
		<GroupModified get="null" set="null"><x path="Bool"/></GroupModified>
		<AuditRulesModified get="null" set="null"><x path="Bool"/></AuditRulesModified>
		<AccessRulesModified get="null" set="null"><x path="Bool"/></AccessRulesModified>
		<AreAuditRulesProtected public="1" get="accessor" set="null"><x path="Bool"/></AreAuditRulesProtected>
		<AreAuditRulesCanonical public="1" get="accessor" set="null"><x path="Bool"/></AreAuditRulesCanonical>
		<AreAccessRulesProtected public="1" get="accessor" set="null"><x path="Bool"/></AreAccessRulesProtected>
		<AreAccessRulesCanonical public="1" get="accessor" set="null"><x path="Bool"/></AreAccessRulesCanonical>
		<AuditRuleType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_AccessRightType>
		<get_AccessRuleType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_AccessRuleType>
		<get_AuditRuleType abstract="1" public="1" set="method"><f a=""><c path="cs.system.Type"/></f></get_AuditRuleType>
		<get_AreAccessRulesCanonical final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_AreAccessRulesCanonical>
		<get_AreAccessRulesProtected final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_AreAccessRulesProtected>
		<get_AreAuditRulesCanonical final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_AreAuditRulesCanonical>
		<get_AreAuditRulesProtected final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_AreAuditRulesProtected>
		<get_AccessRulesModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_AccessRulesModified>
		<set_AccessRulesModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_AccessRulesModified>
		<get_AuditRulesModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_AuditRulesModified>
		<set_AuditRulesModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_AuditRulesModified>
		<get_GroupModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_GroupModified>
		<set_GroupModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_GroupModified>
		<get_IsContainer final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_IsContainer>
		<get_IsDS final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_IsDS>
		<get_OwnerModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</get_OwnerModified>
		<set_OwnerModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_OwnerModified>
		<AccessRuleFactory abstract="1" public="1" set="method"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<c path="cs.system.security.accesscontrol.AccessRule"/>
</f></AccessRuleFactory>
		<AuditRuleFactory abstract="1" public="1" set="method"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<c path="cs.system.security.accesscontrol.AuditRule"/>
</f></AuditRuleFactory>
		<GetGroup final="1" public="1" set="method"><f a="targetType">
	<c path="cs.system.Type"/>
	<c path="cs.system.security.principal.IdentityReference"/>
</f></GetGroup>
		<GetOwner final="1" public="1" set="method"><f a="targetType">
	<c path="cs.system.Type"/>
	<c path="cs.system.security.principal.IdentityReference"/>
</f></GetOwner>
		<GetSecurityDescriptorBinaryForm final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetSecurityDescriptorBinaryForm>
		<GetSecurityDescriptorSddlForm final="1" public="1" set="method"><f a="includeSections">
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<c path="String"/>
</f></GetSecurityDescriptorSddlForm>
		<ModifyAccessRule public="1" set="method"><f a="modification:rule:modified">
	<e path="cs.system.security.accesscontrol.AccessControlModification"/>
	<c path="cs.system.security.accesscontrol.AccessRule"/>
	<t path="cs.Out"><x path="Bool"/></t>
	<x path="Bool"/>
</f></ModifyAccessRule>
		<ModifyAuditRule public="1" set="method"><f a="modification:rule:modified">
	<e path="cs.system.security.accesscontrol.AccessControlModification"/>
	<c path="cs.system.security.accesscontrol.AuditRule"/>
	<t path="cs.Out"><x path="Bool"/></t>
	<x path="Bool"/>
</f></ModifyAuditRule>
		<PurgeAccessRules public="1" set="method"><f a="identity">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Void"/>
</f></PurgeAccessRules>
		<PurgeAuditRules public="1" set="method"><f a="identity">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Void"/>
</f></PurgeAuditRules>
		<SetAccessRuleProtection final="1" public="1" set="method"><f a="isProtected:preserveInheritance">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></SetAccessRuleProtection>
		<SetAuditRuleProtection final="1" public="1" set="method"><f a="isProtected:preserveInheritance">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></SetAuditRuleProtection>
		<SetGroup final="1" public="1" set="method"><f a="identity">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Void"/>
</f></SetGroup>
		<SetOwner final="1" public="1" set="method"><f a="identity">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Void"/>
</f></SetOwner>
		<SetSecurityDescriptorBinaryForm final="1" public="1" set="method">
			<f a="binaryForm">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads><SetSecurityDescriptorBinaryForm final="1" public="1" set="method"><f a="binaryForm:includeSections">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<x path="Void"/>
</f></SetSecurityDescriptorBinaryForm></overloads>
		</SetSecurityDescriptorBinaryForm>
		<SetSecurityDescriptorSddlForm final="1" public="1" set="method">
			<f a="sddlForm">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><SetSecurityDescriptorSddlForm final="1" public="1" set="method"><f a="sddlForm:includeSections">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<x path="Void"/>
</f></SetSecurityDescriptorSddlForm></overloads>
		</SetSecurityDescriptorSddlForm>
		<ModifyAccess abstract="1" set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ModifyAccess>
		<ModifyAudit abstract="1" set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ModifyAudit>
		<Persist set="method">
			<f a="handle:includeSections">
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads>
				<Persist set="method">
					<f a="enableOwnershipPrivilege:name:includeSections">
						<x path="Bool"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</Persist>
				<Persist set="method">
					<f a="name:includeSections">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</Persist>
			</overloads>
		</Persist>
		<ReadLock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</ReadLock>
		<ReadUnlock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</ReadUnlock>
		<WriteLock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</WriteLock>
		<WriteUnlock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</WriteUnlock>
		<new final="1" set="method">
			<f a="isContainer:isDS">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.ObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.CommonObjectSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.CommonObjectSecurity" extern="1" abstract="1">
		<extends path="cs.system.security.accesscontrol.ObjectSecurity"/>
		<GetAccessRules final="1" public="1" set="method"><f a="includeExplicit:includeInherited:targetType">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.security.accesscontrol.AuthorizationRuleCollection"/>
</f></GetAccessRules>
		<GetAuditRules final="1" public="1" set="method"><f a="includeExplicit:includeInherited:targetType">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="cs.system.Type"/>
	<c path="cs.system.security.accesscontrol.AuthorizationRuleCollection"/>
</f></GetAuditRules>
		<AddAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</AddAccessRule>
		<RemoveAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAccessRule>
		<RemoveAccessRuleAll final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ResetAccessRule>
		<SetAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</SetAccessRule>
		<ModifyAccess set="method" override="1">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ModifyAccess>
		<AddAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</AddAuditRule>
		<RemoveAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAuditRule>
		<RemoveAuditRuleAll final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</RemoveAuditRuleSpecific>
		<SetAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</SetAuditRule>
		<ModifyAudit set="method" override="1">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ModifyAudit>
		<new final="1" set="method">
			<f a="isContainer">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.CommonObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.NativeObjectSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" extern="1" abstract="1">
		<extends path="cs.system.security.accesscontrol.CommonObjectSecurity"/>
		<Persist final="1" set="method" override="1">
			<f a="handle:includeSections">
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads>
				<Persist final="1" set="method">
					<f a="name:includeSections:exceptionContext">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</Persist>
				<Persist final="1" set="method">
					<f a="handle:includeSections:exceptionContext">
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</Persist>
				<Persist final="1" set="method">
					<f a="name:includeSections">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</Persist>
			</overloads>
		</Persist>
		<new final="1" set="method">
			<f a="isContainer:resourceType">
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.ResourceType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="isContainer:resourceType:name:includeSections:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:handle:includeSections:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:name:includeSections">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:handle:includeSections">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.NativeObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemSecurity" extern="1" abstract="1">
		<extends path="cs.system.security.accesscontrol.NativeObjectSecurity"/>
		<AuditRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AccessRightType>
		<get_AccessRuleType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AccessRuleType>
		<get_AuditRuleType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AuditRuleType>
		<AccessRuleFactory final="1" public="1" set="method" override="1"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<c path="cs.system.security.accesscontrol.AccessRule"/>
</f></AccessRuleFactory>
		<AddAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Void"/>
</f></AddAccessRule>
		<RemoveAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Bool"/>
</f></RemoveAccessRule>
		<RemoveAccessRuleAll final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Void"/>
</f></RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Void"/>
</f></RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Void"/>
</f></ResetAccessRule>
		<SetAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
	<x path="Void"/>
</f></SetAccessRule>
		<AuditRuleFactory final="1" public="1" set="method" override="1"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<c path="cs.system.security.accesscontrol.AuditRule"/>
</f></AuditRuleFactory>
		<AddAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
	<x path="Void"/>
</f></AddAuditRule>
		<RemoveAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
	<x path="Bool"/>
</f></RemoveAuditRule>
		<RemoveAuditRuleAll final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
	<x path="Void"/>
</f></RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
	<x path="Void"/>
</f></RemoveAuditRuleSpecific>
		<SetAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
	<x path="Void"/>
</f></SetAuditRule>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.DirectorySecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.DirectorySecurity" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.FileSystemSecurity"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="name:includeSections">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.DirectorySecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.EventWaitHandleAccessRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleAccessRule" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.AccessRule"/>
		<EventWaitHandleRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></EventWaitHandleRights>
		<get_EventWaitHandleRights final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></f></get_EventWaitHandleRights>
		<new final="1" public="1" set="method">
			<f a="identity:eventRights:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="identity:eventRights:type">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleAccessRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.EventWaitHandleAuditRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleAuditRule" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.AuditRule"/>
		<EventWaitHandleRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></EventWaitHandleRights>
		<get_EventWaitHandleRights final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></f></get_EventWaitHandleRights>
		<new final="1" public="1" set="method"><f a="identity:eventRights:flags">
	<c path="cs.system.security.principal.IdentityReference"/>
	<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleAuditRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.EventWaitHandleRights" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleRights">
		<Modify><meta><m n=":csNative"><e>2</e></m></meta></Modify>
		<Delete><meta><m n=":csNative"><e>65536</e></m></meta></Delete>
		<ReadPermissions><meta><m n=":csNative"><e>131072</e></m></meta></ReadPermissions>
		<ChangePermissions><meta><m n=":csNative"><e>262144</e></m></meta></ChangePermissions>
		<TakeOwnership><meta><m n=":csNative"><e>524288</e></m></meta></TakeOwnership>
		<Synchronize><meta><m n=":csNative"><e>1048576</e></m></meta></Synchronize>
		<FullControl><meta><m n=":csNative"><e>2031619</e></m></meta></FullControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleRights"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.EventWaitHandleSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleSecurity" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.NativeObjectSecurity"/>
		<AuditRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AccessRightType>
		<get_AccessRuleType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AccessRuleType>
		<get_AuditRuleType public="1" set="method" override="1"><f a=""><c path="cs.system.Type"/></f></get_AuditRuleType>
		<AccessRuleFactory public="1" set="method" override="1"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<c path="cs.system.security.accesscontrol.AccessRule"/>
</f></AccessRuleFactory>
		<AddAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Void"/>
</f></AddAccessRule>
		<RemoveAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Bool"/>
</f></RemoveAccessRule>
		<RemoveAccessRuleAll final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Void"/>
</f></RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Void"/>
</f></RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Void"/>
</f></ResetAccessRule>
		<SetAccessRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
	<x path="Void"/>
</f></SetAccessRule>
		<AuditRuleFactory public="1" set="method" override="1"><f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Int"/>
	<x path="Bool"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<c path="cs.system.security.accesscontrol.AuditRule"/>
</f></AuditRuleFactory>
		<AddAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
	<x path="Void"/>
</f></AddAuditRule>
		<RemoveAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
	<x path="Bool"/>
</f></RemoveAuditRule>
		<RemoveAuditRuleAll final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
	<x path="Void"/>
</f></RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
	<x path="Void"/>
</f></RemoveAuditRuleSpecific>
		<SetAuditRule final="1" public="1" set="method" override="1"><f a="rule">
	<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
	<x path="Void"/>
</f></SetAuditRule>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSecurity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSecurity" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.FileSystemSecurity"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="fileName:includeSections">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.AccessControlSections"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemAccessRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemAccessRule" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.AccessRule"/>
		<FileSystemRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.FileSystemRights"/></FileSystemRights>
		<get_FileSystemRights final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.FileSystemRights"/></f></get_FileSystemRights>
		<new final="1" public="1" set="method">
			<f a="identity:fileSystemRights:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.FileSystemRights"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:type">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:type">
	<c path="cs.system.security.principal.IdentityReference"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:type">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.AccessControlType"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemAccessRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemAuditRule" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemAuditRule" extern="1" final="1">
		<extends path="cs.system.security.accesscontrol.AuditRule"/>
		<FileSystemRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.FileSystemRights"/></FileSystemRights>
		<get_FileSystemRights final="1" public="1" set="method"><f a=""><e path="cs.system.security.accesscontrol.FileSystemRights"/></f></get_FileSystemRights>
		<new final="1" public="1" set="method">
			<f a="identity:fileSystemRights:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.FileSystemRights"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:flags">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:flags">
	<c path="cs.system.security.principal.IdentityReference"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
	<e path="cs.system.security.accesscontrol.PropagationFlags"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="identity:fileSystemRights:flags">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.FileSystemRights"/>
	<e path="cs.system.security.accesscontrol.AuditFlags"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemAuditRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.FileSystemRights" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemRights">
		<ListDirectory><meta><m n=":csNative"><e>1</e></m></meta></ListDirectory>
		<ReadData><meta><m n=":csNative"><e>1</e></m></meta></ReadData>
		<CreateFiles><meta><m n=":csNative"><e>2</e></m></meta></CreateFiles>
		<WriteData><meta><m n=":csNative"><e>2</e></m></meta></WriteData>
		<AppendData><meta><m n=":csNative"><e>4</e></m></meta></AppendData>
		<CreateDirectories><meta><m n=":csNative"><e>4</e></m></meta></CreateDirectories>
		<ReadExtendedAttributes><meta><m n=":csNative"><e>8</e></m></meta></ReadExtendedAttributes>
		<WriteExtendedAttributes><meta><m n=":csNative"><e>16</e></m></meta></WriteExtendedAttributes>
		<ExecuteFile><meta><m n=":csNative"><e>32</e></m></meta></ExecuteFile>
		<Traverse><meta><m n=":csNative"><e>32</e></m></meta></Traverse>
		<DeleteSubdirectoriesAndFiles><meta><m n=":csNative"><e>64</e></m></meta></DeleteSubdirectoriesAndFiles>
		<ReadAttributes><meta><m n=":csNative"><e>128</e></m></meta></ReadAttributes>
		<WriteAttributes><meta><m n=":csNative"><e>256</e></m></meta></WriteAttributes>
		<Write><meta><m n=":csNative"><e>278</e></m></meta></Write>
		<Delete><meta><m n=":csNative"><e>65536</e></m></meta></Delete>
		<ReadPermissions><meta><m n=":csNative"><e>131072</e></m></meta></ReadPermissions>
		<Read><meta><m n=":csNative"><e>131209</e></m></meta></Read>
		<ReadAndExecute><meta><m n=":csNative"><e>131241</e></m></meta></ReadAndExecute>
		<Modify><meta><m n=":csNative"><e>197055</e></m></meta></Modify>
		<ChangePermissions><meta><m n=":csNative"><e>262144</e></m></meta></ChangePermissions>
		<TakeOwnership><meta><m n=":csNative"><e>524288</e></m></meta></TakeOwnership>
		<Synchronize><meta><m n=":csNative"><e>1048576</e></m></meta></Synchronize>
		<FullControl><meta><m n=":csNative"><e>2032127</e></m></meta></FullControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemRights"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.InheritanceFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.InheritanceFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<ContainerInherit><meta><m n=":csNative"><e>1</e></m></meta></ContainerInherit>
		<ObjectInherit><meta><m n=":csNative"><e>2</e></m></meta></ObjectInherit>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.InheritanceFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" module="cs.system.security.accesscontrol.NativeObjectSecurity" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="errorCode:name:handle:context">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.runtime.interopservices.SafeHandle"/>
	<d/>
	<c path="cs.system.Exception"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="errorCode:name:handle:context:callback:object">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.runtime.interopservices.SafeHandle"/>
	<d/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="cs.system.Exception"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" module="cs.system.security.accesscontrol.NativeObjectSecurity">
		<from><icast field="FromHaxeFunction"><f a=":::">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.runtime.interopservices.SafeHandle"/>
	<d/>
	<c path="cs.system.Exception"/>
</f></icast></from>
		<this><c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.security.accesscontrol._NativeObjectSecurity.NativeObjectSecurity_ExceptionFromErrorCode_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" private="1" module="cs.system.security.accesscontrol.NativeObjectSecurity" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.security.accesscontrol._NativeObjectSecurity.NativeObjectSecurity_ExceptionFromErrorCode_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" private="1" module="cs.system.security.accesscontrol.NativeObjectSecurity" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.security.accesscontrol.PropagationFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.PropagationFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<NoPropagateInherit><meta><m n=":csNative"><e>1</e></m></meta></NoPropagateInherit>
		<InheritOnly><meta><m n=":csNative"><e>2</e></m></meta></InheritOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.PropagationFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.ResourceType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.ResourceType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<FileObject><meta><m n=":csNative"><e>1</e></m></meta></FileObject>
		<Service><meta><m n=":csNative"><e>2</e></m></meta></Service>
		<Printer><meta><m n=":csNative"><e>3</e></m></meta></Printer>
		<RegistryKey><meta><m n=":csNative"><e>4</e></m></meta></RegistryKey>
		<LMShare><meta><m n=":csNative"><e>5</e></m></meta></LMShare>
		<KernelObject><meta><m n=":csNative"><e>6</e></m></meta></KernelObject>
		<WindowObject><meta><m n=":csNative"><e>7</e></m></meta></WindowObject>
		<DSObject><meta><m n=":csNative"><e>8</e></m></meta></DSObject>
		<DSObjectAll><meta><m n=":csNative"><e>9</e></m></meta></DSObjectAll>
		<ProviderDefined><meta><m n=":csNative"><e>10</e></m></meta></ProviderDefined>
		<WmiGuidObject><meta><m n=":csNative"><e>11</e></m></meta></WmiGuidObject>
		<RegistryWow6432Key><meta><m n=":csNative"><e>12</e></m></meta></RegistryWow6432Key>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.ResourceType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.cryptography.x509certificates.X509Certificate_CertificateContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509Certificate" module="cs.system.security.cryptography.x509certificates.X509Certificate" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<hCertStore public="1"><c path="cs.system.IntPtr"/></hCertStore>
		<pCertInfo public="1"><c path="cs.system.IntPtr"/></pCertInfo>
		<cbCertEncoded public="1"><x path="UInt"/></cbCertEncoded>
		<pbCertEncoded public="1"><c path="cs.system.IntPtr"/></pbCertEncoded>
		<dwCertEncodingType public="1"><x path="UInt"/></dwCertEncodingType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509Certificate.CertificateContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.cryptography.x509certificates.X509Certificate" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509Certificate" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreateFromCertFile public="1" set="method" static="1"><f a="filename">
	<c path="String"/>
	<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
</f></CreateFromCertFile>
		<CreateFromSignedFile public="1" set="method" static="1"><f a="filename">
	<c path="String"/>
	<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
</f></CreateFromSignedFile>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<Subject public="1" get="accessor" set="null"><c path="String"/></Subject>
		<Issuer public="1" get="accessor" set="null"><c path="String"/></Issuer>
		<GetCertHash public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetCertHash>
		<GetCertHashString public="1" set="method"><f a=""><c path="String"/></f></GetCertHashString>
		<GetEffectiveDateString public="1" set="method"><f a=""><c path="String"/></f></GetEffectiveDateString>
		<GetExpirationDateString public="1" set="method"><f a=""><c path="String"/></f></GetExpirationDateString>
		<GetFormat public="1" set="method"><f a=""><c path="String"/></f></GetFormat>
		<GetIssuerName public="1" set="method"><f a=""><c path="String"/></f></GetIssuerName>
		<GetKeyAlgorithm public="1" set="method"><f a=""><c path="String"/></f></GetKeyAlgorithm>
		<GetKeyAlgorithmParameters public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetKeyAlgorithmParameters>
		<GetKeyAlgorithmParametersString public="1" set="method"><f a=""><c path="String"/></f></GetKeyAlgorithmParametersString>
		<GetName public="1" set="method"><f a=""><c path="String"/></f></GetName>
		<GetPublicKey public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetPublicKey>
		<GetPublicKeyString public="1" set="method"><f a=""><c path="String"/></f></GetPublicKeyString>
		<GetRawCertData public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetRawCertData>
		<GetRawCertDataString public="1" set="method"><f a=""><c path="String"/></f></GetRawCertDataString>
		<GetSerialNumber public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetSerialNumber>
		<GetSerialNumberString public="1" set="method"><f a=""><c path="String"/></f></GetSerialNumberString>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToString public="1" set="method"><f a="fVerbose">
	<x path="Bool"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<get_Issuer final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Issuer>
		<get_Subject final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Subject>
		<get_Handle final="1" public="1" set="method"><f a=""><c path="cs.system.IntPtr"/></f></get_Handle>
		<Export public="1" set="method">
			<f a="contentType">
				<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<overloads>
				<Export public="1" set="method"><f a="contentType:password">
	<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
	<c path="cs.system.security.SecureString"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></Export>
				<Export public="1" set="method"><f a="contentType:password">
	<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></Export>
			</overloads>
		</Export>
		<Import public="1" set="method">
			<f a="rawData">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<Import public="1" set="method"><f a="fileName:password:keyStorageFlags">
	<c path="String"/>
	<c path="cs.system.security.SecureString"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></Import>
				<Import public="1" set="method"><f a="fileName:password:keyStorageFlags">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></Import>
				<Import public="1" set="method"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></Import>
				<Import public="1" set="method"><f a="rawData:password:keyStorageFlags">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.SecureString"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></Import>
				<Import public="1" set="method"><f a="rawData:password:keyStorageFlags">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="String"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></Import>
			</overloads>
		</Import>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" public="1" set="method">
			<f a="data">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName:password:keyStorageFlags">
	<c path="String"/>
	<c path="cs.system.security.SecureString"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName:password:keyStorageFlags">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName:password">
	<c path="String"/>
	<c path="cs.system.security.SecureString"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName:password">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="rawData:password:keyStorageFlags">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.SecureString"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="rawData:password:keyStorageFlags">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="String"/>
	<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="rawData:password">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.system.security.SecureString"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="rawData:password">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new final="1" public="1" set="method"><f a="cert">
	<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="handle">
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509Certificate"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.cryptography.x509certificates.X509ContentType" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509ContentType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<Cert><meta><m n=":csNative"><e>1</e></m></meta></Cert>
		<SerializedCert><meta><m n=":csNative"><e>2</e></m></meta></SerializedCert>
		<Pfx><meta><m n=":csNative"><e>3</e></m></meta></Pfx>
		<Pkcs12><meta><m n=":csNative"><e>3</e></m></meta></Pkcs12>
		<SerializedStore><meta><m n=":csNative"><e>4</e></m></meta></SerializedStore>
		<Pkcs7><meta><m n=":csNative"><e>5</e></m></meta></Pkcs7>
		<Authenticode><meta><m n=":csNative"><e>6</e></m></meta></Authenticode>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509ContentType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509KeyStorageFlags">
		<DefaultKeySet><meta><m n=":csNative"><e>0</e></m></meta></DefaultKeySet>
		<UserKeySet><meta><m n=":csNative"><e>1</e></m></meta></UserKeySet>
		<MachineKeySet><meta><m n=":csNative"><e>2</e></m></meta></MachineKeySet>
		<Exportable><meta><m n=":csNative"><e>4</e></m></meta></Exportable>
		<UserProtected><meta><m n=":csNative"><e>8</e></m></meta></UserProtected>
		<PersistKeySet><meta><m n=":csNative"><e>16</e></m></meta></PersistKeySet>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.permissions.PermissionState" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.PermissionState">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Unrestricted><meta><m n=":csNative"><e>1</e></m></meta></Unrestricted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Permissions.PermissionState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.permissions.SecurityAction" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.SecurityAction">
		<Demand><meta><m n=":csNative"><e>2</e></m></meta></Demand>
		<Assert><meta><m n=":csNative"><e>3</e></m></meta></Assert>
		<Deny><meta><m n=":csNative"><e>4</e></m></meta></Deny>
		<PermitOnly><meta><m n=":csNative"><e>5</e></m></meta></PermitOnly>
		<LinkDemand><meta><m n=":csNative"><e>6</e></m></meta></LinkDemand>
		<InheritanceDemand><meta><m n=":csNative"><e>7</e></m></meta></InheritanceDemand>
		<RequestMinimum><meta><m n=":csNative"><e>8</e></m></meta></RequestMinimum>
		<RequestOptional><meta><m n=":csNative"><e>9</e></m></meta></RequestOptional>
		<RequestRefuse><meta><m n=":csNative"><e>10</e></m></meta></RequestRefuse>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Permissions.SecurityAction"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.permissions.StrongNamePublicKeyBlob" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.StrongNamePublicKeyBlob" extern="1" final="1">
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a="publicKey">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Permissions.StrongNamePublicKeyBlob"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.ApplicationTrust" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.ApplicationTrust" extern="1" final="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<Persist public="1" get="accessor" set="accessor"><x path="Bool"/></Persist>
		<IsApplicationTrustedToRun public="1" get="accessor" set="accessor"><x path="Bool"/></IsApplicationTrustedToRun>
		<ExtraInfo public="1" get="accessor" set="accessor"><d/></ExtraInfo>
		<DefaultGrantSet public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.PolicyStatement"/></DefaultGrantSet>
		<ApplicationIdentity public="1" get="accessor" set="accessor"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<get_ApplicationIdentity final="1" public="1" set="method"><f a=""><c path="cs.system.ApplicationIdentity"/></f></get_ApplicationIdentity>
		<set_ApplicationIdentity final="1" public="1" set="method"><f a="value">
	<c path="cs.system.ApplicationIdentity"/>
	<c path="cs.system.ApplicationIdentity"/>
</f></set_ApplicationIdentity>
		<get_DefaultGrantSet final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.PolicyStatement"/></f></get_DefaultGrantSet>
		<set_DefaultGrantSet final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.policy.PolicyStatement"/>
	<c path="cs.system.security.policy.PolicyStatement"/>
</f></set_DefaultGrantSet>
		<get_ExtraInfo final="1" public="1" set="method"><f a=""><d/></f></get_ExtraInfo>
		<set_ExtraInfo final="1" public="1" set="method"><f a="value">
	<d/>
	<d/>
</f></set_ExtraInfo>
		<get_IsApplicationTrustedToRun final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsApplicationTrustedToRun>
		<set_IsApplicationTrustedToRun final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_IsApplicationTrustedToRun>
		<get_Persist final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Persist>
		<set_Persist final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_Persist>
		<FromXml final="1" public="1" set="method"><f a="element">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></FromXml>
		<ToXml final="1" public="1" set="method"><f a=""><c path="cs.system.security.SecurityElement"/></f></ToXml>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="applicationIdentity">
	<c path="cs.system.ApplicationIdentity"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.ApplicationTrust"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.CodeGroup" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.CodeGroup" extern="1" abstract="1">
		<PermissionSetName public="1" get="accessor" set="null"><c path="String"/></PermissionSetName>
		<AttributeString public="1" get="accessor" set="null"><c path="String"/></AttributeString>
		<Children public="1" get="accessor" set="accessor"><c path="cs.system.collections.IList"/></Children>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<MembershipCondition public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.IMembershipCondition"/></MembershipCondition>
		<Description public="1" get="accessor" set="accessor"><c path="String"/></Description>
		<PolicyStatement public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.PolicyStatement"/></PolicyStatement>
		<MergeLogic public="1" get="accessor" set="null"><c path="String"/></MergeLogic>
		<Copy abstract="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.CodeGroup"/></f></Copy>
		<get_MergeLogic abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_MergeLogic>
		<Resolve abstract="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.PolicyStatement"/>
</f></Resolve>
		<ResolveMatchingCodeGroups abstract="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.CodeGroup"/>
</f></ResolveMatchingCodeGroups>
		<get_PolicyStatement final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.PolicyStatement"/></f></get_PolicyStatement>
		<set_PolicyStatement final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.policy.PolicyStatement"/>
	<c path="cs.system.security.policy.PolicyStatement"/>
</f></set_PolicyStatement>
		<get_Description final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Description>
		<set_Description final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Description>
		<get_MembershipCondition final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f></get_MembershipCondition>
		<set_MembershipCondition final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.policy.IMembershipCondition"/>
	<c path="cs.system.security.policy.IMembershipCondition"/>
</f></set_MembershipCondition>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<get_Children final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IList"/></f></get_Children>
		<set_Children final="1" public="1" set="method"><f a="value">
	<c path="cs.system.collections.IList"/>
	<c path="cs.system.collections.IList"/>
</f></set_Children>
		<get_AttributeString public="1" set="method"><f a=""><c path="String"/></f></get_AttributeString>
		<get_PermissionSetName public="1" set="method"><f a=""><c path="String"/></f></get_PermissionSetName>
		<AddChild final="1" public="1" set="method"><f a="group">
	<c path="cs.system.security.policy.CodeGroup"/>
	<x path="Void"/>
</f></AddChild>
		<RemoveChild final="1" public="1" set="method"><f a="group">
	<c path="cs.system.security.policy.CodeGroup"/>
	<x path="Void"/>
</f></RemoveChild>
		<FromXml final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<overloads><FromXml final="1" public="1" set="method"><f a="e:level">
	<c path="cs.system.security.SecurityElement"/>
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></FromXml></overloads>
		</FromXml>
		<ParseXml set="method">
			<f a="e:level">
				<c path="cs.system.security.SecurityElement"/>
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</ParseXml>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<overloads><ToXml final="1" public="1" set="method"><f a="level">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<c path="cs.system.security.SecurityElement"/>
</f></ToXml></overloads>
		</ToXml>
		<CreateXml set="method">
			<f a="element:level">
				<c path="cs.system.security.SecurityElement"/>
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CreateXml>
		<new final="1" set="method">
			<f a="membershipCondition:policy">
				<c path="cs.system.security.policy.IMembershipCondition"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.CodeGroup"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.Evidence_EvidenceEnumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.Evidence" module="cs.system.security.policy.Evidence" extern="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<MoveNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></MoveNext>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<get_Current final="1" public="1" set="method"><f a=""><d/></f></get_Current>
		<new final="1" public="1" set="method"><f a="hostenum:assemblyenum">
	<c path="cs.system.collections.IEnumerator"/>
	<c path="cs.system.collections.IEnumerator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.Evidence.EvidenceEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.Evidence" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.Evidence" extern="1" final="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<Locked public="1" get="accessor" set="accessor"><x path="Bool"/></Locked>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Locked final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Locked>
		<set_Locked final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_Locked>
		<get_SyncRoot final="1" public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<AddAssembly final="1" public="1" set="method"><f a="id">
	<d/>
	<x path="Void"/>
</f></AddAssembly>
		<AddHost final="1" public="1" set="method"><f a="id">
	<d/>
	<x path="Void"/>
</f></AddHost>
		<Clear final="1" public="1" set="method"><f a=""><x path="Void"/></f></Clear>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<GetAssemblyEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetAssemblyEnumerator>
		<GetHostEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetHostEnumerator>
		<Merge final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Void"/>
</f></Merge>
		<RemoveType final="1" public="1" set="method"><f a="t">
	<c path="cs.system.Type"/>
	<x path="Void"/>
</f></RemoveType>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new final="1" public="1" set="method"><f a="hostEvidence:assemblyEvidence">
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.NativeArray"><d/></c>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.Evidence"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IBuiltInEvidence" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IBuiltInEvidence" extern="1" interface="1">
		<GetRequiredSize public="1" set="method"><f a="verbose">
	<x path="Bool"/>
	<x path="Int"/>
</f></GetRequiredSize>
		<InitFromBuffer public="1" set="method"><f a="buffer:position">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></InitFromBuffer>
		<OutputToBuffer public="1" set="method"><f a="buffer:position:verbose">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></OutputToBuffer>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IBuiltInEvidence"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IConstantMembershipCondition" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IConstantMembershipCondition" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Security.Policy.IConstantMembershipCondition"</e></m>
</meta></class>
	<class path="cs.system.security.policy.IIdentityPermissionFactory" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IIdentityPermissionFactory" extern="1" interface="1">
		<CreateIdentityPermission public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.IPermission"/>
</f></CreateIdentityPermission>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IIdentityPermissionFactory"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IMembershipCondition" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IMembershipCondition" extern="1" interface="1">
		<extends path="cs.system.security.ISecurityEncodable"/>
		<extends path="cs.system.security.ISecurityPolicyEncodable"/>
		<Check public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Bool"/>
</f></Check>
		<Copy public="1" set="method"><f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f></Copy>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IMembershipCondition"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.PolicyLevel" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyLevel" extern="1" final="1">
		<CreateAppDomainLevel public="1" set="method" static="1"><f a=""><c path="cs.system.security.policy.PolicyLevel"/></f></CreateAppDomainLevel>
		<Type public="1" get="accessor" set="null"><e path="cs.system.security.PolicyLevelType"/></Type>
		<StoreLocation public="1" get="accessor" set="null"><c path="String"/></StoreLocation>
		<RootCodeGroup public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.CodeGroup"/></RootCodeGroup>
		<NamedPermissionSets public="1" get="accessor" set="null"><c path="cs.system.collections.IList"/></NamedPermissionSets>
		<Label public="1" get="accessor" set="null"><c path="String"/></Label>
		<FullTrustAssemblies public="1" get="accessor" set="null"><c path="cs.system.collections.IList"/></FullTrustAssemblies>
		<get_FullTrustAssemblies final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IList"/></f></get_FullTrustAssemblies>
		<get_Label final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Label>
		<get_NamedPermissionSets final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IList"/></f></get_NamedPermissionSets>
		<get_RootCodeGroup final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.CodeGroup"/></f></get_RootCodeGroup>
		<set_RootCodeGroup final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.policy.CodeGroup"/>
	<c path="cs.system.security.policy.CodeGroup"/>
</f></set_RootCodeGroup>
		<get_StoreLocation final="1" public="1" set="method"><f a=""><c path="String"/></f></get_StoreLocation>
		<get_Type final="1" public="1" set="method"><f a=""><e path="cs.system.security.PolicyLevelType"/></f></get_Type>
		<AddFullTrustAssembly final="1" public="1" set="method">
			<f a="sn">
				<c path="cs.system.security.policy.StrongName"/>
				<x path="Void"/>
			</f>
			<overloads><AddFullTrustAssembly final="1" public="1" set="method"><f a="snMC">
	<c path="cs.system.security.policy.StrongNameMembershipCondition"/>
	<x path="Void"/>
</f></AddFullTrustAssembly></overloads>
		</AddFullTrustAssembly>
		<AddNamedPermissionSet final="1" public="1" set="method"><f a="permSet">
	<c path="cs.system.security.NamedPermissionSet"/>
	<x path="Void"/>
</f></AddNamedPermissionSet>
		<ChangeNamedPermissionSet final="1" public="1" set="method"><f a="name:pSet">
	<c path="String"/>
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.NamedPermissionSet"/>
</f></ChangeNamedPermissionSet>
		<FromXml final="1" public="1" set="method"><f a="e">
	<c path="cs.system.security.SecurityElement"/>
	<x path="Void"/>
</f></FromXml>
		<GetNamedPermissionSet final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.security.NamedPermissionSet"/>
</f></GetNamedPermissionSet>
		<Recover final="1" public="1" set="method"><f a=""><x path="Void"/></f></Recover>
		<RemoveFullTrustAssembly final="1" public="1" set="method">
			<f a="sn">
				<c path="cs.system.security.policy.StrongName"/>
				<x path="Void"/>
			</f>
			<overloads><RemoveFullTrustAssembly final="1" public="1" set="method"><f a="snMC">
	<c path="cs.system.security.policy.StrongNameMembershipCondition"/>
	<x path="Void"/>
</f></RemoveFullTrustAssembly></overloads>
		</RemoveFullTrustAssembly>
		<RemoveNamedPermissionSet final="1" public="1" set="method">
			<f a="permSet">
				<c path="cs.system.security.NamedPermissionSet"/>
				<c path="cs.system.security.NamedPermissionSet"/>
			</f>
			<overloads><RemoveNamedPermissionSet final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.security.NamedPermissionSet"/>
</f></RemoveNamedPermissionSet></overloads>
		</RemoveNamedPermissionSet>
		<Reset final="1" public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<Resolve final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.PolicyStatement"/>
</f></Resolve>
		<ResolveMatchingCodeGroups final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.policy.CodeGroup"/>
</f></ResolveMatchingCodeGroups>
		<ToXml final="1" public="1" set="method"><f a=""><c path="cs.system.security.SecurityElement"/></f></ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.PolicyLevel"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.PolicyStatement" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyStatement" extern="1" final="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.ISecurityPolicyEncodable"/>
		<AttributeString public="1" get="accessor" set="null"><c path="String"/></AttributeString>
		<Attributes public="1" get="accessor" set="accessor"><e path="cs.system.security.policy.PolicyStatementAttribute"/></Attributes>
		<PermissionSet public="1" get="accessor" set="accessor"><c path="cs.system.security.PermissionSet"/></PermissionSet>
		<get_PermissionSet final="1" public="1" set="method"><f a=""><c path="cs.system.security.PermissionSet"/></f></get_PermissionSet>
		<set_PermissionSet final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.PermissionSet"/>
	<c path="cs.system.security.PermissionSet"/>
</f></set_PermissionSet>
		<get_Attributes final="1" public="1" set="method"><f a=""><e path="cs.system.security.policy.PolicyStatementAttribute"/></f></get_Attributes>
		<set_Attributes final="1" public="1" set="method"><f a="value">
	<e path="cs.system.security.policy.PolicyStatementAttribute"/>
	<e path="cs.system.security.policy.PolicyStatementAttribute"/>
</f></set_Attributes>
		<get_AttributeString final="1" public="1" set="method"><f a=""><c path="String"/></f></get_AttributeString>
		<Copy final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.PolicyStatement"/></f></Copy>
		<FromXml final="1" public="1" set="method">
			<f a="et">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<overloads><FromXml final="1" public="1" set="method"><f a="et:level">
	<c path="cs.system.security.SecurityElement"/>
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></FromXml></overloads>
		</FromXml>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<overloads><ToXml final="1" public="1" set="method"><f a="level">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<c path="cs.system.security.SecurityElement"/>
</f></ToXml></overloads>
		</ToXml>
		<new final="1" public="1" set="method">
			<f a="permSet">
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<overloads><new final="1" public="1" set="method"><f a="permSet:attributes">
	<c path="cs.system.security.PermissionSet"/>
	<e path="cs.system.security.policy.PolicyStatementAttribute"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.PolicyStatement"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.policy.PolicyStatementAttribute" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyStatementAttribute">
		<Nothing><meta><m n=":csNative"><e>0</e></m></meta></Nothing>
		<Exclusive><meta><m n=":csNative"><e>1</e></m></meta></Exclusive>
		<LevelFinal><meta><m n=":csNative"><e>2</e></m></meta></LevelFinal>
		<All><meta><m n=":csNative"><e>3</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Policy.PolicyStatementAttribute"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.policy.StrongName" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.StrongName" extern="1" final="1">
		<implements path="cs.system.security.policy.IBuiltInEvidence"/>
		<implements path="cs.system.security.policy.IIdentityPermissionFactory"/>
		<Version public="1" get="accessor" set="null"><c path="cs.system.Version"/></Version>
		<PublicKey public="1" get="accessor" set="null"><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></PublicKey>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<get_PublicKey final="1" public="1" set="method"><f a=""><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></f></get_PublicKey>
		<get_Version final="1" public="1" set="method"><f a=""><c path="cs.system.Version"/></f></get_Version>
		<Copy final="1" public="1" set="method"><f a=""><d/></f></Copy>
		<CreateIdentityPermission final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<c path="cs.system.security.IPermission"/>
</f></CreateIdentityPermission>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" public="1" set="method"><f a="blob:name:version">
	<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
	<c path="String"/>
	<c path="cs.system.Version"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.StrongName"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.StrongNameMembershipCondition" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.StrongNameMembershipCondition" extern="1" final="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.ISecurityPolicyEncodable"/>
		<implements path="cs.system.security.policy.IConstantMembershipCondition"/>
		<implements path="cs.system.security.policy.IMembershipCondition"/>
		<PublicKey public="1" get="accessor" set="accessor"><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></PublicKey>
		<Version public="1" get="accessor" set="accessor"><c path="cs.system.Version"/></Version>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<get_Version final="1" public="1" set="method"><f a=""><c path="cs.system.Version"/></f></get_Version>
		<set_Version final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Version"/>
	<c path="cs.system.Version"/>
</f></set_Version>
		<get_PublicKey final="1" public="1" set="method"><f a=""><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></f></get_PublicKey>
		<set_PublicKey final="1" public="1" set="method"><f a="value">
	<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
	<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
</f></set_PublicKey>
		<Check final="1" public="1" set="method"><f a="evidence">
	<c path="cs.system.security.policy.Evidence"/>
	<x path="Bool"/>
</f></Check>
		<Copy final="1" public="1" set="method"><f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f></Copy>
		<FromXml final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<overloads><FromXml final="1" public="1" set="method"><f a="e:level">
	<c path="cs.system.security.SecurityElement"/>
	<c path="cs.system.security.policy.PolicyLevel"/>
	<x path="Void"/>
</f></FromXml></overloads>
		</FromXml>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<overloads><ToXml final="1" public="1" set="method"><f a="level">
	<c path="cs.system.security.policy.PolicyLevel"/>
	<c path="cs.system.security.SecurityElement"/>
</f></ToXml></overloads>
		</ToXml>
		<new final="1" public="1" set="method"><f a="blob:name:version">
	<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
	<c path="String"/>
	<c path="cs.system.Version"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.StrongNameMembershipCondition"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.TrustManagerContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.TrustManagerContext" extern="1">
		<UIContext public="1" get="accessor" set="accessor"><e path="cs.system.security.policy.TrustManagerUIContext"/></UIContext>
		<PreviousApplicationIdentity public="1" get="accessor" set="accessor"><c path="cs.system.ApplicationIdentity"/></PreviousApplicationIdentity>
		<Persist public="1" get="accessor" set="accessor"><x path="Bool"/></Persist>
		<NoPrompt public="1" get="accessor" set="accessor"><x path="Bool"/></NoPrompt>
		<KeepAlive public="1" get="accessor" set="accessor"><x path="Bool"/></KeepAlive>
		<IgnorePersistedDecision public="1" get="accessor" set="accessor"><x path="Bool"/></IgnorePersistedDecision>
		<get_IgnorePersistedDecision public="1" set="method"><f a=""><x path="Bool"/></f></get_IgnorePersistedDecision>
		<set_IgnorePersistedDecision public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_IgnorePersistedDecision>
		<get_KeepAlive public="1" set="method"><f a=""><x path="Bool"/></f></get_KeepAlive>
		<set_KeepAlive public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_KeepAlive>
		<get_NoPrompt public="1" set="method"><f a=""><x path="Bool"/></f></get_NoPrompt>
		<set_NoPrompt public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_NoPrompt>
		<get_Persist public="1" set="method"><f a=""><x path="Bool"/></f></get_Persist>
		<set_Persist public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_Persist>
		<get_PreviousApplicationIdentity public="1" set="method"><f a=""><c path="cs.system.ApplicationIdentity"/></f></get_PreviousApplicationIdentity>
		<set_PreviousApplicationIdentity public="1" set="method"><f a="value">
	<c path="cs.system.ApplicationIdentity"/>
	<c path="cs.system.ApplicationIdentity"/>
</f></set_PreviousApplicationIdentity>
		<get_UIContext public="1" set="method"><f a=""><e path="cs.system.security.policy.TrustManagerUIContext"/></f></get_UIContext>
		<set_UIContext public="1" set="method"><f a="value">
	<e path="cs.system.security.policy.TrustManagerUIContext"/>
	<e path="cs.system.security.policy.TrustManagerUIContext"/>
</f></set_UIContext>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="uiContext">
	<e path="cs.system.security.policy.TrustManagerUIContext"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.TrustManagerContext"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.policy.TrustManagerUIContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.policy.TrustManagerUIContext">
		<Install><meta><m n=":csNative"><e>0</e></m></meta></Install>
		<Upgrade><meta><m n=":csNative"><e>1</e></m></meta></Upgrade>
		<Run><meta><m n=":csNative"><e>2</e></m></meta></Run>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Policy.TrustManagerUIContext"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.principal.IIdentity" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IIdentity" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsAuthenticated public="1" get="accessor" set="null"><x path="Bool"/></IsAuthenticated>
		<AuthenticationType public="1" get="accessor" set="null"><c path="String"/></AuthenticationType>
		<get_AuthenticationType public="1" set="method"><f a=""><c path="String"/></f></get_AuthenticationType>
		<get_IsAuthenticated public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAuthenticated>
		<get_Name public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IIdentity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.principal.IPrincipal" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IPrincipal" extern="1" interface="1">
		<Identity public="1" get="accessor" set="null"><c path="cs.system.security.principal.IIdentity"/></Identity>
		<get_Identity public="1" set="method"><f a=""><c path="cs.system.security.principal.IIdentity"/></f></get_Identity>
		<IsInRole public="1" set="method"><f a="role">
	<c path="String"/>
	<x path="Bool"/>
</f></IsInRole>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IPrincipal"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.principal.IdentityReference" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IdentityReference" extern="1" abstract="1">
		<op_Equality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.security.principal.IdentityReference"/>
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="left:right">
	<c path="cs.system.security.principal.IdentityReference"/>
	<c path="cs.system.security.principal.IdentityReference"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<get_Value abstract="1" public="1" set="method"><f a=""><c path="String"/></f></get_Value>
		<IsValidTargetType abstract="1" public="1" set="method"><f a="targetType">
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></IsValidTargetType>
		<ToString abstract="1" public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<Translate abstract="1" public="1" set="method"><f a="targetType">
	<c path="cs.system.Type"/>
	<c path="cs.system.security.principal.IdentityReference"/>
</f></Translate>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IdentityReference"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.principal.PrincipalPolicy" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.security.principal.PrincipalPolicy">
		<UnauthenticatedPrincipal><meta><m n=":csNative"><e>0</e></m></meta></UnauthenticatedPrincipal>
		<NoPrincipal><meta><m n=":csNative"><e>1</e></m></meta></NoPrincipal>
		<WindowsPrincipal><meta><m n=":csNative"><e>2</e></m></meta></WindowsPrincipal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Principal.PrincipalPolicy"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.Decoder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.Decoder" extern="1" abstract="1">
		<FallbackBuffer public="1" get="accessor" set="null"><c path="cs.system.text.DecoderFallbackBuffer"/></FallbackBuffer>
		<Fallback public="1" get="accessor" set="accessor"><c path="cs.system.text.DecoderFallback"/></Fallback>
		<get_Fallback final="1" public="1" set="method"><f a=""><c path="cs.system.text.DecoderFallback"/></f></get_Fallback>
		<set_Fallback final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.DecoderFallback"/>
	<c path="cs.system.text.DecoderFallback"/>
</f></set_Fallback>
		<get_FallbackBuffer final="1" public="1" set="method"><f a=""><c path="cs.system.text.DecoderFallbackBuffer"/></f></get_FallbackBuffer>
		<GetCharCount abstract="1" public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetCharCount public="1" set="method"><f a="bytes:index:count:flush">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetCharCount></overloads>
		</GetCharCount>
		<GetChars abstract="1" public="1" set="method">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetChars public="1" set="method"><f a="bytes:byteIndex:byteCount:chars:charIndex:flush">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetChars></overloads>
		</GetChars>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<Convert public="1" set="method"><f a="bytes:byteIndex:byteCount:chars:charIndex:charCount:flush:bytesUsed:charsUsed:completed">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="cs.Out"><x path="Int"/></t>
	<t path="cs.Out"><x path="Int"/></t>
	<t path="cs.Out"><x path="Bool"/></t>
	<x path="Void"/>
</f></Convert>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Decoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.DecoderFallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.DecoderFallback" extern="1" abstract="1">
		<ReplacementFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.DecoderFallback"/></ReplacementFallback>
		<ExceptionFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.DecoderFallback"/></ExceptionFallback>
		<get_ExceptionFallback public="1" set="method" static="1"><f a=""><c path="cs.system.text.DecoderFallback"/></f></get_ExceptionFallback>
		<get_ReplacementFallback public="1" set="method" static="1"><f a=""><c path="cs.system.text.DecoderFallback"/></f></get_ReplacementFallback>
		<MaxCharCount public="1" get="accessor" set="null"><x path="Int"/></MaxCharCount>
		<get_MaxCharCount abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MaxCharCount>
		<CreateFallbackBuffer abstract="1" public="1" set="method"><f a=""><c path="cs.system.text.DecoderFallbackBuffer"/></f></CreateFallbackBuffer>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.DecoderFallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.DecoderFallbackBuffer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.DecoderFallbackBuffer" extern="1" abstract="1">
		<Remaining public="1" get="accessor" set="null"><x path="Int"/></Remaining>
		<get_Remaining abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Remaining>
		<Fallback abstract="1" public="1" set="method"><f a="bytesUnknown:index">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></Fallback>
		<GetNextChar abstract="1" public="1" set="method"><f a=""><t path="cs.types.Char16"/></f></GetNextChar>
		<MovePrevious abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></MovePrevious>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.DecoderFallbackBuffer"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.Encoder" extern="1" abstract="1">
		<FallbackBuffer public="1" get="accessor" set="null"><c path="cs.system.text.EncoderFallbackBuffer"/></FallbackBuffer>
		<Fallback public="1" get="accessor" set="accessor"><c path="cs.system.text.EncoderFallback"/></Fallback>
		<get_Fallback final="1" public="1" set="method"><f a=""><c path="cs.system.text.EncoderFallback"/></f></get_Fallback>
		<set_Fallback final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.EncoderFallback"/>
	<c path="cs.system.text.EncoderFallback"/>
</f></set_Fallback>
		<get_FallbackBuffer final="1" public="1" set="method"><f a=""><c path="cs.system.text.EncoderFallbackBuffer"/></f></get_FallbackBuffer>
		<GetByteCount abstract="1" public="1" set="method"><f a="chars:index:count:flush">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetByteCount>
		<GetBytes abstract="1" public="1" set="method"><f a="chars:charIndex:charCount:bytes:byteIndex:flush">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetBytes>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<Convert public="1" set="method"><f a="chars:charIndex:charCount:bytes:byteIndex:byteCount:flush:charsUsed:bytesUsed:completed">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="cs.Out"><x path="Int"/></t>
	<t path="cs.Out"><x path="Int"/></t>
	<t path="cs.Out"><x path="Bool"/></t>
	<x path="Void"/>
</f></Convert>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncoderFallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.EncoderFallback" extern="1" abstract="1">
		<ReplacementFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.EncoderFallback"/></ReplacementFallback>
		<ExceptionFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.EncoderFallback"/></ExceptionFallback>
		<get_ExceptionFallback public="1" set="method" static="1"><f a=""><c path="cs.system.text.EncoderFallback"/></f></get_ExceptionFallback>
		<get_ReplacementFallback public="1" set="method" static="1"><f a=""><c path="cs.system.text.EncoderFallback"/></f></get_ReplacementFallback>
		<MaxCharCount public="1" get="accessor" set="null"><x path="Int"/></MaxCharCount>
		<get_MaxCharCount abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MaxCharCount>
		<CreateFallbackBuffer abstract="1" public="1" set="method"><f a=""><c path="cs.system.text.EncoderFallbackBuffer"/></f></CreateFallbackBuffer>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncoderFallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncoderFallbackBuffer" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.EncoderFallbackBuffer" extern="1" abstract="1">
		<Remaining public="1" get="accessor" set="null"><x path="Int"/></Remaining>
		<get_Remaining abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Remaining>
		<Fallback abstract="1" public="1" set="method">
			<f a="charUnknown:index">
				<t path="cs.types.Char16"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><Fallback abstract="1" public="1" set="method"><f a="charUnknownHigh:charUnknownLow:index">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></Fallback></overloads>
		</Fallback>
		<GetNextChar abstract="1" public="1" set="method"><f a=""><t path="cs.types.Char16"/></f></GetNextChar>
		<MovePrevious abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></MovePrevious>
		<Reset public="1" set="method"><f a=""><x path="Void"/></f></Reset>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncoderFallbackBuffer"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding_ForwardingEncoder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" module="cs.system.text.Encoding" extern="1" final="1">
		<extends path="cs.system.text.Encoder"/>
		<GetByteCount public="1" set="method" override="1"><f a="chars:index:count:flush">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetByteCount>
		<GetBytes public="1" set="method" override="1"><f a="chars:charIndex:charCount:bytes:byteCount:flush">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></GetBytes>
		<new final="1" public="1" set="method"><f a="enc">
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding.ForwardingEncoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding_ForwardingDecoder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" module="cs.system.text.Encoding" extern="1" final="1">
		<extends path="cs.system.text.Decoder"/>
		<GetCharCount public="1" set="method" override="1"><f a="bytes:index:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetCharCount>
		<GetChars public="1" set="method" override="1"><f a="bytes:byteIndex:byteCount:chars:charIndex">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></GetChars>
		<new final="1" public="1" set="method"><f a="enc">
	<c path="cs.system.text.Encoding"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding.ForwardingDecoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" extern="1" abstract="1">
		<implements path="cs.system.ICloneable"/>
		<UTF32 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF32>
		<Unicode public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></Unicode>
		<UTF8 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF8>
		<UTF7 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF7>
		<Default public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></Default>
		<BigEndianUnicode public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></BigEndianUnicode>
		<ASCII public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></ASCII>
		<Convert public="1" set="method" static="1">
			<f a="srcEncoding:dstEncoding:bytes">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<overloads><Convert public="1" set="method"><f a="srcEncoding:dstEncoding:bytes:index:count">
	<c path="cs.system.text.Encoding"/>
	<c path="cs.system.text.Encoding"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></Convert></overloads>
		</Convert>
		<GetEncoding public="1" set="method" static="1">
			<f a="codepage">
				<x path="Int"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<overloads>
				<GetEncoding public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="cs.system.text.Encoding"/>
</f></GetEncoding>
				<GetEncoding public="1" set="method"><f a="name:encoderFallback:decoderFallback">
	<c path="String"/>
	<c path="cs.system.text.EncoderFallback"/>
	<c path="cs.system.text.DecoderFallback"/>
	<c path="cs.system.text.Encoding"/>
</f></GetEncoding>
				<GetEncoding public="1" set="method"><f a="codepage:encoderFallback:decoderFallback">
	<x path="Int"/>
	<c path="cs.system.text.EncoderFallback"/>
	<c path="cs.system.text.DecoderFallback"/>
	<c path="cs.system.text.Encoding"/>
</f></GetEncoding>
			</overloads>
		</GetEncoding>
		<GetEncodings public="1" set="method" static="1"><f a=""><c path="cs.NativeArray"><c path="cs.system.text.EncodingInfo"/></c></f></GetEncodings>
		<get_ASCII public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_ASCII>
		<get_BigEndianUnicode public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_BigEndianUnicode>
		<get_Default public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_Default>
		<get_UTF7 public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_UTF7>
		<get_UTF8 public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_UTF8>
		<get_Unicode public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_Unicode>
		<get_UTF32 public="1" set="method" static="1"><f a=""><c path="cs.system.text.Encoding"/></f></get_UTF32>
		<WindowsCodePage public="1" get="accessor" set="null"><x path="Int"/></WindowsCodePage>
		<WebName public="1" get="accessor" set="null"><c path="String"/></WebName>
		<IsMailNewsSave public="1" get="accessor" set="null"><x path="Bool"/></IsMailNewsSave>
		<IsMailNewsDisplay public="1" get="accessor" set="null"><x path="Bool"/></IsMailNewsDisplay>
		<IsBrowserSave public="1" get="accessor" set="null"><x path="Bool"/></IsBrowserSave>
		<IsBrowserDisplay public="1" get="accessor" set="null"><x path="Bool"/></IsBrowserDisplay>
		<HeaderName public="1" get="accessor" set="null"><c path="String"/></HeaderName>
		<EncodingName public="1" get="accessor" set="null"><c path="String"/></EncodingName>
		<CodePage public="1" get="accessor" set="null"><x path="Int"/></CodePage>
		<BodyName public="1" get="accessor" set="null"><c path="String"/></BodyName>
		<EncoderFallback public="1" get="accessor" set="accessor"><c path="cs.system.text.EncoderFallback"/></EncoderFallback>
		<DecoderFallback public="1" get="accessor" set="accessor"><c path="cs.system.text.DecoderFallback"/></DecoderFallback>
		<IsSingleByte public="1" get="accessor" set="null"><x path="Bool"/></IsSingleByte>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSingleByte public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSingleByte>
		<get_DecoderFallback final="1" public="1" set="method"><f a=""><c path="cs.system.text.DecoderFallback"/></f></get_DecoderFallback>
		<set_DecoderFallback final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.DecoderFallback"/>
	<c path="cs.system.text.DecoderFallback"/>
</f></set_DecoderFallback>
		<get_EncoderFallback final="1" public="1" set="method"><f a=""><c path="cs.system.text.EncoderFallback"/></f></get_EncoderFallback>
		<set_EncoderFallback final="1" public="1" set="method"><f a="value">
	<c path="cs.system.text.EncoderFallback"/>
	<c path="cs.system.text.EncoderFallback"/>
</f></set_EncoderFallback>
		<GetByteCount abstract="1" public="1" set="method">
			<f a="chars:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<GetByteCount public="1" set="method"><f a="chars">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
</f></GetByteCount>
				<GetByteCount public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></GetByteCount>
			</overloads>
		</GetByteCount>
		<GetBytes abstract="1" public="1" set="method">
			<f a="chars:charIndex:charCount:bytes:byteIndex">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<GetBytes public="1" set="method"><f a="chars">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="chars:index:count">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
</f></GetBytes>
				<GetBytes public="1" set="method"><f a="s:charIndex:charCount:bytes:byteIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></GetBytes>
			</overloads>
		</GetBytes>
		<GetCharCount abstract="1" public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><GetCharCount public="1" set="method"><f a="bytes">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
</f></GetCharCount></overloads>
		</GetCharCount>
		<GetChars abstract="1" public="1" set="method">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<GetChars public="1" set="method"><f a="bytes">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
</f></GetChars>
				<GetChars public="1" set="method"><f a="bytes:index:count">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
</f></GetChars>
			</overloads>
		</GetChars>
		<GetDecoder public="1" set="method"><f a=""><c path="cs.system.text.Decoder"/></f></GetDecoder>
		<GetEncoder public="1" set="method"><f a=""><c path="cs.system.text.Encoder"/></f></GetEncoder>
		<Clone public="1" set="method"><f a=""><d/></f></Clone>
		<IsAlwaysNormalized final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><IsAlwaysNormalized public="1" set="method"><f a="form">
	<e path="cs.system.text.NormalizationForm"/>
	<x path="Bool"/>
</f></IsAlwaysNormalized></overloads>
		</IsAlwaysNormalized>
		<GetMaxByteCount abstract="1" public="1" set="method"><f a="charCount">
	<x path="Int"/>
	<x path="Int"/>
</f></GetMaxByteCount>
		<GetMaxCharCount abstract="1" public="1" set="method"><f a="byteCount">
	<x path="Int"/>
	<x path="Int"/>
</f></GetMaxCharCount>
		<GetPreamble public="1" set="method"><f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f></GetPreamble>
		<GetString public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><GetString public="1" set="method"><f a="bytes">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="String"/>
</f></GetString></overloads>
		</GetString>
		<get_BodyName public="1" set="method"><f a=""><c path="String"/></f></get_BodyName>
		<get_CodePage public="1" set="method"><f a=""><x path="Int"/></f></get_CodePage>
		<get_EncodingName public="1" set="method"><f a=""><c path="String"/></f></get_EncodingName>
		<get_HeaderName public="1" set="method"><f a=""><c path="String"/></f></get_HeaderName>
		<get_IsBrowserDisplay public="1" set="method"><f a=""><x path="Bool"/></f></get_IsBrowserDisplay>
		<get_IsBrowserSave public="1" set="method"><f a=""><x path="Bool"/></f></get_IsBrowserSave>
		<get_IsMailNewsDisplay public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMailNewsDisplay>
		<get_IsMailNewsSave public="1" set="method"><f a=""><x path="Bool"/></f></get_IsMailNewsSave>
		<get_WebName public="1" set="method"><f a=""><c path="String"/></f></get_WebName>
		<get_WindowsCodePage public="1" set="method"><f a=""><x path="Int"/></f></get_WindowsCodePage>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads><new final="1" set="method">
	<f a="codePage">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":protected"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncodingInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.EncodingInfo" extern="1" final="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<DisplayName public="1" get="accessor" set="null"><c path="String"/></DisplayName>
		<CodePage public="1" get="accessor" set="null"><x path="Int"/></CodePage>
		<get_CodePage final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_CodePage>
		<get_DisplayName final="1" public="1" set="method"><f a=""><c path="String"/></f></get_DisplayName>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<GetEncoding final="1" public="1" set="method"><f a=""><c path="cs.system.text.Encoding"/></f></GetEncoding>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncodingInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.text.NormalizationForm" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.NormalizationForm">
		<FormC><meta><m n=":csNative"><e>1</e></m></meta></FormC>
		<FormD><meta><m n=":csNative"><e>2</e></m></meta></FormD>
		<FormKC><meta><m n=":csNative"><e>5</e></m></meta></FormKC>
		<FormKD><meta><m n=":csNative"><e>6</e></m></meta></FormKD>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Text.NormalizationForm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.StringBuilder" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.text.StringBuilder" extern="1" final="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Length public="1" get="accessor" set="accessor"><x path="Int"/></Length>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<MaxCapacity public="1" get="accessor" set="null"><x path="Int"/></MaxCapacity>
		<get_MaxCapacity final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_MaxCapacity>
		<get_Capacity final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Capacity>
		<set_Capacity final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Capacity>
		<get_Length final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Length>
		<set_Length final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Length>
		<get_Chars final="1" public="1" set="method"><f a="index">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
</f></get_Chars>
		<set_Chars final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<x path="Void"/>
</f></set_Chars>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><ToString final="1" public="1" set="method"><f a="startIndex:length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></ToString></overloads>
		</ToString>
		<EnsureCapacity final="1" public="1" set="method"><f a="capacity">
	<x path="Int"/>
	<x path="Int"/>
</f></EnsureCapacity>
		<Remove final="1" public="1" set="method"><f a="startIndex:length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Remove>
		<Replace final="1" public="1" set="method">
			<f a="oldChar:newChar">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<overloads>
				<Replace final="1" public="1" set="method"><f a="oldValue:newValue:startIndex:count">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="oldValue:newValue">
	<c path="String"/>
	<c path="String"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="oldChar:newChar:startIndex:count">
	<t path="cs.types.Char16"/>
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Replace>
			</overloads>
		</Replace>
		<Append final="1" public="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<overloads>
				<Append final="1" public="1" set="method"><f a="value:startIndex:count">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value:startIndex:charCount">
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value:repeatCount">
	<t path="cs.types.Char16"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Char16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.UInt64"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.UInt16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="Single"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Int8"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<d/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="haxe.Int64"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.Int16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<c path="cs.system.Decimal"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<t path="cs.types.UInt8"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
				<Append final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Append>
			</overloads>
		</Append>
		<AppendLine final="1" public="1" set="method">
			<f a=""><c path="cs.system.text.StringBuilder"/></f>
			<overloads><AppendLine final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="cs.system.text.StringBuilder"/>
</f></AppendLine></overloads>
		</AppendLine>
		<AppendFormat final="1" public="1" set="method">
			<f a="format:args">
				<c path="String"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<overloads>
				<AppendFormat final="1" public="1" set="method"><f a="format:arg0:arg1:arg2">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<c path="cs.system.text.StringBuilder"/>
</f></AppendFormat>
				<AppendFormat final="1" public="1" set="method"><f a="format:arg0:arg1">
	<c path="String"/>
	<d/>
	<d/>
	<c path="cs.system.text.StringBuilder"/>
</f></AppendFormat>
				<AppendFormat final="1" public="1" set="method"><f a="format:arg0">
	<c path="String"/>
	<d/>
	<c path="cs.system.text.StringBuilder"/>
</f></AppendFormat>
				<AppendFormat final="1" public="1" set="method"><f a="provider:format:args">
	<c path="cs.system.IFormatProvider"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<c path="cs.system.text.StringBuilder"/>
</f></AppendFormat>
			</overloads>
		</AppendFormat>
		<Insert final="1" public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<overloads>
				<Insert final="1" public="1" set="method"><f a="index:value:startIndex:charCount">
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value:count">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.UInt64"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="UInt"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.UInt16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Single"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.Int8"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<d/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.Int16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Float"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<c path="cs.system.Decimal"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.Char16"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="cs.types.UInt8"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
				<Insert final="1" public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.text.StringBuilder"/>
</f></Insert>
			</overloads>
		</Insert>
		<CopyTo final="1" public="1" set="method"><f a="sourceIndex:destination:destinationIndex:count">
	<x path="Int"/>
	<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<new final="1" public="1" set="method">
			<f a="value:startIndex:length:capacity">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="value:capacity">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity:maxCapacity">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.StringBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Capture" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Capture" extern="1">
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<Index public="1" get="accessor" set="null"><x path="Int"/></Index>
		<get_Index final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Index>
		<get_Length final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Length>
		<get_Value final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Value>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Capture"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.CaptureCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.CaptureCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Item final="1" public="1" set="method"><f a="i">
	<x path="Int"/>
	<c path="cs.system.text.regularexpressions.Capture"/>
</f></get_Item>
		<get_SyncRoot final="1" public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.CaptureCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Group" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Group" extern="1">
		<extends path="cs.system.text.regularexpressions.Capture"/>
		<Synchronized public="1" set="method" static="1"><f a="inner">
	<c path="cs.system.text.regularexpressions.Group"/>
	<c path="cs.system.text.regularexpressions.Group"/>
</f></Synchronized>
		<Success public="1" get="accessor" set="null"><x path="Bool"/></Success>
		<Captures public="1" get="accessor" set="null"><c path="cs.system.text.regularexpressions.CaptureCollection"/></Captures>
		<get_Captures final="1" public="1" set="method"><f a=""><c path="cs.system.text.regularexpressions.CaptureCollection"/></f></get_Captures>
		<get_Success final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_Success>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Group"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.GroupCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.GroupCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Item final="1" public="1" set="method">
			<f a="i">
				<x path="Int"/>
				<c path="cs.system.text.regularexpressions.Group"/>
			</f>
			<overloads><get_Item final="1" public="1" set="method"><f a="groupName">
	<c path="String"/>
	<c path="cs.system.text.regularexpressions.Group"/>
</f></get_Item></overloads>
		</get_Item>
		<get_SyncRoot final="1" public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.GroupCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Match" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Match" extern="1">
		<extends path="cs.system.text.regularexpressions.Group"/>
		<Empty public="1" get="accessor" set="null" static="1"><c path="cs.system.text.regularexpressions.Match"/></Empty>
		<get_Empty public="1" set="method" static="1"><f a=""><c path="cs.system.text.regularexpressions.Match"/></f></get_Empty>
		<Synchronized public="1" set="method" static="1"><f a="inner">
	<c path="cs.system.text.regularexpressions.Match"/>
	<c path="cs.system.text.regularexpressions.Match"/>
</f></Synchronized>
		<Groups public="1" get="accessor" set="null"><c path="cs.system.text.regularexpressions.GroupCollection"/></Groups>
		<get_Groups public="1" set="method"><f a=""><c path="cs.system.text.regularexpressions.GroupCollection"/></f></get_Groups>
		<NextMatch final="1" public="1" set="method"><f a=""><c path="cs.system.text.regularexpressions.Match"/></f></NextMatch>
		<Result public="1" set="method"><f a="replacement">
	<c path="String"/>
	<c path="String"/>
</f></Result>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Match"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.MatchCollection_Enumerator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchCollection" module="cs.system.text.regularexpressions.MatchCollection" extern="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchCollection.Enumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.MatchCollection" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_Count>
		<get_IsReadOnly final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsReadOnly>
		<get_IsSynchronized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsSynchronized>
		<get_Item public="1" set="method"><f a="i">
	<x path="Int"/>
	<c path="cs.system.text.regularexpressions.Match"/>
</f></get_Item>
		<get_SyncRoot final="1" public="1" set="method"><f a=""><d/></f></get_SyncRoot>
		<CopyTo final="1" public="1" set="method"><f a="array:index">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></CopyTo>
		<GetEnumerator final="1" public="1" set="method"><f a=""><c path="cs.system.collections.IEnumerator"/></f></GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Delegate_MatchEvaluator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" module="cs.system.text.regularexpressions.MatchEvaluator" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="match">
	<c path="cs.system.text.regularexpressions.Match"/>
	<c path="String"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="match:callback:object">
	<c path="cs.system.text.regularexpressions.Match"/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<c path="String"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchEvaluator"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.text.regularexpressions.MatchEvaluator" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.text.regularexpressions.Match"/>
	<c path="String"/>
</f></icast></from>
		<this><c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.text.regularexpressions._MatchEvaluator.MatchEvaluator_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" private="1" module="cs.system.text.regularexpressions.MatchEvaluator" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.text.regularexpressions._MatchEvaluator.MatchEvaluator_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" private="1" module="cs.system.text.regularexpressions.MatchEvaluator" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.text.regularexpressions.Regex_Adapter" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Regex" module="cs.system.text.regularexpressions.Regex" extern="1">
		<Evaluate final="1" public="1" set="method"><f a="m:sb">
	<c path="cs.system.text.regularexpressions.Match"/>
	<c path="cs.system.text.StringBuilder"/>
	<x path="Void"/>
</f></Evaluate>
		<new final="1" public="1" set="method"><f a="ev">
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Regex.Adapter"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Regex" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Regex" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CacheSize public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CacheSize>
		<CompileToAssembly public="1" set="method" static="1">
			<f a="regexes:aname">
				<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
				<c path="cs.system.reflection.AssemblyName"/>
				<x path="Void"/>
			</f>
			<overloads>
				<CompileToAssembly public="1" set="method"><f a="regexes:aname:attribs:resourceFile">
	<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></CompileToAssembly>
				<CompileToAssembly public="1" set="method"><f a="regexes:aname:attribs">
	<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
	<c path="cs.system.reflection.AssemblyName"/>
	<c path="cs.NativeArray"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
	<x path="Void"/>
</f></CompileToAssembly>
			</overloads>
		</CompileToAssembly>
		<Escape public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></Escape>
		<Unescape public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></Unescape>
		<IsMatch public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><IsMatch public="1" set="method"><f a="input:pattern:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<x path="Bool"/>
</f></IsMatch></overloads>
		</IsMatch>
		<_IsMatch public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"IsMatch"</e></m></meta>
			<overloads><IsMatch public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":native"><e>"IsMatch"</e></m></meta>
</IsMatch></overloads>
		</_IsMatch>
		<Match public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<overloads><Match public="1" set="method"><f a="input:pattern:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="cs.system.text.regularexpressions.Match"/>
</f></Match></overloads>
		</Match>
		<_Match public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":native"><e>"Match"</e></m></meta>
			<overloads><Match public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.Match"/>
	</f>
	<meta><m n=":native"><e>"Match"</e></m></meta>
</Match></overloads>
		</_Match>
		<Matches public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<overloads><Matches public="1" set="method"><f a="input:pattern:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="cs.system.text.regularexpressions.MatchCollection"/>
</f></Matches></overloads>
		</Matches>
		<_Matches public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<meta><m n=":native"><e>"Matches"</e></m></meta>
			<overloads><Matches public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.MatchCollection"/>
	</f>
	<meta><m n=":native"><e>"Matches"</e></m></meta>
</Matches></overloads>
		</_Matches>
		<Replace public="1" set="method" static="1">
			<f a="input:pattern:evaluator">
				<c path="String"/>
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<overloads>
				<Replace public="1" set="method"><f a="input:pattern:replacement:options">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="String"/>
</f></Replace>
				<Replace public="1" set="method"><f a="input:pattern:replacement">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Replace>
				<Replace public="1" set="method"><f a="input:pattern:evaluator:options">
	<c path="String"/>
	<c path="String"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="String"/>
</f></Replace>
			</overloads>
		</Replace>
		<_Replace public="1" set="method" static="1">
			<f a="input:pattern:evaluator">
				<c path="String"/>
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"Replace"</e></m></meta>
			<overloads>
				<Replace public="1" set="method">
					<f a="input:pattern:replacement:options">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"Replace"</e></m></meta>
				</Replace>
				<Replace public="1" set="method">
					<f a="input:pattern:replacement">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"Replace"</e></m></meta>
				</Replace>
				<Replace public="1" set="method">
					<f a="input:pattern:evaluator:options">
						<c path="String"/>
						<c path="String"/>
						<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta><m n=":native"><e>"Replace"</e></m></meta>
				</Replace>
			</overloads>
		</_Replace>
		<Split public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads><Split public="1" set="method"><f a="input:pattern:options">
	<c path="String"/>
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split></overloads>
		</Split>
		<_Split public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":native"><e>"Split"</e></m></meta>
			<overloads><Split public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":native"><e>"Split"</e></m></meta>
</Split></overloads>
		</_Split>
		<get_CacheSize public="1" set="method" static="1"><f a=""><x path="Int"/></f></get_CacheSize>
		<set_CacheSize public="1" set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_CacheSize>
		<RightToLeft public="1" get="accessor" set="null"><x path="Bool"/></RightToLeft>
		<Options public="1" get="accessor" set="null"><e path="cs.system.text.regularexpressions.RegexOptions"/></Options>
		<capslist><c path="cs.NativeArray"><c path="String"/></c></capslist>
		<capsize><x path="Int"/></capsize>
		<factory><c path="cs.system.text.regularexpressions.RegexRunnerFactory"/></factory>
		<caps><c path="cs.system.collections.Hashtable"/></caps>
		<capnames><c path="cs.system.collections.Hashtable"/></capnames>
		<roptions><e path="cs.system.text.regularexpressions.RegexOptions"/></roptions>
		<pattern><c path="String"/></pattern>
		<get_Options final="1" public="1" set="method"><f a=""><e path="cs.system.text.regularexpressions.RegexOptions"/></f></get_Options>
		<get_RightToLeft final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_RightToLeft>
		<GetGroupNames final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><c path="String"/></c></f></GetGroupNames>
		<GetGroupNumbers final="1" public="1" set="method"><f a=""><c path="cs.NativeArray"><x path="Int"/></c></f></GetGroupNumbers>
		<GroupNameFromNumber final="1" public="1" set="method"><f a="i">
	<x path="Int"/>
	<c path="String"/>
</f></GroupNameFromNumber>
		<GroupNumberFromName final="1" public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Int"/>
</f></GroupNumberFromName>
		<IsMatch final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><IsMatch final="1" public="1" set="method"><f a="input:startat">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></IsMatch></overloads>
		</IsMatch>
		<Match final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<overloads>
				<Match final="1" public="1" set="method"><f a="input:startat:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.system.text.regularexpressions.Match"/>
</f></Match>
				<Match final="1" public="1" set="method"><f a="input:startat">
	<c path="String"/>
	<x path="Int"/>
	<c path="cs.system.text.regularexpressions.Match"/>
</f></Match>
			</overloads>
		</Match>
		<Matches final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<overloads><Matches final="1" public="1" set="method"><f a="input:startat">
	<c path="String"/>
	<x path="Int"/>
	<c path="cs.system.text.regularexpressions.MatchCollection"/>
</f></Matches></overloads>
		</Matches>
		<Replace final="1" public="1" set="method">
			<f a="input:evaluator">
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<overloads>
				<Replace final="1" public="1" set="method"><f a="input:replacement:count:startat">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="input:replacement:count">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="input:replacement">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="input:evaluator:count:startat">
	<c path="String"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></Replace>
				<Replace final="1" public="1" set="method"><f a="input:evaluator:count">
	<c path="String"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="Int"/>
	<c path="String"/>
</f></Replace>
			</overloads>
		</Replace>
		<Split final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<overloads>
				<Split final="1" public="1" set="method"><f a="input:count:startat">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
				<Split final="1" public="1" set="method"><f a="input:count">
	<c path="String"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></Split>
			</overloads>
		</Split>
		<InitializeReferences final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</InitializeReferences>
		<UseOptionC final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</UseOptionC>
		<UseOptionR final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</UseOptionR>
		<ToString public="1" set="method"><f a=""><c path="String"/></f></ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":protected"/></meta>
				</new>
				<new final="1" public="1" set="method"><f a="pattern:options">
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="pattern">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Regex"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.RegexCompilationInfo" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexCompilationInfo" extern="1">
		<Pattern public="1" get="accessor" set="accessor"><c path="String"/></Pattern>
		<Options public="1" get="accessor" set="accessor"><e path="cs.system.text.regularexpressions.RegexOptions"/></Options>
		<Namespace public="1" get="accessor" set="accessor"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<IsPublic public="1" get="accessor" set="accessor"><x path="Bool"/></IsPublic>
		<get_IsPublic final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsPublic>
		<set_IsPublic final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_IsPublic>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<get_Namespace final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Namespace>
		<set_Namespace final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Namespace>
		<get_Options final="1" public="1" set="method"><f a=""><e path="cs.system.text.regularexpressions.RegexOptions"/></f></get_Options>
		<set_Options final="1" public="1" set="method"><f a="value">
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
</f></set_Options>
		<get_Pattern final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Pattern>
		<set_Pattern final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Pattern>
		<new final="1" public="1" set="method"><f a="pattern:options:name:fullnamespace:ispublic">
	<c path="String"/>
	<e path="cs.system.text.regularexpressions.RegexOptions"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexCompilationInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.text.regularexpressions.RegexOptions" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<Multiline><meta><m n=":csNative"><e>2</e></m></meta></Multiline>
		<ExplicitCapture><meta><m n=":csNative"><e>4</e></m></meta></ExplicitCapture>
		<Compiled><meta><m n=":csNative"><e>8</e></m></meta></Compiled>
		<Singleline><meta><m n=":csNative"><e>16</e></m></meta></Singleline>
		<IgnorePatternWhitespace><meta><m n=":csNative"><e>32</e></m></meta></IgnorePatternWhitespace>
		<RightToLeft><meta><m n=":csNative"><e>64</e></m></meta></RightToLeft>
		<ECMAScript><meta><m n=":csNative"><e>256</e></m></meta></ECMAScript>
		<CultureInvariant><meta><m n=":csNative"><e>512</e></m></meta></CultureInvariant>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.regularexpressions.RegexRunner" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexRunner" extern="1" abstract="1">
		<CharInClass set="method" static="1">
			<f a="ch:charClass">
				<t path="cs.types.Char16"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CharInClass>
		<CharInSet set="method" static="1">
			<f a="ch:set:category">
				<t path="cs.types.Char16"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</CharInSet>
		<runtrackpos><x path="Int"/></runtrackpos>
		<runtrackcount><x path="Int"/></runtrackcount>
		<runtrack><c path="cs.NativeArray"><x path="Int"/></c></runtrack>
		<runtextstart><x path="Int"/></runtextstart>
		<runtextpos><x path="Int"/></runtextpos>
		<runtextend><x path="Int"/></runtextend>
		<runtextbeg><x path="Int"/></runtextbeg>
		<runtext><c path="String"/></runtext>
		<runstackpos><x path="Int"/></runstackpos>
		<runstack><c path="cs.NativeArray"><x path="Int"/></c></runstack>
		<runregex><c path="cs.system.text.regularexpressions.Regex"/></runregex>
		<runmatch><c path="cs.system.text.regularexpressions.Match"/></runmatch>
		<runcrawlpos><x path="Int"/></runcrawlpos>
		<runcrawl><c path="cs.NativeArray"><x path="Int"/></c></runcrawl>
		<FindFirstChar abstract="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</FindFirstChar>
		<Go abstract="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</Go>
		<InitTrackCount abstract="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</InitTrackCount>
		<Capture final="1" set="method">
			<f a="capnum:start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Capture>
		<Crawl final="1" set="method">
			<f a="i">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Crawl>
		<Crawlpos final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":protected"/></meta>
		</Crawlpos>
		<DoubleCrawl final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</DoubleCrawl>
		<DoubleStack final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</DoubleStack>
		<DoubleTrack final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</DoubleTrack>
		<EnsureStorage final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</EnsureStorage>
		<IsBoundary final="1" set="method">
			<f a="index:startpos:endpos">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsBoundary>
		<IsECMABoundary final="1" set="method">
			<f a="index:startpos:endpos">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsECMABoundary>
		<IsMatched final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":protected"/></meta>
		</IsMatched>
		<MatchIndex final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":protected"/></meta>
		</MatchIndex>
		<MatchLength final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":protected"/></meta>
		</MatchLength>
		<Popcrawl final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":protected"/></meta>
		</Popcrawl>
		<TransferCapture final="1" set="method">
			<f a="capnum:uncapnum:start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</TransferCapture>
		<Uncapture final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</Uncapture>
		<Scan final="1" set="method">
			<f a="regex:text:textbeg:textend:textstart:prevlen:quick">
				<c path="cs.system.text.regularexpressions.Regex"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":protected"/></meta>
		</Scan>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexRunner"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.RegexRunnerFactory" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexRunnerFactory" extern="1" abstract="1">
		<CreateInstance abstract="1" set="method">
			<f a=""><c path="cs.system.text.regularexpressions.RegexRunner"/></f>
			<meta><m n=":protected"/></meta>
		</CreateInstance>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexRunnerFactory"</e></m>
		</meta>
	</class>
	<enum path="cs.system.threading.ApartmentState" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ApartmentState">
		<STA><meta><m n=":csNative"><e>0</e></m></meta></STA>
		<MTA><meta><m n=":csNative"><e>1</e></m></meta></MTA>
		<Unknown><meta><m n=":csNative"><e>2</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ApartmentState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.AsyncFlowControl" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.AsyncFlowControl" extern="1" final="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IDisposable"/>
		<op_Equality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.threading.AsyncFlowControl"/>
	<c path="cs.system.threading.AsyncFlowControl"/>
	<x path="Bool"/>
</f></op_Equality>
		<op_Inequality public="1" set="method" static="1"><f a="a:b">
	<c path="cs.system.threading.AsyncFlowControl"/>
	<c path="cs.system.threading.AsyncFlowControl"/>
	<x path="Bool"/>
</f></op_Inequality>
		<Undo final="1" public="1" set="method"><f a=""><x path="Void"/></f></Undo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.AsyncFlowControl"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.CompressedStack" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.CompressedStack" extern="1" final="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Capture public="1" set="method" static="1"><f a=""><c path="cs.system.threading.CompressedStack"/></f></Capture>
		<GetCompressedStack public="1" set="method" static="1"><f a=""><c path="cs.system.threading.CompressedStack"/></f></GetCompressedStack>
		<Run public="1" set="method" static="1"><f a="compressedStack:callback:state">
	<c path="cs.system.threading.CompressedStack"/>
	<x path="cs.system.threading.ContextCallback"/>
	<d/>
	<x path="Void"/>
</f></Run>
		<CreateCopy final="1" public="1" set="method"><f a=""><c path="cs.system.threading.CompressedStack"/></f></CreateCopy>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.CompressedStack"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.Delegate_ContextCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" module="cs.system.threading.ContextCallback" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="state">
	<d/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="state:callback:object">
	<d/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ContextCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ContextCallback" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback">
		<from><icast field="FromHaxeFunction"><f a="">
	<d/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.threading.Delegate_ContextCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ContextCallback.ContextCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" private="1" module="cs.system.threading.ContextCallback" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.threading._ContextCallback.ContextCallback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" private="1" module="cs.system.threading.ContextCallback" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.threading.EventResetMode" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.EventResetMode">
		<AutoReset><meta><m n=":csNative"><e>0</e></m></meta></AutoReset>
		<ManualReset><meta><m n=":csNative"><e>1</e></m></meta></ManualReset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.EventResetMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.EventWaitHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.EventWaitHandle" extern="1">
		<extends path="cs.system.threading.WaitHandle"/>
		<OpenExisting public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.threading.EventWaitHandle"/>
			</f>
			<overloads><OpenExisting public="1" set="method"><f a="name:rights">
	<c path="String"/>
	<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
	<c path="cs.system.threading.EventWaitHandle"/>
</f></OpenExisting></overloads>
		</OpenExisting>
		<GetAccessControl final="1" public="1" set="method"><f a=""><c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/></f></GetAccessControl>
		<Reset final="1" public="1" set="method"><f a=""><x path="Bool"/></f></Reset>
		<Set final="1" public="1" set="method"><f a=""><x path="Bool"/></f></Set>
		<SetAccessControl final="1" public="1" set="method"><f a="eventSecurity">
	<c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/>
	<x path="Void"/>
</f></SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="initialState:mode">
				<x path="Bool"/>
				<e path="cs.system.threading.EventResetMode"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="initialState:mode:name:createdNew:eventSecurity">
	<x path="Bool"/>
	<e path="cs.system.threading.EventResetMode"/>
	<c path="String"/>
	<t path="cs.Out"><x path="Bool"/></t>
	<c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="initialState:mode:name:createdNew">
	<x path="Bool"/>
	<e path="cs.system.threading.EventResetMode"/>
	<c path="String"/>
	<t path="cs.Out"><x path="Bool"/></t>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="initialState:mode:name">
	<x path="Bool"/>
	<e path="cs.system.threading.EventResetMode"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.EventWaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.ExecutionContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ExecutionContext" extern="1" final="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Capture public="1" set="method" static="1"><f a=""><c path="cs.system.threading.ExecutionContext"/></f></Capture>
		<IsFlowSuppressed public="1" set="method" static="1"><f a=""><x path="Bool"/></f></IsFlowSuppressed>
		<RestoreFlow public="1" set="method" static="1"><f a=""><x path="Void"/></f></RestoreFlow>
		<Run public="1" set="method" static="1"><f a="executionContext:callback:state">
	<c path="cs.system.threading.ExecutionContext"/>
	<x path="cs.system.threading.ContextCallback"/>
	<d/>
	<x path="Void"/>
</f></Run>
		<SuppressFlow public="1" set="method" static="1"><f a=""><c path="cs.system.threading.AsyncFlowControl"/></f></SuppressFlow>
		<CreateCopy final="1" public="1" set="method"><f a=""><c path="cs.system.threading.ExecutionContext"/></f></CreateCopy>
		<GetObjectData final="1" public="1" set="method"><f a="info:context">
	<c path="cs.system.runtime.serialization.SerializationInfo"/>
	<c path="cs.system.runtime.serialization.StreamingContext"/>
	<x path="Void"/>
</f></GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ExecutionContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.HostExecutionContext" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.HostExecutionContext" extern="1">
		<State get="null" set="null"><d/></State>
		<CreateCopy public="1" set="method"><f a=""><c path="cs.system.threading.HostExecutionContext"/></f></CreateCopy>
		<get_State final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":protected"/></meta>
		</get_State>
		<set_State final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":protected"/></meta>
		</set_State>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new final="1" public="1" set="method"><f a="state">
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.HostExecutionContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.HostExecutionContextManager" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.HostExecutionContextManager" extern="1">
		<Capture public="1" set="method"><f a=""><c path="cs.system.threading.HostExecutionContext"/></f></Capture>
		<Revert public="1" set="method"><f a="previousState">
	<d/>
	<x path="Void"/>
</f></Revert>
		<SetHostExecutionContext public="1" set="method"><f a="hostExecutionContext">
	<c path="cs.system.threading.HostExecutionContext"/>
	<d/>
</f></SetHostExecutionContext>
		<new final="1" public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.HostExecutionContextManager"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.ManualResetEvent" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ManualResetEvent" extern="1" final="1">
		<extends path="cs.system.threading.EventWaitHandle"/>
		<new final="1" public="1" set="method"><f a="initialState">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ManualResetEvent"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.Delegate_ParameterizedThreadStart" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" module="cs.system.threading.ParameterizedThreadStart" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a="obj">
	<d/>
	<x path="Void"/>
</f></Invoke>
		<BeginInvoke public="1" set="method"><f a="obj:callback:object">
	<d/>
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ParameterizedThreadStart"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ParameterizedThreadStart" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart">
		<from><icast field="FromHaxeFunction"><f a="">
	<d/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.threading.Delegate_ParameterizedThreadStart"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ParameterizedThreadStart.ParameterizedThreadStart_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" private="1" module="cs.system.threading.ParameterizedThreadStart" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.threading._ParameterizedThreadStart.ParameterizedThreadStart_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" private="1" module="cs.system.threading.ParameterizedThreadStart" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<class path="cs.system.threading.Thread" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.Thread" extern="1" final="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.runtime.interopservices._Thread"/>
		<CurrentThread public="1" get="accessor" set="null" static="1"><c path="cs.system.threading.Thread"/></CurrentThread>
		<CurrentPrincipal public="1" get="accessor" set="accessor" static="1"><c path="cs.system.security.principal.IPrincipal"/></CurrentPrincipal>
		<CurrentContext public="1" get="accessor" set="null" static="1"><c path="cs.system.runtime.remoting.contexts.Context"/></CurrentContext>
		<get_CurrentContext public="1" set="method" static="1"><f a=""><c path="cs.system.runtime.remoting.contexts.Context"/></f></get_CurrentContext>
		<get_CurrentPrincipal public="1" set="method" static="1"><f a=""><c path="cs.system.security.principal.IPrincipal"/></f></get_CurrentPrincipal>
		<set_CurrentPrincipal public="1" set="method" static="1"><f a="value">
	<c path="cs.system.security.principal.IPrincipal"/>
	<c path="cs.system.security.principal.IPrincipal"/>
</f></set_CurrentPrincipal>
		<get_CurrentThread public="1" set="method" static="1"><f a=""><c path="cs.system.threading.Thread"/></f></get_CurrentThread>
		<AllocateNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.LocalDataStoreSlot"/>
</f></AllocateNamedDataSlot>
		<FreeNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></FreeNamedDataSlot>
		<AllocateDataSlot public="1" set="method" static="1"><f a=""><c path="cs.system.LocalDataStoreSlot"/></f></AllocateDataSlot>
		<GetData public="1" set="method" static="1"><f a="slot">
	<c path="cs.system.LocalDataStoreSlot"/>
	<d/>
</f></GetData>
		<SetData public="1" set="method" static="1"><f a="slot:data">
	<c path="cs.system.LocalDataStoreSlot"/>
	<d/>
	<x path="Void"/>
</f></SetData>
		<GetNamedDataSlot public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="cs.system.LocalDataStoreSlot"/>
</f></GetNamedDataSlot>
		<GetDomain public="1" set="method" static="1"><f a=""><c path="cs.system.AppDomain"/></f></GetDomain>
		<GetDomainID public="1" set="method" static="1"><f a=""><x path="Int"/></f></GetDomainID>
		<ResetAbort public="1" set="method" static="1"><f a=""><x path="Void"/></f></ResetAbort>
		<Sleep public="1" set="method" static="1">
			<f a="millisecondsTimeout">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><Sleep public="1" set="method"><f a="timeout">
	<c path="cs.system.TimeSpan"/>
	<x path="Void"/>
</f></Sleep></overloads>
		</Sleep>
		<MemoryBarrier public="1" set="method" static="1"><f a=""><x path="Void"/></f></MemoryBarrier>
		<SpinWait public="1" set="method" static="1"><f a="iterations">
	<x path="Int"/>
	<x path="Void"/>
</f></SpinWait>
		<VolatileRead public="1" set="method" static="1">
			<f a="address">
				<t path="cs.Ref"><t path="cs.types.UInt8"/></t>
				<t path="cs.types.UInt8"/>
			</f>
			<overloads>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><c path="cs.system.UIntPtr"/></t>
	<c path="cs.system.UIntPtr"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><t path="cs.types.UInt64"/></t>
	<t path="cs.types.UInt64"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><x path="UInt"/></t>
	<x path="UInt"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><t path="cs.types.UInt16"/></t>
	<t path="cs.types.UInt16"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><x path="Single"/></t>
	<x path="Single"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><t path="cs.types.Int8"/></t>
	<t path="cs.types.Int8"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><d/></t>
	<d/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><c path="cs.system.IntPtr"/></t>
	<c path="cs.system.IntPtr"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><x path="haxe.Int64"/></t>
	<x path="haxe.Int64"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><x path="Int"/></t>
	<x path="Int"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><t path="cs.types.Int16"/></t>
	<t path="cs.types.Int16"/>
</f></VolatileRead>
				<VolatileRead public="1" set="method"><f a="address">
	<t path="cs.Ref"><x path="Float"/></t>
	<x path="Float"/>
</f></VolatileRead>
			</overloads>
		</VolatileRead>
		<VolatileWrite public="1" set="method" static="1">
			<f a="address:value">
				<t path="cs.Ref"><t path="cs.types.UInt8"/></t>
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<overloads>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><c path="cs.system.UIntPtr"/></t>
	<c path="cs.system.UIntPtr"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><t path="cs.types.UInt64"/></t>
	<t path="cs.types.UInt64"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><x path="UInt"/></t>
	<x path="UInt"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><t path="cs.types.UInt16"/></t>
	<t path="cs.types.UInt16"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><x path="Single"/></t>
	<x path="Single"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><t path="cs.types.Int8"/></t>
	<t path="cs.types.Int8"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><d/></t>
	<d/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><c path="cs.system.IntPtr"/></t>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><x path="haxe.Int64"/></t>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><x path="Int"/></t>
	<x path="Int"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><t path="cs.types.Int16"/></t>
	<t path="cs.types.Int16"/>
	<x path="Void"/>
</f></VolatileWrite>
				<VolatileWrite public="1" set="method"><f a="address:value">
	<t path="cs.Ref"><x path="Float"/></t>
	<x path="Float"/>
	<x path="Void"/>
</f></VolatileWrite>
			</overloads>
		</VolatileWrite>
		<BeginCriticalRegion public="1" set="method" static="1"><f a=""><x path="Void"/></f></BeginCriticalRegion>
		<EndCriticalRegion public="1" set="method" static="1"><f a=""><x path="Void"/></f></EndCriticalRegion>
		<BeginThreadAffinity public="1" set="method" static="1"><f a=""><x path="Void"/></f></BeginThreadAffinity>
		<EndThreadAffinity public="1" set="method" static="1"><f a=""><x path="Void"/></f></EndThreadAffinity>
		<ManagedThreadId public="1" get="accessor" set="null"><x path="Int"/></ManagedThreadId>
		<ExecutionContext public="1" get="accessor" set="null"><c path="cs.system.threading.ExecutionContext"/></ExecutionContext>
		<ThreadState public="1" get="accessor" set="null"><e path="cs.system.threading.ThreadState"/></ThreadState>
		<Priority public="1" get="accessor" set="accessor"><e path="cs.system.threading.ThreadPriority"/></Priority>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<IsBackground public="1" get="accessor" set="accessor"><x path="Bool"/></IsBackground>
		<IsAlive public="1" get="accessor" set="null"><x path="Bool"/></IsAlive>
		<IsThreadPoolThread public="1" get="accessor" set="null"><x path="Bool"/></IsThreadPoolThread>
		<CurrentUICulture public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CurrentUICulture>
		<CurrentCulture public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CurrentCulture>
		<ApartmentState public="1" get="accessor" set="accessor"><e path="cs.system.threading.ApartmentState"/></ApartmentState>
		<get_ApartmentState final="1" public="1" set="method"><f a=""><e path="cs.system.threading.ApartmentState"/></f></get_ApartmentState>
		<set_ApartmentState final="1" public="1" set="method"><f a="value">
	<e path="cs.system.threading.ApartmentState"/>
	<e path="cs.system.threading.ApartmentState"/>
</f></set_ApartmentState>
		<get_CurrentCulture final="1" public="1" set="method"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_CurrentCulture>
		<set_CurrentCulture final="1" public="1" set="method"><f a="value">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></set_CurrentCulture>
		<get_CurrentUICulture final="1" public="1" set="method"><f a=""><c path="cs.system.globalization.CultureInfo"/></f></get_CurrentUICulture>
		<set_CurrentUICulture final="1" public="1" set="method"><f a="value">
	<c path="cs.system.globalization.CultureInfo"/>
	<c path="cs.system.globalization.CultureInfo"/>
</f></set_CurrentUICulture>
		<get_IsThreadPoolThread final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsThreadPoolThread>
		<get_IsAlive final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsAlive>
		<get_IsBackground final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get_IsBackground>
		<set_IsBackground final="1" public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_IsBackground>
		<get_Name final="1" public="1" set="method"><f a=""><c path="String"/></f></get_Name>
		<set_Name final="1" public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<get_Priority final="1" public="1" set="method"><f a=""><e path="cs.system.threading.ThreadPriority"/></f></get_Priority>
		<set_Priority final="1" public="1" set="method"><f a="value">
	<e path="cs.system.threading.ThreadPriority"/>
	<e path="cs.system.threading.ThreadPriority"/>
</f></set_Priority>
		<get_ThreadState final="1" public="1" set="method"><f a=""><e path="cs.system.threading.ThreadState"/></f></get_ThreadState>
		<Abort final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Abort final="1" public="1" set="method"><f a="stateInfo">
	<d/>
	<x path="Void"/>
</f></Abort></overloads>
		</Abort>
		<Interrupt final="1" public="1" set="method"><f a=""><x path="Void"/></f></Interrupt>
		<Join final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<Join final="1" public="1" set="method"><f a="timeout">
	<c path="cs.system.TimeSpan"/>
	<x path="Bool"/>
</f></Join>
				<Join final="1" public="1" set="method"><f a="millisecondsTimeout">
	<x path="Int"/>
	<x path="Bool"/>
</f></Join>
			</overloads>
		</Join>
		<Resume final="1" public="1" set="method"><f a=""><x path="Void"/></f></Resume>
		<Start final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><Start final="1" public="1" set="method"><f a="parameter">
	<d/>
	<x path="Void"/>
</f></Start></overloads>
		</Start>
		<Suspend final="1" public="1" set="method"><f a=""><x path="Void"/></f></Suspend>
		<get_ExecutionContext final="1" public="1" set="method"><f a=""><c path="cs.system.threading.ExecutionContext"/></f></get_ExecutionContext>
		<get_ManagedThreadId final="1" public="1" set="method"><f a=""><x path="Int"/></f></get_ManagedThreadId>
		<GetApartmentState final="1" public="1" set="method"><f a=""><e path="cs.system.threading.ApartmentState"/></f></GetApartmentState>
		<SetApartmentState final="1" public="1" set="method"><f a="state">
	<e path="cs.system.threading.ApartmentState"/>
	<x path="Void"/>
</f></SetApartmentState>
		<TrySetApartmentState final="1" public="1" set="method"><f a="state">
	<e path="cs.system.threading.ApartmentState"/>
	<x path="Bool"/>
</f></TrySetApartmentState>
		<GetCompressedStack final="1" public="1" set="method"><f a=""><c path="cs.system.threading.CompressedStack"/></f></GetCompressedStack>
		<SetCompressedStack final="1" public="1" set="method"><f a="stack">
	<c path="cs.system.threading.CompressedStack"/>
	<x path="Void"/>
</f></SetCompressedStack>
		<new final="1" public="1" set="method">
			<f a="start">
				<x path="cs.system.threading.ThreadStart"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new final="1" public="1" set="method"><f a="start:maxStackSize">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="start">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="Void"/>
</f></new>
				<new final="1" public="1" set="method"><f a="start:maxStackSize">
	<x path="cs.system.threading.ThreadStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.Thread"</e></m>
		</meta>
	</class>
	<enum path="cs.system.threading.ThreadPriority" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadPriority">
		<Lowest><meta><m n=":csNative"><e>0</e></m></meta></Lowest>
		<BelowNormal><meta><m n=":csNative"><e>1</e></m></meta></BelowNormal>
		<Normal><meta><m n=":csNative"><e>2</e></m></meta></Normal>
		<AboveNormal><meta><m n=":csNative"><e>3</e></m></meta></AboveNormal>
		<Highest><meta><m n=":csNative"><e>4</e></m></meta></Highest>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ThreadPriority"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.Delegate_ThreadStart" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" module="cs.system.threading.ThreadStart" extern="1" final="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
</f></op_Subtraction>
		<Invoke public="1" set="method"><f a=""><x path="Void"/></f></Invoke>
		<BeginInvoke public="1" set="method"><f a="callback:object">
	<x path="cs.system.AsyncCallback"/>
	<d/>
	<c path="cs.system.IAsyncResult"/>
</f></BeginInvoke>
		<EndInvoke public="1" set="method"><f a="result">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></EndInvoke>
		<new final="1" public="1" set="method"><f a="object:method">
	<d/>
	<c path="cs.system.IntPtr"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ThreadStart"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ThreadStart" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.threading.Delegate_ThreadStart"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ThreadStart.ThreadStart_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" private="1" module="cs.system.threading.ThreadStart" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class></impl>
	</abstract>
	<class path="cs.system.threading._ThreadStart.ThreadStart_Impl_" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" private="1" module="cs.system.threading.ThreadStart" extern="1" final="1"><meta><m n=":nativeGen"/></meta></class>
	<enum path="cs.system.threading.ThreadState" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadState">
		<Running><meta><m n=":csNative"><e>0</e></m></meta></Running>
		<StopRequested><meta><m n=":csNative"><e>1</e></m></meta></StopRequested>
		<SuspendRequested><meta><m n=":csNative"><e>2</e></m></meta></SuspendRequested>
		<Background><meta><m n=":csNative"><e>4</e></m></meta></Background>
		<Unstarted><meta><m n=":csNative"><e>8</e></m></meta></Unstarted>
		<Stopped><meta><m n=":csNative"><e>16</e></m></meta></Stopped>
		<WaitSleepJoin><meta><m n=":csNative"><e>32</e></m></meta></WaitSleepJoin>
		<Suspended><meta><m n=":csNative"><e>64</e></m></meta></Suspended>
		<AbortRequested><meta><m n=":csNative"><e>128</e></m></meta></AbortRequested>
		<Aborted><meta><m n=":csNative"><e>256</e></m></meta></Aborted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ThreadState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<typedef path="cs.types.Char16" params="" file="C:\HaxeToolkit\haxe\std/cs/types/Char16.hx">
		<x path="cs.Char16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.Int16" params="" file="C:\HaxeToolkit\haxe\std/cs/types/Int16.hx">
		<x path="cs.Int16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.Int8" params="" file="C:\HaxeToolkit\haxe\std/cs/types/Int8.hx">
		<x path="cs.Int8"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt16" params="" file="C:\HaxeToolkit\haxe\std/cs/types/UInt16.hx">
		<x path="cs.UInt16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt64" params="" file="C:\HaxeToolkit\haxe\std/cs/types/UInt64.hx">
		<x path="cs.UInt64"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt8" params="" file="C:\HaxeToolkit\haxe\std/cs/types/UInt8.hx">
		<x path="cs.UInt8"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.StackItem" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</enum>
	<abstract path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of this stack.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="63" static="1">
		<f a="?fullStack" v="false">
			<x path="Bool"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="71" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="84" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<copy public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Make a copy of the stack.</haxe_doc>
	</copy>
	<get public="1" get="inline" set="null" line="111" static="1">
		<f a="this:index">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
			<e path="haxe.StackItem"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
	<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
	<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":hxGen"/>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of this stack.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="63" static="1">
			<f a="?fullStack" v="false">
				<x path="Bool"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="71" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="84" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<copy public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Make a copy of the stack.</haxe_doc>
		</copy>
		<get public="1" get="inline" set="null" line="111" static="1">
			<f a="this:index">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<e path="haxe.StackItem"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
		<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
		<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.NotVoid" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.NotVoid_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"><meta><m n=":hxGen"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<Data final="1">
			<c path="cs.system.collections.IDictionary"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Data>
		<HelpLink>
			<c path="String"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</HelpLink>
		<InnerException final="1">
			<c path="cs.system.Exception"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</InnerException>
		<Message final="1">
			<c path="String"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Message>
		<Source>
			<c path="String"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Source>
		<StackTrace final="1">
			<c path="String"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</StackTrace>
		<TargetSite final="1">
			<c path="cs.system.reflection.MethodBase"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</TargetSite>
		<GetBaseException set="method">
			<f a=""><c path="cs.system.Exception"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetBaseException>
		<GetObjectData set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetObjectData>
		<GetType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</GetType>
		<ToString set="method">
			<f a=""><c path="cs.system.String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</ToString>
		<new set="method">
			<f a="message:innerException">
				<c path="String"/>
				<c path="haxe._Exception.NativeException"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":nativeGen"/>
			<m n=":noCompletion"/>
			<m n=":native"><e>"System.Exception"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught public="1" set="method" line="20" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown public="1" set="method" line="30" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionStack>
			<x path="Null"><x path="haxe.CallStack"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionStack>
		<__nativeStack>
			<c path="cs.system.diagnostics.StackTrace"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__ownStack>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__ownStack>
		<__skipStack expr="0" line="16">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<t path="cs.system._Exception.CsException"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap public="1" set="method" line="62"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method" line="70">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<__shiftStack get="inline" set="null" line="76">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__shiftStack>
		<get_message set="method" line="80"><f a=""><c path="String"/></f></get_message>
		<get_previous set="method" line="84"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<get_native final="1" set="method" line="88"><f a=""><x path="Any"/></f></get_native>
		<get_stack set="method" line="92"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<new public="1" set="method" line="42">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<negate get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<preIncrement get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="37" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add get="inline" set="null" line="53" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="56" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="64" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<negate get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<preIncrement get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="37" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add get="inline" set="null" line="53" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="56" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<x path="cs.Int64"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.Int64" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
	<make public="1" get="inline" set="null" line="35" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<_new get="inline" set="null" line="37" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<val get="accessor" set="accessor" static="1"><t path="haxe._Int64.__Int64"/></val>
	<get_val get="inline" set="null" line="43" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></get_val>
	<set_val get="inline" set="null" line="46" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></set_val>
	<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
	<get_high get="inline" set="null" line="51" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
	<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
	<get_low get="inline" set="null" line="56" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
	<copy public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<ofInt public="1" get="inline" set="null" line="62" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="64" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="72" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<getHigh public="1" get="inline" set="null" line="78" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="81" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="84" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="87" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="89" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="97" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="104" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<divMod public="1" get="inline" set="null" line="107" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<toString get="inline" set="null" line="110" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
	<parseString public="1" set="method" line="112" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="116" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<neg public="1" set="method" line="121" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="124" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="127" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="133" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="145" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="151" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="154" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="157" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="163" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="166" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="175" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="178" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="187" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="190" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="199" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="202" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="211" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="214" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="220" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="223" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" get="inline" set="null" line="226" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="232" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="235" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="238" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<meta>
		<m n=":hxGen"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
		<make public="1" get="inline" set="null" line="35" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<_new get="inline" set="null" line="37" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<val get="accessor" set="accessor" static="1"><t path="haxe._Int64.__Int64"/></val>
		<get_val get="inline" set="null" line="43" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></get_val>
		<set_val get="inline" set="null" line="46" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></set_val>
		<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
		<get_high get="inline" set="null" line="51" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
		<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
		<get_low get="inline" set="null" line="56" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
		<copy public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<ofInt public="1" get="inline" set="null" line="62" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="64" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="72" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<getHigh public="1" get="inline" set="null" line="78" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="81" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="84" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="87" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="89" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="97" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="104" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<divMod public="1" get="inline" set="null" line="107" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<toString get="inline" set="null" line="110" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
		<parseString public="1" set="method" line="112" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="116" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<neg public="1" set="method" line="121" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="124" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="127" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="133" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="145" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="151" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="154" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="157" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="163" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="166" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="175" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="178" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="187" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="190" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="199" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="202" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="211" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="214" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="220" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="223" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" get="inline" set="null" line="226" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="232" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="235" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="238" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Int64Helper" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Json" params="" file="C:\HaxeToolkit\haxe\std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/NativeStackTrace.hx">
		<exception static="1">
			<x path="Null"><c path="cs.system.Exception"/></x>
			<meta><m n=":meta"><e>System.ThreadStaticAttribute</e></m></meta>
		</exception>
		<saveStack public="1" get="inline" set="null" line="16" static="1">
			<f a="e">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" get="inline" set="null" line="20" static="1"><f a=""><c path="cs.system.diagnostics.StackTrace"/></f></callStack>
		<exceptionStack public="1" set="method" line="24" static="1"><f a=""><x path="Null"><c path="cs.system.diagnostics.StackTrace"/></x></f></exceptionStack>
		<toHaxe public="1" set="method" line="31" static="1">
			<f a="native:?skip" v=":0">
				<x path="Null"><c path="cs.system.diagnostics.StackTrace"/></x>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Rest.hx" private="1" module="haxe.Rest">
		<c path="cs.NativeArray"><c path="haxe._Rest.NativeRest.T"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.Rest" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<meta>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
		</meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="14" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
	<of public="1" params="T" get="inline" set="null" line="17" static="1">
		<f a="array">
			<c path="Array"><c path="of.T"/></c>
			<x path="haxe.Rest"><c path="of.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
	</of>
	<_new get="inline" set="null" line="19" static="1">
		<f a="a">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="23" static="1">
		<f a="this:index">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="Int"/>
			<c path="haxe.Rest.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<toArray public="1" set="method" line="25" static="1">
		<f a="this">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="Array"><c path="haxe.Rest.T"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
	</toArray>
	<iterator public="1" get="inline" set="null" line="32" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
	<keyValueIterator public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
	<append public="1" set="method" line="37" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
	</append>
	<prepend public="1" set="method" line="44" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
	</prepend>
	<toString public="1" set="method" line="51" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
	<meta>
		<m n=":nativeGen"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="14" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
		<of public="1" params="T" get="inline" set="null" line="17" static="1">
			<f a="array">
				<c path="Array"><c path="of.T"/></c>
				<x path="haxe.Rest"><c path="of.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
		</of>
		<_new get="inline" set="null" line="19" static="1">
			<f a="a">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="23" static="1">
			<f a="this:index">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="Int"/>
				<c path="haxe.Rest.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<toArray public="1" set="method" line="25" static="1">
			<f a="this">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="Array"><c path="haxe.Rest.T"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
		</toArray>
		<iterator public="1" get="inline" set="null" line="32" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
		<append public="1" set="method" line="37" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
		</append>
		<prepend public="1" set="method" line="44" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
		</prepend>
		<toString public="1" set="method" line="51" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Serializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<serializeException public="1" set="method" line="559"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="515"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="518"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="512"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="67" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="72" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="74" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="470" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<fastLength get="inline" set="null" line="478" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></fastLength>
		<fastCharCodeAt get="inline" set="null" line="486" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastCharCodeAt>
		<fastCharAt get="inline" set="null" line="494" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastCharAt>
		<fastSubstr get="inline" set="null" line="502" static="1"><f a="s:pos:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastSubstr>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="126">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="138">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="142"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="150"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="175"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="190"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="205"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="237">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="101">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="532" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="525"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="528"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="522"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ValueException" params="" file="C:\HaxeToolkit\haxe\std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap public="1" set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="43"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="55"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="65" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="45" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="53" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="60" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="67" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.iterators.HashMapKeyValueIterator">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
		</f>
		<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
	</keyValueIterator>
	<clear public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="45" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="53" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="60" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="67" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.iterators.HashMapKeyValueIterator">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
			</f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<clear public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.7" line="35" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.7</e></m></meta>
		</HASH_UPPER>
		<assert get="inline" set="null" line="394" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<defaultK get="inline" set="null" line="402" static="1"><f a=""><x path="Int"/></f></defaultK>
		<arrayCopy get="inline" set="null" line="405" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<getInc get="inline" set="null" line="409" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<hash get="inline" set="null" line="413" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></hash>
		<getFlag get="inline" set="null" line="423" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></getFlag>
		<isDel get="inline" set="null" line="427" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDel>
		<isEmpty get="inline" set="null" line="431" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEmpty>
		<isEither get="inline" set="null" line="435" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEither>
		<setIsDelFalse get="inline" set="null" line="439" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelFalse>
		<setIsEmptyFalse get="inline" set="null" line="443" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsEmptyFalse>
		<setIsBothFalse get="inline" set="null" line="447" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsBothFalse>
		<setIsDelTrue get="inline" set="null" line="451" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelTrue>
		<roundUp get="inline" set="null" line="455" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<flagsSize get="inline" set="null" line="465" static="1"><f a="m">
	<x path="Int"/>
	<x path="Int"/>
</f></flagsSize>
		<flags><c path="cs.NativeArray"><x path="Int"/></c></flags>
		<_keys><c path="cs.NativeArray"><x path="Int"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.IntMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><x path="Int"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="57">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="117"><f a="key">
	<x path="Int"/>
	<x path="Int"/>
</f></lookup>
		<get public="1" set="method" line="146">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="166"><f a="key:def">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
	<c path="haxe.ds.IntMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="186">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="207">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<resize final="1" set="method" line="240"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<keys public="1" get="inline" set="null" line="346">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="350">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="354">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="358">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="365">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="380">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="51">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapKeyIterator" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap" final="1">
		<m><c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapKeyIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="482"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="492"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="476"><f a="m">
	<c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapKeyIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.IntMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapValueIterator" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap" final="1">
		<m><c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="515"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="525"><f a=""><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="509"><f a="m">
	<c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.IntMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds.List" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<set public="1" get="inline" set="null" line="76" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="102" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="111" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="118" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="127" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="154" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="161" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="165" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="170" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="174" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="178" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta><m n=":to"/></meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="182" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta><m n=":to"/></meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="186" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="190" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="194" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<set public="1" get="inline" set="null" line="76" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="102" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="111" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="118" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="127" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="154" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="161" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="165" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="170" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="174" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="178" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta><m n=":to"/></meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="182" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta><m n=":to"/></meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="186" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="190" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="194" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<hashes>
			<c path="cs.NativeArray"><t path="haxe.ds._ObjectMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="cs.NativeArray"><c path="haxe.ds.ObjectMap.K"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.ObjectMap.V"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="haxe.ds.ObjectMap.K"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="68">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="138"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="166"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<get public="1" set="method" line="271">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="292"><f a="key:def">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<c path="haxe.ds.ObjectMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="313">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="334">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="360">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="364">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="368">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="372">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="379">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="394">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapKeyIterator" params="T:V" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap" final="1">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="487"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="497"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/></f></next>
		<new public="1" set="method" line="481"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.ObjectMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapValueIterator" params="K:T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap" final="1">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="522"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="532"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="516"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.ObjectMap</e></m>
		</meta>
	</class>
	<typedef path="haxe.ds._ObjectMap.HashType" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<x path="Int"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward">
				<e>copy</e>
				<e>filter</e>
				<e>indexOf</e>
				<e>iterator</e>
				<e>keyValueIterator</e>
				<e>join</e>
				<e>lastIndexOf</e>
				<e>map</e>
				<e>slice</e>
				<e>contains</e>
				<e>toString</e>
			</m>
		</meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
	<get get="inline" set="null" line="44" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<concat public="1" get="inline" set="null" line="59" static="1">
		<f a="this:a">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
		</f>
		<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
	</concat>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
		<get get="inline" set="null" line="44" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<concat public="1" get="inline" set="null" line="59" static="1">
			<f a="this:a">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<hashes>
			<c path="cs.NativeArray"><t path="haxe.ds._StringMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="cs.NativeArray"><c path="String"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.StringMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="String"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="68">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="140"><f a="key">
	<c path="String"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="168"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<get public="1" set="method" line="273">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="292"><f a="key:def">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<c path="haxe.ds.StringMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="313">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="333">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="359">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="363">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="367">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="371">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="378">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="393">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._StringMap.HashType" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<x path="Int"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.ds._StringMap.StringMapKeyIterator" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap" final="1">
		<m><c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapKeyIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="485"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="495"><f a=""><c path="String"/></f></next>
		<new public="1" set="method" line="479"><f a="m">
	<c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapKeyIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.StringMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapValueIterator" params="T" file="C:\HaxeToolkit\haxe\std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap" final="1">
		<m><c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="518"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="528"><f a=""><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="512"><f a="m">
	<c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.StringMap</e></m>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<c path="cs.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="95" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="113" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="130" static="1"><f a="this">
	<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
	<x path="Int"/>
</f></get_length>
	<blit public="1" params="T" get="inline" set="null" line="151" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" set="method" line="192" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="221" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="231" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="244" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<sort public="1" get="inline" set="null" line="348" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a=":">
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="95" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="113" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="130" static="1"><f a="this">
	<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
	<x path="Int"/>
</f></get_length>
		<blit public="1" params="T" get="inline" set="null" line="151" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" set="method" line="192" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="221" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="231" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="244" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<sort public="1" get="inline" set="null" line="348" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a=":">
					<c path="haxe.ds.Vector.T"/>
					<c path="haxe.ds.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="45">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="50">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="57">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="85">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="92">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="106">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.exceptions.PosException" params="" file="C:\HaxeToolkit\haxe\std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="C:\HaxeToolkit\haxe\std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<typedef path="haxe.extern.Rest" params="T" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.format.JsonParser" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="312"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="316"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="321"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="196"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="656" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<ofHex public="1" set="method" line="673" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Converts the given hexadecimal `String` to `Bytes`. `s` must be a string of
		even length consisting only of hexadecimal digits. For example:
		`"0FDA14058916052309"`.</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="694" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads the `pos`-th byte of the given `b` bytes, in the most efficient way
		possible. Behavior when reading outside of the available data is
		unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="45">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the byte at index `pos`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="64">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given byte `v` at the given position `pos`.</haxe_doc>
		</set>
		<blit public="1" set="method" line="90">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="132">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="155">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<compare public="1" set="method" line="194">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `0` if the bytes of `this` instance and the bytes of `other` are
		identical.

		Returns a negative value if the `length` of `this` instance is less than
		the `length` of `other`, or a positive value if the `length` of `this`
		instance is greater than the `length` of `other`.

		In case of equal `length`s, returns a negative value if the first different
		value in `other` is greater than the corresponding value in `this`
		instance; otherwise returns a positive value.</haxe_doc>
		</compare>
		<getDouble public="1" set="method" line="246">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="269">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="292">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="319">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="340">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="352">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="365">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="383">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="391">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="406">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 64-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<readString public="1" get="inline" set="null" line="495">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="502">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="524">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a hexadecimal `String` representation of the bytes of `this`
		instance.</haxe_doc>
		</toHex>
		<getData public="1" get="inline" set="null" line="541">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<haxe_doc>Returns the bytes of `this` instance as `BytesData`.</haxe_doc>
		</getData>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesBuffer.hx">
		<b><c path="cs.system.io.MemoryStream"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="133"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="144"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="149"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="157"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="165"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="202">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx">
		<c path="cs.NativeArray"><x path="cs.UInt8"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.io.BytesInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/FPHelper.hx">
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io._FPHelper.SingleHelper" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/FPHelper.hx" private="1" module="haxe.io.FPHelper">
		<i public="1">
			<x path="Int"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</i>
		<f public="1">
			<x path="Single"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</f>
		<new public="1" set="method" line="344"><f a="f">
	<x path="Single"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":meta"><e>System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)</e></m>
			<m n=":nativeGen"/>
			<m n=":struct"/>
		</meta>
	</class>
	<class path="haxe.io._FPHelper.FloatHelper" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/FPHelper.hx" private="1" module="haxe.io.FPHelper">
		<i public="1">
			<x path="haxe.Int64"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</i>
		<f public="1">
			<x path="Float"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</f>
		<new public="1" set="method" line="357"><f a="f">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":meta"><e>System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)</e></m>
			<m n=":nativeGen"/>
			<m n=":struct"/>
		</meta>
	</class>
	<class path="haxe.io.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0" line="30">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="36">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0" line="27">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="36"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="41"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="31"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.iterators.HashMapKeyValueIterator" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/iterators/HashMapKeyValueIterator.hx">
		<map final="1"><x path="haxe.ds.HashMap">
	<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
	<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
</x></map>
		<keys final="1"><t path="Iterator"><c path="haxe.iterators.HashMapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="17">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="24">
			<f a=""><a>
	<value><c path="haxe.iterators.HashMapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.HashMapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="9"><f a="map">
	<x path="haxe.ds.HashMap">
		<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
		<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
	</x>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.iterators.RestIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/RestIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestIterator.T"/></x></args>
		<current expr="0" line="5">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><c path="haxe.iterators.RestIterator.T"/></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.RestKeyValueIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/RestKeyValueIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestKeyValueIterator.T"/></x></args>
		<current expr="0" line="5">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><a>
	<value><c path="haxe.iterators.RestKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="C:\HaxeToolkit\haxe\std/haxe/iterators/StringIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different of runtimes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="C:\HaxeToolkit\haxe\std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0" line="34">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="C:\HaxeToolkit\haxe\std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid" extern="1" abstract="1">
		<extends path="cs.system.runtime.interopservices.SafeHandle"/>
		<implements path="cs.system.IDisposable"/>
		<IsInvalid public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsInvalid>
		<get_IsInvalid public="1" set="method" override="1"><f a=""><x path="Bool"/></f></get_IsInvalid>
		<new final="1" set="method">
			<f a="ownsHandle">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":protected"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"</e></m>
		</meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeFileHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeFileHandle" extern="1" final="1">
		<extends path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid"/>
		<ReleaseHandle set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</ReleaseHandle>
		<new final="1" public="1" set="method"><f a="preexistingHandle:ownsHandle">
	<c path="cs.system.IntPtr"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeFileHandle"</e></m>
		</meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeWaitHandle" params="" file="C:\HaxeToolkit\haxe\lib\hxcs/4,2,0/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeWaitHandle" extern="1" final="1">
		<extends path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid"/>
		<ReleaseHandle set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":protected"/></meta>
		</ReleaseHandle>
		<new final="1" public="1" set="method"><f a="existingHandle:ownsHandle">
	<c path="cs.system.IntPtr"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeWaitHandle"</e></m>
		</meta>
	</class>
	<class path="nMorph.framework.common.configuration.Configuration" params="" file="5_framework\common\src/nMorph/framework/common/configuration/Configuration.hx">
		<Data public="1" static="1"><c path="nMorph.framework.common.configuration.ConfigurationData"/></Data>
		<ReadConfiguration public="1" set="method" line="10" static="1"><f a="ConfigContent">
	<c path="String"/>
	<x path="Void"/>
</f></ReadConfiguration>
		<WriteExampleConfiguration public="1" set="method" line="15" static="1"><f a=""><c path="String"/></f></WriteExampleConfiguration>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="nMorph.framework.common.configuration.ConfigurationData" params="" file="5_framework\common\src/nMorph/framework/common/configuration/ConfigurationData.hx">
		<LogFolder public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</LogFolder>
		<CurrentDeployEnvironment public="1" get="accessor" set="accessor">
			<e path="nMorph.framework.common.configuration.DeployEnvironmentEnum"/>
			<meta><m n=":isVar"/></meta>
		</CurrentDeployEnvironment>
		<get_LogFolder set="method" line="19"><f a=""><c path="String"/></f></get_LogFolder>
		<set_LogFolder set="method" line="23"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LogFolder>
		<get_CurrentDeployEnvironment set="method" line="27"><f a=""><e path="nMorph.framework.common.configuration.DeployEnvironmentEnum"/></f></get_CurrentDeployEnvironment>
		<set_CurrentDeployEnvironment set="method" line="31"><f a="value">
	<e path="nMorph.framework.common.configuration.DeployEnvironmentEnum"/>
	<e path="nMorph.framework.common.configuration.DeployEnvironmentEnum"/>
</f></set_CurrentDeployEnvironment>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Smartwork</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<enum path="nMorph.framework.common.configuration.DeployEnvironmentEnum" params="" file="5_framework\common\src/nMorph/framework/common/configuration/DeployEnvironmentEnum.hx">
		<DEVELOPMENT/>
		<TEST/>
		<PRODUCTION/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
			<m n=":keep"/>
		</meta>
	</enum>
	<class path="nMorph.framework.common.exceptions.ExceptionHelper" params="" file="5_framework\common\src/nMorph/framework/common/exceptions/ExceptionHelper.hx">
		<LogicException public="1" set="method" line="16" static="1"><f a="Code:Msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></LogicException>
		<SecurityException public="1" set="method" line="25" static="1"><f a="Code:Msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></SecurityException>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Smartwork</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="nMorph.framework.common.exceptions.LogicException" params="" file="5_framework\common\src/nMorph/framework/common/exceptions/LogicException.hx">
		<extends path="haxe.Exception"/>
		<Code public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</Code>
		<set_Code set="method" line="15"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Code>
		<get_Code set="method" line="19"><f a=""><x path="Int"/></f></get_Code>
		<new public="1" set="method" line="7"><f a="Code:Msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.common.exceptions.SecurityException" params="" file="5_framework\common\src/nMorph/framework/common/exceptions/SecurityException.hx">
		<extends path="haxe.Exception"/>
		<Code public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</Code>
		<set_Code set="method" line="14"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_Code>
		<get_Code set="method" line="18"><f a=""><x path="Int"/></f></get_Code>
		<new public="1" set="method" line="7"><f a="Code:Msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.common.helpers.SerializationHelper" params="" file="5_framework\common\src/nMorph/framework/common/helpers/SerializationHelper.hx">
		<Serialize public="1" set="method" line="20" static="1"><f a="obj">
	<d/>
	<c path="String"/>
</f></Serialize>
		<Unserialize public="1" set="method" line="29" static="1"><f a="SerializedStr">
	<c path="String"/>
	<d/>
</f></Unserialize>
		<JSON_Serialize public="1" set="method" line="35" static="1"><f a="obj">
	<d/>
	<c path="String"/>
</f></JSON_Serialize>
		<JSON_Unserialize public="1" set="method" line="40" static="1"><f a="SerializedStr">
	<c path="String"/>
	<d/>
</f></JSON_Unserialize>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Smartwork</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.SVC" params="" file="5_framework\svc\src/nMorph/framework/svc/SVC.hx">
		<main public="1" set="method" line="16" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Smartwork</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="nMorph.framework.svc.exceptions.ExceptionManager" params="" file="5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx">
		<HandleException public="1" set="method" line="17" static="1"><f a="ex:?DecryptedString:?req:?LogicModule:?LogicClass:?LogicMethod:?Name">
	<c path="haxe.Exception"/>
	<c path="String"/>
	<c path="nMorph.framework.svc.msg.RequestMessage"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></HandleException>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.msg.RequestMessage" params="" file="5_framework\svc\src/nMorph/framework/svc/msg/RequestMessage.hx">
		<RequestSeq public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</RequestSeq>
		<SessionID public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</SessionID>
		<Calls public="1" get="accessor" set="accessor">
			<c path="Array"><c path="nMorph.framework.svc.transport.MethodCall"/></c>
			<meta><m n=":isVar"/></meta>
		</Calls>
		<set_RequestSeq set="method" line="15"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_RequestSeq>
		<get_RequestSeq set="method" line="19"><f a=""><x path="Int"/></f></get_RequestSeq>
		<get_SessionID set="method" line="23"><f a=""><c path="String"/></f></get_SessionID>
		<set_SessionID set="method" line="27"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_SessionID>
		<get_Calls set="method" line="31"><f a=""><c path="Array"><c path="nMorph.framework.svc.transport.MethodCall"/></c></f></get_Calls>
		<set_Calls set="method" line="35"><f a="value">
	<c path="Array"><c path="nMorph.framework.svc.transport.MethodCall"/></c>
	<c path="Array"><c path="nMorph.framework.svc.transport.MethodCall"/></c>
</f></set_Calls>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.msg.ResponseMessage" params="" file="5_framework\svc\src/nMorph/framework/svc/msg/ResponseMessage.hx">
		<Results public="1" get="accessor" set="accessor">
			<c path="Array"><c path="nMorph.framework.svc.transport.MethodResult"/></c>
			<meta><m n=":isVar"/></meta>
		</Results>
		<RequestSeq public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</RequestSeq>
		<Message public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</Message>
		<AttentionCode public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</AttentionCode>
		<set_Results set="method" line="16"><f a="value">
	<c path="Array"><c path="nMorph.framework.svc.transport.MethodResult"/></c>
	<c path="Array"><c path="nMorph.framework.svc.transport.MethodResult"/></c>
</f></set_Results>
		<get_Results set="method" line="20"><f a=""><c path="Array"><c path="nMorph.framework.svc.transport.MethodResult"/></c></f></get_Results>
		<set_RequestSeq set="method" line="24"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_RequestSeq>
		<get_RequestSeq set="method" line="28"><f a=""><x path="Int"/></f></get_RequestSeq>
		<set_Message set="method" line="32"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Message>
		<get_Message set="method" line="36"><f a=""><c path="String"/></f></get_Message>
		<get_AttentionCode set="method" line="40"><f a=""><c path="String"/></f></get_AttentionCode>
		<set_AttentionCode set="method" line="44"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_AttentionCode>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.transport.MethodCall" params="" file="5_framework\svc\src/nMorph/framework/svc/transport/MethodCall.hx">
		<LogicModule public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</LogicModule>
		<LogicClass public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</LogicClass>
		<LogicMethod public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</LogicMethod>
		<LogicParams public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":isVar"/></meta>
		</LogicParams>
		<Name public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</Name>
		<set_LogicModule set="method" line="15"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LogicModule>
		<get_LogicModule set="method" line="19"><f a=""><c path="String"/></f></get_LogicModule>
		<set_LogicClass set="method" line="23"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LogicClass>
		<get_LogicClass set="method" line="27"><f a=""><c path="String"/></f></get_LogicClass>
		<set_LogicMethod set="method" line="31"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_LogicMethod>
		<get_LogicMethod set="method" line="35"><f a=""><c path="String"/></f></get_LogicMethod>
		<set_LogicParams set="method" line="39"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_LogicParams>
		<get_LogicParams set="method" line="43"><f a=""><c path="Array"><d/></c></f></get_LogicParams>
		<get_Name set="method" line="47"><f a=""><c path="String"/></f></get_Name>
		<set_Name set="method" line="51"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.transport.MethodResult" params="" file="5_framework\svc\src/nMorph/framework/svc/transport/MethodResult.hx">
		<ReturnObject public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":isVar"/></meta>
		</ReturnObject>
		<Name public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</Name>
		<get_ReturnObject set="method" line="12"><f a=""><d/></f></get_ReturnObject>
		<set_ReturnObject set="method" line="16"><f a="value">
	<d/>
	<unknown/>
</f></set_ReturnObject>
		<get_Name set="method" line="20"><f a=""><c path="String"/></f></get_Name>
		<set_Name set="method" line="24"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_Name>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="nMorph.framework.svc.transport.Router" params="" file="5_framework\svc\src/nMorph/framework/svc/transport/Router.hx">
		<Process public="1" set="method" line="40" static="1">
			<f a="PostData">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Método de arranque en el procesamiento de pedidos
	 * Toma el contenido del body HTTP y lo procesa
	 * Espera que el contenido venga serializado (Haxe Serialization)
	 * Encapsulado en un objeto RequestMessage
	 * NOTA: ¿ CONTROL TRANSACCIONAL?
	 * @param	PostData Contenido Serializado (Haxe Serialization) del objeto RequestMessage
	 * @return	Contenido Serializado de respuesta del servicio en objeto ResponseMessage, con Haxe Serialization</haxe_doc>
		</Process>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Smartwork</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\HaxeToolkit\haxe\std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="sys.FileSystem" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="32" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="36" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="41" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<meta><m n=":access"><e>Date.fromNative</e></m></meta>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="77" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="81" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="87" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="94" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="98" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="104" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`. Only empty directories can
		be deleted.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="110" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`. `"."` and `".."` are not included in the output.

		If `path` does not denote a valid directory, an exception is thrown.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.File" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="27" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" line="34" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" line="40" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" line="47" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="53" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="62" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="71" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" line="80" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" line="92" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/io/FileInput.hx">
		<extends path="cs.io.NativeInput"/>
		<new set="method" line="26"><f a="stream">
	<c path="cs.system.io.FileStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/io/FileOutput.hx">
		<extends path="cs.io.NativeOutput"/>
		<new set="method" line="26"><f a="stream">
	<c path="cs.system.io.FileStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="C:\HaxeToolkit\haxe\std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="sys.io.Process" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/io/Process.hx">
		<createNativeProcess set="method" line="51" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="cs.system.diagnostics._Process.NativeProcess"/>
			</f>
			<meta><m n=":allow"><e>Sys</e></m></meta>
		</createNativeProcess>
		<buildArgumentsString set="method" line="79" static="1"><f a="args">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></buildArgumentsString>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<native><t path="cs.system.diagnostics._Process.NativeProcess"/></native>
		<getPid public="1" set="method" line="109">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="113">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="39">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code. Not supported on php.

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net.Host" params="" file="C:\HaxeToolkit\haxe\std/cs/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="72" static="1"><f a=""><c path="String"/></f></localhost>
		<hostEntry public="1" set="null"><c path="cs.system.net.IPHostEntry"/></hostEntry>
		<ipAddress public="1" set="null"><c path="cs.system.net.IPAddress"/></ipAddress>
		<host public="1" set="null"><c path="String"/></host>
		<ip public="1" get="accessor" set="null"><x path="Int"/></ip>
		<get_ip set="method" line="42"><f a=""><x path="Int"/></f></get_ip>
		<toString public="1" set="method" line="64"><f a=""><c path="String"/></f></toString>
		<reverse public="1" set="method" line="68"><f a=""><c path="String"/></f></reverse>
		<new public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreapi"/>
		</meta>
	</class>
</haxe>