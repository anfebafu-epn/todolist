<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\svc\exceptions;

use \nMorph\framework\common\exceptions\LogicException;
use \php\Boot;
use \haxe\Exception;
use \nMorph\framework\common\configuration\Configuration;
use \sys\io\File;
use \haxe\_CallStack\CallStack_Impl_;
use \nMorph\framework\svc\msg\RequestMessage;
use \sys\net\Host;
use \nMorph\framework\svc\msg\ResponseMessage;
use \nMorph\framework\common\exceptions\SecurityException;
use \haxe\Serializer;

class ExceptionManager {
	/**
	 * @param Exception $ex
	 * @param string $DecryptedString
	 * @param RequestMessage $req
	 * @param string $LogicModule
	 * @param string $LogicClass
	 * @param string $LogicMethod
	 * @param string $Name
	 * 
	 * @return string
	 */
	public static function HandleException ($ex, $DecryptedString = null, $req = null, $LogicModule = null, $LogicClass = null, $LogicMethod = null, $Name = null) {
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:18: characters 9-57
		$res = new ResponseMessage();
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:19: characters 9-55
		$cc = \Type::getClassName(\Type::getClass($ex));
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:20: lines 20-94
		if ($cc === "nMorph.framework.common.exceptions.LogicException") {
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:22: characters 13-62
			$le = Boot::typedCast(Boot::getClass(LogicException::class), $ex);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:23: characters 13-45
			$res->set_AttentionCode("" . ($le->get_Code()??'null'));
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:24: characters 13-37
			$res->set_Message($le->get_message());
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:25: characters 13-32
			$res->set_RequestSeq(-1);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:26: characters 13-31
			$res->set_Results(null);
		} else if ($cc === "nMorph.framework.common.exceptions.SecurityException") {
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:31: characters 13-68
			$le = Boot::typedCast(Boot::getClass(SecurityException::class), $ex);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:32: characters 13-45
			$res->set_AttentionCode("" . ($le->get_Code()??'null'));
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:33: characters 13-37
			$res->set_Message($le->get_message());
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:34: characters 13-32
			$res->set_RequestSeq(-2);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:35: characters 13-31
			$res->set_Results(null);
		} else {
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:40: characters 13-270
			$AttentionCode = \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98));
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:42: lines 42-46
			while (true) {
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:43: characters 22-94
				$path = (Configuration::$Data->get_LogFolder()??'null') . ($AttentionCode??'null') . ".txt";
				\clearstatcache(true, $path);
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:43: lines 43-44
				if (!\file_exists($path)) {
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:44: characters 21-26
					break;
				}
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:45: characters 17-262
				$AttentionCode = \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98)) . \Std::string(\mt_rand(0, 98));
			}
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:48: characters 13-40
			$logContent = "";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:49: characters 13-60
			$logContent = ($logContent??'null') . "Message: " . ($ex->get_message()??'null') . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:50: characters 44-52
			$tmp = $ex->get_stack();
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:50: characters 13-61
			$logContent = ($logContent??'null') . "StackTrace: " . ((($tmp === null ? "null" : CallStack_Impl_::toString($tmp)))??'null') . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:51: characters 4-53
			$logContent = ($logContent??'null') . "Details: " . ($ex->details()??'null') . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:52: characters 8-27
			$tmp = $ex->get_previous() !== null;
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:62: characters 13-68
			$logContent = ($logContent??'null') . "Date: " . (\Date::now()->toString()??'null') . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:65: lines 65-66
			if ($DecryptedString !== null) {
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:66: characters 17-76
				$logContent = ($logContent??'null') . "SerializedData: " . ($DecryptedString??'null') . "\x0D\x0A";
			}
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:67: lines 67-82
			if ($req !== null) {
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:68: characters 17-71
				$logContent = ($logContent??'null') . "RequestSeq: " . ($req->get_RequestSeq()??'null') . "\x0D\x0A";
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:69: characters 17-69
				$logContent = ($logContent??'null') . "SessionID: " . ($req->get_SessionID()??'null') . "\x0D\x0A";
				#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:70: lines 70-81
				$_g = 0;
				$_g1 = $req->get_Calls();
				while ($_g < $_g1->length) {
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:70: characters 22-26
					$call = ($_g1->arr[$_g] ?? null);
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:70: lines 70-81
					++$_g;
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:71: characters 21-65
					$logContent = ($logContent??'null') . "-------------------" . "\x0D\x0A";
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:72: characters 21-64
					$logContent = ($logContent??'null') . "Name: " . ($call->get_Name()??'null') . "\x0D\x0A";
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:73: characters 21-78
					$logContent = ($logContent??'null') . "LogicModule: " . ($call->get_LogicModule()??'null') . "\x0D\x0A";
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:74: characters 21-76
					$logContent = ($logContent??'null') . "LogicClass: " . ($call->get_LogicClass()??'null') . "\x0D\x0A";
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:75: characters 21-78
					$logContent = ($logContent??'null') . "LogicMethod: " . ($call->get_LogicMethod()??'null') . "\x0D\x0A";
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:76: characters 21-36
					$pcount = 1;
					#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:77: lines 77-80
					$_g2 = 0;
					$_g3 = $call->get_LogicParams();
					while ($_g2 < $_g3->length) {
						#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:77: characters 26-27
						$p = ($_g3->arr[$_g2] ?? null);
						#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:77: lines 77-80
						++$_g2;
						#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:78: characters 25-87
						$logContent = ($logContent??'null') . "Param" . ($pcount??'null') . ": " . \Std::string($p) . "\x0D\x0A";
						#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:79: characters 25-33
						++$pcount;
					}
				}
			}
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:83: characters 13-57
			$logContent = ($logContent??'null') . "-------------------" . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:84: characters 13-76
			$logContent = ($logContent??'null') . "Localhost: " . (Host::localhost()??'null') . "\x0D\x0A";
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:86: characters 13-96
			File::saveContent((Configuration::$Data->get_LogFolder()??'null') . ($AttentionCode??'null') . ".txt", $logContent);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:88: characters 13-46
			$res->set_AttentionCode($AttentionCode);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:89: characters 13-40
			$res->set_Message($AttentionCode);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:90: characters 13-32
			$res->set_RequestSeq(-3);
			#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:91: characters 13-31
			$res->set_Results(null);
		}
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:96: characters 9-43
		$serializer = new Serializer();
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:97: characters 9-34
		$serializer->serialize($res);
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:99: characters 9-59
		$ResponseString = $serializer->toString();
		#5_framework\svc\src/nMorph/framework/svc/exceptions/ExceptionManager.hx:101: characters 9-30
		return $ResponseString;
	}
}

Boot::registerClass(ExceptionManager::class, 'nMorph.framework.svc.exceptions.ExceptionManager');
