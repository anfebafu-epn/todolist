// Generated by Haxe 4.2.2
package haxe;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Int64Helper extends haxe.lang.HxObject
{
	public Int64Helper(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Int64Helper()
	{
		//line 32 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		haxe.Int64Helper.__hx_ctor_haxe_Int64Helper(this);
	}
	
	
	protected static void __hx_ctor_haxe_Int64Helper(haxe.Int64Helper __hx_this)
	{
	}
	
	
	public static long parseString(java.lang.String sParam)
	{
		//line 37 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		long base = ((long) (10) );
		//line 38 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		long current = ((long) (0) );
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		long multiplier = ((long) (1) );
		//line 40 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		boolean sIsNegative = false;
		//line 42 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		java.lang.String s = ((java.lang.String) (((java.lang.Object) (sParam) )) ).trim();
		//line 43 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.charAt(s, 0), "-")) 
		{
			//line 44 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			sIsNegative = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			s = haxe.lang.StringExt.substring(s, 1, s.length());
		}
		
		//line 47 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		int len = s.length();
		//line 49 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		{
			//line 49 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			int _g = 0;
			//line 49 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			int _g1 = len;
			//line 49 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			while (( _g < _g1 ))
			{
				//line 49 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				int i = _g++;
				//line 50 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				int digitInt = ( ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(s, ( ( len - 1 ) - i )))) ) - ((int) (48) ) );
				//line 52 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				if (( ( digitInt < 0 ) || ( digitInt > 9 ) )) 
				{
					//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown("NumberFormatError")) );
				}
				
				//line 56 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				if (( digitInt != 0 )) 
				{
					//line 57 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
					long digit = ((long) (digitInt) );
					//line 58 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
					if (sIsNegative) 
					{
						//line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
						current = ((long) (( ((long) (current) ) - ((long) (( ((long) (multiplier) ) * ((long) (digit) ) )) ) )) );
						//line 60 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
						if ( ! ((( ((long) (current) ) < 0 ))) ) 
						{
							//line 61 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("NumberFormatError: Underflow")) );
						}
						
					}
					else
					{
						//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
						current = ((long) (( ((long) (current) ) + ((long) (( ((long) (multiplier) ) * ((long) (digit) ) )) ) )) );
						//line 65 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
						if (( ((long) (current) ) < 0 )) 
						{
							//line 66 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("NumberFormatError: Overflow")) );
						}
						
					}
					
				}
				
				//line 71 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				multiplier = ((long) (( ((long) (multiplier) ) * ((long) (base) ) )) );
			}
			
		}
		
		//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		return current;
	}
	
	
	public static long fromFloat(double f)
	{
		//line 80 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		if (( java.lang.Double.isNaN(f) ||  ! (haxe.lang.Runtime.isFinite(f))  )) 
		{
			//line 81 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Number is NaN or Infinite")) );
		}
		
		//line 84 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		double noFractions = ( f - ( f % 1 ) );
		//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		if (( noFractions > 9007199254740991.0 )) 
		{
			//line 91 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Conversion overflow")) );
		}
		
		//line 93 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		if (( noFractions < -9007199254740991.0 )) 
		{
			//line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Conversion underflow")) );
		}
		
		//line 97 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		long result = ((long) (0) );
		//line 98 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		boolean neg = ( noFractions < 0 );
		//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		double rest = ( (neg) ? ( - (noFractions) ) : (noFractions) );
		//line 101 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		int i = 0;
		//line 102 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		while (( rest >= 1 ))
		{
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			double curr = ( rest % 2 );
			//line 104 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			rest /= ((double) (2) );
			//line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			if (( curr >= 1 )) 
			{
				//line 106 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
				result = ((long) (( ((long) (result) ) + (((long) (( ((long) (1) ) << i )) )) )) );
			}
			
			//line 108 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			 ++ i;
		}
		
		//line 111 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		if (neg) 
		{
			//line 112 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
			result = haxe._Int64.Int64_Impl_.neg(result);
		}
		
		//line 114 "C:\\HaxeToolkit\\haxe\\std\\haxe\\Int64Helper.hx"
		return result;
	}
	
	
}


