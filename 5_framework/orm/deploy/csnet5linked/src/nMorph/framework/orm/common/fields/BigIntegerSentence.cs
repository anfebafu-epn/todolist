// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.common.fields {
	public class BigIntegerSentence : global::nMorph.framework.orm.common.sentences.FieldSentence {
		
		static BigIntegerSentence() {
			global::nMorph.framework.orm.common.fields.BigIntegerSentence.__rtti = "<class path=\"nMorph.framework.orm.common.fields.BigIntegerSentence\" params=\"\">\n\t<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\n\t<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"22\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<x path=\"Void\"/>\n</f></ValidateDBCompatibility>\n\t<Equals public=\"1\" set=\"method\" line=\"34\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></Equals>\n\t<Different public=\"1\" set=\"method\" line=\"39\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></Different>\n\t<LessThan public=\"1\" set=\"method\" line=\"44\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></LessThan>\n\t<LessThanAndEquals public=\"1\" set=\"method\" line=\"49\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></LessThanAndEquals>\n\t<MoreThan public=\"1\" set=\"method\" line=\"54\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></MoreThan>\n\t<MoreThanAndEquals public=\"1\" set=\"method\" line=\"59\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\n</f></MoreThanAndEquals>\n\t<IsNull public=\"1\" set=\"method\" line=\"64\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\n\t<IsNotNull public=\"1\" set=\"method\" line=\"68\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\n\t<SET public=\"1\" set=\"method\" line=\"72\"><f a=\"int64Value\">\n\t<x path=\"haxe.Int64\"/>\n\t<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\n</f></SET>\n\t<new public=\"1\" set=\"method\" line=\"18\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\n\t<x path=\"Bool\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
		}
		
		
		public BigIntegerSentence(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public BigIntegerSentence(string FieldTable, string FieldName, global::nMorph.framework.orm.common.enums.NullableEnum Nullable, bool IsPrimaryKey) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::nMorph.framework.orm.common.fields.BigIntegerSentence.__hx_ctor_nMorph_framework_orm_common_fields_BigIntegerSentence(this, FieldTable, FieldName, Nullable, IsPrimaryKey);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_common_fields_BigIntegerSentence(global::nMorph.framework.orm.common.fields.BigIntegerSentence __hx_this, string FieldTable, string FieldName, global::nMorph.framework.orm.common.enums.NullableEnum Nullable, bool IsPrimaryKey) {
			global::nMorph.framework.orm.common.sentences.FieldSentence.__hx_ctor_nMorph_framework_orm_common_sentences_FieldSentence(__hx_this, FieldTable, FieldName, global::nMorph.framework.orm.common.enums.DBTypeEnum.BIGINTEGER, global::nMorph.framework.orm.common.enums.HaxeTypeEnum.INT64, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), Nullable, IsPrimaryKey);
		}
		
		
		public static new string __rtti;
		
		public virtual void ValidateDBCompatibility(long int64Value) {
			unchecked {
				if (( ((long) (int64Value) ) > ((long) (9223372036854775807) ) )) {
					global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(50001, "BigInteger not compatible with Database, BigInteger too large");
				}
				
				if (( ((long) (int64Value) ) < ((long) (-9223372036854775807) ) )) {
					global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(50002, "BigInteger not compatible with Database, BigInteger too large (negative)");
				}
				
			}
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition Equals(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition Different(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.Different, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition LessThan(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.LessThan, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition LessThanAndEquals(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.LessThanAndEquals, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition MoreThan(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.MoreThan, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition MoreThanAndEquals(long int64Value) {
			this.ValidateDBCompatibility(int64Value);
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.MoreThanAndEquals, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition IsNull() {
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.int64(default(global::haxe.lang.Null<long>)));
		}
		
		
		public virtual global::nMorph.framework.orm.common.conditions.Condition IsNotNull() {
			return global::nMorph.framework.orm.common.conditions.Condition.SET(this, global::nMorph.framework.orm.common.enums.Op.Different, global::nMorph.framework.orm.common.sentences.Val.int64(default(global::haxe.lang.Null<long>)));
		}
		
		
		public virtual global::nMorph.framework.orm.interfaces.ISet SET(long int64Value) {
			global::nMorph.framework.orm.interfaces.ISet asg = global::nMorph.framework.orm.common.sentences.Assign.SET(this, global::nMorph.framework.orm.common.sentences.Val.int64(new global::haxe.lang.Null<long>(int64Value, true)));
			return asg;
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4142978:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SET", 4142978)) );
					}
					
					
					case 1678411344:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "IsNotNull", 1678411344)) );
					}
					
					
					case 453629873:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "IsNull", 453629873)) );
					}
					
					
					case 1253923808:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "MoreThanAndEquals", 1253923808)) );
					}
					
					
					case 804763062:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "MoreThan", 804763062)) );
					}
					
					
					case 979246492:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "LessThanAndEquals", 979246492)) );
					}
					
					
					case 1290148730:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "LessThan", 1290148730)) );
					}
					
					
					case 1256505177:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Different", 1256505177)) );
					}
					
					
					case 1955029599:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Equals", 1955029599)) );
					}
					
					
					case 475410908:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ValidateDBCompatibility", 475410908)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 4142978:
					{
						return this.SET(((long) (dynargs[0]) ));
					}
					
					
					case 1678411344:
					{
						return this.IsNotNull();
					}
					
					
					case 453629873:
					{
						return this.IsNull();
					}
					
					
					case 1253923808:
					{
						return this.MoreThanAndEquals(((long) (dynargs[0]) ));
					}
					
					
					case 804763062:
					{
						return this.MoreThan(((long) (dynargs[0]) ));
					}
					
					
					case 979246492:
					{
						return this.LessThanAndEquals(((long) (dynargs[0]) ));
					}
					
					
					case 1290148730:
					{
						return this.LessThan(((long) (dynargs[0]) ));
					}
					
					
					case 1256505177:
					{
						return this.Different(((long) (dynargs[0]) ));
					}
					
					
					case 1955029599:
					{
						return this.Equals(((long) (dynargs[0]) ));
					}
					
					
					case 475410908:
					{
						this.ValidateDBCompatibility(((long) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


