// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.common.ddl {
	public class ColumnDefinition : global::haxe.lang.HxObject, global::nMorph.framework.orm.interfaces.IColumnDefinition {
		
		static ColumnDefinition() {
			global::nMorph.framework.orm.common.ddl.ColumnDefinition.__rtti = "<class path=\"nMorph.framework.orm.common.ddl.ColumnDefinition\" params=\"\">\n\t<implements path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<SET public=\"1\" set=\"method\" line=\"34\" static=\"1\"><f a=\"ColumnName:DataType:Lenght:Scale:Nullable:IsPrimaryKey:DefaultValue\">\n\t<c path=\"String\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.DBTypeEnum\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\n\t<x path=\"Bool\"/>\n\t<c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<c path=\"nMorph.framework.orm.common.ddl.ColumnDefinition\"/>\n</f></SET>\n\t<ColumnName><c path=\"String\"/></ColumnName>\n\t<DataType><e path=\"nMorph.framework.orm.common.enums.DBTypeEnum\"/></DataType>\n\t<Lenght><x path=\"Int\"/></Lenght>\n\t<Scale><x path=\"Int\"/></Scale>\n\t<Nullable><e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/></Nullable>\n\t<IsPrimaryKey><x path=\"Bool\"/></IsPrimaryKey>\n\t<DefaultValue><c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/></DefaultValue>\n\t<CurrentDDL><c path=\"nMorph.framework.orm.lang.DDL\"/></CurrentDDL>\n\t<RegisterQuery public=\"1\" set=\"method\" line=\"39\"><f a=\"CurrentDDL\">\n\t<c path=\"nMorph.framework.orm.interfaces.ILang\"/>\n\t<x path=\"Void\"/>\n</f></RegisterQuery>\n\t<SCRIPT_PART public=\"1\" set=\"method\" line=\"43\"><f a=\"?args\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></SCRIPT_PART>\n\t<new public=\"1\" set=\"method\" line=\"24\"><f a=\"ColumnName:DataType:Lenght:Scale:Nullable:IsPrimaryKey:DefaultValue\">\n\t<c path=\"String\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.DBTypeEnum\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\n\t<x path=\"Bool\"/>\n\t<c path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public ColumnDefinition(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ColumnDefinition(string ColumnName, global::nMorph.framework.orm.common.enums.DBTypeEnum DataType, int Lenght, int Scale, global::nMorph.framework.orm.common.enums.NullableEnum Nullable, bool IsPrimaryKey, global::nMorph.framework.orm.interfaces.IColumnDefinition DefaultValue) {
			global::nMorph.framework.orm.common.ddl.ColumnDefinition.__hx_ctor_nMorph_framework_orm_common_ddl_ColumnDefinition(this, ColumnName, DataType, Lenght, Scale, Nullable, IsPrimaryKey, DefaultValue);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_common_ddl_ColumnDefinition(global::nMorph.framework.orm.common.ddl.ColumnDefinition __hx_this, string ColumnName, global::nMorph.framework.orm.common.enums.DBTypeEnum DataType, int Lenght, int Scale, global::nMorph.framework.orm.common.enums.NullableEnum Nullable, bool IsPrimaryKey, global::nMorph.framework.orm.interfaces.IColumnDefinition DefaultValue) {
			__hx_this.ColumnName = ColumnName;
			__hx_this.DataType = DataType;
			__hx_this.Lenght = Lenght;
			__hx_this.Scale = Scale;
			__hx_this.Nullable = Nullable;
			__hx_this.IsPrimaryKey = IsPrimaryKey;
			__hx_this.DefaultValue = DefaultValue;
		}
		
		
		public static string __rtti;
		
		public static global::nMorph.framework.orm.common.ddl.ColumnDefinition SET(string ColumnName, global::nMorph.framework.orm.common.enums.DBTypeEnum DataType, int Lenght, int Scale, global::nMorph.framework.orm.common.enums.NullableEnum Nullable, bool IsPrimaryKey, global::nMorph.framework.orm.interfaces.IColumnDefinition DefaultValue) {
			global::nMorph.framework.orm.common.ddl.ColumnDefinition cd = new global::nMorph.framework.orm.common.ddl.ColumnDefinition(((string) (ColumnName) ), ((global::nMorph.framework.orm.common.enums.DBTypeEnum) (DataType) ), ((int) (Lenght) ), ((int) (Scale) ), ((global::nMorph.framework.orm.common.enums.NullableEnum) (Nullable) ), ((bool) (IsPrimaryKey) ), ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (DefaultValue) ));
			return cd;
		}
		
		
		public string ColumnName;
		
		public global::nMorph.framework.orm.common.enums.DBTypeEnum DataType;
		
		public int Lenght;
		
		public int Scale;
		
		public global::nMorph.framework.orm.common.enums.NullableEnum Nullable;
		
		public bool IsPrimaryKey;
		
		public global::nMorph.framework.orm.interfaces.IColumnDefinition DefaultValue;
		
		public global::nMorph.framework.orm.lang.DDL CurrentDDL;
		
		public virtual void RegisterQuery(global::nMorph.framework.orm.interfaces.ILang CurrentDDL) {
			this.CurrentDDL = ((global::nMorph.framework.orm.lang.DDL) (CurrentDDL) );
		}
		
		
		public virtual string SCRIPT_PART(string args) {
			unchecked {
				string Part = "";
				if (( this.CurrentDDL == null )) {
					this.CurrentDDL = new global::nMorph.framework.orm.lang.DDL();
				}
				
				switch (this.CurrentDDL.getCurrentEngine()._hx_index) {
					case 0:
					{
						if (( args != null )) {
							if (( args == "OnlyName" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							}
							else if (( args == "Alter" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
								switch (this.DataType._hx_index) {
									case 0:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
										break;
									}
									
									
									case 1:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "INT ");
										break;
									}
									
									
									case 2:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
										break;
									}
									
									
									case 3:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
										break;
									}
									
									
									case 4:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
										break;
									}
									
									
									case 5:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
										break;
									}
									
									
									case 6:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
										break;
									}
									
									
									case 7:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 8:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
										break;
									}
									
									
									case 9:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
										break;
									}
									
									
									case 10:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "NVARCHAR ");
										break;
									}
									
									
									case 11:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
										break;
									}
									
									
									case 12:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARBINARY(MAX) ");
										break;
									}
									
									
									case 13:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
										break;
									}
									
									
									case 14:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
										break;
									}
									
									
									case 15:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "UNIQUEIDENTIFIER ");
										break;
									}
									
									
								}
								
								Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? (" NULL ") : (" NOT NULL ") ));
								if (( this.DefaultValue != null )) {
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
								}
								
							}
							
						}
						else {
							Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							switch (this.DataType._hx_index) {
								case 0:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
									break;
								}
								
								
								case 1:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "INT ");
									break;
								}
								
								
								case 2:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
									break;
								}
								
								
								case 3:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
									break;
								}
								
								
								case 4:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
									break;
								}
								
								
								case 5:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
									break;
								}
								
								
								case 6:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
									break;
								}
								
								
								case 7:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 8:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
									break;
								}
								
								
								case 9:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
									break;
								}
								
								
								case 10:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "NVARCHAR ");
									break;
								}
								
								
								case 11:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
									break;
								}
								
								
								case 12:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARBINARY(MAX) ");
									break;
								}
								
								
								case 13:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
									break;
								}
								
								
								case 14:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
									break;
								}
								
								
								case 15:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "UNIQUEIDENTIFIER ");
									break;
								}
								
								
							}
							
							Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
							if (this.IsPrimaryKey) {
								Part = global::haxe.lang.Runtime.concat(Part, "PRIMARY KEY ");
							}
							
							if (( this.DefaultValue != null )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						if (( args != null )) {
							if (( args == "OnlyName" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							}
							else if (( args == "Alter" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
								switch (this.DataType._hx_index) {
									case 0:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NUMBER (", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 1:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NUMBER (", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 2:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "LONG ");
										break;
									}
									
									
									case 3:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
										break;
									}
									
									
									case 4:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
										break;
									}
									
									
									case 5:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
										break;
									}
									
									
									case 6:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
										break;
									}
									
									
									case 7:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 8:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 9:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
										break;
									}
									
									
									case 10:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 11:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 12:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "BLOB ");
										break;
									}
									
									
									case 13:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "DATE ");
										break;
									}
									
									
									case 14:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "NUMBER(1) ");
										break;
									}
									
									
									case 15:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
								}
								
								Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? (" NULL ") : (" NOT NULL ") ));
								if (( this.DefaultValue != null )) {
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
								}
								
							}
							
						}
						else {
							Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							switch (this.DataType._hx_index) {
								case 0:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NUMBER (", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 1:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NUMBER (", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 2:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "LONG ");
									break;
								}
								
								
								case 3:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
									break;
								}
								
								
								case 4:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
									break;
								}
								
								
								case 5:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
									break;
								}
								
								
								case 6:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
									break;
								}
								
								
								case 7:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 8:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 9:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
									break;
								}
								
								
								case 10:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 11:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 12:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "BLOB ");
									break;
								}
								
								
								case 13:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "DATE ");
									break;
								}
								
								
								case 14:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "NUMBER(1) ");
									break;
								}
								
								
								case 15:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR2(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
							}
							
							if (( this.DefaultValue != null )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
							}
							
							Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
							if (this.IsPrimaryKey) {
								Part = global::haxe.lang.Runtime.concat(Part, "PRIMARY KEY ");
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						if (( args != null )) {
							if (( args == "OnlyName" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							}
							else if (( args == "Alter" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
								switch (this.DataType._hx_index) {
									case 0:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "SMALLINT ");
										break;
									}
									
									
									case 1:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "INT ");
										break;
									}
									
									
									case 2:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "LONG ");
										break;
									}
									
									
									case 3:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
										break;
									}
									
									
									case 4:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
										break;
									}
									
									
									case 5:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
										break;
									}
									
									
									case 6:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
										break;
									}
									
									
									case 7:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 8:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "LONGTEXT ");
										break;
									}
									
									
									case 9:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
										break;
									}
									
									
									case 10:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 11:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 12:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "LONGBLOB ");
										break;
									}
									
									
									case 13:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
										break;
									}
									
									
									case 14:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
										break;
									}
									
									
									case 15:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
								}
								
								Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
								if (( this.DefaultValue != null )) {
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
								}
								
							}
							
						}
						else {
							Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							switch (this.DataType._hx_index) {
								case 0:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "SMALLINT ");
									break;
								}
								
								
								case 1:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "INT ");
									break;
								}
								
								
								case 2:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "LONG ");
									break;
								}
								
								
								case 3:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
									break;
								}
								
								
								case 4:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
									break;
								}
								
								
								case 5:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
									break;
								}
								
								
								case 6:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
									break;
								}
								
								
								case 7:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 8:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "LONGTEXT ");
									break;
								}
								
								
								case 9:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "NCHAR ");
									break;
								}
								
								
								case 10:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 11:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 12:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "LONGBLOB ");
									break;
								}
								
								
								case 13:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
									break;
								}
								
								
								case 14:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
									break;
								}
								
								
								case 15:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
							}
							
							Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
							if (this.IsPrimaryKey) {
								Part = global::haxe.lang.Runtime.concat(Part, "PRIMARY KEY ");
							}
							
							if (( this.DefaultValue != null )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
							}
							
						}
						
						break;
					}
					
					
					case 3:
					{
						if (( args != null )) {
							if (( args == "OnlyName" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							}
							else if (( args == "Alter" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
								switch (this.DataType._hx_index) {
									case 0:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
										break;
									}
									
									
									case 1:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "integer ");
										break;
									}
									
									
									case 2:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
										break;
									}
									
									
									case 3:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
										break;
									}
									
									
									case 4:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
										break;
									}
									
									
									case 5:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
										break;
									}
									
									
									case 6:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("CHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 7:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 8:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "text ");
										break;
									}
									
									
									case 9:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("CHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 10:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 11:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "text ");
										break;
									}
									
									
									case 12:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "bytea ");
										break;
									}
									
									
									case 13:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "timestamp with time zone ");
										break;
									}
									
									
									case 14:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
										break;
									}
									
									
									case 15:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
								}
								
								Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? (" NULL ") : (" NOT NULL ") ));
								if (( this.DefaultValue != null )) {
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
								}
								
							}
							
						}
						else {
							Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							switch (this.DataType._hx_index) {
								case 0:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
									break;
								}
								
								
								case 1:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "integer ");
									break;
								}
								
								
								case 2:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
									break;
								}
								
								
								case 3:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
									break;
								}
								
								
								case 4:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
									break;
								}
								
								
								case 5:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
									break;
								}
								
								
								case 6:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("CHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 7:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 8:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "text ");
									break;
								}
								
								
								case 9:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("CHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 10:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 11:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "text ");
									break;
								}
								
								
								case 12:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "bytea ");
									break;
								}
								
								
								case 13:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "timestamp with time zone ");
									break;
								}
								
								
								case 14:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
									break;
								}
								
								
								case 15:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
							}
							
							Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
							if (this.IsPrimaryKey) {
								Part = global::haxe.lang.Runtime.concat(Part, "PRIMARY KEY ");
							}
							
							if (( this.DefaultValue != null )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
							}
							
						}
						
						break;
					}
					
					
					case 4:
					{
						if (( args != null )) {
							if (( args == "OnlyName" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							}
							else if (( args == "Alter" )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
								switch (this.DataType._hx_index) {
									case 0:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
										break;
									}
									
									
									case 1:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "INT ");
										break;
									}
									
									
									case 2:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
										break;
									}
									
									
									case 3:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
										break;
									}
									
									
									case 4:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
										break;
									}
									
									
									case 5:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
										break;
									}
									
									
									case 6:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
										break;
									}
									
									
									case 7:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 8:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
										break;
									}
									
									
									case 9:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 10:
									{
										Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
										break;
									}
									
									
									case 11:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
										break;
									}
									
									
									case 12:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "VARBINARY(MAX) ");
										break;
									}
									
									
									case 13:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
										break;
									}
									
									
									case 14:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
										break;
									}
									
									
									case 15:
									{
										Part = global::haxe.lang.Runtime.concat(Part, "UNIQUEIDENTIFIER ");
										break;
									}
									
									
								}
								
								Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? (" NULL ") : (" NOT NULL ") ));
								if (( this.DefaultValue != null )) {
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
								}
								
							}
							
						}
						else {
							Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \"", this.ColumnName), "\" "));
							switch (this.DataType._hx_index) {
								case 0:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "smallint ");
									break;
								}
								
								
								case 1:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "INT ");
									break;
								}
								
								
								case 2:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "bigint ");
									break;
								}
								
								
								case 3:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "FLOAT ");
									break;
								}
								
								
								case 4:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "REAL ");
									break;
								}
								
								
								case 5:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("DECIMAL (", global::haxe.lang.Runtime.toString(this.Lenght)), ","), global::haxe.lang.Runtime.toString(this.Scale)), ") "));
									break;
								}
								
								
								case 6:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "CHAR ");
									break;
								}
								
								
								case 7:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("VARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 8:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
									break;
								}
								
								
								case 9:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 10:
								{
									Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("NVARCHAR(", global::haxe.lang.Runtime.toString(this.Lenght)), ") "));
									break;
								}
								
								
								case 11:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARCHAR(MAX) ");
									break;
								}
								
								
								case 12:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "VARBINARY(MAX) ");
									break;
								}
								
								
								case 13:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "DATETIME ");
									break;
								}
								
								
								case 14:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "BIT ");
									break;
								}
								
								
								case 15:
								{
									Part = global::haxe.lang.Runtime.concat(Part, "UNIQUEIDENTIFIER ");
									break;
								}
								
								
							}
							
							Part = global::haxe.lang.Runtime.concat(Part, ( (( this.Nullable == global::nMorph.framework.orm.common.enums.NullableEnum.NULL )) ? ("NULL ") : ("NOT NULL ") ));
							if (this.IsPrimaryKey) {
								Part = global::haxe.lang.Runtime.concat(Part, "PRIMARY KEY ");
							}
							
							if (( this.DefaultValue != null )) {
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", this.DefaultValue.SCRIPT_PART(null)), " "));
							}
							
						}
						
						break;
					}
					
					
				}
				
				return Part;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 201080426:
					{
						this.Scale = ((int) (@value) );
						return @value;
					}
					
					
					case 1402732190:
					{
						this.Lenght = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1037559379:
					{
						this.CurrentDDL = ((global::nMorph.framework.orm.lang.DDL) (@value) );
						return @value;
					}
					
					
					case 791021328:
					{
						this.DefaultValue = ((global::nMorph.framework.orm.interfaces.IColumnDefinition) (@value) );
						return @value;
					}
					
					
					case 286997415:
					{
						this.IsPrimaryKey = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 216537025:
					{
						this.Nullable = ((global::nMorph.framework.orm.common.enums.NullableEnum) (@value) );
						return @value;
					}
					
					
					case 201080426:
					{
						this.Scale = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1402732190:
					{
						this.Lenght = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1714327076:
					{
						this.DataType = ((global::nMorph.framework.orm.common.enums.DBTypeEnum) (@value) );
						return @value;
					}
					
					
					case 194253921:
					{
						this.ColumnName = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2032371175:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SCRIPT_PART", 2032371175)) );
					}
					
					
					case 457416069:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "RegisterQuery", 457416069)) );
					}
					
					
					case 1037559379:
					{
						return this.CurrentDDL;
					}
					
					
					case 791021328:
					{
						return this.DefaultValue;
					}
					
					
					case 286997415:
					{
						return this.IsPrimaryKey;
					}
					
					
					case 216537025:
					{
						return this.Nullable;
					}
					
					
					case 201080426:
					{
						return this.Scale;
					}
					
					
					case 1402732190:
					{
						return this.Lenght;
					}
					
					
					case 1714327076:
					{
						return this.DataType;
					}
					
					
					case 194253921:
					{
						return this.ColumnName;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 201080426:
					{
						return ((double) (this.Scale) );
					}
					
					
					case 1402732190:
					{
						return ((double) (this.Lenght) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 2032371175:
					{
						return this.SCRIPT_PART(global::haxe.lang.Runtime.toString(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )));
					}
					
					
					case 457416069:
					{
						this.RegisterQuery(((global::nMorph.framework.orm.interfaces.ILang) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("CurrentDDL");
			baseArr.push("DefaultValue");
			baseArr.push("IsPrimaryKey");
			baseArr.push("Nullable");
			baseArr.push("Scale");
			baseArr.push("Lenght");
			baseArr.push("DataType");
			baseArr.push("ColumnName");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


