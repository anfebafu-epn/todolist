// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.configuration {
	public class DatabaseConnectionData : global::haxe.lang.HxObject {
		
		public DatabaseConnectionData(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public DatabaseConnectionData() {
			global::nMorph.framework.orm.configuration.DatabaseConnectionData.__hx_ctor_nMorph_framework_orm_configuration_DatabaseConnectionData(this);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_configuration_DatabaseConnectionData(global::nMorph.framework.orm.configuration.DatabaseConnectionData __hx_this) {
		}
		
		
		public global::nMorph.framework.orm.configuration.DatabaseEngineEnum DatabaseEngine;
		
		public global::nMorph.framework.common.configuration.DeployEnvironmentEnum DeploEnvironment;
		
		public global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum DatabaseTypeAuthentication;
		
		public string ConnectionString;
		
		public string DataSource;
		
		public string ServiceName;
		
		public string SID;
		
		public string UserID;
		
		public string Password;
		
		public string Database;
		
		public global::Array<string> OtherParameters;
		
		public string ServerPort;
		
		public int ConnectionPoolSize;
		
		public string Schema;
		
		public virtual int get_ConnectionPoolSize() {
			return this.ConnectionPoolSize;
		}
		
		
		public virtual int set_ConnectionPoolSize(int @value) {
			return this.ConnectionPoolSize = @value;
		}
		
		
		public virtual string get_ServerPort() {
			return this.ServerPort;
		}
		
		
		public virtual string set_ServerPort(string @value) {
			return this.ServerPort = @value;
		}
		
		
		public virtual global::nMorph.framework.orm.configuration.DatabaseEngineEnum get_DatabaseEngine() {
			return this.DatabaseEngine;
		}
		
		
		public virtual global::nMorph.framework.orm.configuration.DatabaseEngineEnum set_DatabaseEngine(global::nMorph.framework.orm.configuration.DatabaseEngineEnum @value) {
			return this.DatabaseEngine = @value;
		}
		
		
		public virtual global::nMorph.framework.common.configuration.DeployEnvironmentEnum get_DeploEnvironment() {
			return this.DeploEnvironment;
		}
		
		
		public virtual global::nMorph.framework.common.configuration.DeployEnvironmentEnum set_DeploEnvironment(global::nMorph.framework.common.configuration.DeployEnvironmentEnum @value) {
			return this.DeploEnvironment = @value;
		}
		
		
		public virtual string get_ConnectionString() {
			return this.ConnectionString;
		}
		
		
		public virtual string set_ConnectionString(string @value) {
			return this.ConnectionString = @value;
		}
		
		
		public virtual string set_DataSource(string @value) {
			return this.DataSource = @value;
		}
		
		
		public virtual string get_DataSource() {
			return this.DataSource;
		}
		
		
		public virtual string set_ServiceName(string @value) {
			return this.ServiceName = @value;
		}
		
		
		public virtual string get_ServiceName() {
			return this.ServiceName;
		}
		
		
		public virtual string set_SID(string @value) {
			return this.SID = @value;
		}
		
		
		public virtual string get_SID() {
			return this.SID;
		}
		
		
		public virtual string set_UserID(string @value) {
			return this.UserID = @value;
		}
		
		
		public virtual string get_UserID() {
			return this.UserID;
		}
		
		
		public virtual string get_Password() {
			return this.Password;
		}
		
		
		public virtual string set_Password(string @value) {
			return this.Password = @value;
		}
		
		
		public virtual string get_Database() {
			return this.Database;
		}
		
		
		public virtual string set_Database(string @value) {
			return this.Database = @value;
		}
		
		
		public virtual global::Array<string> set_OtherParameters(global::Array<string> @value) {
			return this.OtherParameters = @value;
		}
		
		
		public virtual global::Array<string> get_OtherParameters() {
			return this.OtherParameters;
		}
		
		
		public virtual global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum get_DatabaseTypeAuthentication() {
			return this.DatabaseTypeAuthentication;
		}
		
		
		public virtual global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum set_DatabaseTypeAuthentication(global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum @value) {
			return this.DatabaseTypeAuthentication = @value;
		}
		
		
		public virtual string get_Schema() {
			return this.Schema;
		}
		
		
		public virtual string set_Schema(string @value) {
			return this.Schema = @value;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411496475:
					{
						if (handleProperties) {
							this.set_ConnectionPoolSize(((int) (@value) ));
							return @value;
						}
						else {
							this.ConnectionPoolSize = ((int) (@value) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1968542785:
					{
						if (handleProperties) {
							this.set_Schema(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.Schema = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 1411496475:
					{
						if (handleProperties) {
							this.set_ConnectionPoolSize(((int) (global::haxe.lang.Runtime.toInt(@value)) ));
							return @value;
						}
						else {
							this.ConnectionPoolSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
							return @value;
						}
						
					}
					
					
					case 1873681412:
					{
						if (handleProperties) {
							this.set_ServerPort(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.ServerPort = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 572839290:
					{
						if (handleProperties) {
							this.set_OtherParameters(((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) ));
							return @value;
						}
						else {
							this.OtherParameters = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) );
							return @value;
						}
						
					}
					
					
					case 1868388187:
					{
						if (handleProperties) {
							this.set_Database(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.Database = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 578936635:
					{
						if (handleProperties) {
							this.set_Password(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.Password = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 1988341510:
					{
						if (handleProperties) {
							this.set_UserID(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.UserID = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 4143854:
					{
						if (handleProperties) {
							this.set_SID(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.SID = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 1899172096:
					{
						if (handleProperties) {
							this.set_ServiceName(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.ServiceName = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 344226501:
					{
						if (handleProperties) {
							this.set_DataSource(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.DataSource = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 940442543:
					{
						if (handleProperties) {
							this.set_ConnectionString(global::haxe.lang.Runtime.toString(@value));
							return @value;
						}
						else {
							this.ConnectionString = global::haxe.lang.Runtime.toString(@value);
							return @value;
						}
						
					}
					
					
					case 1292916749:
					{
						if (handleProperties) {
							this.set_DatabaseTypeAuthentication(((global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum) (@value) ));
							return @value;
						}
						else {
							this.DatabaseTypeAuthentication = ((global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum) (@value) );
							return @value;
						}
						
					}
					
					
					case 1553828609:
					{
						if (handleProperties) {
							this.set_DeploEnvironment(((global::nMorph.framework.common.configuration.DeployEnvironmentEnum) (@value) ));
							return @value;
						}
						else {
							this.DeploEnvironment = ((global::nMorph.framework.common.configuration.DeployEnvironmentEnum) (@value) );
							return @value;
						}
						
					}
					
					
					case 397576573:
					{
						if (handleProperties) {
							this.set_DatabaseEngine(((global::nMorph.framework.orm.configuration.DatabaseEngineEnum) (@value) ));
							return @value;
						}
						else {
							this.DatabaseEngine = ((global::nMorph.framework.orm.configuration.DatabaseEngineEnum) (@value) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1767547518:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_Schema", 1767547518)) );
					}
					
					
					case 1708983306:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_Schema", 1708983306)) );
					}
					
					
					case 1997001418:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_DatabaseTypeAuthentication", 1997001418)) );
					}
					
					
					case 471646806:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_DatabaseTypeAuthentication", 471646806)) );
					}
					
					
					case 758097041:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_OtherParameters", 758097041)) );
					}
					
					
					case 1775015837:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_OtherParameters", 1775015837)) );
					}
					
					
					case 963653336:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_Database", 963653336)) );
					}
					
					
					case 611781476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_Database", 611781476)) );
					}
					
					
					case 1821685432:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_Password", 1821685432)) );
					}
					
					
					case 1469813572:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_Password", 1469813572)) );
					}
					
					
					case 1728782031:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_UserID", 1728782031)) );
					}
					
					
					case 1787346243:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_UserID", 1787346243)) );
					}
					
					
					case 649331589:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_SID", 649331589)) );
					}
					
					
					case 431330449:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_SID", 431330449)) );
					}
					
					
					case 840222871:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_ServiceName", 840222871)) );
					}
					
					
					case 769672611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_ServiceName", 769672611)) );
					}
					
					
					case 175768334:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_DataSource", 175768334)) );
					}
					
					
					case 714730370:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_DataSource", 714730370)) );
					}
					
					
					case 590356524:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_ConnectionString", 590356524)) );
					}
					
					
					case 1450731704:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_ConnectionString", 1450731704)) );
					}
					
					
					case 1203742590:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_DeploEnvironment", 1203742590)) );
					}
					
					
					case 2064117770:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_DeploEnvironment", 2064117770)) );
					}
					
					
					case 268147898:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_DatabaseEngine", 268147898)) );
					}
					
					
					case 860645958:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_DatabaseEngine", 860645958)) );
					}
					
					
					case 96701633:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_ServerPort", 96701633)) );
					}
					
					
					case 1705223245:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_ServerPort", 1705223245)) );
					}
					
					
					case 1633791960:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_ConnectionPoolSize", 1633791960)) );
					}
					
					
					case 766915428:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_ConnectionPoolSize", 766915428)) );
					}
					
					
					case 1968542785:
					{
						return ( (handleProperties) ? (this.get_Schema()) : (this.Schema) );
					}
					
					
					case 1411496475:
					{
						return ( (handleProperties) ? (this.get_ConnectionPoolSize()) : (this.ConnectionPoolSize) );
					}
					
					
					case 1873681412:
					{
						return ( (handleProperties) ? (this.get_ServerPort()) : (this.ServerPort) );
					}
					
					
					case 572839290:
					{
						return ( (handleProperties) ? (this.get_OtherParameters()) : (this.OtherParameters) );
					}
					
					
					case 1868388187:
					{
						return ( (handleProperties) ? (this.get_Database()) : (this.Database) );
					}
					
					
					case 578936635:
					{
						return ( (handleProperties) ? (this.get_Password()) : (this.Password) );
					}
					
					
					case 1988341510:
					{
						return ( (handleProperties) ? (this.get_UserID()) : (this.UserID) );
					}
					
					
					case 4143854:
					{
						return ( (handleProperties) ? (this.get_SID()) : (this.SID) );
					}
					
					
					case 1899172096:
					{
						return ( (handleProperties) ? (this.get_ServiceName()) : (this.ServiceName) );
					}
					
					
					case 344226501:
					{
						return ( (handleProperties) ? (this.get_DataSource()) : (this.DataSource) );
					}
					
					
					case 940442543:
					{
						return ( (handleProperties) ? (this.get_ConnectionString()) : (this.ConnectionString) );
					}
					
					
					case 1292916749:
					{
						return ( (handleProperties) ? (this.get_DatabaseTypeAuthentication()) : (this.DatabaseTypeAuthentication) );
					}
					
					
					case 1553828609:
					{
						return ( (handleProperties) ? (this.get_DeploEnvironment()) : (this.DeploEnvironment) );
					}
					
					
					case 397576573:
					{
						return ( (handleProperties) ? (this.get_DatabaseEngine()) : (this.DatabaseEngine) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411496475:
					{
						return ((double) (( (handleProperties) ? (this.get_ConnectionPoolSize()) : (this.ConnectionPoolSize) )) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1767547518:
					{
						return this.set_Schema(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1708983306:
					{
						return this.get_Schema();
					}
					
					
					case 1997001418:
					{
						return this.set_DatabaseTypeAuthentication(((global::nMorph.framework.orm.configuration.DatabaseTypeAuthenticationEnum) (dynargs[0]) ));
					}
					
					
					case 471646806:
					{
						return this.get_DatabaseTypeAuthentication();
					}
					
					
					case 758097041:
					{
						return this.get_OtherParameters();
					}
					
					
					case 1775015837:
					{
						return this.set_OtherParameters(((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (dynargs[0]) ))) ));
					}
					
					
					case 963653336:
					{
						return this.set_Database(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 611781476:
					{
						return this.get_Database();
					}
					
					
					case 1821685432:
					{
						return this.set_Password(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1469813572:
					{
						return this.get_Password();
					}
					
					
					case 1728782031:
					{
						return this.get_UserID();
					}
					
					
					case 1787346243:
					{
						return this.set_UserID(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 649331589:
					{
						return this.get_SID();
					}
					
					
					case 431330449:
					{
						return this.set_SID(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 840222871:
					{
						return this.get_ServiceName();
					}
					
					
					case 769672611:
					{
						return this.set_ServiceName(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 175768334:
					{
						return this.get_DataSource();
					}
					
					
					case 714730370:
					{
						return this.set_DataSource(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 590356524:
					{
						return this.set_ConnectionString(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1450731704:
					{
						return this.get_ConnectionString();
					}
					
					
					case 1203742590:
					{
						return this.set_DeploEnvironment(((global::nMorph.framework.common.configuration.DeployEnvironmentEnum) (dynargs[0]) ));
					}
					
					
					case 2064117770:
					{
						return this.get_DeploEnvironment();
					}
					
					
					case 268147898:
					{
						return this.set_DatabaseEngine(((global::nMorph.framework.orm.configuration.DatabaseEngineEnum) (dynargs[0]) ));
					}
					
					
					case 860645958:
					{
						return this.get_DatabaseEngine();
					}
					
					
					case 96701633:
					{
						return this.set_ServerPort(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1705223245:
					{
						return this.get_ServerPort();
					}
					
					
					case 1633791960:
					{
						return this.set_ConnectionPoolSize(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 766915428:
					{
						return this.get_ConnectionPoolSize();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("Schema");
			baseArr.push("ConnectionPoolSize");
			baseArr.push("ServerPort");
			baseArr.push("OtherParameters");
			baseArr.push("Database");
			baseArr.push("Password");
			baseArr.push("UserID");
			baseArr.push("SID");
			baseArr.push("ServiceName");
			baseArr.push("DataSource");
			baseArr.push("ConnectionString");
			baseArr.push("DatabaseTypeAuthentication");
			baseArr.push("DeploEnvironment");
			baseArr.push("DatabaseEngine");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


