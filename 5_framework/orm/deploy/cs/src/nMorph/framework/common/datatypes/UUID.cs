// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.common.datatypes {
	public class UUID : global::haxe.lang.HxObject {
		
		static UUID() {
			unchecked{
				global::nMorph.framework.common.datatypes.UUID.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
				global::nMorph.framework.common.datatypes.UUID.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
				global::nMorph.framework.common.datatypes.UUID.ISO_OID = "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
				global::nMorph.framework.common.datatypes.UUID.X500_DN = "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
				global::nMorph.framework.common.datatypes.UUID.NIL = "00000000-0000-0000-0000-000000000000";
				global::nMorph.framework.common.datatypes.UUID.LOWERCASE_BASE26 = "abcdefghijklmnopqrstuvwxyz";
				global::nMorph.framework.common.datatypes.UUID.UPPERCASE_BASE26 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
				global::nMorph.framework.common.datatypes.UUID.NO_LOOK_ALIKES_BASE51 = "2346789ABCDEFGHJKLMNPQRTUVWXYZabcdefghijkmnpqrtwxyz";
				global::nMorph.framework.common.datatypes.UUID.FLICKR_BASE58 = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
				global::nMorph.framework.common.datatypes.UUID.BASE_70 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+!@#$^";
				global::nMorph.framework.common.datatypes.UUID.COOKIE_BASE90 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&\'()*+-./:<=>?@[]^_`{|}~";
				global::nMorph.framework.common.datatypes.UUID.NANO_ID_ALPHABET = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
				global::nMorph.framework.common.datatypes.UUID.NUMBERS_BIN = "01";
				global::nMorph.framework.common.datatypes.UUID.NUMBERS_OCT = "01234567";
				global::nMorph.framework.common.datatypes.UUID.NUMBERS_DEC = "0123456789";
				global::nMorph.framework.common.datatypes.UUID.NUMBERS_HEX = "0123456789abcdef";
				global::nMorph.framework.common.datatypes.UUID.lastMSecs = 0;
				global::nMorph.framework.common.datatypes.UUID.lastNSecs = 0;
				global::nMorph.framework.common.datatypes.UUID.clockSequenceBuffer = -1;
				global::nMorph.framework.common.datatypes.UUID.regexp = new global::EReg(((string) ("^(?:[0-9a-f] {8}-[0-9a-f] {4}-[1-5][0-9a-f] {3}-[89ab][0-9a-f] {3}-[0-9a-f] {12}|00000000-0000-0000-0000-000000000000)$") ), ((string) ("i") ));
				global::nMorph.framework.common.datatypes.UUID.rndSeed = ((int) (( global::Sys.time() * 1000 )) );
				global::nMorph.framework.common.datatypes.UUID.state0 = global::nMorph.framework.common.datatypes.UUID.splitmix64_seed(global::nMorph.framework.common.datatypes.UUID.rndSeed);
				global::nMorph.framework.common.datatypes.UUID.state1 = global::nMorph.framework.common.datatypes.UUID.splitmix64_seed(( global::nMorph.framework.common.datatypes.UUID.rndSeed + 1 ));
			}
		}
		
		
		public UUID(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public UUID() {
			global::nMorph.framework.common.datatypes.UUID.__hx_ctor_nMorph_framework_common_datatypes_UUID(this);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_common_datatypes_UUID(global::nMorph.framework.common.datatypes.UUID __hx_this) {
			__hx_this.UUIDValue = "00000000-0000-0000-0000-000000000000";
			{
			}
			
		}
		
		
		public static global::nMorph.framework.common.datatypes.UUID empty() {
			return new global::nMorph.framework.common.datatypes.UUID().setValue("00000000-0000-0000-0000-000000000000");
		}
		
		
		public static global::nMorph.framework.common.datatypes.UUID fromBytes(global::haxe.io.Bytes UUIDBytes) {
			return new global::nMorph.framework.common.datatypes.UUID().setValuefromBytes(UUIDBytes);
		}
		
		
		public static global::nMorph.framework.common.datatypes.UUID newUUID() {
			return new global::nMorph.framework.common.datatypes.UUID().setValue(global::nMorph.framework.common.datatypes.UUID.v4(null, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::nMorph.framework.common.datatypes.UUID), "secureRandom", 1920084442)) ), null, default(global::haxe.lang.Null<bool>), null));
		}
		
		
		public static int secureRandom() {
			unchecked {
				return global::Std.random(256);
			}
		}
		
		
		public static global::nMorph.framework.common.datatypes.UUID fromString(string UUIDString) {
			return new global::nMorph.framework.common.datatypes.UUID().setValue(UUIDString);
		}
		
		
		public static string DNS;
		
		public static string URL;
		
		public static string ISO_OID;
		
		public static string X500_DN;
		
		public static string NIL;
		
		public static string LOWERCASE_BASE26;
		
		public static string UPPERCASE_BASE26;
		
		public static string NO_LOOK_ALIKES_BASE51;
		
		public static string FLICKR_BASE58;
		
		public static string BASE_70;
		
		public static string COOKIE_BASE90;
		
		public static string NANO_ID_ALPHABET;
		
		public static string NUMBERS_BIN;
		
		public static string NUMBERS_OCT;
		
		public static string NUMBERS_DEC;
		
		public static string NUMBERS_HEX;
		
		public static double lastMSecs;
		
		public static int lastNSecs;
		
		public static int clockSequenceBuffer;
		
		public static global::EReg regexp;
		
		public static int rndSeed;
		
		public static long state0;
		
		public static long state1;
		
		public static long splitmix64_seed(int index) {
			unchecked {
				long this1 = ( ( ((long) (-1640531527) ) << 32 ) | ( ((long) (2135587861) ) & 0xffffffffL ) );
				long result = ( ((long) (index) ) + ((long) (this1) ) );
				long this2 = ( ( ((long) (-1084733587) ) << 32 ) | ( ((long) (484763065) ) & 0xffffffffL ) );
				result = ( (((long) (( ((long) (result) ) ^ ((long) (( ((long) (result) ) >> 30 )) ) )) )) * ((long) (this2) ) );
				long this3 = ( ( ((long) (-1798288965) ) << 32 ) | ( ((long) (321982955) ) & 0xffffffffL ) );
				result = ( (((long) (( ((long) (result) ) ^ ((long) (( ((long) (result) ) >> 27 )) ) )) )) * ((long) (this3) ) );
				return ((long) (( ((long) (result) ) ^ ((long) (( ((long) (result) ) >> 31 )) ) )) );
			}
		}
		
		
		public static int randomFromRange(int min, int max) {
			unchecked {
				long s1 = global::nMorph.framework.common.datatypes.UUID.state0;
				long s0 = global::nMorph.framework.common.datatypes.UUID.state1;
				global::nMorph.framework.common.datatypes.UUID.state0 = s0;
				s1 = ((long) (( ((long) (s1) ) ^ ((long) (( ((long) (s1) ) << 23 )) ) )) );
				global::nMorph.framework.common.datatypes.UUID.state1 = ((long) (( ((long) (( ((long) (( ((long) (s1) ) ^ ((long) (s0) ) )) ) ^ ((long) (( ((ulong) (((long) (s1) )) ) >> 18 )) ) )) ) ^ ((long) (( ((ulong) (((long) (s0) )) ) >> 5 )) ) )) );
				int result = ((int) (((long) (( (((long) (( ((long) (global::nMorph.framework.common.datatypes.UUID.state1) ) + ((long) (s0) ) )) )) % (((long) (( ( max - min ) + 1 )) )) )) )) );
				if (( result < 0 )) {
					result =  - (result) ;
				}
				
				return ( result + min );
			}
		}
		
		
		public static int randomByte() {
			unchecked {
				return global::nMorph.framework.common.datatypes.UUID.randomFromRange(0, 255);
			}
		}
		
		
		public static string fromShort(string shortUUID, string separator, string fromAlphabet) {
			if (( fromAlphabet == null )) {
				fromAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
			}
			
			if (( separator == null )) {
				separator = "-";
			}
			
			string uuid = global::nMorph.framework.common.datatypes.UUID.convert(shortUUID, fromAlphabet, "0123456789abcdef");
			return global::nMorph.framework.common.datatypes.UUID.hexToUUID(uuid, separator);
		}
		
		
		public static string toShort(string uuid, string separator, string toAlphabet) {
			if (( toAlphabet == null )) {
				toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
			}
			
			if (( separator == null )) {
				separator = "-";
			}
			
			uuid = global::StringTools.replace(uuid, separator, "").ToLowerInvariant();
			return global::nMorph.framework.common.datatypes.UUID.convert(uuid, "0123456789abcdef", toAlphabet);
		}
		
		
		public static string fromNano(string nanoUUID, string separator, string fromAlphabet) {
			if (( fromAlphabet == null )) {
				fromAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			}
			
			if (( separator == null )) {
				separator = "-";
			}
			
			string uuid = global::nMorph.framework.common.datatypes.UUID.convert(nanoUUID, fromAlphabet, "0123456789abcdef");
			return global::nMorph.framework.common.datatypes.UUID.hexToUUID(uuid, separator);
		}
		
		
		public static string toNano(string uuid, string separator, string toAlphabet) {
			if (( toAlphabet == null )) {
				toAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			}
			
			if (( separator == null )) {
				separator = "-";
			}
			
			uuid = global::StringTools.replace(uuid, separator, "").ToLowerInvariant();
			return global::nMorph.framework.common.datatypes.UUID.convert(uuid, "0123456789abcdef", toAlphabet);
		}
		
		
		public static string v1(global::haxe.io.Bytes node, global::haxe.lang.Null<int> optClockSequence, global::haxe.lang.Null<double> msecs, global::haxe.lang.Null<int> optNsecs, global::haxe.lang.Function randomFunc, string separator, global::haxe.lang.Null<bool> shortUUID, string toAlphabet) {
			unchecked {
				if (( toAlphabet == null )) {
					toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
				}
				
				bool shortUUID1 = ( ( ! (shortUUID.hasValue) ) ? (false) : ((shortUUID).@value) );
				if (( separator == null )) {
					separator = "-";
				}
				
				int optNsecs1 = ( ( ! (optNsecs.hasValue) ) ? (-1) : ((optNsecs).@value) );
				double msecs1 = ( ( ! (msecs.hasValue) ) ? (((double) (-1) )) : ((msecs).@value) );
				int optClockSequence1 = ( ( ! (optClockSequence.hasValue) ) ? (-1) : ((optClockSequence).@value) );
				if (( randomFunc == null )) {
					randomFunc = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::nMorph.framework.common.datatypes.UUID), "randomByte", 821570219)) );
				}
				
				global::haxe.io.Bytes buffer = global::haxe.io.Bytes.alloc(16);
				if (( node == null )) {
					node = global::haxe.io.Bytes.alloc(6);
					{
						{
							int v = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[0] = ((byte) (v) );
						}
						
						{
							int v1 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[1] = ((byte) (v1) );
						}
						
						{
							int v2 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[2] = ((byte) (v2) );
						}
						
						{
							int v3 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[3] = ((byte) (v3) );
						}
						
						{
							int v4 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[4] = ((byte) (v4) );
						}
						
						{
							int v5 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							node.b[5] = ((byte) (v5) );
						}
						
					}
					
					node.b[0] = ((byte) (( ((int) (node.b[0]) ) | 1 )) );
				}
				
				if (( global::nMorph.framework.common.datatypes.UUID.clockSequenceBuffer == -1 )) {
					global::nMorph.framework.common.datatypes.UUID.clockSequenceBuffer = ( (( ( ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) ) << 8 ) | ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) ) )) & 16383 );
				}
				
				int clockSeq = optClockSequence1;
				if (( optClockSequence1 == -1 )) {
					clockSeq = global::nMorph.framework.common.datatypes.UUID.clockSequenceBuffer;
				}
				
				if (( msecs1 == -1 )) {
					msecs1 = global::Sys.time();
				}
				
				int nsecs = optNsecs1;
				if (( optNsecs1 == -1 )) {
					nsecs = ( global::nMorph.framework.common.datatypes.UUID.lastNSecs + 1 );
				}
				
				double dt = ( ( msecs1 - global::nMorph.framework.common.datatypes.UUID.lastMSecs ) + ( ((double) ((( nsecs - global::nMorph.framework.common.datatypes.UUID.lastNSecs ))) ) / 10000 ) );
				if (( ( dt < 0 ) && ( optClockSequence1 == -1 ) )) {
					clockSeq = ( ( clockSeq + 1 ) & 16383 );
				}
				
				if (( (( ( dt < 0 ) || ( msecs1 > global::nMorph.framework.common.datatypes.UUID.lastMSecs ) )) && ( optNsecs1 == -1 ) )) {
					nsecs = 0;
				}
				
				if (( nsecs >= 10000 )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Can\'t create more than 10M uuids/sec")) );
				}
				
				global::nMorph.framework.common.datatypes.UUID.lastMSecs = msecs1;
				global::nMorph.framework.common.datatypes.UUID.lastNSecs = nsecs;
				global::nMorph.framework.common.datatypes.UUID.clockSequenceBuffer = clockSeq;
				msecs1 += 12219292800000;
				long this1 = ( ( ((long) (1) ) << 32 ) | ( ((long) (0) ) & 0xffffffffL ) );
				long dvs = ((long) (this1) );
				int tl = ((int) (( (((long) (( ((long) (( (((long) (( ((long) (global::haxe._Int64.Int64_Impl_.fromFloat(msecs1)) ) & ((long) (268435455) ) )) )) * ((long) (10000) ) )) ) + ((long) (nsecs) ) )) )) % ((long) (dvs) ) )) );
				buffer.b[0] = ((byte) (( ((int) (( ((uint) (tl) ) >> 24 )) ) & 255 )) );
				buffer.b[1] = ((byte) (( ((int) (( ((uint) (tl) ) >> 16 )) ) & 255 )) );
				buffer.b[2] = ((byte) (( ((int) (( ((uint) (tl) ) >> 8 )) ) & 255 )) );
				buffer.b[3] = ((byte) (( tl & 255 )) );
				int tmh = ((int) (( ((long) (( ((long) (( ((long) (global::haxe._Int64.Int64_Impl_.fromFloat(msecs1)) ) / ((long) (dvs) ) )) ) * ((long) (10000) ) )) ) & ((long) (268435455) ) )) );
				buffer.b[4] = ((byte) (( ((int) (( ((uint) (tmh) ) >> 8 )) ) & 255 )) );
				buffer.b[5] = ((byte) (( tmh & 255 )) );
				buffer.b[6] = ((byte) (( ( ((int) (( ((uint) (tmh) ) >> 24 )) ) & 15 ) | 16 )) );
				buffer.b[7] = ((byte) (( ((int) (( ((uint) (tmh) ) >> 16 )) ) & 255 )) );
				buffer.b[8] = ((byte) (( ((int) (( ((uint) (clockSeq) ) >> 8 )) ) | 128 )) );
				buffer.b[9] = ((byte) (( clockSeq & 255 )) );
				{
					buffer.b[10] = ((byte) (((int) (node.b[0]) )) );
					buffer.b[11] = ((byte) (((int) (node.b[1]) )) );
					buffer.b[12] = ((byte) (((int) (node.b[2]) )) );
					buffer.b[13] = ((byte) (((int) (node.b[3]) )) );
					buffer.b[14] = ((byte) (((int) (node.b[4]) )) );
					buffer.b[15] = ((byte) (((int) (node.b[5]) )) );
				}
				
				string uuid = global::nMorph.framework.common.datatypes.UUID.stringify(buffer, separator);
				if (shortUUID1) {
					uuid = global::nMorph.framework.common.datatypes.UUID.toShort(uuid, separator, toAlphabet);
				}
				
				return uuid;
			}
		}
		
		
		public static string v3(string name, string @namespace, string separator, global::haxe.lang.Null<bool> shortUUID, string toAlphabet) {
			unchecked {
				if (( toAlphabet == null )) {
					toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
				}
				
				bool shortUUID1 = ( ( ! (shortUUID.hasValue) ) ? (false) : ((shortUUID).@value) );
				if (( separator == null )) {
					separator = "-";
				}
				
				if (( @namespace == null )) {
					@namespace = "";
				}
				
				@namespace = global::StringTools.replace(@namespace, "-", "");
				global::haxe.io.Bytes buffer = global::haxe.crypto.Md5.make(global::haxe.io.Bytes.ofHex(global::haxe.lang.Runtime.concat(@namespace, global::haxe.io.Bytes.ofString(name, null).toHex())));
				buffer.b[6] = ((byte) (( ( ((int) (buffer.b[6]) ) & 15 ) | 48 )) );
				buffer.b[8] = ((byte) (( ( ((int) (buffer.b[8]) ) & 63 ) | 128 )) );
				string uuid = global::nMorph.framework.common.datatypes.UUID.stringify(buffer, separator);
				if (shortUUID1) {
					uuid = global::nMorph.framework.common.datatypes.UUID.toShort(uuid, separator, toAlphabet);
				}
				
				return uuid;
			}
		}
		
		
		public static string v4(global::haxe.io.Bytes randBytes, global::haxe.lang.Function randomFunc, string separator, global::haxe.lang.Null<bool> shortUUID, string toAlphabet) {
			unchecked {
				if (( toAlphabet == null )) {
					toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
				}
				
				bool shortUUID1 = ( ( ! (shortUUID.hasValue) ) ? (false) : ((shortUUID).@value) );
				if (( separator == null )) {
					separator = "-";
				}
				
				if (( randomFunc == null )) {
					randomFunc = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::nMorph.framework.common.datatypes.UUID), "randomByte", 821570219)) );
				}
				
				global::haxe.io.Bytes buffer = randBytes;
				if (( buffer == null )) {
					buffer = global::haxe.io.Bytes.alloc(16);
					{
						{
							int v = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[0] = ((byte) (v) );
						}
						
						{
							int v1 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[1] = ((byte) (v1) );
						}
						
						{
							int v2 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[2] = ((byte) (v2) );
						}
						
						{
							int v3 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[3] = ((byte) (v3) );
						}
						
						{
							int v4 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[4] = ((byte) (v4) );
						}
						
						{
							int v5 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[5] = ((byte) (v5) );
						}
						
						{
							int v6 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[6] = ((byte) (v6) );
						}
						
						{
							int v7 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[7] = ((byte) (v7) );
						}
						
						{
							int v8 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[8] = ((byte) (v8) );
						}
						
						{
							int v9 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[9] = ((byte) (v9) );
						}
						
						{
							int v10 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[10] = ((byte) (v10) );
						}
						
						{
							int v11 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[11] = ((byte) (v11) );
						}
						
						{
							int v12 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[12] = ((byte) (v12) );
						}
						
						{
							int v13 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[13] = ((byte) (v13) );
						}
						
						{
							int v14 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[14] = ((byte) (v14) );
						}
						
						{
							int v15 = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
							buffer.b[15] = ((byte) (v15) );
						}
						
					}
					
				}
				else if (( buffer.length < 16 )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Random bytes should be at least 16 bytes")) );
				}
				
				buffer.b[6] = ((byte) (( ( ((int) (buffer.b[6]) ) & 15 ) | 64 )) );
				buffer.b[8] = ((byte) (( ( ((int) (buffer.b[8]) ) & 63 ) | 128 )) );
				string uuid = global::nMorph.framework.common.datatypes.UUID.stringify(buffer, separator);
				if (shortUUID1) {
					uuid = global::nMorph.framework.common.datatypes.UUID.toShort(uuid, separator, toAlphabet);
				}
				
				return uuid;
			}
		}
		
		
		public static string v5(string name, string @namespace, string separator, global::haxe.lang.Null<bool> shortUUID, string toAlphabet) {
			unchecked {
				if (( toAlphabet == null )) {
					toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
				}
				
				bool shortUUID1 = ( ( ! (shortUUID.hasValue) ) ? (false) : ((shortUUID).@value) );
				if (( separator == null )) {
					separator = "-";
				}
				
				if (( @namespace == null )) {
					@namespace = "";
				}
				
				@namespace = global::StringTools.replace(@namespace, "-", "");
				global::haxe.io.Bytes buffer = global::haxe.crypto.Sha1.make(global::haxe.io.Bytes.ofHex(global::haxe.lang.Runtime.concat(@namespace, global::haxe.io.Bytes.ofString(name, null).toHex())));
				buffer.b[6] = ((byte) (( ( ((int) (buffer.b[6]) ) & 15 ) | 80 )) );
				buffer.b[8] = ((byte) (( ( ((int) (buffer.b[8]) ) & 63 ) | 128 )) );
				string uuid = global::nMorph.framework.common.datatypes.UUID.stringify(buffer, separator);
				if (shortUUID1) {
					uuid = global::nMorph.framework.common.datatypes.UUID.toShort(uuid, separator, toAlphabet);
				}
				
				return uuid;
			}
		}
		
		
		public static string stringify(global::haxe.io.Bytes data, string separator) {
			if (( separator == null )) {
				separator = "-";
			}
			
			return global::nMorph.framework.common.datatypes.UUID.hexToUUID(data.toHex(), separator);
		}
		
		
		public static global::haxe.io.Bytes parse(string uuid, string separator) {
			if (( separator == null )) {
				separator = "-";
			}
			
			return global::haxe.io.Bytes.ofHex(global::StringTools.replace(uuid, separator, ""));
		}
		
		
		public static bool validate(string uuid, string separator) {
			unchecked {
				if (( separator == null )) {
					separator = "-";
				}
				
				if (( separator == "" )) {
					uuid = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(uuid, 0, new global::haxe.lang.Null<int>(8, true)), "-"), global::haxe.lang.StringExt.substr(uuid, 8, new global::haxe.lang.Null<int>(4, true))), "-"), global::haxe.lang.StringExt.substr(uuid, 12, new global::haxe.lang.Null<int>(4, true))), "-"), global::haxe.lang.StringExt.substr(uuid, 16, new global::haxe.lang.Null<int>(4, true))), "-"), global::haxe.lang.StringExt.substr(uuid, 20, new global::haxe.lang.Null<int>(12, true)));
				}
				else if (( separator != "-" )) {
					uuid = global::StringTools.replace(uuid, separator, "-");
				}
				
				return global::nMorph.framework.common.datatypes.UUID.regexp.match(uuid);
			}
		}
		
		
		public static int version(string uuid, string separator) {
			unchecked {
				if (( separator == null )) {
					separator = "-";
				}
				
				uuid = global::StringTools.replace(uuid, separator, "");
				return (global::Std.parseInt(global::haxe.lang.Runtime.concat("0x", global::haxe.lang.StringExt.substr(uuid, 12, new global::haxe.lang.Null<int>(1, true))))).@value;
			}
		}
		
		
		public static string hexToUUID(string hex, string separator) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(hex, 0, new global::haxe.lang.Null<int>(8, true)), separator), global::haxe.lang.StringExt.substr(hex, 8, new global::haxe.lang.Null<int>(4, true))), separator), global::haxe.lang.StringExt.substr(hex, 12, new global::haxe.lang.Null<int>(4, true))), separator), global::haxe.lang.StringExt.substr(hex, 16, new global::haxe.lang.Null<int>(4, true))), separator), global::haxe.lang.StringExt.substr(hex, 20, new global::haxe.lang.Null<int>(12, true)));
			}
		}
		
		
		public static string convert(string number, string fromAlphabet, string toAlphabet) {
			int fromBase = fromAlphabet.Length;
			int toBase = toAlphabet.Length;
			int len = number.Length;
			string buf = "";
			int[] this1 = new int[len];
			int[] numberMap = ((int[]) (this1) );
			int divide = 0;
			int newlen = 0;
			{
				int _g = 0;
				int _g1 = len;
				while (( _g < _g1 )) {
					int i = _g++;
					((int[]) (numberMap) )[i] = global::haxe.lang.StringExt.indexOf(fromAlphabet, global::haxe.lang.StringExt.charAt(number, i), default(global::haxe.lang.Null<int>));
				}
				
			}
			
			while (true) {
				divide = 0;
				newlen = 0;
				{
					int _g2 = 0;
					int _g3 = len;
					while (( _g2 < _g3 )) {
						int i1 = _g2++;
						divide = ( ( divide * fromBase ) + ((int[]) (numberMap) )[i1] );
						if (( divide >= toBase )) {
							((int[]) (numberMap) )[newlen++] = ((int) (global::System.Math.Floor(((double) (( ((double) (divide) ) / toBase )) ))) );
							divide %= toBase;
						}
						else if (( newlen > 0 )) {
							((int[]) (numberMap) )[newlen++] = 0;
						}
						
					}
					
				}
				
				len = newlen;
				buf = global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.charAt(toAlphabet, divide), buf);
				if ( ! ((( newlen != 0 ))) ) {
					break;
				}
				
			}
			
			return buf;
		}
		
		
		public static string nanoId(global::haxe.lang.Null<int> len, string alphabet, global::haxe.lang.Function randomFunc) {
			unchecked {
				if (( alphabet == null )) {
					alphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
				}
				
				int len1 = ( ( ! (len.hasValue) ) ? (21) : ((len).@value) );
				if (( randomFunc == null )) {
					randomFunc = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::nMorph.framework.common.datatypes.UUID), "randomByte", 821570219)) );
				}
				
				if (( alphabet == null )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Alphabet cannot be null")) );
				}
				
				if (( ( alphabet.Length == 0 ) || ( alphabet.Length >= 256 ) )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Alphabet must contain between 1 and 255 symbols")) );
				}
				
				if (( len1 <= 0 )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Length must be greater than zero")) );
				}
				
				int mask = ( (( 2 << ((int) (global::System.Math.Floor(((double) (( global::System.Math.Log(((double) (( alphabet.Length - 1 )) )) / global::System.Math.Log(((double) (2) )) )) ))) ) )) - 1 );
				int step = ((int) (global::System.Math.Ceiling(((double) (( ( ( 1.6 * mask ) * len1 ) / alphabet.Length )) ))) );
				global::System.Text.StringBuilder sb_b = new global::System.Text.StringBuilder();
				while (( sb_b.Length != len1 )) {
					int _g = 0;
					int _g1 = step;
					while (( _g < _g1 )) {
						int i = _g++;
						int rnd = ((int) (((global::haxe.lang.Function) (randomFunc) ).__hx_invoke0_f()) );
						int aIndex = ( rnd & mask );
						if (( aIndex < alphabet.Length )) {
							sb_b.Append(((string) (global::Std.@string(global::haxe.lang.StringExt.charAt(alphabet, aIndex))) ));
							if (( sb_b.Length == len1 )) {
								break;
							}
							
						}
						
					}
					
				}
				
				return sb_b.ToString();
			}
		}
		
		
		public static string @short(string toAlphabet, global::haxe.lang.Function randomFunc) {
			if (( toAlphabet == null )) {
				toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
			}
			
			return global::nMorph.framework.common.datatypes.UUID.v4(null, randomFunc, null, new global::haxe.lang.Null<bool>(true, true), toAlphabet);
		}
		
		
		public string UUIDValue;
		
		public virtual global::nMorph.framework.common.datatypes.UUID setValue(string UUIDString) {
			if (( UUIDString == null )) {
				this.UUIDValue = null;
			}
			else {
				this.UUIDValue = UUIDString.ToUpperInvariant();
			}
			
			return this;
		}
		
		
		public virtual global::nMorph.framework.common.datatypes.UUID assign(string b) {
			this.setValue(b);
			return this;
		}
		
		
		public virtual bool @equals(global::nMorph.framework.common.datatypes.UUID b) {
			return ( this.UUIDValue == b.UUIDValue );
		}
		
		
		public virtual bool diff(global::nMorph.framework.common.datatypes.UUID b) {
			return ( this.UUIDValue != b.UUIDValue );
		}
		
		
		public virtual string getValue() {
			return this.UUIDValue;
		}
		
		
		public virtual string toString() {
			return this.UUIDValue;
		}
		
		
		public virtual string getShort() {
			if (( this.UUIDValue == null )) {
				return null;
			}
			
			return global::nMorph.framework.common.datatypes.UUID.toShort(this.UUIDValue, null, null);
		}
		
		
		public virtual string getNano() {
			if (( this.UUIDValue == null )) {
				return null;
			}
			
			return global::nMorph.framework.common.datatypes.UUID.toNano(this.UUIDValue, null, null);
		}
		
		
		public virtual global::haxe.io.Bytes getBytes() {
			if (( this.UUIDValue == null )) {
				return null;
			}
			
			return global::nMorph.framework.common.datatypes.UUID.parse(this.UUIDValue, null);
		}
		
		
		public virtual global::nMorph.framework.common.datatypes.UUID setValuefromBytes(global::haxe.io.Bytes UUIDBytes) {
			this.setValue(global::nMorph.framework.common.datatypes.UUID.stringify(UUIDBytes, null));
			return this;
		}
		
		
		public virtual bool isEMPTY() {
			if (( this.UUIDValue == null )) {
				return false;
			}
			
			if (( this.UUIDValue == "00000000-0000-0000-0000-000000000000" )) {
				return true;
			}
			
			return false;
		}
		
		
		public virtual bool isNULL() {
			if (( this.UUIDValue == null )) {
				return true;
			}
			
			return false;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1488000822:
					{
						this.UUIDValue = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1717370737:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isNULL", 1717370737)) );
					}
					
					
					case 1998628419:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isEMPTY", 1998628419)) );
					}
					
					
					case 832635986:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setValuefromBytes", 832635986)) );
					}
					
					
					case 493819893:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBytes", 493819893)) );
					}
					
					
					case 461513450:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getNano", 461513450)) );
					}
					
					
					case 1543410694:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getShort", 1543410694)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 294620923:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getValue", 294620923)) );
					}
					
					
					case 1114201093:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "diff", 1114201093)) );
					}
					
					
					case 1072885311:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "equals", 1072885311)) );
					}
					
					
					case 1275479599:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assign", 1275479599)) );
					}
					
					
					case 1072490607:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setValue", 1072490607)) );
					}
					
					
					case 1488000822:
					{
						return this.UUIDValue;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1717370737:
					{
						return this.isNULL();
					}
					
					
					case 1998628419:
					{
						return this.isEMPTY();
					}
					
					
					case 832635986:
					{
						return this.setValuefromBytes(((global::haxe.io.Bytes) (dynargs[0]) ));
					}
					
					
					case 493819893:
					{
						return this.getBytes();
					}
					
					
					case 461513450:
					{
						return this.getNano();
					}
					
					
					case 1543410694:
					{
						return this.getShort();
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 294620923:
					{
						return this.getValue();
					}
					
					
					case 1114201093:
					{
						return this.diff(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
					}
					
					
					case 1072885311:
					{
						return this.@equals(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
					}
					
					
					case 1275479599:
					{
						return this.assign(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1072490607:
					{
						return this.setValue(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("UUIDValue");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


