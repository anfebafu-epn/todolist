// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.common.ddl {
	public class ConstrainPKDefinition : global::haxe.lang.HxObject, global::nMorph.framework.orm.interfaces.IColumnDefinition {
		
		static ConstrainPKDefinition() {
			global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition.__rtti = "<class path=\"nMorph.framework.orm.common.ddl.ConstrainPKDefinition\" params=\"\">\n\t<implements path=\"nMorph.framework.orm.interfaces.IColumnDefinition\"/>\n\t<SET public=\"1\" set=\"method\" line=\"22\" static=\"1\"><f a=\"PKName:ColumnsNames\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"nMorph.framework.orm.common.ddl.ConstrainPKDefinition\"/>\n</f></SET>\n\t<PKName><c path=\"String\"/></PKName>\n\t<ColumnsNames><c path=\"Array\"><c path=\"String\"/></c></ColumnsNames>\n\t<CurrentDDL><c path=\"nMorph.framework.orm.lang.DDL\"/></CurrentDDL>\n\t<RegisterQuery public=\"1\" set=\"method\" line=\"27\"><f a=\"CurrentDDL\">\n\t<c path=\"nMorph.framework.orm.interfaces.ILang\"/>\n\t<x path=\"Void\"/>\n</f></RegisterQuery>\n\t<SCRIPT_PART public=\"1\" set=\"method\" line=\"31\"><f a=\"?args\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></SCRIPT_PART>\n\t<new public=\"1\" set=\"method\" line=\"17\"><f a=\"PKName:ColumnsNames\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public ConstrainPKDefinition(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ConstrainPKDefinition(string PKName, global::Array<string> ColumnsNames) {
			global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition.__hx_ctor_nMorph_framework_orm_common_ddl_ConstrainPKDefinition(this, PKName, ColumnsNames);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_common_ddl_ConstrainPKDefinition(global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition __hx_this, string PKName, global::Array<string> ColumnsNames) {
			__hx_this.PKName = PKName;
			__hx_this.ColumnsNames = ColumnsNames;
		}
		
		
		public static string __rtti;
		
		public static global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition SET(string PKName, global::Array<string> ColumnsNames) {
			global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition cd = new global::nMorph.framework.orm.common.ddl.ConstrainPKDefinition(((string) (PKName) ), ((global::Array<string>) (ColumnsNames) ));
			return cd;
		}
		
		
		public string PKName;
		
		public global::Array<string> ColumnsNames;
		
		public global::nMorph.framework.orm.lang.DDL CurrentDDL;
		
		public virtual void RegisterQuery(global::nMorph.framework.orm.interfaces.ILang CurrentDDL) {
			this.CurrentDDL = ((global::nMorph.framework.orm.lang.DDL) (CurrentDDL) );
		}
		
		
		public virtual string SCRIPT_PART(string args) {
			unchecked {
				string Part = "";
				if (( this.CurrentDDL == null )) {
					this.CurrentDDL = new global::nMorph.framework.orm.lang.DDL();
				}
				
				switch (this.CurrentDDL.getCurrentEngine()._hx_index) {
					case 0:
					{
						Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" CONSTRAINT \"PK", this.PKName), "\" PRIMARY KEY ( "));
						{
							int _g = 0;
							global::Array<string> _g1 = this.ColumnsNames;
							while (( _g < _g1.length )) {
								string columnName = _g1[_g];
								 ++ _g;
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", columnName), "\" , "));
							}
							
						}
						
						if (( global::haxe.lang.StringExt.substr(Part, ( Part.Length - 2 ), new global::haxe.lang.Null<int>(2, true)) == ", " )) {
							Part = global::haxe.lang.StringExt.substr(Part, 0, new global::haxe.lang.Null<int>(( Part.Length - 2 ), true));
						}
						
						Part = global::haxe.lang.Runtime.concat(Part, ")");
						break;
					}
					
					
					case 1:
					{
						Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" CONSTRAINT \"PK", this.PKName), "\" PRIMARY KEY ( "));
						{
							int _g2 = 0;
							global::Array<string> _g3 = this.ColumnsNames;
							while (( _g2 < _g3.length )) {
								string columnName1 = _g3[_g2];
								 ++ _g2;
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", columnName1), "\" , "));
							}
							
						}
						
						if (( global::haxe.lang.StringExt.substr(Part, ( Part.Length - 2 ), new global::haxe.lang.Null<int>(2, true)) == ", " )) {
							Part = global::haxe.lang.StringExt.substr(Part, 0, new global::haxe.lang.Null<int>(( Part.Length - 2 ), true));
						}
						
						Part = global::haxe.lang.Runtime.concat(Part, ")");
						break;
					}
					
					
					case 2:
					{
						Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" CONSTRAINT \"PK", this.PKName), "\" PRIMARY KEY ( "));
						{
							int _g4 = 0;
							global::Array<string> _g5 = this.ColumnsNames;
							while (( _g4 < _g5.length )) {
								string columnName2 = _g5[_g4];
								 ++ _g4;
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", columnName2), " , "));
							}
							
						}
						
						if (( global::haxe.lang.StringExt.substr(Part, ( Part.Length - 2 ), new global::haxe.lang.Null<int>(2, true)) == ", " )) {
							Part = global::haxe.lang.StringExt.substr(Part, 0, new global::haxe.lang.Null<int>(( Part.Length - 2 ), true));
						}
						
						Part = global::haxe.lang.Runtime.concat(Part, ")");
						break;
					}
					
					
					case 3:
					{
						Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" CONSTRAINT \"PK", this.PKName), "\" PRIMARY KEY ( "));
						{
							int _g6 = 0;
							global::Array<string> _g7 = this.ColumnsNames;
							while (( _g6 < _g7.length )) {
								string columnName3 = _g7[_g6];
								 ++ _g6;
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", columnName3), "\" , "));
							}
							
						}
						
						if (( global::haxe.lang.StringExt.substr(Part, ( Part.Length - 2 ), new global::haxe.lang.Null<int>(2, true)) == ", " )) {
							Part = global::haxe.lang.StringExt.substr(Part, 0, new global::haxe.lang.Null<int>(( Part.Length - 2 ), true));
						}
						
						Part = global::haxe.lang.Runtime.concat(Part, ")");
						break;
					}
					
					
					case 4:
					{
						Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" CONSTRAINT \"PK", this.PKName), "\" PRIMARY KEY ( "));
						{
							int _g8 = 0;
							global::Array<string> _g9 = this.ColumnsNames;
							while (( _g8 < _g9.length )) {
								string columnName4 = _g9[_g8];
								 ++ _g8;
								Part = global::haxe.lang.Runtime.concat(Part, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", columnName4), "\" , "));
							}
							
						}
						
						if (( global::haxe.lang.StringExt.substr(Part, ( Part.Length - 2 ), new global::haxe.lang.Null<int>(2, true)) == ", " )) {
							Part = global::haxe.lang.StringExt.substr(Part, 0, new global::haxe.lang.Null<int>(( Part.Length - 2 ), true));
						}
						
						Part = global::haxe.lang.Runtime.concat(Part, ")");
						break;
					}
					
					
				}
				
				return Part;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1037559379:
					{
						this.CurrentDDL = ((global::nMorph.framework.orm.lang.DDL) (@value) );
						return @value;
					}
					
					
					case 2059001291:
					{
						this.ColumnsNames = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1601371622:
					{
						this.PKName = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2032371175:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SCRIPT_PART", 2032371175)) );
					}
					
					
					case 457416069:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "RegisterQuery", 457416069)) );
					}
					
					
					case 1037559379:
					{
						return this.CurrentDDL;
					}
					
					
					case 2059001291:
					{
						return this.ColumnsNames;
					}
					
					
					case 1601371622:
					{
						return this.PKName;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 2032371175:
					{
						return this.SCRIPT_PART(global::haxe.lang.Runtime.toString(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )));
					}
					
					
					case 457416069:
					{
						this.RegisterQuery(((global::nMorph.framework.orm.interfaces.ILang) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("CurrentDDL");
			baseArr.push("ColumnsNames");
			baseArr.push("PKName");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


