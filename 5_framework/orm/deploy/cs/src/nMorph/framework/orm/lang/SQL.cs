// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.framework.orm.lang {
	public class SQL : global::haxe.lang.HxObject, global::nMorph.framework.orm.interfaces.ILang {
		
		static SQL() {
			global::nMorph.framework.orm.lang.SQL.AllColumns = new global::Array<object>(new object[]{});
		}
		
		
		public SQL(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public SQL() {
			global::nMorph.framework.orm.lang.SQL.__hx_ctor_nMorph_framework_orm_lang_SQL(this);
		}
		
		
		protected static void __hx_ctor_nMorph_framework_orm_lang_SQL(global::nMorph.framework.orm.lang.SQL __hx_this) {
			__hx_this.UniqueQueryNumber = null;
			__hx_this.GeneratedBlocks = new global::Array<string>();
			__hx_this.QueryBlocks = new global::Array<object>();
			__hx_this.Parameters = new global::Array<object>();
			__hx_this.Clauses = new global::Array<object>();
			{
			}
			
		}
		
		
		public static global::Array<object> AllColumns;
		
		public static global::nMorph.framework.orm.common.clauses.SelectClause SELECT(global::Array<object> Sentences, global::nMorph.framework.common.datatypes.UUID UniqueQueryNumber) {
			global::nMorph.framework.orm.lang.SQL CurrentSQL = new global::nMorph.framework.orm.lang.SQL();
			if (( Sentences == null )) {
				Sentences = new global::Array<object>(new object[]{});
			}
			
			global::nMorph.framework.orm.common.clauses.SelectClause sc = new global::nMorph.framework.orm.common.clauses.SelectClause(((global::nMorph.framework.orm.lang.SQL) (CurrentSQL) ), ((global::Array<object>) (Sentences) ));
			CurrentSQL.AddClause(sc);
			CurrentSQL.UniqueQueryNumber = UniqueQueryNumber;
			return sc;
		}
		
		
		public static global::nMorph.framework.orm.common.clauses.InsertIntoClause INSERT(global::nMorph.framework.orm.interfaces.ISource Into, global::nMorph.framework.common.datatypes.UUID UniqueQueryNumber) {
			global::nMorph.framework.orm.lang.SQL CurrentSQL = new global::nMorph.framework.orm.lang.SQL();
			global::nMorph.framework.orm.common.clauses.InsertIntoClause ic = new global::nMorph.framework.orm.common.clauses.InsertIntoClause(((global::nMorph.framework.orm.lang.SQL) (CurrentSQL) ), ((global::nMorph.framework.orm.interfaces.ISource) (Into) ));
			CurrentSQL.AddClause(ic);
			CurrentSQL.UniqueQueryNumber = UniqueQueryNumber;
			return ic;
		}
		
		
		public static global::nMorph.framework.orm.common.clauses.UpdateClause UPDATE(global::nMorph.framework.orm.interfaces.ISource UpdateSource, global::nMorph.framework.common.datatypes.UUID UniqueQueryNumber) {
			global::nMorph.framework.orm.lang.SQL CurrentSQL = new global::nMorph.framework.orm.lang.SQL();
			global::nMorph.framework.orm.common.clauses.UpdateClause uc = new global::nMorph.framework.orm.common.clauses.UpdateClause(((global::nMorph.framework.orm.lang.SQL) (CurrentSQL) ), ((global::nMorph.framework.orm.interfaces.ISource) (UpdateSource) ));
			CurrentSQL.AddClause(uc);
			CurrentSQL.UniqueQueryNumber = UniqueQueryNumber;
			return uc;
		}
		
		
		public static global::nMorph.framework.orm.common.clauses.DeleteClause DELETE(global::nMorph.framework.common.datatypes.UUID UniqueQueryNumber) {
			global::nMorph.framework.orm.lang.SQL CurrentSQL = new global::nMorph.framework.orm.lang.SQL();
			global::nMorph.framework.orm.common.clauses.DeleteClause dc = new global::nMorph.framework.orm.common.clauses.DeleteClause(((global::nMorph.framework.orm.lang.SQL) (CurrentSQL) ));
			CurrentSQL.AddClause(dc);
			CurrentSQL.UniqueQueryNumber = UniqueQueryNumber;
			return dc;
		}
		
		
		public static global::nMorph.framework.orm.common.clauses.CustomClause CUSTOM(global::haxe.ds.StringMap<object> CustomQueries, global::Array<object> Parameters) {
			global::nMorph.framework.orm.lang.SQL CurrentSQL = new global::nMorph.framework.orm.lang.SQL();
			global::nMorph.framework.orm.common.clauses.CustomClause cc = new global::nMorph.framework.orm.common.clauses.CustomClause(((global::nMorph.framework.orm.lang.SQL) (CurrentSQL) ), ((global::haxe.ds.StringMap<object>) (CustomQueries) ), ((global::Array<object>) (Parameters) ));
			CurrentSQL.AddClause(cc);
			return cc;
		}
		
		
		public global::nMorph.framework.orm.configuration.Configuration cf;
		
		public global::Array<object> Clauses;
		
		public global::Array<object> Parameters;
		
		public global::Array<object> QueryBlocks;
		
		public global::Array<string> GeneratedBlocks;
		
		public global::nMorph.framework.common.datatypes.UUID UniqueQueryNumber;
		
		public virtual void AddClause(global::nMorph.framework.orm.interfaces.IClause Clause) {
			this.Clauses.push(Clause);
		}
		
		
		public virtual string AddParameter(global::nMorph.framework.orm.client.QueryParameter p) {
			this.Parameters.push(p);
			p.set_ParameterName(global::haxe.lang.Runtime.concat("P", global::nMorph.framework.common.datatypes.UUID.newUUID().getShort()));
			return p.get_ParameterName();
		}
		
		
		public virtual void AddQueryBlock(global::nMorph.framework.orm.client.QueryBlock b) {
			this.QueryBlocks.push(b);
		}
		
		
		public virtual void AddBlock(string Block) {
			this.GeneratedBlocks.push(Block);
		}
		
		
		public virtual bool ContainsClause(global::System.Type t) {
			{
				int _g = 0;
				global::Array<object> _g1 = this.Clauses;
				while (( _g < _g1.length )) {
					global::nMorph.framework.orm.interfaces.IClause clause = ((global::nMorph.framework.orm.interfaces.IClause) (_g1[_g]) );
					 ++ _g;
					if (global::haxe.lang.Runtime.typeEq(global::Type.getClass<object>(((object) (clause) )), t)) {
						return true;
					}
					
				}
				
			}
			
			return false;
		}
		
		
		public virtual void RemoveLastBlock() {
			string __temp_expr1 = global::haxe.lang.Runtime.toString((this.GeneratedBlocks.pop()).toDynamic());
		}
		
		
		public virtual string GenerateAll() {
			unchecked {
				switch (global::nMorph.framework.orm.configuration.Configuration.Data.get_CurrentDatabaseConnection().get_DatabaseEngine()._hx_index) {
					case 0:
					{
						string Script = "";
						{
							int _g = 0;
							global::Array<object> _g1 = this.Clauses;
							while (( _g < _g1.length )) {
								global::nMorph.framework.orm.interfaces.IClause clause = ((global::nMorph.framework.orm.interfaces.IClause) (_g1[_g]) );
								 ++ _g;
								clause.SCRIPT_PART(null);
								this.AddBlock("\n");
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						string Script1 = "";
						{
							int _g2 = 0;
							global::Array<object> _g3 = this.Clauses;
							while (( _g2 < _g3.length )) {
								global::nMorph.framework.orm.interfaces.IClause clause1 = ((global::nMorph.framework.orm.interfaces.IClause) (_g3[_g2]) );
								 ++ _g2;
								clause1.SCRIPT_PART(null);
								this.AddBlock("\n");
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						string Script2 = "";
						{
							int _g4 = 0;
							global::Array<object> _g5 = this.Clauses;
							while (( _g4 < _g5.length )) {
								global::nMorph.framework.orm.interfaces.IClause clause2 = ((global::nMorph.framework.orm.interfaces.IClause) (_g5[_g4]) );
								 ++ _g4;
								clause2.SCRIPT_PART(null);
								this.AddBlock("\n");
							}
							
						}
						
						break;
					}
					
					
					case 3:
					{
						string Script3 = "";
						{
							int _g6 = 0;
							global::Array<object> _g7 = this.Clauses;
							while (( _g6 < _g7.length )) {
								global::nMorph.framework.orm.interfaces.IClause clause3 = ((global::nMorph.framework.orm.interfaces.IClause) (_g7[_g6]) );
								 ++ _g6;
								clause3.SCRIPT_PART(null);
								this.AddBlock("\n");
							}
							
						}
						
						break;
					}
					
					
					case 4:
					{
						string Script4 = "";
						{
							int _g8 = 0;
							global::Array<object> _g9 = this.Clauses;
							while (( _g8 < _g9.length )) {
								global::nMorph.framework.orm.interfaces.IClause clause4 = ((global::nMorph.framework.orm.interfaces.IClause) (_g9[_g8]) );
								 ++ _g8;
								clause4.SCRIPT_PART(null);
								this.AddBlock("\n");
							}
							
						}
						
						break;
					}
					
					
				}
				
				string FinalScript = "";
				{
					int _g10 = 0;
					global::Array<string> _g11 = this.GeneratedBlocks;
					while (( _g10 < _g11.length )) {
						string CodeBlock = _g11[_g10];
						 ++ _g10;
						if (CodeBlock.StartsWith("{{")) {
							global::Array<object> _this = this.QueryBlocks;
							global::Array<object> ret = new global::Array<object>(new object[]{});
							{
								int _g12 = 0;
								int _g13 = _this.length;
								while (( _g12 < _g13 )) {
									int i = _g12++;
									global::nMorph.framework.orm.client.QueryBlock elt = ((global::nMorph.framework.orm.client.QueryBlock) (_this.__a[i]) );
									if (( elt.get_BlockName() == CodeBlock )) {
										ret.push(elt);
									}
									
								}
								
							}
							
							global::Array<object> BlockFound = ret;
							if (( BlockFound.length > 0 )) {
								FinalScript = global::haxe.lang.Runtime.concat(FinalScript, global::Std.@string(((global::nMorph.framework.orm.client.QueryBlock) (BlockFound[0]) )));
							}
							
						}
						else {
							FinalScript = global::haxe.lang.Runtime.concat(FinalScript, CodeBlock);
						}
						
					}
					
				}
				
				return FinalScript;
			}
		}
		
		
		public virtual object Execute() {
			string GeneratedSQL = this.GenerateAll();
			return global::nMorph.framework.orm.client.Connector.Execute(GeneratedSQL, this.Parameters);
		}
		
		
		public virtual global::Array<object> Queue(global::Array<object> queue) {
			string GeneratedSQL = this.GenerateAll();
			return global::nMorph.framework.orm.client.Connector.Queue(GeneratedSQL, this.Parameters, queue);
		}
		
		
		public virtual object ReadValue() {
			string GeneratedSQL = this.GenerateAll();
			return global::nMorph.framework.orm.client.Connector.ReadValue(GeneratedSQL, this.Parameters);
		}
		
		
		public virtual global::nMorph.framework.orm.client.QueryTable ReadTable() {
			string GeneratedSQL = this.GenerateAll();
			return global::nMorph.framework.orm.client.Connector.ReadTable(GeneratedSQL, this.Parameters);
		}
		
		
		public virtual global::Array<T> Read<T>(global::System.Type cl, global::nMorph.framework.orm.tools.Context context) {
			string GeneratedSQL = this.GenerateAll();
			bool MultipleTables = false;
			{
				int _g = 0;
				global::Array<object> _g1 = this.Clauses;
				while (( _g < _g1.length )) {
					global::nMorph.framework.orm.interfaces.IClause clause = ((global::nMorph.framework.orm.interfaces.IClause) (_g1[_g]) );
					 ++ _g;
					if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.JoinClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.UnionClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.InsertIntoClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.UpdateClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.DeleteClause))) {
						MultipleTables = true;
					}
					
					if (MultipleTables) {
						break;
					}
					
				}
				
			}
			
			if (MultipleTables) {
				return global::nMorph.framework.orm.client.Connector.Read<T>(((string) (GeneratedSQL) ), ((global::Array<object>) (this.Parameters) ), ((global::System.Type) (cl) ), default(global::nMorph.framework.orm.tools.Context));
			}
			else {
				return global::nMorph.framework.orm.client.Connector.Read<T>(((string) (GeneratedSQL) ), ((global::Array<object>) (this.Parameters) ), ((global::System.Type) (cl) ), ((global::nMorph.framework.orm.tools.Context) (context) ));
			}
			
		}
		
		
		public virtual T ReadOne<T>(global::System.Type cl, global::nMorph.framework.orm.tools.Context context) {
			string GeneratedSQL = this.GenerateAll();
			bool MultipleTables = false;
			{
				int _g = 0;
				global::Array<object> _g1 = this.Clauses;
				while (( _g < _g1.length )) {
					global::nMorph.framework.orm.interfaces.IClause clause = ((global::nMorph.framework.orm.interfaces.IClause) (_g1[_g]) );
					 ++ _g;
					if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.JoinClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.UnionClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.InsertIntoClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.UpdateClause))) {
						MultipleTables = true;
					}
					else if (global::haxe.lang.Runtime.refEq(global::Type.getClass<object>(((object) (clause) )), typeof(global::nMorph.framework.orm.common.clauses.DeleteClause))) {
						MultipleTables = true;
					}
					
					if (MultipleTables) {
						break;
					}
					
				}
				
			}
			
			if (MultipleTables) {
				return global::nMorph.framework.orm.client.Connector.ReadOne<T>(((string) (GeneratedSQL) ), ((global::Array<object>) (this.Parameters) ), ((global::System.Type) (cl) ), default(global::nMorph.framework.orm.tools.Context));
			}
			else {
				return global::nMorph.framework.orm.client.Connector.ReadOne<T>(((string) (GeneratedSQL) ), ((global::Array<object>) (this.Parameters) ), ((global::System.Type) (cl) ), ((global::nMorph.framework.orm.tools.Context) (context) ));
			}
			
		}
		
		
		public virtual global::nMorph.framework.orm.configuration.DatabaseEngineEnum getCurrentEngine() {
			return global::nMorph.framework.orm.configuration.Configuration.Data.get_CurrentDatabaseConnection().get_DatabaseEngine();
		}
		
		
		public virtual void Register(global::nMorph.framework.orm.tools.Context context) {
			global::Array<object> queue = new global::Array<object>();
			queue = this.Queue(queue);
			context.get_Queue().concat(queue);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1152280640:
					{
						this.UniqueQueryNumber = ((global::nMorph.framework.common.datatypes.UUID) (@value) );
						return @value;
					}
					
					
					case 165031765:
					{
						this.GeneratedBlocks = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1581366158:
					{
						this.QueryBlocks = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1211089610:
					{
						this.Parameters = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 942990276:
					{
						this.Clauses = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 22179:
					{
						this.cf = ((global::nMorph.framework.orm.configuration.Configuration) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 709976707:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Register", 709976707)) );
					}
					
					
					case 1241608805:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getCurrentEngine", 1241608805)) );
					}
					
					
					case 1344235664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadOne", 1344235664)) );
					}
					
					
					case 914388854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Read", 914388854)) );
					}
					
					
					case 2107499704:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadTable", 2107499704)) );
					}
					
					
					case 611494939:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReadValue", 611494939)) );
					}
					
					
					case 1897397617:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Queue", 1897397617)) );
					}
					
					
					case 425603605:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Execute", 425603605)) );
					}
					
					
					case 709859532:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "GenerateAll", 709859532)) );
					}
					
					
					case 592725523:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "RemoveLastBlock", 592725523)) );
					}
					
					
					case 865108302:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ContainsClause", 865108302)) );
					}
					
					
					case 134961036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddBlock", 134961036)) );
					}
					
					
					case 977008262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddQueryBlock", 977008262)) );
					}
					
					
					case 269919080:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddParameter", 269919080)) );
					}
					
					
					case 1594446480:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddClause", 1594446480)) );
					}
					
					
					case 1152280640:
					{
						return this.UniqueQueryNumber;
					}
					
					
					case 165031765:
					{
						return this.GeneratedBlocks;
					}
					
					
					case 1581366158:
					{
						return this.QueryBlocks;
					}
					
					
					case 1211089610:
					{
						return this.Parameters;
					}
					
					
					case 942990276:
					{
						return this.Clauses;
					}
					
					
					case 22179:
					{
						return this.cf;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 709976707:
					{
						this.Register(((global::nMorph.framework.orm.tools.Context) (dynargs[0]) ));
						break;
					}
					
					
					case 1241608805:
					{
						return this.getCurrentEngine();
					}
					
					
					case 1344235664:
					{
						return this.ReadOne<object>(((global::System.Type) (dynargs[0]) ), ((global::nMorph.framework.orm.tools.Context) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ));
					}
					
					
					case 914388854:
					{
						return this.Read<object>(((global::System.Type) (dynargs[0]) ), ((global::nMorph.framework.orm.tools.Context) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ));
					}
					
					
					case 2107499704:
					{
						return this.ReadTable();
					}
					
					
					case 611494939:
					{
						return this.ReadValue();
					}
					
					
					case 1897397617:
					{
						return this.Queue(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ));
					}
					
					
					case 425603605:
					{
						return this.Execute();
					}
					
					
					case 709859532:
					{
						return this.GenerateAll();
					}
					
					
					case 592725523:
					{
						this.RemoveLastBlock();
						break;
					}
					
					
					case 865108302:
					{
						return this.ContainsClause(((global::System.Type) (dynargs[0]) ));
					}
					
					
					case 134961036:
					{
						this.AddBlock(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 977008262:
					{
						this.AddQueryBlock(((global::nMorph.framework.orm.client.QueryBlock) (dynargs[0]) ));
						break;
					}
					
					
					case 269919080:
					{
						return this.AddParameter(((global::nMorph.framework.orm.client.QueryParameter) (dynargs[0]) ));
					}
					
					
					case 1594446480:
					{
						this.AddClause(((global::nMorph.framework.orm.interfaces.IClause) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("UniqueQueryNumber");
			baseArr.push("GeneratedBlocks");
			baseArr.push("QueryBlocks");
			baseArr.push("Parameters");
			baseArr.push("Clauses");
			baseArr.push("cf");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


