<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\fields;

use \nMorph\framework\orm\interfaces\ISet;
use \haxe\_Int64\___Int64;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\enums\DBTypeEnum;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\FieldSentence;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\common\exceptions\ExceptionHelper;
use \nMorph\framework\orm\common\enums\HaxeTypeEnum;
use \haxe\_Int32\Int32_Impl_;
use \nMorph\framework\orm\common\enums\NullableEnum;

class BigIntegerSentence extends FieldSentence {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.framework.orm.common.fields.BigIntegerSentence\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\x0A\x09<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"22\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></ValidateDBCompatibility>\x0A\x09<Equals public=\"1\" set=\"method\" line=\"34\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Equals>\x0A\x09<Different public=\"1\" set=\"method\" line=\"39\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Different>\x0A\x09<LessThan public=\"1\" set=\"method\" line=\"44\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThan>\x0A\x09<LessThanAndEquals public=\"1\" set=\"method\" line=\"49\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThanAndEquals>\x0A\x09<MoreThan public=\"1\" set=\"method\" line=\"54\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThan>\x0A\x09<MoreThanAndEquals public=\"1\" set=\"method\" line=\"59\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThanAndEquals>\x0A\x09<IsNull public=\"1\" set=\"method\" line=\"64\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\x0A\x09<IsNotNull public=\"1\" set=\"method\" line=\"68\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\x0A\x09<SET public=\"1\" set=\"method\" line=\"72\"><f a=\"int64Value\">\x0A\x09<x path=\"haxe.Int64\"/>\x0A\x09<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\x0A</f></SET>\x0A\x09<new public=\"1\" set=\"method\" line=\"18\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A\x09<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\x0A\x09<x path=\"Bool\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></new>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keep\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @param string $FieldTable
	 * @param string $FieldName
	 * @param NullableEnum $Nullable
	 * @param bool $IsPrimaryKey
	 * 
	 * @return void
	 */
	public function __construct ($FieldTable, $FieldName, $Nullable, $IsPrimaryKey) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:19: characters 9-116
		parent::__construct($FieldTable, $FieldName, DBTypeEnum::BIGINTEGER(), HaxeTypeEnum::INT64(), null, null, $Nullable, $IsPrimaryKey);
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function Different ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:40: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:41: characters 9-72
		return Condition::SET($this, Op::Different(), Val::int64($int64Value));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function Equals ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:35: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:36: characters 9-68
		return Condition::SET($this, Op::Equal(), Val::int64($int64Value));
	}

	/**
	 * @return Condition
	 */
	public function IsNotNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:69: characters 9-66
		return Condition::SET($this, Op::Different(), Val::int64(null));
	}

	/**
	 * @return Condition
	 */
	public function IsNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:65: characters 9-62
		return Condition::SET($this, Op::Equal(), Val::int64(null));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function LessThan ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:45: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:46: characters 9-71
		return Condition::SET($this, Op::LessThan(), Val::int64($int64Value));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function LessThanAndEquals ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:50: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:51: characters 9-80
		return Condition::SET($this, Op::LessThanAndEquals(), Val::int64($int64Value));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function MoreThan ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:55: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:56: characters 9-71
		return Condition::SET($this, Op::MoreThan(), Val::int64($int64Value));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return Condition
	 */
	public function MoreThanAndEquals ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:60: characters 9-44
		$this->ValidateDBCompatibility($int64Value);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:61: characters 9-80
		return Condition::SET($this, Op::MoreThanAndEquals(), Val::int64($int64Value));
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return ISet
	 */
	public function SET ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:73: characters 9-59
		$asg = Assign::SET($this, Val::int64($int64Value));
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:74: characters 9-19
		return $asg;
	}

	/**
	 * @param ___Int64 $int64Value
	 * 
	 * @return void
	 */
	public function ValidateDBCompatibility ($int64Value) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:23: characters 13-58
		$b = Boot::typedCast(Boot::getClass(___Int64::class), 9223372036854775807);
		$v = (($int64Value->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if ($v === 0) {
			$v = Int32_Impl_::ucompare($int64Value->low, $b->low);
		}
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:23: lines 23-25
		if ((($int64Value->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) > 0) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:24: characters 13-115
			ExceptionHelper::LogicException(50001, "BigInteger not compatible with Database, BigInteger too large");
		}
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:27: characters 13-59
		$b = Boot::typedCast(Boot::getClass(___Int64::class), -9223372036854775807);
		$v = (($int64Value->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if ($v === 0) {
			$v = Int32_Impl_::ucompare($int64Value->low, $b->low);
		}
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:27: lines 27-29
		if ((($int64Value->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) < 0) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/BigIntegerSentence.hx:28: characters 13-126
			ExceptionHelper::LogicException(50002, "BigInteger not compatible with Database, BigInteger too large (negative)");
		}
	}
}

Boot::registerClass(BigIntegerSentence::class, 'nMorph.framework.orm.common.fields.BigIntegerSentence');
