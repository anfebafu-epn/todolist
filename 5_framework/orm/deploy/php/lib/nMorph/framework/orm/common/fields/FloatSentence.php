<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\fields;

use \nMorph\framework\orm\interfaces\ISet;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\enums\DBTypeEnum;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\FieldSentence;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\orm\common\enums\HaxeTypeEnum;
use \nMorph\framework\orm\common\enums\NullableEnum;

class FloatSentence extends FieldSentence {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.framework.orm.common.fields.FloatSentence\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\x0A\x09<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"22\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></ValidateDBCompatibility>\x0A\x09<Equals public=\"1\" set=\"method\" line=\"27\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Equals>\x0A\x09<Different public=\"1\" set=\"method\" line=\"33\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Different>\x0A\x09<LessThan public=\"1\" set=\"method\" line=\"39\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThan>\x0A\x09<LessThanAndEquals public=\"1\" set=\"method\" line=\"45\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThanAndEquals>\x0A\x09<MoreThan public=\"1\" set=\"method\" line=\"51\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThan>\x0A\x09<MoreThanAndEquals public=\"1\" set=\"method\" line=\"57\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThanAndEquals>\x0A\x09<IsNull public=\"1\" set=\"method\" line=\"63\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\x0A\x09<IsNotNull public=\"1\" set=\"method\" line=\"68\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\x0A\x09<SET public=\"1\" set=\"method\" line=\"73\"><f a=\"FloatValue\">\x0A\x09<x path=\"Float\"/>\x0A\x09<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\x0A</f></SET>\x0A\x09<new public=\"1\" set=\"method\" line=\"17\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A\x09<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\x0A\x09<x path=\"Bool\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></new>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keep\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @param string $FieldTable
	 * @param string $FieldName
	 * @param NullableEnum $Nullable
	 * @param bool $IsPrimaryKey
	 * 
	 * @return void
	 */
	public function __construct ($FieldTable, $FieldName, $Nullable, $IsPrimaryKey) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:18: characters 3-105
		parent::__construct($FieldTable, $FieldName, DBTypeEnum::FLOAT(), HaxeTypeEnum::FLOAT(), null, null, $Nullable, $IsPrimaryKey);
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function Different ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:34: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:35: characters 3-66
		return Condition::SET($this, Op::Different(), Val::float($FloatValue));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function Equals ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:28: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:29: characters 3-62
		return Condition::SET($this, Op::Equal(), Val::float($FloatValue));
	}

	/**
	 * @return Condition
	 */
	public function IsNotNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:69: characters 3-60
		return Condition::SET($this, Op::Different(), Val::float(null));
	}

	/**
	 * @return Condition
	 */
	public function IsNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:64: characters 3-56
		return Condition::SET($this, Op::Equal(), Val::float(null));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function LessThan ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:40: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:41: characters 3-65
		return Condition::SET($this, Op::LessThan(), Val::float($FloatValue));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function LessThanAndEquals ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:46: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:47: characters 3-74
		return Condition::SET($this, Op::LessThanAndEquals(), Val::float($FloatValue));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function MoreThan ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:52: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:53: characters 3-65
		return Condition::SET($this, Op::MoreThan(), Val::float($FloatValue));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return Condition
	 */
	public function MoreThanAndEquals ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:58: characters 3-38
		$this->ValidateDBCompatibility($FloatValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:59: characters 3-74
		return Condition::SET($this, Op::MoreThanAndEquals(), Val::float($FloatValue));
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return ISet
	 */
	public function SET ($FloatValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:74: characters 3-53
		$asg = Assign::SET($this, Val::float($FloatValue));
		#5_framework\orm\src/nMorph/framework/orm/common/fields/FloatSentence.hx:75: characters 3-13
		return $asg;
	}

	/**
	 * @param float $FloatValue
	 * 
	 * @return void
	 */
	public function ValidateDBCompatibility ($FloatValue) {
	}
}

Boot::registerClass(FloatSentence::class, 'nMorph.framework.orm.common.fields.FloatSentence');
