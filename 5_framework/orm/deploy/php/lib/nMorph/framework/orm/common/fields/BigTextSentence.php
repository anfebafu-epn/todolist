<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\fields;

use \nMorph\framework\orm\interfaces\ISet;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\enums\DBTypeEnum;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\FieldSentence;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\common\exceptions\ExceptionHelper;
use \nMorph\framework\orm\common\enums\HaxeTypeEnum;
use \nMorph\framework\orm\common\enums\NullableEnum;

class BigTextSentence extends FieldSentence {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.framework.orm.common.fields.BigTextSentence\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\x0A\x09<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"20\"><f a=\"stringValue\">\x0A\x09<c path=\"String\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></ValidateDBCompatibility>\x0A\x09<Equals public=\"1\" set=\"method\" line=\"26\"><f a=\"stringValue\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Equals>\x0A\x09<LIKE public=\"1\" set=\"method\" line=\"31\"><f a=\"stringValue\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LIKE>\x0A\x09<NotLIKE public=\"1\" set=\"method\" line=\"36\"><f a=\"stringValue\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></NotLIKE>\x0A\x09<IsNull public=\"1\" set=\"method\" line=\"41\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\x0A\x09<IsNotNull public=\"1\" set=\"method\" line=\"45\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\x0A\x09<SET public=\"1\" set=\"method\" line=\"49\"><f a=\"stringValue\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\x0A</f></SET>\x0A\x09<new public=\"1\" set=\"method\" line=\"16\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A\x09<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\x0A\x09<x path=\"Bool\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></new>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keep\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @param string $FieldTable
	 * @param string $FieldName
	 * @param NullableEnum $Nullable
	 * @param bool $IsPrimaryKey
	 * 
	 * @return void
	 */
	public function __construct ($FieldTable, $FieldName, $Nullable, $IsPrimaryKey) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:17: characters 9-114
		parent::__construct($FieldTable, $FieldName, DBTypeEnum::BIGTEXT(), HaxeTypeEnum::STRING(), null, null, $Nullable, $IsPrimaryKey);
	}

	/**
	 * @param string $stringValue
	 * 
	 * @return Condition
	 */
	public function Equals ($stringValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:27: characters 9-45
		$this->ValidateDBCompatibility($stringValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:28: characters 9-67
		return Condition::SET($this, Op::Equal(), Val::str($stringValue));
	}

	/**
	 * @return Condition
	 */
	public function IsNotNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:46: characters 9-64
		return Condition::SET($this, Op::Different(), Val::str(null));
	}

	/**
	 * @return Condition
	 */
	public function IsNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:42: characters 9-60
		return Condition::SET($this, Op::Equal(), Val::str(null));
	}

	/**
	 * @param string $stringValue
	 * 
	 * @return Condition
	 */
	public function LIKE ($stringValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:32: characters 9-45
		$this->ValidateDBCompatibility($stringValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:33: characters 9-66
		return Condition::SET($this, Op::LIKE(), Val::str($stringValue));
	}

	/**
	 * @param string $stringValue
	 * 
	 * @return Condition
	 */
	public function NotLIKE ($stringValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:37: characters 9-45
		$this->ValidateDBCompatibility($stringValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:38: characters 9-69
		return Condition::SET($this, Op::NotLIKE(), Val::str($stringValue));
	}

	/**
	 * @param string $stringValue
	 * 
	 * @return ISet
	 */
	public function SET ($stringValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:50: characters 9-57
		$asg = Assign::SET($this, Val::str($stringValue));
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:51: characters 9-19
		return $asg;
	}

	/**
	 * @param string $stringValue
	 * 
	 * @return void
	 */
	public function ValidateDBCompatibility ($stringValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:21: lines 21-23
		if (mb_strlen($stringValue) > 2147483646) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/BigTextSentence.hx:22: characters 13-109
			ExceptionHelper::LogicException(50003, "BigText not compatible with Database, BigText too large");
		}
	}
}

Boot::registerClass(BigTextSentence::class, 'nMorph.framework.orm.common.fields.BigTextSentence');
