// Generated by Haxe 4.2.2
package haxe.xml;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Parser extends haxe.lang.HxObject
{
	static
	{
		//line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		java.lang.Object __temp_stmt1 = null;
		//line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		{
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			haxe.ds.StringMap<java.lang.String> h = new haxe.ds.StringMap<java.lang.String>();
			//line 102 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			h.set("lt", "<");
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			h.set("gt", ">");
			//line 104 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			h.set("amp", "&");
			//line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			h.set("quot", "\"");
			//line 106 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			h.set("apos", "\'");
			//line 107 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			__temp_stmt1 = h;
		}
		
		//line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.xml.Parser.escapes = ((haxe.ds.StringMap<java.lang.String>) (__temp_stmt1) );
	}
	
	public Parser(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Parser()
	{
		//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.xml.Parser.__hx_ctor_haxe_xml_Parser(this);
	}
	
	
	protected static void __hx_ctor_haxe_xml_Parser(haxe.xml.Parser __hx_this)
	{
	}
	
	
	public static haxe.ds.StringMap<java.lang.String> escapes;
	
	public static haxe.root.Xml parse(java.lang.String str, java.lang.Object strict)
	{
		//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		boolean strict1 = ( (haxe.lang.Runtime.eq(strict, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (strict) ))) );
		//line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.root.Xml doc = haxe.root.Xml.createDocument();
		//line 117 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.xml.Parser.doParse(str, strict1, 0, doc);
		//line 118 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		return doc;
	}
	
	
	public static int doParse(java.lang.String str, boolean strict, java.lang.Object p, haxe.root.Xml parent)
	{
		//line 121 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int p1 = ( (haxe.lang.Runtime.eq(p, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(p)) )) );
		//line 122 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.root.Xml xml = null;
		//line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int state = ((int) (1) );
		//line 124 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int next = ((int) (1) );
		//line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		java.lang.String aname = null;
		//line 126 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int start = 0;
		//line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int nsubs = 0;
		//line 128 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int nbrackets = 0;
		//line 129 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		haxe.root.StringBuf buf = new haxe.root.StringBuf();
		//line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int escapeNext = ((int) (1) );
		//line 132 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		int attrValQuote = -1;
		//line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		while (( p1 < str.length() ))
		{
			//line 138 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			int c = ((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(p1)) );
			//line 139 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			switch (state)
			{
				case 0:
				{
					//line 141 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 9:
						case 10:
						case 13:
						case 32:
						{
							//line 142 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 144 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = next;
							//line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							continue;
						}
						
					}
					
					//line 141 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 1:
				{
					//line 148 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 60:
						{
							//line 150 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (0) );
							//line 151 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							next = ((int) (2) );
							//line 149 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 153 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = p1;
							//line 154 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (13) );
							//line 155 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							continue;
						}
						
					}
					
					//line 148 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 2:
				{
					//line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 33:
						{
							//line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							int index = ( p1 + 1 );
							//line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( (( (( index < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index)) )) : (-1) )) == 91 )) 
							{
								//line 182 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								p1 += 2;
								//line 183 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								if ( ! (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substr(str, p1, 6).toUpperCase(), "CDATA[")) ) 
								{
									//line 184 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected <![CDATA["), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
								}
								
								//line 185 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								p1 += 5;
								//line 186 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								state = ((int) (17) );
								//line 187 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								start = ( p1 + 1 );
							}
							else
							{
								//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								boolean tmp = false;
								//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								int index1 = ( p1 + 1 );
								//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								if (( (( (( index1 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index1)) )) : (-1) )) != 68 )) 
								{
									//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									int index2 = ( p1 + 1 );
									//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									tmp = ( (( (( index2 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index2)) )) : (-1) )) == 100 );
								}
								else
								{
									//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									tmp = true;
								}
								
								//line 188 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								if (tmp) 
								{
									//line 189 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									if ( ! (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substr(str, ( p1 + 2 ), 6).toUpperCase(), "OCTYPE")) ) 
									{
										//line 190 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected <!DOCTYPE"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
									}
									
									//line 191 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									p1 += 8;
									//line 192 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									state = ((int) (16) );
									//line 193 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									start = ( p1 + 1 );
								}
								else
								{
									//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									boolean tmp1 = false;
									//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									int index3 = ( p1 + 1 );
									//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									if (( (( (( index3 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index3)) )) : (-1) )) == 45 )) 
									{
										//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										int index4 = ( p1 + 2 );
										//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										tmp1 = ( (( (( index4 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index4)) )) : (-1) )) != 45 );
									}
									else
									{
										//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										tmp1 = true;
									}
									
									//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									if (tmp1) 
									{
										//line 194 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected <!--"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
									}
									else
									{
										//line 196 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										p1 += 2;
										//line 197 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										state = ((int) (15) );
										//line 198 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
										start = ( p1 + 1 );
									}
									
								}
								
							}
							
							//line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						case 47:
						{
							//line 204 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( parent == null )) 
							{
								//line 205 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected node name"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
							}
							
							//line 206 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = ( p1 + 1 );
							//line 207 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (0) );
							//line 208 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							next = ((int) (10) );
							//line 203 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						case 63:
						{
							//line 201 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (14) );
							//line 202 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = p1;
							//line 200 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (3) );
							//line 211 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = p1;
							//line 212 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							continue;
						}
						
					}
					
					//line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 3:
				{
					//line 215 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) 
					{
						//line 216 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( p1 == start )) 
						{
							//line 217 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected node name"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						xml = haxe.root.Xml.createElement(haxe.lang.StringExt.substr(str, start, ( p1 - start )));
						//line 219 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						{
							//line 219 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							parent.addChild(xml);
							//line 219 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 ++ nsubs;
						}
						
						//line 220 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (0) );
						//line 221 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						next = ((int) (4) );
						//line 222 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						continue;
					}
					
					//line 215 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 4:
				{
					//line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 47:
						{
							//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (11) );
							//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						case 62:
						{
							//line 229 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (9) );
							//line 229 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 231 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (5) );
							//line 232 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = p1;
							//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							continue;
						}
						
					}
					
					//line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 5:
				{
					//line 236 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) 
					{
						//line 238 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( start == p1 )) 
						{
							//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected attribute name"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 237 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						java.lang.String tmp2 = haxe.lang.StringExt.substr(str, start, ( p1 - start ));
						//line 241 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						aname = tmp2;
						//line 242 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (xml.exists(aname)) 
						{
							//line 243 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( ( "Duplicate attribute [" + aname ) + "]" )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 244 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (0) );
						//line 245 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						next = ((int) (6) );
						//line 246 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						continue;
					}
					
					//line 236 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 6:
				{
					//line 249 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 61:
						{
							//line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (0) );
							//line 252 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							next = ((int) (7) );
							//line 250 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 254 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected ="), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
					}
					
					//line 249 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 7:
				{
					//line 257 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 34:
						case 39:
						{
							//line 259 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf = new haxe.root.StringBuf();
							//line 260 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (8) );
							//line 261 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = ( p1 + 1 );
							//line 262 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							attrValQuote = c;
							//line 258 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 264 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected \""), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
					}
					
					//line 257 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 8:
				{
					//line 267 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 38:
						{
							//line 269 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf.addSub(str, start, ( p1 - start ));
							//line 270 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (18) );
							//line 271 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							escapeNext = ((int) (8) );
							//line 272 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = ( p1 + 1 );
							//line 268 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						case 60:
						case 62:
						{
							//line 273 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (strict) 
							{
								//line 275 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( ( "Invalid unescaped " + new java.lang.String( java.lang.Character.toChars((int) c) ) ) + " in attribute value" )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
							}
							else
							{
								//line 276 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								if (( c == attrValQuote )) 
								{
									//line 277 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									buf.addSub(str, start, ( p1 - start ));
									//line 278 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									java.lang.String val = buf.toString();
									//line 279 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									buf = new haxe.root.StringBuf();
									//line 280 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									xml.set(aname, val);
									//line 281 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									state = ((int) (0) );
									//line 282 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									next = ((int) (4) );
								}
								
							}
							
							//line 273 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 276 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( c == attrValQuote )) 
							{
								//line 277 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								buf.addSub(str, start, ( p1 - start ));
								//line 278 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								java.lang.String val1 = buf.toString();
								//line 279 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								buf = new haxe.root.StringBuf();
								//line 280 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								xml.set(aname, val1);
								//line 281 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								state = ((int) (0) );
								//line 282 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								next = ((int) (4) );
							}
							
							//line 276 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
					}
					
					//line 267 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 9:
				{
					//line 285 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					p1 = haxe.xml.Parser.doParse(str, strict, p1, xml);
					//line 286 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					start = p1;
					//line 287 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					state = ((int) (1) );
					//line 284 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 10:
				{
					//line 305 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) 
					{
						//line 306 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( start == p1 )) 
						{
							//line 307 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected node name"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						java.lang.String v = haxe.lang.StringExt.substr(str, start, ( p1 - start ));
						//line 310 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( ( parent == null ) || ( parent.nodeType != ((int) (0) ) ) )) 
						{
							//line 311 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( ( "Unexpected </" + v ) + ">, tag is not open" )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 313 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( parent.nodeType != haxe.root.Xml.Element )) 
						{
							//line 313 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(parent.nodeType) ))) );
						}
						
						//line 313 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if ( ! (haxe.lang.Runtime.valEq(v, parent.nodeName)) ) 
						{
							//line 314 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( parent.nodeType != haxe.root.Xml.Element )) 
							{
								//line 314 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(parent.nodeType) ))) );
							}
							
							//line 314 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( ( "Expected </" + parent.nodeName ) + ">" )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
						//line 316 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (0) );
						//line 317 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						next = ((int) (12) );
						//line 318 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						continue;
					}
					
					//line 305 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 11:
				{
					//line 289 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 62:
						{
							//line 291 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (1) );
							//line 291 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 293 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected >"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
					}
					
					//line 289 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 12:
				{
					//line 296 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					switch (c)
					{
						case 62:
						{
							//line 298 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( nsubs == 0 )) 
							{
								//line 299 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								parent.addChild(haxe.root.Xml.createPCData(""));
							}
							
							//line 300 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							return p1;
						}
						
						
						default:
						{
							//line 302 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Expected >"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
						}
						
					}
					
				}
				
				
				case 13:
				{
					//line 158 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 60 )) 
					{
						//line 159 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						buf.addSub(str, start, ( p1 - start ));
						//line 160 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						haxe.root.Xml child = haxe.root.Xml.createPCData(buf.toString());
						//line 161 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						buf = new haxe.root.StringBuf();
						//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						{
							//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							parent.addChild(child);
							//line 162 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 ++ nsubs;
						}
						
						//line 163 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (0) );
						//line 164 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						next = ((int) (2) );
					}
					else
					{
						//line 165 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( c == 38 )) 
						{
							//line 166 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf.addSub(str, start, ( p1 - start ));
							//line 167 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = ((int) (18) );
							//line 168 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							escapeNext = ((int) (13) );
							//line 169 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = ( p1 + 1 );
						}
						
					}
					
					//line 158 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 14:
				{
					//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					boolean tmp3 = false;
					//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 63 )) 
					{
						//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						int index5 = ( p1 + 1 );
						//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp3 = ( (( (( index5 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index5)) )) : (-1) )) == 62 );
					}
					else
					{
						//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp3 = false;
					}
					
					//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (tmp3) 
					{
						//line 337 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						 ++ p1;
						//line 338 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						java.lang.String str1 = haxe.lang.StringExt.substr(str, ( start + 1 ), ( ( p1 - start ) - 2 ));
						//line 339 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						{
							//line 339 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							parent.addChild(haxe.root.Xml.createProcessingInstruction(str1));
							//line 339 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 ++ nsubs;
						}
						
						//line 340 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (1) );
					}
					
					//line 336 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 15:
				{
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					boolean tmp4 = false;
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					boolean tmp5 = false;
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 45 )) 
					{
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						int index6 = ( p1 + 1 );
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp5 = ( (( (( index6 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index6)) )) : (-1) )) == 45 );
					}
					else
					{
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp5 = false;
					}
					
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (tmp5) 
					{
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						int index7 = ( p1 + 2 );
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp4 = ( (( (( index7 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index7)) )) : (-1) )) == 62 );
					}
					else
					{
						//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp4 = false;
					}
					
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (tmp4) 
					{
						//line 322 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						{
							//line 322 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							parent.addChild(haxe.root.Xml.createComment(haxe.lang.StringExt.substr(str, start, ( p1 - start ))));
							//line 322 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 ++ nsubs;
						}
						
						//line 323 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						p1 += 2;
						//line 324 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (1) );
					}
					
					//line 321 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 16:
				{
					//line 327 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 91 )) 
					{
						//line 328 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						 ++ nbrackets;
					}
					else
					{
						//line 329 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( c == 93 )) 
						{
							//line 330 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 -- nbrackets;
						}
						else
						{
							//line 331 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (( ( c == 62 ) && ( nbrackets == 0 ) )) 
							{
								//line 332 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								{
									//line 332 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									parent.addChild(haxe.root.Xml.createDocType(haxe.lang.StringExt.substr(str, start, ( p1 - start ))));
									//line 332 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									 ++ nsubs;
								}
								
								//line 333 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								state = ((int) (1) );
							}
							
						}
						
					}
					
					//line 327 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 17:
				{
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					boolean tmp6 = false;
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					boolean tmp7 = false;
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 93 )) 
					{
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						int index8 = ( p1 + 1 );
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp7 = ( (( (( index8 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index8)) )) : (-1) )) == 93 );
					}
					else
					{
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp7 = false;
					}
					
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (tmp7) 
					{
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						int index9 = ( p1 + 2 );
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp6 = ( (( (( index9 < str.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (str) )) ).charAt(index9)) )) : (-1) )) == 62 );
					}
					else
					{
						//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						tmp6 = false;
					}
					
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (tmp6) 
					{
						//line 173 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						haxe.root.Xml child1 = haxe.root.Xml.createCData(haxe.lang.StringExt.substr(str, start, ( p1 - start )));
						//line 174 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						{
							//line 174 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							parent.addChild(child1);
							//line 174 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 ++ nsubs;
						}
						
						//line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						p1 += 2;
						//line 176 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = ((int) (1) );
					}
					
					//line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
				case 18:
				{
					//line 343 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					if (( c == 59 )) 
					{
						//line 344 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						java.lang.String s = haxe.lang.StringExt.substr(str, start, ( p1 - start ));
						//line 345 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if (( (( (( 0 < s.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s) )) ).charAt(0)) )) : (-1) )) == 35 )) 
						{
							//line 346 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							java.lang.Object c1 = ( (( (( (( 1 < s.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s) )) ).charAt(1)) )) : (-1) )) == 120 )) ? (haxe.root.Std.parseInt(( "0" + haxe.lang.StringExt.substr(s, 1, ( s.length() - 1 )) ))) : (haxe.root.Std.parseInt(haxe.lang.StringExt.substr(s, 1, ( s.length() - 1 )))) );
							//line 366 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf.addChar(((int) (haxe.lang.Runtime.toInt(c1)) ));
						}
						else
						{
							//line 367 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if ( ! (haxe.xml.Parser.escapes.exists(s)) ) 
							{
								//line 368 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								if (strict) 
								{
									//line 369 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( "Undefined entity: " + s )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
								}
								
								//line 370 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								buf.add(haxe.lang.Runtime.toString(( ( "&" + s ) + ";" )));
								//line 370 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								java.lang.Object __temp_expr2 = ((java.lang.Object) (null) );
							}
							else
							{
								//line 372 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								buf.add(haxe.lang.Runtime.toString(haxe.xml.Parser.escapes.get(s)));
								//line 372 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								java.lang.Object __temp_expr1 = ((java.lang.Object) (null) );
							}
							
						}
						
						//line 374 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						start = ( p1 + 1 );
						//line 375 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						state = escapeNext;
					}
					else
					{
						//line 376 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
						if ((  ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) )))  && ( c != 35 ) )) 
						{
							//line 377 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							if (strict) 
							{
								//line 378 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( "Invalid character in entity: " + new java.lang.String( java.lang.Character.toChars((int) c) ) )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
							}
							
							//line 379 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf.addChar(38);
							//line 380 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							buf.addSub(str, start, ( p1 - start ));
							//line 381 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							 -- p1;
							//line 382 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							start = ( p1 + 1 );
							//line 383 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
							state = escapeNext;
						}
						
					}
					
					//line 343 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					break;
				}
				
				
			}
			
			//line 386 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			 ++ p1;
		}
		
		//line 389 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		if (( state == ((int) (1) ) )) 
		{
			//line 390 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			start = p1;
			//line 391 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			state = ((int) (13) );
		}
		
		//line 394 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		if (( state == ((int) (13) ) )) 
		{
			//line 395 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			if (( parent.nodeType == ((int) (0) ) )) 
			{
				//line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				if (( parent.nodeType != haxe.root.Xml.Element )) 
				{
					//line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(parent.nodeType) ))) );
				}
				
				//line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString(( ( "Unclosed node <" + parent.nodeName ) + ">" )), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
			}
			
			//line 398 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			if (( ( p1 != start ) || ( nsubs == 0 ) )) 
			{
				//line 399 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				buf.addSub(str, start, ( p1 - start ));
				//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				{
					//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					parent.addChild(haxe.root.Xml.createPCData(buf.toString()));
					//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
					 ++ nsubs;
				}
				
			}
			
			//line 402 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			return p1;
		}
		
		//line 405 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		if (( (  ! (strict)  && ( state == ((int) (18) ) ) ) && ( escapeNext == ((int) (13) ) ) )) 
		{
			//line 406 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			buf.addChar(38);
			//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			buf.addSub(str, start, ( p1 - start ));
			//line 408 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			{
				//line 408 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				parent.addChild(haxe.root.Xml.createPCData(buf.toString()));
				//line 408 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
				 ++ nsubs;
			}
			
			//line 409 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			return p1;
		}
		
		//line 412 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new haxe.xml.XmlParserException(haxe.lang.Runtime.toString("Unexpected end"), haxe.lang.Runtime.toString(str), ((int) (p1) )))) );
	}
	
	
	public static boolean isValidChar(int c)
	{
		//line 416 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
		if ( ! ((( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ))) ) 
		{
			//line 417 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			return ( c == 45 );
		}
		else
		{
			//line 416 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Parser.hx"
			return true;
		}
		
	}
	
	
}


