// Generated by Haxe 4.2.2
package haxe.rtti;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TypeApi extends haxe.lang.HxObject
{
	public TypeApi(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TypeApi()
	{
		//line 376 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		haxe.rtti.TypeApi.__hx_ctor_haxe_rtti_TypeApi(this);
	}
	
	
	protected static void __hx_ctor_haxe_rtti_TypeApi(haxe.rtti.TypeApi __hx_this)
	{
	}
	
	
	public static java.lang.Object typeInfos(haxe.rtti.TypeTree t)
	{
		//line 378 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		java.lang.Object inf = null;
		//line 379 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 388 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String _g = haxe.lang.Runtime.toString(t.params[0]);
				//line 388 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String _g1 = haxe.lang.Runtime.toString(t.params[1]);
				//line 388 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.TypeTree> _g2 = ((haxe.root.Array<haxe.rtti.TypeTree>) (t.params[2]) );
				//line 389 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Unexpected Package")) );
			}
			
			
			case 1:
			{
				//line 380 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.Object c = t.params[0];
				//line 381 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				inf = c;
				//line 380 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 2:
			{
				//line 382 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.Object e = t.params[0];
				//line 383 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				inf = e;
				//line 382 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 3:
			{
				//line 384 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.Object t1 = t.params[0];
				//line 385 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				inf = t1;
				//line 384 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 4:
			{
				//line 386 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.Object a = t.params[0];
				//line 387 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				inf = a;
				//line 386 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
		}
		
		//line 391 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return inf;
	}
	
	
	public static boolean isVar(haxe.rtti.CType t)
	{
		//line 399 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		switch (t.index)
		{
			case 4:
			{
				//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.Object> _g = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.rtti.CType _g1 = ((haxe.rtti.CType) (t.params[1]) );
				//line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return false;
			}
			
			
			default:
			{
				//line 401 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return true;
			}
			
		}
		
	}
	
	
	public static <T> boolean leq(haxe.lang.Function f, haxe.root.Array<T> l1, haxe.root.Array<T> l2)
	{
		//line 406 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		int it_current = 0;
		//line 406 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		haxe.root.Array<T> it_array = l2;
		//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		{
			//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			int _g = 0;
			//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			while (( _g < l1.length ))
			{
				//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				T e1 = l1.__get(_g);
				//line 407 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				 ++ _g;
				//line 408 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				if (( it_current >= it_array.length )) 
				{
					//line 409 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return false;
				}
				
				//line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				T e2 = it_array.__get(it_current++);
				//line 411 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (f.__hx_invoke2_o(0.0, e1, 0.0, e2)) ))) ) 
				{
					//line 412 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return false;
				}
				
			}
			
		}
		
		//line 414 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( it_current < it_array.length )) 
		{
			//line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 416 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return true;
	}
	
	
	public static boolean rightsEq(haxe.rtti.Rights r1, haxe.rtti.Rights r2)
	{
		//line 426 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( r1 == r2 )) 
		{
			//line 427 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return true;
		}
		
		//line 428 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		switch (r1.index)
		{
			case 2:
			{
				//line 429 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String m1 = haxe.lang.Runtime.toString(r1.params[0]);
				//line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (r2.index)
				{
					case 2:
					{
						//line 431 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						java.lang.String m2 = haxe.lang.Runtime.toString(r2.params[0]);
						//line 432 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						return haxe.lang.Runtime.valEq(m1, m2);
					}
					
					
					default:
					{
						//line 433 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 429 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			default:
			{
				//line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
		}
		
		//line 437 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return false;
	}
	
	
	public static boolean typeEq(haxe.rtti.CType t1, haxe.rtti.CType t2)
	{
		//line 447 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		switch (t1.index)
		{
			case 0:
			{
				//line 449 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return ( t2 == haxe.rtti.CType.CUnknown );
			}
			
			
			case 1:
			{
				//line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name = haxe.lang.Runtime.toString(t1.params[0]);
				//line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params = ((haxe.root.Array<haxe.rtti.CType>) (t1.params[1]) );
				//line 451 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 1:
					{
						//line 452 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						java.lang.String name2 = haxe.lang.Runtime.toString(t2.params[0]);
						//line 452 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<haxe.rtti.CType> params2 = ((haxe.root.Array<haxe.rtti.CType>) (t2.params[1]) );
						//line 453 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (haxe.lang.Runtime.valEq(name, name2)) 
						{
							//line 453 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.TypeApi.class, "typeEq")) ), ((haxe.root.Array<haxe.rtti.CType>) (params) ), ((haxe.root.Array<haxe.rtti.CType>) (params2) ))) ));
						}
						else
						{
							//line 453 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
					}
					
					
					default:
					{
						//line 454 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 2:
			{
				//line 456 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name1 = haxe.lang.Runtime.toString(t1.params[0]);
				//line 456 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params1 = ((haxe.root.Array<haxe.rtti.CType>) (t1.params[1]) );
				//line 457 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 2:
					{
						//line 458 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						java.lang.String name21 = haxe.lang.Runtime.toString(t2.params[0]);
						//line 458 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<haxe.rtti.CType> params21 = ((haxe.root.Array<haxe.rtti.CType>) (t2.params[1]) );
						//line 459 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (haxe.lang.Runtime.valEq(name1, name21)) 
						{
							//line 459 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.TypeApi.class, "typeEq")) ), ((haxe.root.Array<haxe.rtti.CType>) (params1) ), ((haxe.root.Array<haxe.rtti.CType>) (params21) ))) ));
						}
						else
						{
							//line 459 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
					}
					
					
					default:
					{
						//line 460 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 456 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 3:
			{
				//line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name3 = haxe.lang.Runtime.toString(t1.params[0]);
				//line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params3 = ((haxe.root.Array<haxe.rtti.CType>) (t1.params[1]) );
				//line 469 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 3:
					{
						//line 470 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						java.lang.String name22 = haxe.lang.Runtime.toString(t2.params[0]);
						//line 470 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<haxe.rtti.CType> params22 = ((haxe.root.Array<haxe.rtti.CType>) (t2.params[1]) );
						//line 471 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (haxe.lang.Runtime.valEq(name3, name22)) 
						{
							//line 471 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.TypeApi.class, "typeEq")) ), ((haxe.root.Array<haxe.rtti.CType>) (params3) ), ((haxe.root.Array<haxe.rtti.CType>) (params22) ))) ));
						}
						else
						{
							//line 471 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
					}
					
					
					default:
					{
						//line 472 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 4:
			{
				//line 474 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 474 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.rtti.CType ret = ((haxe.rtti.CType) (t1.params[1]) );
				//line 475 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 4:
					{
						//line 476 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<java.lang.Object> args2 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 476 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.rtti.CType ret2 = ((haxe.rtti.CType) (t2.params[1]) );
						//line 477 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (( (( haxe.rtti.TypeApi_typeEq_477__Fun.__hx_current != null )) ? (haxe.rtti.TypeApi_typeEq_477__Fun.__hx_current) : (haxe.rtti.TypeApi_typeEq_477__Fun.__hx_current = ((haxe.rtti.TypeApi_typeEq_477__Fun) (new haxe.rtti.TypeApi_typeEq_477__Fun()) )) )) ), ((haxe.root.Array<java.lang.Object>) (args) ), ((haxe.root.Array<java.lang.Object>) (args2) ))) ))) 
						{
							//line 479 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.rtti.TypeApi.typeEq(ret, ret2);
						}
						else
						{
							//line 477 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
					}
					
					
					default:
					{
						//line 480 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 474 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 5:
			{
				//line 482 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 5:
					{
						//line 484 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<java.lang.Object> fields2 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 485 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						return haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (( (( haxe.rtti.TypeApi_typeEq_485__Fun.__hx_current != null )) ? (haxe.rtti.TypeApi_typeEq_485__Fun.__hx_current) : (haxe.rtti.TypeApi_typeEq_485__Fun.__hx_current = ((haxe.rtti.TypeApi_typeEq_485__Fun) (new haxe.rtti.TypeApi_typeEq_485__Fun()) )) )) ), ((haxe.root.Array<java.lang.Object>) (fields) ), ((haxe.root.Array<java.lang.Object>) (fields2) ))) ));
					}
					
					
					default:
					{
						//line 486 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 482 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 6:
			{
				//line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.rtti.CType t = ((haxe.rtti.CType) (t1.params[0]) );
				//line 489 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 6:
					{
						//line 490 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.rtti.CType t21 = ((haxe.rtti.CType) (t2.params[0]) );
						//line 491 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (( ( t == null ) != (( t21 == null )) )) 
						{
							//line 492 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
						//line 493 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (( t != null )) 
						{
							//line 493 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.rtti.TypeApi.typeEq(t, t21);
						}
						else
						{
							//line 493 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return true;
						}
						
					}
					
					
					default:
					{
						//line 494 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
			case 7:
			{
				//line 462 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name4 = haxe.lang.Runtime.toString(t1.params[0]);
				//line 462 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params4 = ((haxe.root.Array<haxe.rtti.CType>) (t1.params[1]) );
				//line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				switch (t2.index)
				{
					case 7:
					{
						//line 464 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						java.lang.String name23 = haxe.lang.Runtime.toString(t2.params[0]);
						//line 464 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						haxe.root.Array<haxe.rtti.CType> params23 = ((haxe.root.Array<haxe.rtti.CType>) (t2.params[1]) );
						//line 465 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						if (haxe.lang.Runtime.valEq(name4, name23)) 
						{
							//line 465 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.TypeApi.class, "typeEq")) ), ((haxe.root.Array<haxe.rtti.CType>) (params4) ), ((haxe.root.Array<haxe.rtti.CType>) (params23) ))) ));
						}
						else
						{
							//line 465 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							return false;
						}
						
					}
					
					
					default:
					{
						//line 466 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						break;
					}
					
				}
				
				//line 462 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				break;
			}
			
			
		}
		
		//line 497 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return false;
	}
	
	
	public static boolean fieldEq(java.lang.Object f1, java.lang.Object f2)
	{
		//line 507 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "name", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f2, "name", true)))) ) 
		{
			//line 508 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 509 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.rtti.TypeApi.typeEq(((haxe.rtti.CType) (haxe.lang.Runtime.getField(f1, "type", true)) ), ((haxe.rtti.CType) (haxe.lang.Runtime.getField(f2, "type", true)) ))) ) 
		{
			//line 510 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f1, "isPublic", true)) )) != haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f2, "isPublic", true)) )) )) 
		{
			//line 512 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 513 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "doc", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f2, "doc", true)))) ) 
		{
			//line 514 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 515 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.rtti.TypeApi.rightsEq(((haxe.rtti.Rights) (haxe.lang.Runtime.getField(f1, "get", true)) ), ((haxe.rtti.Rights) (haxe.lang.Runtime.getField(f2, "get", true)) ))) ) 
		{
			//line 516 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 517 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.rtti.TypeApi.rightsEq(((haxe.rtti.Rights) (haxe.lang.Runtime.getField(f1, "set", true)) ), ((haxe.rtti.Rights) (haxe.lang.Runtime.getField(f2, "set", true)) ))) ) 
		{
			//line 518 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 519 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( ( ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(f1, "params", true)) ) == null ) != (( ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(f2, "params", true)) ) == null )) )) 
		{
			//line 520 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 521 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( ( ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(f1, "params", true)) ) != null ) &&  ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(f1, "params", true)) ).join(":"), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(f2, "params", true)) ).join(":")))  )) 
		{
			//line 522 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 523 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return true;
	}
	
	
	public static boolean constructorEq(java.lang.Object c1, java.lang.Object c2)
	{
		//line 533 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c1, "name", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c2, "name", true)))) ) 
		{
			//line 534 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 535 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if ( ! (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c1, "doc", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c2, "doc", true)))) ) 
		{
			//line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 537 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( ( ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "args", true)) ) == null ) != (( ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c2, "args", true)) ) == null )) )) 
		{
			//line 538 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 539 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( ( ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "args", true)) ) != null ) &&  ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.rtti.TypeApi.leq(((haxe.lang.Function) (( (( haxe.rtti.TypeApi_constructorEq_539__Fun.__hx_current != null )) ? (haxe.rtti.TypeApi_constructorEq_539__Fun.__hx_current) : (haxe.rtti.TypeApi_constructorEq_539__Fun.__hx_current = ((haxe.rtti.TypeApi_constructorEq_539__Fun) (new haxe.rtti.TypeApi_constructorEq_539__Fun()) )) )) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "args", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c2, "args", true)) ))) )))  )) 
		{
			//line 542 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return false;
		}
		
		//line 543 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return true;
	}
	
	
}


