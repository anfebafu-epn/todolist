// Generated by Haxe 4.2.2
package haxe.io._ArrayBufferView;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class ArrayBufferView_Impl_
{
	
	
	
	
	
	
	public static haxe.io.ArrayBufferViewImpl _new(int size)
	{
		//line 60 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		haxe.io.ArrayBufferViewImpl this1 = new haxe.io.ArrayBufferViewImpl(((haxe.io.Bytes) (haxe.io.Bytes.alloc(size)) ), ((int) (0) ), ((int) (size) ));
		//line 60 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return ((haxe.io.ArrayBufferViewImpl) (this1) );
	}
	
	
	public static int get_byteOffset(haxe.io.ArrayBufferViewImpl this1)
	{
		//line 65 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return this1.byteOffset;
	}
	
	
	public static int get_byteLength(haxe.io.ArrayBufferViewImpl this1)
	{
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return this1.byteLength;
	}
	
	
	public static haxe.io.Bytes get_buffer(haxe.io.ArrayBufferViewImpl this1)
	{
		//line 71 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return this1.bytes;
	}
	
	
	public static haxe.io.ArrayBufferViewImpl sub(haxe.io.ArrayBufferViewImpl this1, int begin, java.lang.Object length)
	{
		//line 74 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return ((haxe.io.ArrayBufferViewImpl) (this1.sub(begin, length)) );
	}
	
	
	public static haxe.io.ArrayBufferViewImpl subarray(haxe.io.ArrayBufferViewImpl this1, java.lang.Object begin, java.lang.Object end)
	{
		//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return ((haxe.io.ArrayBufferViewImpl) (this1.subarray(begin, end)) );
	}
	
	
	public static haxe.io.ArrayBufferViewImpl getData(haxe.io.ArrayBufferViewImpl this1)
	{
		//line 82 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return this1;
	}
	
	
	public static haxe.io.ArrayBufferViewImpl fromData(haxe.io.ArrayBufferViewImpl a)
	{
		//line 86 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return ((haxe.io.ArrayBufferViewImpl) (a) );
	}
	
	
	public static haxe.io.ArrayBufferViewImpl fromBytes(haxe.io.Bytes bytes, java.lang.Object pos, java.lang.Object length)
	{
		//line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		int pos1 = ( (haxe.lang.Runtime.eq(pos, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(pos)) )) );
		//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		if (haxe.lang.Runtime.eq(length, null)) 
		{
			//line 91 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
			length = ( bytes.length - pos1 );
		}
		
		//line 92 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		if (( ( ( pos1 < 0 ) || ( ((int) (haxe.lang.Runtime.toInt(length)) ) < 0 ) ) || ( ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(pos1, length))) ) > bytes.length ) )) 
		{
			//line 93 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(haxe.io.Error.OutsideBounds)) );
		}
		
		//line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\io\\ArrayBufferView.hx"
		return ((haxe.io.ArrayBufferViewImpl) (new haxe.io.ArrayBufferViewImpl(((haxe.io.Bytes) (bytes) ), ((int) (pos1) ), ((int) (haxe.lang.Runtime.toInt(length)) ))) );
	}
	
	
}


