// Generated by Haxe 4.2.2
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class DateTools extends haxe.lang.HxObject
{
	static
	{
		//line 35 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.DAY_SHORT_NAMES = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"});
		//line 36 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.DAY_NAMES = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"});
		//line 37 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.MONTH_SHORT_NAMES = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"});
		//line 40 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.MONTH_NAMES = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"});
		//line 164 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.DAYS_OF_MONTH = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31});
	}
	
	public DateTools(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public DateTools()
	{
		//line 30 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.DateTools.__hx_ctor__DateTools(this);
	}
	
	
	protected static void __hx_ctor__DateTools(haxe.root.DateTools __hx_this)
	{
	}
	
	
	public static haxe.root.Array<java.lang.String> DAY_SHORT_NAMES;
	
	public static haxe.root.Array<java.lang.String> DAY_NAMES;
	
	public static haxe.root.Array<java.lang.String> MONTH_SHORT_NAMES;
	
	public static haxe.root.Array<java.lang.String> MONTH_NAMES;
	
	public static java.lang.String __format_get(haxe.root.Date d, java.lang.String e)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			java.lang.String __temp_svar1 = (e);
			//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			boolean __temp_executeDef2 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			if (( __temp_svar1 != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
				switch (__temp_hash3)
				{
					case 37:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("%")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 47 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return "%";
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 121:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("y")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 97 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(( d.date.get(((int) (java.util.Calendar.YEAR) )) % 100 )), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 65:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("A")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 51 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.DAY_NAMES.__get(( d.date.get(((int) (java.util.Calendar.DAY_OF_WEEK) )) - 1 ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 119:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("w")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 95 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.Std.string(( d.date.get(((int) (java.util.Calendar.DAY_OF_WEEK) )) - 1 ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 66:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("B")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 55 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.MONTH_NAMES.__get(d.date.get(((int) (java.util.Calendar.MONTH) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 117:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("u")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 92 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							int t = ( d.date.get(((int) (java.util.Calendar.DAY_OF_WEEK) )) - 1 );
							//line 93 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							if (( t == 0 )) 
							{
								//line 93 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
								return "7";
							}
							else
							{
								//line 93 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
								return haxe.root.Std.string(t);
							}
							
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 67:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("C")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 57 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(((int) (( ((double) (d.date.get(((int) (java.util.Calendar.YEAR) ))) ) / 100 )) )), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 116:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("t")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return "\t";
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 68:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("D")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 61 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.__format(d, "%m/%d/%y");
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 115:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("s")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 84 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.Std.string(((int) (( ((double) (d.date.getTimeInMillis()) ) / 1000 )) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 70:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("F")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 65 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.__format(d, "%Y-%m-%d");
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 114:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("r")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 80 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.__format(d, "%I:%M:%S %p");
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 108:
					case 73:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (( (( ( __temp_hash3 == 108 ) && __temp_svar1.equals("l") )) || __temp_svar1.equals("I") )) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 69 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							int hour = ( d.date.get(((int) (java.util.Calendar.HOUR_OF_DAY) )) % 12 );
							//line 70 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(( (( hour == 0 )) ? (12) : (hour) )), ( (haxe.lang.Runtime.valEq(e, "I")) ? ("0") : (" ") ), 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 112:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("p")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 78 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							if (( d.date.get(((int) (java.util.Calendar.HOUR_OF_DAY) )) > 11 )) 
							{
								//line 78 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
								return "PM";
							}
							else
							{
								//line 78 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
								return "AM";
							}
							
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 77:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("M")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 74 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.MINUTE) ))), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 110:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("n")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 76 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return "\n";
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 82:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("R")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 82 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.__format(d, "%H:%M");
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 109:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("m")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 72 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(( d.date.get(((int) (java.util.Calendar.MONTH) )) + 1 )), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 83:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("S")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 86 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.SECOND) ))), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 107:
					case 72:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (( (( ( __temp_hash3 == 107 ) && __temp_svar1.equals("k") )) || __temp_svar1.equals("H") )) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 67 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.HOUR_OF_DAY) ))), ( (haxe.lang.Runtime.valEq(e, "H")) ? ("0") : (" ") ), 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 84:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("T")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 90 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.__format(d, "%H:%M:%S");
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 101:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("e")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 63 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.DAY_OF_MONTH) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 89:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("Y")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 99 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.YEAR) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 100:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("d")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 59 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.StringTools.lpad(haxe.root.Std.string(d.date.get(((int) (java.util.Calendar.DAY_OF_MONTH) ))), "0", 2);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 97:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (__temp_svar1.equals("a")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 49 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.DAY_SHORT_NAMES.__get(( d.date.get(((int) (java.util.Calendar.DAY_OF_WEEK) )) - 1 ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
					case 104:
					case 98:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						if (( (( ( __temp_hash3 == 104 ) && __temp_svar1.equals("h") )) || __temp_svar1.equals("b") )) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							__temp_executeDef2 = false;
							//line 53 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
							return haxe.root.DateTools.MONTH_SHORT_NAMES.__get(d.date.get(((int) (java.util.Calendar.MONTH) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			if (__temp_executeDef2) 
			{
				//line 101 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
				throw new haxe.exceptions.NotImplementedException(haxe.lang.Runtime.toString(( ( "Date.format %" + e ) + "- not implemented yet." )), ((haxe.Exception) (null) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"DateTools", "DateTools.hx", "__format_get"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )})) ));
			}
			else
			{
				//line 101 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String __format(haxe.root.Date d, java.lang.String f)
	{
		//line 106 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		haxe.root.StringBuf r = new haxe.root.StringBuf();
		//line 107 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		int p = 0;
		//line 108 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		while (true)
		{
			//line 109 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int np = haxe.lang.StringExt.indexOf(f, "%", p);
			//line 110 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			if (( np < 0 )) 
			{
				//line 111 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
				break;
			}
			
			//line 113 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			r.addSub(f, p, ( np - p ));
			//line 114 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			r.add(haxe.lang.Runtime.toString(haxe.root.DateTools.__format_get(d, haxe.lang.StringExt.substr(f, ( np + 1 ), 1))));
			//line 114 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			java.lang.Object __temp_expr1 = ((java.lang.Object) (null) );
			//line 116 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			p = ( np + 2 );
		}
		
		//line 118 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		r.addSub(f, p, ( f.length() - p ));
		//line 119 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return r.toString();
	}
	
	
	public static java.lang.String format(haxe.root.Date d, java.lang.String f)
	{
		//line 150 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return haxe.root.DateTools.__format(d, f);
	}
	
	
	public static haxe.root.Date delta(haxe.root.Date d, double t)
	{
		//line 161 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return haxe.root.Date.fromTime(( ((double) (d.date.getTimeInMillis()) ) + t ));
	}
	
	
	public static haxe.root.Array<java.lang.Object> DAYS_OF_MONTH;
	
	public static int getMonthDays(haxe.root.Date d)
	{
		//line 172 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		int month = d.date.get(((int) (java.util.Calendar.MONTH) ));
		//line 173 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		int year = d.date.get(((int) (java.util.Calendar.YEAR) ));
		//line 175 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		if (( month != 1 )) 
		{
			//line 176 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			return ((int) (haxe.lang.Runtime.toInt(haxe.root.DateTools.DAYS_OF_MONTH.__get(month))) );
		}
		
		//line 178 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		boolean isB = ( ( ( ( year % 4 ) == 0 ) && ( ( year % 100 ) != 0 ) ) || ( ( year % 400 ) == 0 ) );
		//line 179 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		if (isB) 
		{
			//line 179 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			return 29;
		}
		else
		{
			//line 179 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			return 28;
		}
		
	}
	
	
	public static double seconds(double n)
	{
		//line 186 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return ( n * 1000.0 );
	}
	
	
	public static double minutes(double n)
	{
		//line 193 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return ( ( n * 60.0 ) * 1000.0 );
	}
	
	
	public static double hours(double n)
	{
		//line 200 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return ( ( ( n * 60.0 ) * 60.0 ) * 1000.0 );
	}
	
	
	public static double days(double n)
	{
		//line 207 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return ( ( ( ( n * 24.0 ) * 60.0 ) * 60.0 ) * 1000.0 );
	}
	
	
	public static java.lang.Object parse(double t)
	{
		//line 214 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		double s = ( t / 1000 );
		//line 215 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		double m = ( s / 60 );
		//line 216 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		double h = ( m / 60 );
		//line 217 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		{
			//line 219 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int __temp_odecl1 = ((int) (( s % 60 )) );
			//line 220 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int __temp_odecl2 = ((int) (( m % 60 )) );
			//line 221 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int __temp_odecl3 = ((int) (( h % 24 )) );
			//line 222 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			int __temp_odecl4 = ((int) (( h / 24 )) );
			//line 217 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"days", "hours", "minutes", "ms", "seconds"}, new double[]{((double) (((double) (__temp_odecl4) )) ), ((double) (((double) (__temp_odecl3) )) ), ((double) (((double) (__temp_odecl2) )) ), ((double) (( t % 1000 )) ), ((double) (((double) (__temp_odecl1) )) )});
		}
		
	}
	
	
	public static double make(java.lang.Object o)
	{
		//line 236 "C:\\HaxeToolkit\\haxe\\std\\DateTools.hx"
		return ( haxe.lang.Runtime.getField_f(o, "ms", true) + ( 1000.0 * (( ((int) (haxe.lang.Runtime.getField_f(o, "seconds", true)) ) + ( 60.0 * (( ((int) (haxe.lang.Runtime.getField_f(o, "minutes", true)) ) + ( 60.0 * (( ((int) (haxe.lang.Runtime.getField_f(o, "hours", true)) ) + ( ((double) (24.0) ) * ((double) (((int) (haxe.lang.Runtime.getField_f(o, "days", true)) )) ) ) )) ) )) ) )) ) );
	}
	
	
}


