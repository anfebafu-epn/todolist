// Generated by Haxe 4.2.2
package hscript;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Checker extends haxe.lang.HxObject
{
	public Checker(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Checker(hscript.CheckerTypes types)
	{
		//line 301 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker.__hx_ctor_hscript_Checker(this, types);
	}
	
	
	protected static void __hx_ctor_hscript_Checker(hscript.Checker __hx_this, hscript.CheckerTypes types)
	{
		//line 292 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		__hx_this.events = new haxe.ds.StringMap<hscript.TType>();
		//line 291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		__hx_this.globals = new haxe.ds.StringMap<hscript.TType>();
		//line 301 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 302 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( types == null )) 
			{
				//line 302 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				types = new hscript.CheckerTypes();
			}
			
			//line 303 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			__hx_this.types = types;
		}
		
	}
	
	
	public static java.lang.String typeStr(hscript.TType t)
	{
		//line 430 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 431 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t.params[0];
				//line 431 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) == null )) 
				{
					//line 431 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return "Unknown";
				}
				else
				{
					//line 431 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.Checker.typeStr(((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ));
				}
				
			}
			
			
			case 6:
			{
				//line 442 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name = haxe.lang.Runtime.toString(t.params[0]);
				//line 442 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return name;
			}
			
			
			case 7:
			{
				//line 444 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 444 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( "?" + name1 );
			}
			
			
			case 8:
			{
				//line 443 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType t1 = ((hscript.TType) (t.params[0]) );
				//line 443 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( ( "Null<" + hscript.Checker.typeStr(t1) ) + ">" );
			}
			
			
			case 9:
			{
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object c = t.params[0];
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String c1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c, "name", true));
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String tmp = null;
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( args.length == 0 )) 
				{
					//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp = "";
				}
				else
				{
					//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.String> _g = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
					//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g1 = 0;
						//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g1 < args.length ))
						{
							//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType t2 = args.__get(_g1);
							//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g1;
							//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							_g.push(hscript.Checker.typeStr(t2));
						}
						
					}
					
					//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp = ( ( "<" + _g.join(",") ) + ">" );
				}
				
				//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( c1 + tmp );
			}
			
			
			case 10:
			{
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object e = t.params[0];
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args1 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String e1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "name", true));
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String tmp1 = null;
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( args1.length == 0 )) 
				{
					//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp1 = "";
				}
				else
				{
					//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.String> _g2 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
					//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g3 = 0;
						//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g3 < args1.length ))
						{
							//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType t3 = args1.__get(_g3);
							//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g3;
							//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							_g2.push(hscript.Checker.typeStr(t3));
						}
						
					}
					
					//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp1 = ( ( "<" + _g2.join(",") ) + ">" );
				}
				
				//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( e1 + tmp1 );
			}
			
			
			case 11:
			{
				//line 434 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object t4 = t.params[0];
				//line 434 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args2 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 435 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t4, "name", true)), "hscript.TypeCheck")) 
				{
					//line 436 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.Checker.typeStr(args2.__get(1));
				}
				else
				{
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String t5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t4, "name", true));
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String tmp2 = null;
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( args2.length == 0 )) 
					{
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						tmp2 = "";
					}
					else
					{
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g4 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g5 = 0;
							//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g5 < args2.length ))
							{
								//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t6 = args2.__get(_g5);
								//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g5;
								//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g4.push(hscript.Checker.typeStr(t6));
							}
							
						}
						
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						tmp2 = ( ( "<" + _g4.join(",") ) + ">" );
					}
					
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return ( t5 + tmp2 );
				}
				
			}
			
			
			case 12:
			{
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object a = t.params[0];
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args3 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String a1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "name", true));
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String tmp3 = null;
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( args3.length == 0 )) 
				{
					//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp3 = "";
				}
				else
				{
					//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.String> _g6 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
					//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g7 = 0;
						//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g7 < args3.length ))
						{
							//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType t7 = args3.__get(_g7);
							//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g7;
							//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							_g6.push(hscript.Checker.typeStr(t7));
						}
						
					}
					
					//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					tmp3 = ( ( "<" + _g6.join(",") ) + ">" );
				}
				
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( a1 + tmp3 );
			}
			
			
			case 13:
			{
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> args4 = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType ret = ((hscript.TType) (t.params[1]) );
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.String> _g8 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g9 = 0;
					//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g9 < args4.length ))
					{
						//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a2 = args4.__get(_g9);
						//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g9;
						//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g8.push(( ( (( (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(a2, "opt", true)) ))) ? ("?") : ("") )) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a2, "name", true)), "")) ? ("") : (( haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a2, "name", true)) + ":" )) )) ) + hscript.Checker.typeStr(((hscript.TType) (haxe.lang.Runtime.getField(a2, "t", true)) )) ));
					}
					
				}
				
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( ( ( "(" + _g8.join(", ") ) + ") -> " ) + hscript.Checker.typeStr(ret) );
			}
			
			
			case 14:
			{
				//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.String> _g10 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
				//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g11 = 0;
					//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g11 < fields.length ))
					{
						//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object f = fields.__get(_g11);
						//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g11;
						//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g10.push(( ( ( (( (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "opt", true)) ))) ? ("?") : ("") )) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true)) ) + ":" ) + hscript.Checker.typeStr(((hscript.TType) (haxe.lang.Runtime.getField(f, "t", true)) )) ));
					}
					
				}
				
				//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ( ( "{" + _g10.join(", ") ) + "}" );
			}
			
			
			default:
			{
				//line 445 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return haxe.lang.StringExt.substr(haxe.root.Type.enumConstructor(t), 1, null);
			}
			
		}
		
	}
	
	
	public hscript.CheckerTypes types;
	
	public haxe.ds.StringMap<hscript.TType> locals;
	
	public haxe.ds.StringMap<hscript.TType> globals;
	
	public haxe.ds.StringMap<hscript.TType> events;
	
	public hscript.TType currentFunType;
	
	public boolean isCompletion;
	
	public boolean allowDefine;
	
	public boolean allowAsync;
	
	public hscript.TType allowReturn;
	
	public boolean allowGlobalsDefine;
	
	public boolean allowUntypedMeta;
	
	public void setGlobals(java.lang.Object cl)
	{
		//line 306 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker _gthis = this;
		//line 307 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		while (true)
		{
			//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			{
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object f = ((java.lang.Object) (new haxe.ds._StringMap.StringMapValueIterator<java.lang.Object>(((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(cl, "fields", true)) )) ))) );
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(f, "hasNext", null)) )))
				{
					//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object f1 = ((java.lang.Object) (haxe.lang.Runtime.callField(f, "next", null)) );
					//line 309 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f1, "isPublic", true)) ))) 
					{
						//line 310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType tmp = ( (( ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(f1, "params", true)) ).length == 0 )) ? (((hscript.TType) (haxe.lang.Runtime.getField(f1, "t", true)) )) : (hscript.TType.TLazy(new hscript.Checker_setGlobals_310__Fun(f1, _gthis))) );
						//line 310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.setGlobal(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "name", true)), tmp);
					}
					
				}
				
			}
			
			//line 311 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( ((hscript.TType) (haxe.lang.Runtime.getField(cl, "superClass", true)) ) == null )) 
			{
				//line 312 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			//line 313 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType _g = ((hscript.TType) (haxe.lang.Runtime.getField(cl, "superClass", true)) );
			//line 313 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( _g == null )) 
			{
				//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
			}
			else
			{
				//line 313 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (_g.index)
				{
					case 9:
					{
						//line 314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g1 = ((haxe.root.Array<hscript.TType>) (_g.params[1]) );
						//line 314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object c = _g.params[0];
						//line 314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						cl = c;
						//line 314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					default:
					{
						//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
					}
					
				}
				
			}
			
		}
		
	}
	
	
	public void removeGlobal(java.lang.String name)
	{
		//line 321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.globals) )) ).remove(name);
	}
	
	
	public void setGlobal(java.lang.String name, hscript.TType type)
	{
		//line 325 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.globals) )) ).set(name, type);
	}
	
	
	public void setEvent(java.lang.String name, hscript.TType type)
	{
		//line 329 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.events) )) ).set(name, type);
	}
	
	
	public haxe.ds.StringMap<hscript.TType> getGlobals()
	{
		//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return this.globals;
	}
	
	
	public haxe.root.Array<java.lang.Object> typeArgs(haxe.root.Array<java.lang.Object> args, java.lang.Object pos)
	{
		//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.root.Array<java.lang.Object> _g = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g1 = 0;
			//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g2 = args.length;
			//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			while (( _g1 < _g2 ))
			{
				//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				int i = _g1++;
				//line 338 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object a = args.__get(i);
				//line 339 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType at = ( (( ((hscript.CType) (haxe.lang.Runtime.getField(a, "t", true)) ) == null )) ? (this.makeMono()) : (this.makeType(((hscript.CType) (haxe.lang.Runtime.getField(a, "t", true)) ), pos)) );
				//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object __temp_stmt3 = null;
				//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "name", true));
					//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object __temp_odecl2 = haxe.lang.Runtime.getField(a, "opt", true);
					//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2, at}, new java.lang.String[]{}, new double[]{});
				}
				
				//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				_g.push(__temp_stmt3);
			}
			
		}
		
		//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return _g;
	}
	
	
	public hscript.TType check(java.lang.Object expr, hscript._Checker.WithType withType, java.lang.Object isCompletion)
	{
		//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		java.lang.Object isCompletion1 = ( (haxe.lang.Runtime.eq(isCompletion, null)) ? (((java.lang.Object) (false) )) : (isCompletion) );
		//line 345 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( withType == null )) 
		{
			//line 345 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			withType = hscript._Checker.WithType.NoValue;
		}
		
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		this.locals = new haxe.ds.StringMap<hscript.TType>();
		//line 347 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		this.allowDefine = this.allowGlobalsDefine;
		//line 348 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		this.isCompletion = haxe.lang.Runtime.toBool(((java.lang.Boolean) (isCompletion1) ));
		//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker _gthis = this;
		//line 349 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 349 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(expr, "e", true)) );
			//line 349 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			switch (_g.index)
			{
				case 4:
				{
					//line 350 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> el = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 351 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<haxe.lang.Function> delayed = new haxe.root.Array<haxe.lang.Function>(new haxe.lang.Function[]{});
					//line 352 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType last = hscript.TType.TVoid;
					//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g1 = 0;
						//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g1 < el.length ))
						{
							//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object[] e = new java.lang.Object[]{el.__get(_g1)};
							//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g1;
							//line 354 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							label2:
							while (true)
							{
								//line 355 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.ExprDef _g2 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e[0], "e", true)) );
								//line 355 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (_g2.index)
								{
									case 25:
									{
										//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.String _g3 = haxe.lang.Runtime.toString(_g2.params[0]);
										//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<java.lang.Object> _g4 = ((haxe.root.Array<java.lang.Object>) (_g2.params[1]) );
										//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object e2 = _g2.params[2];
											//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											e[0] = e2;
										}
										
										//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									default:
									{
										//line 357 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break label2;
									}
									
								}
								
							}
							;
							//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.ExprDef _g5 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e[0], "e", true)) );
								//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (_g5.index)
								{
									case 14:
									{
										//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.Object _g6 = _g5.params[1];
										//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (_g5.params[0]) );
											//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.String name = haxe.lang.Runtime.toString(_g5.params[2]);
											//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.CType ret = ((hscript.CType) (_g5.params[3]) );
											//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (( name != null )) 
											{
												//line 362 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType tret = ( (( ret == null )) ? (this.makeMono()) : (this.makeType(ret, e[0])) );
												//line 363 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType ft = hscript.TType.TFun(this.typeArgs(args, e[0]), tret);
												//line 364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(name, ft);
												//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												delayed.push(new hscript.Checker_check_365__Fun(ft, e, _gthis));
											}
											else
											{
												//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													int _g7 = 0;
													//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													while (( _g7 < delayed.length ))
													{
														//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														haxe.lang.Function f = delayed.__get(_g7);
														//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														 ++ _g7;
														//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType __temp_expr2 = ((hscript.TType) (f.__hx_invoke0_o()) );
													}
													
												}
												
												//line 372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												delayed = new haxe.root.Array<haxe.lang.Function>(new haxe.lang.Function[]{});
												//line 373 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												if (haxe.lang.Runtime.refEq(el.__get(( el.length - 1 )), e[0])) 
												{
													//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													last = this.typeExpr(e[0], withType);
												}
												else
												{
													//line 376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													this.typeExpr(e[0], hscript._Checker.WithType.NoValue);
												}
												
											}
											
										}
										
										//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									default:
									{
										//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											int _g8 = 0;
											//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											while (( _g8 < delayed.length ))
											{
												//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.lang.Function f1 = delayed.__get(_g8);
												//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												 ++ _g8;
												//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType __temp_expr1 = ((hscript.TType) (f1.__hx_invoke0_o()) );
											}
											
										}
										
										//line 372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										delayed = new haxe.root.Array<haxe.lang.Function>(new haxe.lang.Function[]{});
										//line 373 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (haxe.lang.Runtime.refEq(el.__get(( el.length - 1 )), e[0])) 
										{
											//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											last = this.typeExpr(e[0], withType);
										}
										else
										{
											//line 376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											this.typeExpr(e[0], hscript._Checker.WithType.NoValue);
										}
										
										//line 370 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g9 = 0;
						//line 379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g9 < delayed.length ))
						{
							//line 379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.lang.Function f2 = delayed.__get(_g9);
							//line 379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g9;
							//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							last = ((hscript.TType) (f2.__hx_invoke0_o()) );
						}
						
					}
					
					//line 381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return last;
				}
				
				
				default:
				{
					//line 382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
			}
			
		}
		
		//line 384 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return this.typeExpr(expr, withType);
	}
	
	
	public final hscript.ExprDef edef(java.lang.Object e)
	{
		//line 389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
	}
	
	
	public final void error(java.lang.String msg, java.lang.Object curExpr)
	{
		//line 396 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.ErrorDef e = hscript.ErrorDef.ECustom(msg);
		//line 397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Error e1 = new hscript.Error(((hscript.ErrorDef) (e) ), ((int) (haxe.lang.Runtime.getField_f(curExpr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(curExpr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(curExpr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(curExpr, "line", true)) ));
		//line 398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if ( ! (this.isCompletion) ) 
		{
			//line 398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e1)) );
		}
		
	}
	
	
	public haxe.ds.StringMap<hscript.TType> saveLocals()
	{
		//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.ds.StringMap<hscript.TType> _g = new haxe.ds.StringMap<hscript.TType>();
		//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			java.lang.Object k = ((java.lang.Object) (new haxe.ds._StringMap.StringMapKeyIterator<hscript.TType>(((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ))) );
			//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(k, "hasNext", null)) )))
			{
				//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String k1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.callField(k, "next", null));
				//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				_g.set(k1, ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).get(k1)) ));
			}
			
		}
		
		//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return _g;
	}
	
	
	public hscript.TType makeType(hscript.CType t, java.lang.Object e)
	{
		//line 406 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 407 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (t.params[0]) );
				//line 407 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.CType> params = ((haxe.root.Array<hscript.CType>) (t.params[1]) );
				//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.CheckerTypes ct = this.types;
				//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String ct1 = path.join(".");
				//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> ct2 = null;
				//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( params == null )) 
				{
					//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					ct2 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
				}
				else
				{
					//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<hscript.TType> _g = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
					//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g1 = 0;
						//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g1 < params.length ))
						{
							//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.CType p = params.__get(_g1);
							//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g1;
							//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							_g.push(this.makeType(p, e));
						}
						
					}
					
					//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					ct2 = _g;
				}
				
				//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType ct3 = ct.resolve(ct1, ct2);
				//line 409 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ct3 == null )) 
				{
					//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.ErrorDef e1 = hscript.ErrorDef.ECustom(( "Unknown type " + haxe.root.Std.string(path) ));
						//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.Error e2 = new hscript.Error(((hscript.ErrorDef) (e1) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(e, "line", true)) ));
						//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if ( ! (this.isCompletion) ) 
						{
							//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e2)) );
						}
						
					}
					
					//line 411 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					ct3 = hscript.TType.TDynamic;
				}
				
				//line 413 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ct3;
			}
			
			
			case 1:
			{
				//line 414 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.CType> args = ((haxe.root.Array<hscript.CType>) (t.params[0]) );
				//line 414 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.CType ret = ((hscript.CType) (t.params[1]) );
				//line 415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				int i = 0;
				//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g3 = 0;
					//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g3 < args.length ))
					{
						//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.CType a = args.__get(_g3);
						//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g3;
						//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object __temp_stmt5 = null;
						//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl1 = ( "p" + i++ );
							//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl2 = this.makeType(a, e);
							//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_stmt5 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl1, false, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g2.push(__temp_stmt5);
					}
					
				}
				
				//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TFun(_g2, this.makeType(ret, e));
			}
			
			
			case 2:
			{
				//line 417 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g4 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g5 = 0;
					//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g5 < fields.length ))
					{
						//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object f = fields.__get(_g5);
						//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g5;
						//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object __temp_stmt6 = null;
						//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true));
							//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl4 = this.makeType(((hscript.CType) (haxe.lang.Runtime.getField(f, "t", true)) ), e);
							//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl3, false, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g4.push(__temp_stmt6);
					}
					
				}
				
				//line 418 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TAnon(_g4);
			}
			
			
			case 3:
			{
				//line 419 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.CType t1 = ((hscript.CType) (t.params[0]) );
				//line 420 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.makeType(t1, e);
			}
			
			
			case 4:
			{
				//line 423 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.CType t2 = ((hscript.CType) (t.params[0]) );
				//line 424 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.makeType(t2, e);
			}
			
			
			case 5:
			{
				//line 421 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String n = haxe.lang.Runtime.toString(t.params[0]);
				//line 421 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.CType t3 = ((hscript.CType) (t.params[1]) );
				//line 422 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.makeType(t3, e);
			}
			
			
		}
		
		//line 405 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	public boolean linkLoop(hscript.TType a, hscript.TType t)
	{
		//line 450 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( t == a )) 
		{
			//line 450 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return true;
		}
		
		//line 451 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 452 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t.params[0];
				//line 453 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) == null )) 
				{
					//line 453 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return false;
				}
				
				//line 454 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.linkLoop(a, ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ));
			}
			
			
			case 5:
			{
				//line 466 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( t == hscript.TType.TDynamic )) 
				{
					//line 467 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return false;
				}
				
				//line 468 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.linkLoop(a, hscript.TType.TDynamic);
			}
			
			
			case 9:
			{
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g = t.params[0];
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> tl = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g1 = 0;
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g1 < tl.length ))
					{
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t1 = tl.__get(_g1);
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g1;
						//line 457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, t1)) 
						{
							//line 458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 459 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
			
			case 10:
			{
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g2 = t.params[0];
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> tl1 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g3 = 0;
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g3 < tl1.length ))
					{
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t2 = tl1.__get(_g3);
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g3;
						//line 457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, t2)) 
						{
							//line 458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 459 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
			
			case 11:
			{
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g4 = t.params[0];
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> tl2 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g5 = 0;
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g5 < tl2.length ))
					{
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t3 = tl2.__get(_g5);
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g5;
						//line 457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, t3)) 
						{
							//line 458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 459 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
			
			case 12:
			{
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g6 = t.params[0];
				//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> tl3 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g7 = 0;
					//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g7 < tl3.length ))
					{
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t4 = tl3.__get(_g7);
						//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g7;
						//line 457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, t4)) 
						{
							//line 458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 459 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
			
			case 13:
			{
				//line 460 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 460 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType ret = ((hscript.TType) (t.params[1]) );
				//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g8 = 0;
					//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g8 < args.length ))
					{
						//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object arg = args.__get(_g8);
						//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g8;
						//line 462 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, ((hscript.TType) (haxe.lang.Runtime.getField(arg, "t", true)) ))) 
						{
							//line 463 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 464 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.linkLoop(a, ret);
			}
			
			
			case 14:
			{
				//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fl = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g9 = 0;
					//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g9 < fl.length ))
					{
						//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object f = fl.__get(_g9);
						//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g9;
						//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.linkLoop(a, ((hscript.TType) (haxe.lang.Runtime.getField(f, "t", true)) ))) 
						{
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
					}
					
				}
				
				//line 473 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
			
			default:
			{
				//line 475 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
		}
		
	}
	
	
	public boolean link(hscript.TType a, hscript.TType b, java.lang.Object r)
	{
		//line 480 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (this.linkLoop(a, b)) 
		{
			//line 481 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return ( this.follow(b) == a );
		}
		
		//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( b == hscript.TType.TDynamic )) 
		{
			//line 483 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return true;
		}
		
		//line 484 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType __temp_expr1 = ((hscript.TType) (haxe.lang.Runtime.setField(r, "r", b)) );
		//line 485 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return true;
	}
	
	
	public boolean typeEq(hscript.TType t1, hscript.TType t2)
	{
		//line 489 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( t1 == t2 )) 
		{
			//line 490 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return true;
		}
		
		//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t1.index)
		{
			case 0:
			{
				//line 492 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t1.params[0];
				//line 493 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) == null )) 
				{
					//line 494 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if ( ! (this.link(t1, t2, r)) ) 
					{
						//line 495 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return false;
					}
					
					//line 496 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType __temp_expr2 = ((hscript.TType) (haxe.lang.Runtime.setField(r, "r", t2)) );
					//line 497 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return true;
				}
				
				//line 499 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.typeEq(((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ), t2);
			}
			
			
			case 8:
			{
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType _g = ((hscript.TType) (t1.params[0]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r1 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r1, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r1)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr3 = ((hscript.TType) (haxe.lang.Runtime.setField(r1, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r1, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 532 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t21 = ((hscript.TType) (t2.params[0]) );
						//line 532 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t11 = _g;
						//line 533 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t11, t21);
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t22 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl2 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t22, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t22, "params", true)) ), pl2));
					}
					
					
					default:
					{
						//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t12 = _g;
						//line 535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t12, t2);
					}
					
				}
				
			}
			
			
			case 9:
			{
				//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g1 = t1.params[0];
				//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g2 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r2 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r2, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r2)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr4 = ((hscript.TType) (haxe.lang.Runtime.setField(r2, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r2, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t23 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t23);
					}
					
					
					case 9:
					{
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object cl2 = t2.params[0];
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl21 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl1 = _g2;
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object cl1 = _g1;
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (haxe.lang.Runtime.refEq(cl1, cl2)) 
						{
							//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g3 = 0;
								//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g4 = pl1.length;
								//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g3 < _g4 ))
								{
									//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i = _g3++;
									//line 519 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(pl1.__get(i), pl21.__get(i))) ) 
									{
										//line 520 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 521 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t24 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl22 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t24, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t24, "params", true)) ), pl22));
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 10:
			{
				//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g5 = t1.params[0];
				//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g6 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r3 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r3, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r3)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr5 = ((hscript.TType) (haxe.lang.Runtime.setField(r3, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r3, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t25 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t25);
					}
					
					
					case 10:
					{
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object e2 = t2.params[0];
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl23 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl11 = _g6;
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object e1 = _g5;
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (haxe.lang.Runtime.refEq(e1, e2)) 
						{
							//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g7 = 0;
								//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g8 = pl11.length;
								//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g7 < _g8 ))
								{
									//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i1 = _g7++;
									//line 524 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(pl11.__get(i1), pl23.__get(i1))) ) 
									{
										//line 525 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 526 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 522 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t26 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl24 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t26, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t26, "params", true)) ), pl24));
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 11:
			{
				//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g9 = t1.params[0];
				//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g10 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r4 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r4, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r4)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr6 = ((hscript.TType) (haxe.lang.Runtime.setField(r4, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r4, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType _g11 = ((hscript.TType) (t2.params[0]) );
						//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl12 = _g10;
						//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t13 = _g9;
						//line 514 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t13, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t13, "params", true)) ), pl12), t2);
					}
					
					
					case 11:
					{
						//line 508 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t27 = t2.params[0];
						//line 508 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl25 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 508 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl13 = _g10;
						//line 508 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t14 = _g9;
						//line 508 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (haxe.lang.Runtime.refEq(t14, t27)) 
						{
							//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g12 = 0;
								//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g13 = pl13.length;
								//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g12 < _g13 ))
								{
									//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i2 = _g12++;
									//line 510 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(pl13.__get(i2), pl25.__get(i2))) ) 
									{
										//line 511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 512 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						else
						{
							//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> pl14 = _g10;
							//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object t15 = _g9;
							//line 514 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeEq(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t15, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t15, "params", true)) ), pl14), t2);
						}
						
					}
					
					
					default:
					{
						//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl15 = _g10;
						//line 513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t16 = _g9;
						//line 514 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t16, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t16, "params", true)) ), pl15), t2);
					}
					
				}
				
			}
			
			
			case 12:
			{
				//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g14 = t1.params[0];
				//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g15 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r5 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r5, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r5)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr7 = ((hscript.TType) (haxe.lang.Runtime.setField(r5, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r5, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t28 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t28);
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t29 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl26 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t29, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t29, "params", true)) ), pl26));
					}
					
					
					case 12:
					{
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a2 = t2.params[0];
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl27 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl16 = _g15;
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a1 = _g14;
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (haxe.lang.Runtime.refEq(a1, a2)) 
						{
							//line 528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g16 = 0;
								//line 528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g17 = pl16.length;
								//line 528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g16 < _g17 ))
								{
									//line 528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i3 = _g16++;
									//line 529 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(pl16.__get(i3), pl27.__get(i3))) ) 
									{
										//line 530 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 531 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 13:
			{
				//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g18 = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType _g19 = ((hscript.TType) (t1.params[1]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r6 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r6, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r6)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr8 = ((hscript.TType) (haxe.lang.Runtime.setField(r6, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r6, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t210 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t210);
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t211 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl28 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t211, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t211, "params", true)) ), pl28));
					}
					
					
					case 13:
					{
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> args2 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType r21 = ((hscript.TType) (t2.params[1]) );
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType r11 = _g19;
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> args1 = _g18;
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( args1.length == args2.length )) 
						{
							//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g20 = 0;
								//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g21 = args1.length;
								//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g20 < _g21 ))
								{
									//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i4 = _g20++;
									//line 540 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(((hscript.TType) (haxe.lang.Runtime.getField(args1.__get(i4), "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(args2.__get(i4), "t", true)) ))) ) 
									{
										//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 542 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeEq(r11, r21);
						}
						
						//line 538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 14:
			{
				//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g22 = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r7 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r7, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r7)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr9 = ((hscript.TType) (haxe.lang.Runtime.setField(r7, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r7, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t212 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t212);
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t213 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl29 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t213, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t213, "params", true)) ), pl29));
					}
					
					
					case 14:
					{
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> a21 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> a11 = _g22;
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( a11.length == a21.length )) 
						{
							//line 544 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.ds.StringMap<java.lang.Object> m = new haxe.ds.StringMap<java.lang.Object>();
							//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g23 = 0;
								//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g23 < a21.length ))
								{
									//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object f = a21.__get(_g23);
									//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g23;
									//line 546 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									m.set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true)), f);
								}
								
							}
							
							//line 547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g24 = 0;
								//line 547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g24 < a11.length ))
								{
									//line 547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object f1 = a11.__get(_g24);
									//line 547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g24;
									//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object f2 = m.get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "name", true)));
									//line 549 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( f2 == null )) 
									{
										//line 549 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
									//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.typeEq(((hscript.TType) (haxe.lang.Runtime.getField(f1, "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(f2, "t", true)) ))) ) 
									{
										//line 551 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 553 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			default:
			{
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r8 = t2.params[0];
						//line 501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r8, "r", true)) ) == null )) 
						{
							//line 502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r8)) ) 
							{
								//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr1 = ((hscript.TType) (haxe.lang.Runtime.setField(r8, "r", t1)) );
							//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r8, "r", true)) ));
					}
					
					
					case 8:
					{
						//line 536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t214 = ((hscript.TType) (t2.params[0]) );
						//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, t214);
					}
					
					
					case 11:
					{
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t215 = t2.params[0];
						//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl210 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.typeEq(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t215, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t215, "params", true)) ), pl210));
					}
					
					
					default:
					{
						//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
		}
		
		//line 556 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return false;
	}
	
	
	public boolean tryUnify(hscript.TType t1, hscript.TType t2)
	{
		//line 560 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( t1 == t2 )) 
		{
			//line 561 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return true;
		}
		
		//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t1.index)
		{
			case 0:
			{
				//line 563 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t1.params[0];
				//line 564 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) == null )) 
				{
					//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if ( ! (this.link(t1, t2, r)) ) 
					{
						//line 566 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return false;
					}
					
					//line 567 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType __temp_expr2 = ((hscript.TType) (haxe.lang.Runtime.setField(r, "r", t2)) );
					//line 568 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return true;
				}
				
				//line 570 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.tryUnify(((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ), t2);
			}
			
			
			case 2:
			{
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r1 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r1, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r1)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr3 = ((hscript.TType) (haxe.lang.Runtime.setField(r1, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r1, "r", true)) ));
					}
					
					
					case 3:
					{
						//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t21 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t21);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t22 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl2 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t22, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t22, "params", true)) ), pl2));
					}
					
					
					default:
					{
						//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 5:
			{
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r2 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r2, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r2)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr4 = ((hscript.TType) (haxe.lang.Runtime.setField(r2, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r2, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t23 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t23);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t24 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl21 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t24, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t24, "params", true)) ), pl21));
					}
					
					
					default:
					{
						//line 598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
				}
				
			}
			
			
			case 8:
			{
				//line 583 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType _g = ((hscript.TType) (t1.params[0]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r3 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r3, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r3)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr5 = ((hscript.TType) (haxe.lang.Runtime.setField(r3, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r3, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 583 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t11 = _g;
						//line 584 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t11, t2);
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType _g1 = ((hscript.TType) (t2.params[0]) );
						//line 583 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t12 = _g;
						//line 584 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t12, t2);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t25 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl22 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t25, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t25, "params", true)) ), pl22));
					}
					
					
					default:
					{
						//line 583 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t13 = _g;
						//line 584 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t13, t2);
					}
					
				}
				
			}
			
			
			case 9:
			{
				//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g2 = t1.params[0];
				//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g3 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r4 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r4, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r4)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr6 = ((hscript.TType) (haxe.lang.Runtime.setField(r4, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r4, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t26 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t26);
					}
					
					
					case 9:
					{
						//line 615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object cl2 = t2.params[0];
						//line 615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl23 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl1 = _g3;
						//line 615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object cl1 = _g2;
						//line 616 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( ! (haxe.lang.Runtime.refEq(cl1, cl2)) ))
						{
							//line 617 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cl1, "interfaces", true)) ) != null )) 
							{
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g4 = 0;
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								haxe.root.Array<hscript.TType> _g5 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cl1, "interfaces", true)) );
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g4 < _g5.length ))
								{
									//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType i = _g5.__get(_g4);
									//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g4;
									//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (i.index)
									{
										case 9:
										{
											//line 620 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object cli = i.params[0];
											//line 620 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											haxe.root.Array<hscript.TType> args = ((haxe.root.Array<hscript.TType>) (i.params[1]) );
											//line 620 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											{
												//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.root.Array<hscript.TType> _g6 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
												//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													int _g7 = 0;
													//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													while (( _g7 < args.length ))
													{
														//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType a = args.__get(_g7);
														//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														 ++ _g7;
														//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														_g6.push(this.apply(a, ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cl1, "params", true)) ), pl1));
													}
													
												}
												
												//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType i1 = hscript.TType.TInst(cli, _g6);
												//line 622 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												if (this.tryUnify(i1, t2)) 
												{
													//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													return true;
												}
												
											}
											
											//line 620 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
										default:
										{
											//line 625 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
										}
										
									}
									
								}
								
							}
							
							//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType _g8 = ((hscript.TType) (haxe.lang.Runtime.getField(cl1, "superClass", true)) );
								//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( _g8 == null )) 
								{
									//line 630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return false;
								}
								else
								{
									//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (_g8.index)
									{
										case 9:
										{
											//line 631 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object c = _g8.params[0];
											//line 631 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											haxe.root.Array<hscript.TType> args1 = ((haxe.root.Array<hscript.TType>) (_g8.params[1]) );
											//line 631 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											{
												//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.root.Array<hscript.TType> _g9 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
												//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													int _g10 = 0;
													//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													while (( _g10 < args1.length ))
													{
														//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType a1 = args1.__get(_g10);
														//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														 ++ _g10;
														//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														_g9.push(this.apply(a1, ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cl1, "params", true)) ), pl1));
													}
													
												}
												
												//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												pl1 = _g9;
												//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												cl1 = c;
											}
											
											//line 631 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
										default:
										{
											//line 634 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
										}
										
									}
									
								}
								
							}
							
						}
						
						//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g11 = 0;
							//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g12 = pl1.length;
							//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g11 < _g12 ))
							{
								//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int i2 = _g11++;
								//line 638 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.typeEq(pl1.__get(i2), pl23.__get(i2))) ) 
								{
									//line 639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return false;
								}
								
							}
							
						}
						
						//line 640 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t27 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl24 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t27, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t27, "params", true)) ), pl24));
					}
					
					
					case 14:
					{
						//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> fl = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl11 = _g3;
						//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object cl11 = _g2;
						//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g13 = 0;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g14 = fl.length;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g13 < _g14 ))
							{
								//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int i3 = _g13++;
								//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object f2 = fl.__get(i3);
								//line 644 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object f1 = null;
								//line 645 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object cl = cl11;
								//line 646 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (true)
								{
									//line 647 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									f1 = ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(cl, "fields", true)) )) ).get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f2, "name", true)));
									//line 648 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( ! (( f1 == null )) )) 
									{
										//line 648 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									//line 649 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( ((hscript.TType) (haxe.lang.Runtime.getField(cl, "superClass", true)) ) == null )) 
									{
										//line 650 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
									//line 651 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType _g15 = ((hscript.TType) (haxe.lang.Runtime.getField(cl, "superClass", true)) );
									//line 651 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( _g15 == null )) 
									{
										//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
									}
									else
									{
										//line 651 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (_g15.index)
										{
											case 9:
											{
												//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.root.Array<hscript.TType> _g16 = ((haxe.root.Array<hscript.TType>) (_g15.params[1]) );
												//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object c1 = _g15.params[0];
												//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												cl = c1;
												//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
											}
											
										}
										
									}
									
								}
								
								//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.typeEq(((hscript.TType) (haxe.lang.Runtime.getField(f1, "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(f2, "t", true)) ))) ) 
								{
									//line 657 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return false;
								}
								
							}
							
						}
						
						//line 659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					default:
					{
						//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 11:
			{
				//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g17 = t1.params[0];
				//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g18 = ((haxe.root.Array<hscript.TType>) (t1.params[1]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r5 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r5, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r5)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr7 = ((hscript.TType) (haxe.lang.Runtime.setField(r5, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r5, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl12 = _g18;
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t14 = _g17;
						//line 580 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t14, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t14, "params", true)) ), pl12), t2);
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType _g19 = ((hscript.TType) (t2.params[0]) );
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl13 = _g18;
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t15 = _g17;
						//line 580 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t15, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t15, "params", true)) ), pl13), t2);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object _g20 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g21 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl14 = _g18;
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t16 = _g17;
						//line 580 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t16, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t16, "params", true)) ), pl14), t2);
					}
					
					
					default:
					{
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl15 = _g18;
						//line 579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t17 = _g17;
						//line 580 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t17, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t17, "params", true)) ), pl15), t2);
					}
					
				}
				
			}
			
			
			case 13:
			{
				//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g22 = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType _g23 = ((hscript.TType) (t1.params[1]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r6 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r6, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r6)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr8 = ((hscript.TType) (haxe.lang.Runtime.setField(r6, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r6, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t28 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t28);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t29 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl25 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t29, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t29, "params", true)) ), pl25));
					}
					
					
					case 12:
					{
						//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object _g24 = t2.params[0];
						//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g25 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> _g26 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g24, "params", true)) );
							//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _g27 = ((hscript.TType) (haxe.lang.Runtime.getField(_g24, "t", true)) );
							//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.String __temp_svar10 = (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_g24, "name", true)));
								//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								boolean __temp_executeDef11 = true;
								//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( __temp_svar10 != null )) 
								{
									//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (__temp_svar10.hashCode())
									{
										case -164789440:
										{
											//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (__temp_svar10.equals("haxe.Function")) 
											{
												//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												__temp_executeDef11 = false;
												//line 663 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												return true;
											}
											
											//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
									}
									
								}
								
								//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (__temp_executeDef11) 
								{
								}
								
							}
							
						}
						
						//line 662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 13:
					{
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> args2 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType r21 = ((hscript.TType) (t2.params[1]) );
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType r11 = _g23;
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> args11 = _g22;
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( args11.length == args2.length )) 
						{
							//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g28 = 0;
								//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g29 = args11.length;
								//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g28 < _g29 ))
								{
									//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i4 = _g28++;
									//line 589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object a11 = args11.__get(i4);
									//line 590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object a2 = args2.__get(i4);
									//line 591 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(a2, "opt", true)) )) && haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(a11, "opt", true)) ))) )) )) )) 
									{
										//line 591 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
									//line 592 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.tryUnify(((hscript.TType) (haxe.lang.Runtime.getField(a2, "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(a11, "t", true)) ))) ) 
									{
										//line 592 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return false;
									}
									
								}
								
							}
							
							//line 594 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.tryUnify(r11, r21);
						}
						
						//line 587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					default:
					{
						//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 14:
			{
				//line 599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g30 = ((haxe.root.Array<java.lang.Object>) (t1.params[0]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r7 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r7, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r7)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr9 = ((hscript.TType) (haxe.lang.Runtime.setField(r7, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r7, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t210 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t210);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t211 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl26 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t211, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t211, "params", true)) ), pl26));
					}
					
					
					case 14:
					{
						//line 599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> a21 = ((haxe.root.Array<java.lang.Object>) (t2.params[0]) );
						//line 599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> a12 = _g30;
						//line 600 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( a21.length == 0 )) 
						{
							//line 601 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 602 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.ds.StringMap<java.lang.Object> m = new haxe.ds.StringMap<java.lang.Object>();
						//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g31 = 0;
							//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g31 < a12.length ))
							{
								//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object f = a12.__get(_g31);
								//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g31;
								//line 604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								m.set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true)), f);
							}
							
						}
						
						//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g32 = 0;
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g32 < a21.length ))
							{
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object f21 = a21.__get(_g32);
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g32;
								//line 606 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object f11 = m.get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f21, "name", true)));
								//line 607 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( f11 == null )) 
								{
									//line 608 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f21, "opt", true)) ))) 
									{
										//line 608 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										continue;
									}
									
									//line 609 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return false;
								}
								
								//line 611 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.typeEq(((hscript.TType) (haxe.lang.Runtime.getField(f11, "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(f21, "t", true)) ))) ) 
								{
									//line 612 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return false;
								}
								
							}
							
						}
						
						//line 614 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					default:
					{
						//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			default:
			{
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (t2.index)
				{
					case 0:
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object r8 = t2.params[0];
						//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(r8, "r", true)) ) == null )) 
						{
							//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if ( ! (this.link(t2, t1, r8)) ) 
							{
								//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return false;
							}
							
							//line 575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_expr1 = ((hscript.TType) (haxe.lang.Runtime.setField(r8, "r", t1)) );
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return true;
						}
						
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, ((hscript.TType) (haxe.lang.Runtime.getField(r8, "r", true)) ));
					}
					
					
					case 5:
					{
						//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return true;
					}
					
					
					case 8:
					{
						//line 585 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t212 = ((hscript.TType) (t2.params[0]) );
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, t212);
					}
					
					
					case 11:
					{
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t213 = t2.params[0];
						//line 581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> pl27 = ((haxe.root.Array<hscript.TType>) (t2.params[1]) );
						//line 582 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.tryUnify(t1, this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t213, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t213, "params", true)) ), pl27));
					}
					
					
					default:
					{
						//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
				}
				
				//line 562 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
		}
		
		//line 666 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return this.typeEq(t1, t2);
	}
	
	
	public void unify(hscript.TType t1, hscript.TType t2, java.lang.Object e)
	{
		//line 670 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if ( ! (this.tryUnify(t1, t2)) ) 
		{
			//line 671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.ErrorDef e1 = hscript.ErrorDef.ECustom(( ( hscript.Checker.typeStr(t1) + " should be " ) + hscript.Checker.typeStr(t2) ));
			//line 671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.Error e2 = new hscript.Error(((hscript.ErrorDef) (e1) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(e, "line", true)) ));
			//line 671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if ( ! (this.isCompletion) ) 
			{
				//line 671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e2)) );
			}
			
		}
		
	}
	
	
	public hscript.TType apply(hscript.TType t, haxe.root.Array<hscript.TType> params, haxe.root.Array<hscript.TType> args)
	{
		//line 675 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( args.length != params.length )) 
		{
			//line 675 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid number of type parameters")) );
		}
		
		//line 676 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( args.length == 0 )) 
		{
			//line 677 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return t;
		}
		
		//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.ds.EnumValueMap<hscript.TType, hscript.TType> subst = new haxe.ds.EnumValueMap<hscript.TType, hscript.TType>();
		//line 679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g = 0;
			//line 679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g1 = params.length;
			//line 679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			while (( _g < _g1 ))
			{
				//line 679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				int i = _g++;
				//line 680 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				subst.set(params.__get(i), args.__get(i));
			}
			
		}
		
		//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.lang.Function[] map = new haxe.lang.Function[]{null};
		//line 674 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker _gthis = this;
		//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		map[0] = new hscript.Checker_apply_681__Fun(subst, map, _gthis);
		//line 686 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return ((hscript.TType) (map[0].__hx_invoke1_o(0.0, t)) );
	}
	
	
	public hscript.TType mapType(hscript.TType t, haxe.lang.Function f)
	{
		//line 690 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 691 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t.params[0];
				//line 692 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) == null )) 
				{
					//line 692 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return t;
				}
				
				//line 693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ((hscript.TType) (f.__hx_invoke1_o(0.0, t)) );
			}
			
			
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			{
				//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t;
			}
			
			
			case 6:
			{
				//line 694 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String _g = haxe.lang.Runtime.toString(t.params[0]);
				//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t;
			}
			
			
			case 7:
			{
				//line 694 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String _g1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t;
			}
			
			
			case 8:
			{
				//line 698 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType t1 = ((hscript.TType) (t.params[0]) );
				//line 699 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TNull(((hscript.TType) (f.__hx_invoke1_o(0.0, t1)) ));
			}
			
			
			case 9:
			{
				//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g2 = t.params[0];
				//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g3 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (_g3.length)
				{
					case 0:
					{
						//line 697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return t;
					}
					
					
					default:
					{
						//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> args = _g3;
						//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object c = _g2;
						//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g4 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
						//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g5 = 0;
							//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g5 < args.length ))
							{
								//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t2 = args.__get(_g5);
								//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g5;
								//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g4.push(((hscript.TType) (f.__hx_invoke1_o(0.0, t2)) ));
							}
							
						}
						
						//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TInst(c, _g4);
					}
					
				}
				
			}
			
			
			case 10:
			{
				//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g6 = t.params[0];
				//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g7 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (_g7.length)
				{
					case 0:
					{
						//line 697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return t;
					}
					
					
					default:
					{
						//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> args1 = _g7;
						//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object e = _g6;
						//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g8 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
						//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g9 = 0;
							//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g9 < args1.length ))
							{
								//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t3 = args1.__get(_g9);
								//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g9;
								//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g8.push(((hscript.TType) (f.__hx_invoke1_o(0.0, t3)) ));
							}
							
						}
						
						//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TEnum(e, _g8);
					}
					
				}
				
			}
			
			
			case 11:
			{
				//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g10 = t.params[0];
				//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g11 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (_g11.length)
				{
					case 0:
					{
						//line 697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return t;
					}
					
					
					default:
					{
						//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> args2 = _g11;
						//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object t4 = _g10;
						//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g12 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
						//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g13 = 0;
							//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g13 < args2.length ))
							{
								//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t5 = args2.__get(_g13);
								//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g13;
								//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g12.push(((hscript.TType) (f.__hx_invoke1_o(0.0, t5)) ));
							}
							
						}
						
						//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TType(t4, _g12);
					}
					
				}
				
			}
			
			
			case 12:
			{
				//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g14 = t.params[0];
				//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g15 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (_g15.length)
				{
					case 0:
					{
						//line 697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return t;
					}
					
					
					default:
					{
						//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> args3 = _g15;
						//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a = _g14;
						//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> _g16 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
						//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g17 = 0;
							//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g17 < args3.length ))
							{
								//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t6 = args3.__get(_g17);
								//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								 ++ _g17;
								//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g16.push(((hscript.TType) (f.__hx_invoke1_o(0.0, t6)) ));
							}
							
						}
						
						//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TAbstract(a, _g16);
					}
					
				}
				
			}
			
			
			case 13:
			{
				//line 708 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> args4 = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 708 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType ret = ((hscript.TType) (t.params[1]) );
				//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g18 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g19 = 0;
					//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g19 < args4.length ))
					{
						//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a1 = args4.__get(_g19);
						//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g19;
						//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object __temp_stmt7 = null;
						//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a1, "name", true));
							//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean __temp_odecl2 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(a1, "opt", true)) ));
							//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl3 = ((hscript.TType) (f.__hx_invoke1_o(0.0, ((hscript.TType) (haxe.lang.Runtime.getField(a1, "t", true)) ))) );
							//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g18.push(__temp_stmt7);
					}
					
				}
				
				//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TFun(_g18, ((hscript.TType) (f.__hx_invoke1_o(0.0, ret)) ));
			}
			
			
			case 14:
			{
				//line 710 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g20 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g21 = 0;
					//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g21 < fields.length ))
					{
						//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object af = fields.__get(_g21);
						//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g21;
						//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object __temp_stmt8 = null;
						//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(af, "name", true));
							//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean __temp_odecl5 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(af, "opt", true)) ));
							//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl6 = ((hscript.TType) (f.__hx_invoke1_o(0.0, ((hscript.TType) (haxe.lang.Runtime.getField(af, "t", true)) ))) );
							//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl4, __temp_odecl5, __temp_odecl6}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g20.push(__temp_stmt8);
					}
					
				}
				
				//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TAnon(_g20);
			}
			
			
			case 15:
			{
				//line 712 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.lang.Function l = ((haxe.lang.Function) (t.params[0]) );
				//line 713 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return ((hscript.TType) (f.__hx_invoke1_o(0.0, ((hscript.TType) (l.__hx_invoke0_o()) ))) );
			}
			
			
		}
		
		//line 689 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	public hscript.TType follow(hscript.TType t)
	{
		//line 718 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 719 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object r = t.params[0];
				//line 719 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ) != null )) 
				{
					//line 719 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.follow(((hscript.TType) (haxe.lang.Runtime.getField(r, "r", true)) ));
				}
				else
				{
					//line 719 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return t;
				}
				
			}
			
			
			case 8:
			{
				//line 721 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType t1 = ((hscript.TType) (t.params[0]) );
				//line 721 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.follow(t1);
			}
			
			
			case 11:
			{
				//line 720 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object t2 = t.params[0];
				//line 720 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 720 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.follow(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(t2, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(t2, "params", true)) ), args));
			}
			
			
			case 15:
			{
				//line 722 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.lang.Function f = ((haxe.lang.Function) (t.params[0]) );
				//line 722 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.follow(((hscript.TType) (f.__hx_invoke0_o()) ));
			}
			
			
			default:
			{
				//line 723 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t;
			}
			
		}
		
	}
	
	
	public haxe.root.Array<java.lang.Object> getFields(hscript.TType t)
	{
		//line 728 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.root.Array<java.lang.Object> fields = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 727 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker _gthis = this;
		//line 729 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 729 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType _g = this.follow(t);
			//line 729 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			switch (_g.index)
			{
				case 9:
				{
					//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object _g1 = _g.params[0];
					//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object[] c = new java.lang.Object[]{_g1};
						//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<hscript.TType> args = ((haxe.root.Array<hscript.TType>) (_g.params[1]) );
						//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 731 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.lang.Function map = new hscript.Checker_getFields_731__Fun(c, args, _gthis);
							//line 732 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							label1:
							while (( ! (( c[0] == null )) ))
							{
								//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								{
									//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object fname = ((java.lang.Object) (new haxe.ds._StringMap.StringMapKeyIterator<java.lang.Object>(((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(c[0], "fields", true)) )) ))) );
									//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(fname, "hasNext", null)) )))
									{
										//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.String fname1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.callField(fname, "next", null));
										//line 734 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.Object f = ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(c[0], "fields", true)) )) ).get(fname1);
										//line 735 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (( ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "isPublic", true)) ))) ) || ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "complete", true)) ))) ) )) 
										{
											//line 735 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											continue;
										}
										
										//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.String name = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true));
										//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t1 = ((hscript.TType) (map.__hx_invoke1_o(0.0, ((hscript.TType) (haxe.lang.Runtime.getField(f, "t", true)) ))) );
										//line 737 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (( this.allowAsync && ((java.lang.String) (((java.lang.Object) (name) )) ).startsWith(haxe.lang.Runtime.toString("a_")) )) 
										{
											//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											t1 = this.unasync(t1);
											//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											name = haxe.lang.StringExt.substr(name, 2, null);
										}
										
										//line 741 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										fields.push(new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{name, t1}, new java.lang.String[]{}, new double[]{}));
									}
									
								}
								
								//line 743 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(c[0], "isInterface", true)) )) && haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c[0], "interfaces", true)) ) != null )) )) )) 
								{
									//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int _g2 = 0;
									//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<hscript.TType> _g3 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c[0], "interfaces", true)) );
									//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									while (( _g2 < _g3.length ))
									{
										//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType i = _g3.__get(_g2);
										//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										 ++ _g2;
										//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											int _g4 = 0;
											//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											haxe.root.Array<java.lang.Object> _g5 = this.getFields(i);
											//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											while (( _g4 < _g5.length ))
											{
												//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object f1 = _g5.__get(_g4);
												//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												 ++ _g4;
												//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object __temp_stmt5 = null;
												//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "name", true));
													//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													hscript.TType __temp_odecl2 = ((hscript.TType) (map.__hx_invoke1_o(0.0, ((hscript.TType) (haxe.lang.Runtime.getField(f1, "t", true)) ))) );
													//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													__temp_stmt5 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
												}
												
												//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												fields.push(__temp_stmt5);
											}
											
										}
										
									}
									
								}
								
								//line 749 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( ((hscript.TType) (haxe.lang.Runtime.getField(c[0], "superClass", true)) ) == null )) 
								{
									//line 749 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								//line 750 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								{
									//line 750 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType _g6 = ((hscript.TType) (haxe.lang.Runtime.getField(c[0], "superClass", true)) );
									//line 750 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( _g6 == null )) 
									{
										//line 756 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									else
									{
										//line 750 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (_g6.index)
										{
											case 9:
											{
												//line 751 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object csup = _g6.params[0];
												//line 751 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.root.Array<hscript.TType> args1 = ((haxe.root.Array<hscript.TType>) (_g6.params[1]) );
												//line 751 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													haxe.lang.Function curMap = map;
													//line 753 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													map = new hscript.Checker_getFields_753__Fun(curMap, csup, args1, _gthis);
													//line 754 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													c[0] = csup;
												}
												
												//line 751 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 756 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break label1;
											}
											
										}
										
									}
									
								}
								
							}
							;
						}
						
					}
					
					//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 14:
				{
					//line 759 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> fl = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g7 = 0;
						//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g7 < fl.length ))
						{
							//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object f2 = fl.__get(_g7);
							//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g7;
							//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object __temp_stmt6 = null;
							//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.String __temp_odecl3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f2, "name", true));
								//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType __temp_odecl4 = ((hscript.TType) (haxe.lang.Runtime.getField(f2, "t", true)) );
								//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{__temp_odecl3, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
							}
							
							//line 761 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							fields.push(__temp_stmt6);
						}
						
					}
					
					//line 759 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				default:
				{
					//line 762 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
			}
			
		}
		
		//line 764 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return fields;
	}
	
	
	public hscript.TType getField(hscript.TType t, java.lang.String f, java.lang.Object e, java.lang.Object forWrite)
	{
		//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		boolean forWrite1 = ( (haxe.lang.Runtime.eq(forWrite, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (forWrite) ))) );
		//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType _g = this.follow(t);
		//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (_g.index)
		{
			case 5:
			{
				//line 800 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.makeMono();
			}
			
			
			case 9:
			{
				//line 769 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object c = _g.params[0];
				//line 769 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> args = ((haxe.root.Array<hscript.TType>) (_g.params[1]) );
				//line 770 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object cf = ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(c, "fields", true)) )) ).get(f);
				//line 771 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ( cf == null ) && this.allowAsync )) 
				{
					//line 772 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					cf = ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (haxe.lang.Runtime.getField(c, "fields", true)) )) ).get(( "a_" + f ));
					//line 773 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ! (( cf == null )) )) 
					{
						//line 774 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						boolean isPublic = true;
						//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> __temp_odecl1 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cf, "params", true)) );
							//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(cf, "name", true));
							//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl3 = this.unasync(((hscript.TType) (haxe.lang.Runtime.getField(cf, "t", true)) ));
							//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean __temp_odecl4 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(cf, "complete", true)) ));
							//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							cf = new haxe.lang.DynamicObject(new java.lang.String[]{"canWrite", "complete", "isPublic", "name", "params", "t"}, new java.lang.Object[]{false, __temp_odecl4, isPublic, __temp_odecl2, __temp_odecl1, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 776 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ((hscript.TType) (haxe.lang.Runtime.getField(cf, "t", true)) ) == null )) 
						{
							//line 776 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							cf = null;
						}
						
					}
					
				}
				
				//line 779 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ( haxe.lang.Runtime.toBool(((java.lang.Boolean) (( cf == null )) )) && haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(c, "isInterface", true)) )) ) && ( ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c, "interfaces", true)) ) != null ) )) 
				{
					//line 780 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g1 = 0;
					//line 780 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<hscript.TType> _g2 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c, "interfaces", true)) );
					//line 780 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g1 < _g2.length ))
					{
						//line 780 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType i = _g2.__get(_g1);
						//line 780 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g1;
						//line 781 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType ft = this.getField(i, f, e, forWrite1);
						//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ft != null )) 
						{
							//line 783 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.apply(ft, ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c, "params", true)) ), args);
						}
						
					}
					
				}
				
				//line 786 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( cf == null )) 
				{
					//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ((hscript.TType) (haxe.lang.Runtime.getField(c, "superClass", true)) ) == null )) 
					{
						//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return null;
					}
					
					//line 788 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ft1 = this.getField(((hscript.TType) (haxe.lang.Runtime.getField(c, "superClass", true)) ), f, e, forWrite1);
					//line 789 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ft1 != null )) 
					{
						//line 789 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						ft1 = this.apply(ft1, ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c, "params", true)) ), args);
					}
					
					//line 790 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return ft1;
				}
				
				//line 792 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(cf, "isPublic", true)) ))) )) 
				{
					//line 793 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.ErrorDef e1 = hscript.ErrorDef.ECustom(( ( ( "Can\'t access private field " + f ) + " on " ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c, "name", true)) ));
					//line 793 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.Error e2 = new hscript.Error(((hscript.ErrorDef) (e1) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(e, "line", true)) ));
					//line 793 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if ( ! (this.isCompletion) ) 
					{
						//line 793 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e2)) );
					}
					
				}
				
				//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( forWrite1 && ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(cf, "canWrite", true)) ))) ) )) 
				{
					//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.ErrorDef e3 = hscript.ErrorDef.ECustom(( ( ( "Can\'t write readonly field " + f ) + " on " ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c, "name", true)) ));
					//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.Error e4 = new hscript.Error(((hscript.ErrorDef) (e3) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(e, "line", true)) ));
					//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if ( ! (this.isCompletion) ) 
					{
						//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e4)) );
					}
					
				}
				
				//line 796 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType t1 = ((hscript.TType) (haxe.lang.Runtime.getField(cf, "t", true)) );
				//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (( ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cf, "params", true)) ) != null )) 
				{
					//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<hscript.TType> cf1 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cf, "params", true)) );
					//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<hscript.TType> _g3 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
					//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g4 = 0;
						//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g5 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cf, "params", true)) ).length;
						//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g4 < _g5 ))
						{
							//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int i1 = _g4++;
							//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							_g3.push(this.makeMono());
						}
						
					}
					
					//line 797 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					t1 = this.apply(t1, cf1, _g3);
				}
				
				//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.apply(t1, ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(c, "params", true)) ), args);
			}
			
			
			case 14:
			{
				//line 801 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
				//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g6 = 0;
					//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g6 < fields.length ))
					{
						//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object af = fields.__get(_g6);
						//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g6;
						//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(af, "name", true)), f)) 
						{
							//line 804 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((hscript.TType) (haxe.lang.Runtime.getField(af, "t", true)) );
						}
						
					}
					
				}
				
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return null;
			}
			
			
			default:
			{
				//line 807 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return null;
			}
			
		}
		
	}
	
	
	public hscript.TType unasync(hscript.TType t)
	{
		//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType _g = this.follow(t);
			//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			switch (_g.index)
			{
				case 13:
				{
					//line 813 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 813 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ret = ((hscript.TType) (_g.params[1]) );
					//line 813 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( args.length > 0 )) 
					{
						//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> rargs = args.copy();
						//line 815 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 815 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _g1 = this.follow(((hscript.TType) (haxe.lang.Runtime.getField(rargs.shift(), "t", true)) ));
							//line 815 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (_g1.index)
							{
								case 13:
								{
									//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<java.lang.Object> _g2 = ((haxe.root.Array<java.lang.Object>) (_g1.params[0]) );
									//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType _g3 = ((hscript.TType) (_g1.params[1]) );
									//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (_g2.length)
									{
										case 1:
										{
											//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object r = _g2.__get(0);
											//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											return hscript.TType.TFun(rargs, ((hscript.TType) (haxe.lang.Runtime.getField(r, "t", true)) ));
										}
										
										
										default:
										{
											//line 817 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
									}
									
									//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								default:
								{
									//line 817 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
							}
							
						}
						
					}
					
					//line 813 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				default:
				{
					//line 819 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
			}
			
		}
		
		//line 821 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	public hscript.TType typeExprWith(java.lang.Object expr, hscript.TType t)
	{
		//line 825 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType et = this.typeExpr(expr, hscript._Checker.WithType.WithType(t));
		//line 826 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		this.unify(et, t, expr);
		//line 827 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return t;
	}
	
	
	public hscript.TType makeMono()
	{
		//line 831 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return hscript.TType.TMono(new haxe.lang.DynamicObject(new java.lang.String[]{"r"}, new java.lang.Object[]{null}, new java.lang.String[]{}, new double[]{}));
	}
	
	
	public hscript.TType makeIterator(hscript.TType t)
	{
		//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType __temp_odecl1 = hscript.TType.TFun(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}), t);
			//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{"next", false, __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		java.lang.Object __temp_stmt4 = null;
		//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType __temp_odecl2 = hscript.TType.TFun(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}), hscript.TType.TBool);
			//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			__temp_stmt4 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{"hasNext", false, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return hscript.TType.TAnon(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt3, __temp_stmt4}));
	}
	
	
	public java.lang.Object mk(hscript.ExprDef e, java.lang.Object p)
	{
		//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int __temp_odecl1 = ((int) (haxe.lang.Runtime.getField_f(p, "pmin", true)) );
			//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int __temp_odecl2 = ((int) (haxe.lang.Runtime.getField_f(p, "pmax", true)) );
			//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			java.lang.String __temp_odecl3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(p, "origin", true));
			//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int __temp_odecl4 = ((int) (haxe.lang.Runtime.getField_f(p, "line", true)) );
			//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin"}, new java.lang.Object[]{e, __temp_odecl3}, new java.lang.String[]{"line", "pmax", "pmin"}, new double[]{((double) (((double) (__temp_odecl4) )) ), ((double) (((double) (__temp_odecl2) )) ), ((double) (((double) (__temp_odecl1) )) )});
		}
		
	}
	
	
	public boolean isString(hscript.TType t)
	{
		//line 847 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		t = this.follow(t);
		//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 9:
			{
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g = t.params[0];
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g1 = ((haxe.root.Array<hscript.TType>) (t.params[1]) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g2 = haxe.lang.Runtime.getField(_g, "constructor", true);
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.ds.StringMap<java.lang.Object> _g3 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g, "fields", true)) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g4 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g, "interfaces", true)) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object _g5 = haxe.lang.Runtime.getField(_g, "isInterface", true);
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g6 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g, "params", true)) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.ds.StringMap<java.lang.Object> _g7 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g, "statics", true)) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType _g8 = ((hscript.TType) (haxe.lang.Runtime.getField(_g, "superClass", true)) );
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String __temp_svar1 = (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_g, "name", true)));
					//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					boolean __temp_executeDef2 = true;
					//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( __temp_svar1 != null )) 
					{
						//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						switch (__temp_svar1.hashCode())
						{
							case -1808118735:
							{
								//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (__temp_svar1.equals("String")) 
								{
									//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									__temp_executeDef2 = false;
									//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return true;
								}
								
								//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								break;
							}
							
							
						}
						
					}
					
					//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (__temp_executeDef2) 
					{
						//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return false;
					}
					else
					{
						//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						throw null;
					}
					
				}
				
			}
			
			
			default:
			{
				//line 848 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return false;
			}
			
		}
		
	}
	
	
	public void onCompletion(java.lang.Object expr, hscript.TType t)
	{
		//line 852 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (this.isCompletion) 
		{
			//line 852 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Completion(((java.lang.Object) (expr) ), ((hscript.TType) (t) )))) );
		}
		
	}
	
	
	public hscript.TType typeField(java.lang.Object o, java.lang.String f, java.lang.Object expr, boolean forWrite)
	{
		//line 856 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType ot = this.typeExpr(o, hscript._Checker.WithType.Value);
		//line 857 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( f == null )) 
		{
			//line 858 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			this.onCompletion(expr, ot);
		}
		
		//line 859 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType ft = this.getField(ot, f, expr, forWrite);
		//line 860 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( ft == null )) 
		{
			//line 861 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			{
				//line 861 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.ErrorDef e = hscript.ErrorDef.ECustom(( ( hscript.Checker.typeStr(ot) + " has no field " ) + f ));
				//line 861 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.Error e1 = new hscript.Error(((hscript.ErrorDef) (e) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
				//line 861 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if ( ! (this.isCompletion) ) 
				{
					//line 861 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e1)) );
				}
				
			}
			
			//line 862 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			ft = hscript.TType.TDynamic;
		}
		
		//line 864 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return ft;
	}
	
	
	public hscript.TType typeExpr(java.lang.Object expr, hscript._Checker.WithType withType)
	{
		//line 868 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( ( expr == null ) && this.isCompletion )) 
		{
			//line 869 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			switch (withType.index)
			{
				case 2:
				{
					//line 870 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType t = ((hscript.TType) (withType.params[0]) );
					//line 870 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return t;
				}
				
				
				default:
				{
					//line 871 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TDynamic;
				}
				
			}
			
		}
		
		//line 867 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.Checker _gthis = this;
		//line 873 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 873 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(expr, "e", true)) );
			//line 873 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			switch (_g.index)
			{
				case 0:
				{
					//line 874 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.Const c = ((hscript.Const) (_g.params[0]) );
					//line 875 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					switch (c.index)
					{
						case 0:
						{
							//line 876 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g1 = ((int) (haxe.lang.Runtime.toInt(c.params[0])) );
							//line 876 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return hscript.TType.TInt;
						}
						
						
						case 1:
						{
							//line 877 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							double _g2 = ((double) (haxe.lang.Runtime.toDouble(c.params[0])) );
							//line 877 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return hscript.TType.TFloat;
						}
						
						
						case 2:
						{
							//line 878 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String _g3 = haxe.lang.Runtime.toString(c.params[0]);
							//line 878 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.types.t_string;
						}
						
						
					}
					
					//line 874 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 1:
				{
					//line 880 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String v = haxe.lang.Runtime.toString(_g.params[0]);
					//line 880 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 881 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType l = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).get(v)) );
						//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( l != null )) 
						{
							//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return l;
						}
						
						//line 883 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType g = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.globals) )) ).get(v)) );
						//line 884 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( g != null )) 
						{
							//line 885 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( g == null )) 
							{
								//line 887 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return g;
							}
							else
							{
								//line 885 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (g.index)
								{
									case 15:
									{
										//line 886 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.lang.Function f = ((haxe.lang.Function) (g.params[0]) );
										//line 886 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return ((hscript.TType) (f.__hx_invoke0_o()) );
									}
									
									
									default:
									{
										//line 887 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return g;
									}
									
								}
								
							}
							
						}
						
						//line 890 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.allowAsync) 
						{
							//line 891 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							g = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.globals) )) ).get(( "a_" + v ))) );
							//line 892 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( g != null )) 
							{
								//line 892 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								g = this.unasync(g);
							}
							
							//line 893 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( g != null )) 
							{
								//line 893 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return g;
							}
							
						}
						
						//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_svar13 = (v);
							//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int __temp_hash15 = __temp_svar13.hashCode();
							//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean __temp_executeDef14 = true;
							//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( __temp_svar13 != null )) 
							{
								//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (__temp_hash15)
								{
									case 3392903:
									{
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (__temp_svar13.equals("null")) 
										{
											//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											__temp_executeDef14 = false;
											//line 897 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											return this.makeMono();
										}
										
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									case 3569038:
									case 97196323:
									{
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (( (( ( __temp_hash15 == 3569038 ) && __temp_svar13.equals("true") )) || __temp_svar13.equals("false") )) 
										{
											//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											__temp_executeDef14 = false;
											//line 899 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											return hscript.TType.TBool;
										}
										
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									case 110620997:
									{
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (__temp_svar13.equals("trace")) 
										{
											//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											__temp_executeDef14 = false;
											//line 901 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											return hscript.TType.TDynamic;
										}
										
										//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
								}
								
							}
							
							//line 902 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (__temp_executeDef14) 
							{
								//line 903 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (this.isCompletion) 
								{
									//line 903 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return hscript.TType.TDynamic;
								}
								
								//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								{
									//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.ErrorDef e = hscript.ErrorDef.ECustom(( "Unknown identifier " + v ));
									//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.Error e1 = new hscript.Error(((hscript.ErrorDef) (e) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
									//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.isCompletion) ) 
									{
										//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e1)) );
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 880 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 2:
				{
					//line 913 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String n = haxe.lang.Runtime.toString(_g.params[0]);
					//line 913 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.CType t1 = ((hscript.CType) (_g.params[1]) );
					//line 913 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object init = _g.params[2];
					//line 914 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType vt = ( (( t1 == null )) ? (this.makeMono()) : (this.makeType(t1, expr)) );
					//line 915 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ! (( init == null )) )) 
					{
						//line 916 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType et = this.typeExpr(init, ( (( t1 == null )) ? (hscript._Checker.WithType.Value) : (hscript._Checker.WithType.WithType(vt)) ));
						//line 917 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( t1 == null )) 
						{
							//line 917 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							vt = et;
						}
						else
						{
							//line 917 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.unify(et, vt, init);
						}
						
					}
					
					//line 919 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(n, vt);
					//line 920 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TVoid;
				}
				
				
				case 3:
				{
					//line 921 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e2 = _g.params[0];
					//line 922 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.typeExpr(e2, withType);
				}
				
				
				case 4:
				{
					//line 906 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> el = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 907 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType t2 = hscript.TType.TVoid;
					//line 908 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.ds.StringMap<hscript.TType> locals = this.saveLocals();
					//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g4 = 0;
						//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g4 < el.length ))
						{
							//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object e3 = el.__get(_g4);
							//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g4;
							//line 910 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							t2 = this.typeExpr(e3, ( (haxe.lang.Runtime.refEq(e3, el.__get(( el.length - 1 )))) ? (withType) : (hscript._Checker.WithType.NoValue) ));
						}
						
					}
					
					//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.locals = locals;
					//line 912 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return t2;
				}
				
				
				case 5:
				{
					//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object o = _g.params[0];
					//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String f1 = haxe.lang.Runtime.toString(_g.params[1]);
					//line 948 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.typeField(o, f1, expr, false);
				}
				
				
				case 6:
				{
					//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String op = haxe.lang.Runtime.toString(_g.params[0]);
					//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e11 = _g.params[1];
					//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e21 = _g.params[2];
					//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String __temp_svar18 = (op);
						//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int __temp_hash20 = __temp_svar18.hashCode();
						//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						boolean __temp_executeDef19 = true;
						//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( __temp_svar18 != null )) 
						{
							//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (__temp_hash20)
							{
								case 47:
								case 45:
								case 42:
								case 37:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( (( ( __temp_hash20 == 47 ) && __temp_svar18.equals("/") )) || ( (( ( __temp_hash20 == 45 ) && __temp_svar18.equals("-") )) || ( (( ( __temp_hash20 == 42 ) && __temp_svar18.equals("*") )) || __temp_svar18.equals("%") ) ) )) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1151 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t11 = this.typeExpr(e11, hscript._Checker.WithType.WithType(hscript.TType.TInt));
										//line 1152 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t21 = this.typeExpr(e21, hscript._Checker.WithType.WithType(t11));
										//line 1153 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if ( ! (this.tryUnify(t11, t21)) ) 
										{
											//line 1154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											this.unify(t21, t11, e21);
										}
										
										//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.TType _g5 = this.follow(t11);
											//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.TType _g6 = this.follow(t21);
											//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											switch (_g5.index)
											{
												case 2:
												{
													//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													switch (_g6.index)
													{
														case 2:
														{
															//line 1157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															if (haxe.lang.Runtime.valEq(op, "/")) 
															{
																//line 1157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																return hscript.TType.TFloat;
															}
															
															//line 1158 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TInt;
														}
														
														
														case 3:
														case 5:
														{
															//line 1160 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TFloat;
														}
														
														
														default:
														{
															//line 1162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															this.unify(t11, hscript.TType.TFloat, e11);
															//line 1163 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															this.unify(t21, hscript.TType.TFloat, e21);
															//line 1161 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															break;
														}
														
													}
													
													//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												case 3:
												case 5:
												{
													//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													switch (_g6.index)
													{
														case 2:
														case 3:
														case 5:
														{
															//line 1160 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TFloat;
														}
														
														
														default:
														{
															//line 1162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															this.unify(t11, hscript.TType.TFloat, e11);
															//line 1163 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															this.unify(t21, hscript.TType.TFloat, e21);
															//line 1161 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															break;
														}
														
													}
													
													//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												default:
												{
													//line 1162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													this.unify(t11, hscript.TType.TFloat, e11);
													//line 1163 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													this.unify(t21, hscript.TType.TFloat, e21);
													//line 1161 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
											}
											
										}
										
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 3968:
								case 1216:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( (( ( __temp_hash20 == 3968 ) && __temp_svar18.equals("||") )) || __temp_svar18.equals("&&") )) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e11, hscript.TType.TBool);
										//line 1167 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e21, hscript.TType.TBool);
										//line 1168 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TBool;
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 43:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (__temp_svar18.equals("+")) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1134 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t12 = this.typeExpr(e11, hscript._Checker.WithType.WithType(hscript.TType.TInt));
										//line 1135 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t22 = this.typeExpr(e21, hscript._Checker.WithType.WithType(t12));
										//line 1136 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.tryUnify(t12, t22);
										//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.TType _g7 = this.follow(t12);
											//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.TType _g8 = this.follow(t22);
											//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											switch (_g7.index)
											{
												case 2:
												{
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													switch (_g8.index)
													{
														case 2:
														{
															//line 1139 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TInt;
														}
														
														
														case 3:
														{
															//line 1141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TFloat;
														}
														
														
														case 5:
														{
															//line 1143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TDynamic;
														}
														
														
														default:
														{
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t13 = _g7;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t23 = _g8;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															{
																//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																if (( this.isString(t13) || this.isString(t23) )) 
																{
																	//line 1146 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	return this.types.t_string;
																}
																
																//line 1147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t13, hscript.TType.TFloat, e11);
																//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t23, hscript.TType.TFloat, e21);
															}
															
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															break;
														}
														
													}
													
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												case 3:
												{
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													switch (_g8.index)
													{
														case 2:
														case 3:
														{
															//line 1141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TFloat;
														}
														
														
														case 5:
														{
															//line 1143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TDynamic;
														}
														
														
														default:
														{
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t14 = _g7;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t24 = _g8;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															{
																//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																if (( this.isString(t14) || this.isString(t24) )) 
																{
																	//line 1146 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	return this.types.t_string;
																}
																
																//line 1147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t14, hscript.TType.TFloat, e11);
																//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t24, hscript.TType.TFloat, e21);
															}
															
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															break;
														}
														
													}
													
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												case 5:
												{
													//line 1143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													return hscript.TType.TDynamic;
												}
												
												
												default:
												{
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													switch (_g8.index)
													{
														case 5:
														{
															//line 1143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															return hscript.TType.TDynamic;
														}
														
														
														default:
														{
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t15 = _g7;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															hscript.TType t25 = _g8;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															{
																//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																if (( this.isString(t15) || this.isString(t25) )) 
																{
																	//line 1146 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	return this.types.t_string;
																}
																
																//line 1147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t15, hscript.TType.TFloat, e11);
																//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																this.unify(t25, hscript.TType.TFloat, e21);
															}
															
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															break;
														}
														
													}
													
													//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
											}
											
										}
										
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 1983:
								case 62:
								case 1921:
								case 60:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( (( ( __temp_hash20 == 1983 ) && __temp_svar18.equals(">=") )) || ( (( ( __temp_hash20 == 62 ) && __temp_svar18.equals(">") )) || ( (( ( __temp_hash20 == 1921 ) && __temp_svar18.equals("<=") )) || __temp_svar18.equals("<") ) ) )) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1180 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t17 = this.typeExpr(e11, hscript._Checker.WithType.Value);
										//line 1181 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t27 = this.typeExpr(e21, hscript._Checker.WithType.WithType(t17));
										//line 1182 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if ( ! (this.tryUnify(t17, t27)) ) 
										{
											//line 1183 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											this.unify(t27, t17, e21);
										}
										
										//line 1184 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 1184 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.TType _g11 = this.follow(t17);
											//line 1184 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											switch (_g11.index)
											{
												case 2:
												case 3:
												case 4:
												{
													//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												case 9:
												{
													//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													java.lang.Object _g12 = _g11.params[0];
													//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													haxe.root.Array<hscript.TType> _g13 = ((haxe.root.Array<hscript.TType>) (_g11.params[1]) );
													//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													{
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														java.lang.Object _g14 = haxe.lang.Runtime.getField(_g12, "constructor", true);
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														haxe.ds.StringMap<java.lang.Object> _g15 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g12, "fields", true)) );
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														haxe.root.Array<hscript.TType> _g16 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g12, "interfaces", true)) );
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														java.lang.Object _g17 = haxe.lang.Runtime.getField(_g12, "isInterface", true);
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														haxe.root.Array<hscript.TType> _g18 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g12, "params", true)) );
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														haxe.ds.StringMap<java.lang.Object> _g19 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g12, "statics", true)) );
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType _g20 = ((hscript.TType) (haxe.lang.Runtime.getField(_g12, "superClass", true)) );
														//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														{
															//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															java.lang.String __temp_svar16 = (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_g12, "name", true)));
															//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															boolean __temp_executeDef17 = true;
															//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															if (( __temp_svar16 != null )) 
															{
																//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																switch (__temp_svar16.hashCode())
																{
																	case -1808118735:
																	{
																		//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																		if (__temp_svar16.equals("String")) 
																		{
																			//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			__temp_executeDef17 = false;
																		}
																		
																		//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																		break;
																	}
																	
																	
																}
																
															}
															
															//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															if (__temp_executeDef17) 
															{
																//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																hscript.ErrorDef e4 = hscript.ErrorDef.ECustom(( "Cannot compare " + hscript.Checker.typeStr(t17) ));
																//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																hscript.Error e5 = new hscript.Error(((hscript.ErrorDef) (e4) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
																//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																if ( ! (this.isCompletion) ) 
																{
																	//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e5)) );
																}
																
															}
															
														}
														
													}
													
													//line 1185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												default:
												{
													//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													hscript.ErrorDef e6 = hscript.ErrorDef.ECustom(( "Cannot compare " + hscript.Checker.typeStr(t17) ));
													//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													hscript.Error e7 = new hscript.Error(((hscript.ErrorDef) (e6) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
													//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													if ( ! (this.isCompletion) ) 
													{
														//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e7)) );
													}
													
													//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
											}
											
										}
										
										//line 1189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TBool;
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 45678:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (__temp_svar18.equals("...")) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e11, hscript.TType.TInt);
										//line 1171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e21, hscript.TType.TInt);
										//line 1172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return this.makeIterator(hscript.TType.TInt);
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 1952:
								case 1084:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( (( ( __temp_hash20 == 1952 ) && __temp_svar18.equals("==") )) || __temp_svar18.equals("!=") )) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t16 = this.typeExpr(e11, hscript._Checker.WithType.Value);
										//line 1175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType t26 = this.typeExpr(e21, hscript._Checker.WithType.WithType(t16));
										//line 1176 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if ( ! (this.tryUnify(t16, t26)) ) 
										{
											//line 1177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											this.unify(t26, t16, e21);
										}
										
										//line 1178 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TBool;
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 124:
								case 94:
								case 61566:
								case 1984:
								case 1920:
								case 38:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( (( ( __temp_hash20 == 124 ) && __temp_svar18.equals("|") )) || ( (( ( __temp_hash20 == 94 ) && __temp_svar18.equals("^") )) || ( (( ( __temp_hash20 == 61566 ) && __temp_svar18.equals(">>>") )) || ( (( ( __temp_hash20 == 1984 ) && __temp_svar18.equals(">>") )) || ( (( ( __temp_hash20 == 1920 ) && __temp_svar18.equals("<<") )) || __temp_svar18.equals("&") ) ) ) ) )) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1114 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e11, hscript.TType.TInt);
										//line 1115 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e21, hscript.TType.TInt);
										//line 1116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TInt;
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								case 61:
								{
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (__temp_svar18.equals("=")) 
									{
										//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_executeDef19 = false;
										//line 1118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if (this.allowDefine) 
										{
											//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.ExprDef _g9 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e11, "e", true)) );
											//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											switch (_g9.index)
											{
												case 1:
												{
													//line 1120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													java.lang.String i = haxe.lang.Runtime.toString(_g9.params[0]);
													//line 1120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													if ((  ! (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).exists(i))  &&  ! (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.globals) )) ).exists(i))  )) 
													{
														//line 1121 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType vt1 = this.typeExpr(e21, hscript._Checker.WithType.Value);
														//line 1122 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(i, vt1);
														//line 1123 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														return vt1;
													}
													
													//line 1120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
												
												default:
												{
													//line 1124 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													break;
												}
												
											}
											
										}
										
										//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType vt2 = null;
										//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.ExprDef _g10 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e11, "e", true)) );
										//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (_g10.index)
										{
											case 5:
											{
												//line 1128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object o1 = _g10.params[0];
												//line 1128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.String f2 = haxe.lang.Runtime.toString(_g10.params[1]);
												//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												vt2 = this.typeField(o1, f2, e11, true);
												//line 1128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												vt2 = this.typeExpr(e11, hscript._Checker.WithType.Value);
												//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
										}
										
										//line 1131 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.typeExprWith(e21, vt2);
										//line 1132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return vt2;
									}
									
									//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
							}
							
						}
						
						//line 1190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (__temp_executeDef19) 
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (haxe.lang.Runtime.eq(haxe.lang.StringExt.charCodeAt(op, ( op.length() - 1 )), 61)) 
							{
								//line 1192 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType t3 = this.typeExpr(this.mk(hscript.ExprDef.EBinop(haxe.lang.StringExt.substr(op, 0, ( op.length() - 1 )), e11, e21), expr), withType);
								//line 1193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								return this.typeExpr(this.mk(hscript.ExprDef.EBinop("=", e11, e21), expr), withType);
							}
							
							//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.ErrorDef e8 = hscript.ErrorDef.ECustom(( "Unsupported operation " + op ));
								//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.Error e9 = new hscript.Error(((hscript.ErrorDef) (e8) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
								//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.isCompletion) ) 
								{
									//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e9)) );
								}
								
							}
							
						}
						
					}
					
					//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 7:
				{
					//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					boolean _g21 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (_g.params[1]) ));
					//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String op1 = haxe.lang.Runtime.toString(_g.params[0]);
						//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object e10 = _g.params[2];
						//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 1071 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType et1 = this.typeExpr(e10, hscript._Checker.WithType.Value);
							//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.String __temp_svar21 = (op1);
								//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int __temp_hash23 = __temp_svar21.hashCode();
								//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								boolean __temp_executeDef22 = true;
								//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( __temp_svar21 != null )) 
								{
									//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (__temp_hash23)
									{
										case 33:
										{
											//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (__temp_svar21.equals("!")) 
											{
												//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												__temp_executeDef22 = false;
												//line 1077 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												this.unify(et1, hscript.TType.TBool, e10);
												//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												return et1;
											}
											
											//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
										case 1440:
										case 45:
										case 1376:
										{
											//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (( (( ( __temp_hash23 == 1440 ) && __temp_svar21.equals("--") )) || ( (( ( __temp_hash23 == 45 ) && __temp_svar21.equals("-") )) || __temp_svar21.equals("++") ) )) 
											{
												//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												__temp_executeDef22 = false;
												//line 1074 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												this.unify(et1, hscript.TType.TInt, e10);
												//line 1075 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												return et1;
											}
											
											//line 1072 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
									}
									
								}
								
								//line 1079 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (__temp_executeDef22) 
								{
								}
								
							}
							
						}
						
					}
					
					//line 1070 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 8:
				{
					//line 923 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e12 = _g.params[0];
					//line 923 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> params = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
					//line 924 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ft = this.typeExpr(e12, hscript._Checker.WithType.Value);
					//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType _g22 = this.follow(ft);
					//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					switch (_g22.index)
					{
						case 5:
						{
							//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g23 = 0;
								//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g23 < params.length ))
								{
									//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object p = params.__get(_g23);
									//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g23;
									//line 941 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									this.typeExpr(p, hscript._Checker.WithType.Value);
								}
								
							}
							
							//line 942 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeMono();
						}
						
						
						case 13:
						{
							//line 926 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (_g22.params[0]) );
							//line 926 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType ret = ((hscript.TType) (_g22.params[1]) );
							//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g24 = 0;
								//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g25 = params.length;
								//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g24 < _g25 ))
								{
									//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i1 = _g24++;
									//line 928 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object a = args.__get(i1);
									//line 929 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( a == null )) 
									{
										//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object curExpr = params.__get(i1);
											//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.ErrorDef e13 = hscript.ErrorDef.ECustom("Too many arguments");
											//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											hscript.Error e14 = new hscript.Error(((hscript.ErrorDef) (e13) ), ((int) (haxe.lang.Runtime.getField_f(curExpr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(curExpr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(curExpr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(curExpr, "line", true)) ));
											//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if ( ! (this.isCompletion) ) 
											{
												//line 930 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e14)) );
											}
											
										}
										
										//line 931 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									//line 933 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType t4 = this.typeExpr(params.__get(i1), ( (( a == null )) ? (hscript._Checker.WithType.Value) : (hscript._Checker.WithType.WithType(((hscript.TType) (haxe.lang.Runtime.getField(a, "t", true)) ))) ));
									//line 934 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									this.unify(t4, ((hscript.TType) (haxe.lang.Runtime.getField(a, "t", true)) ), params.__get(i1));
								}
								
							}
							
							//line 936 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 936 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g26 = params.length;
								//line 936 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g27 = args.length;
								//line 936 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g26 < _g27 ))
								{
									//line 936 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									int i2 = _g26++;
									//line 937 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(args.__get(i2), "opt", true)) ))) )) 
									{
										//line 938 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.ErrorDef e15 = hscript.ErrorDef.ECustom(( ( ( "Missing argument " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(args.__get(i2), "name", true)) ) + ":" ) + hscript.Checker.typeStr(((hscript.TType) (haxe.lang.Runtime.getField(args.__get(i2), "t", true)) )) ));
										//line 938 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.Error e16 = new hscript.Error(((hscript.ErrorDef) (e15) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
										//line 938 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if ( ! (this.isCompletion) ) 
										{
											//line 938 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e16)) );
										}
										
									}
									
								}
								
							}
							
							//line 939 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ret;
						}
						
						
						default:
						{
							//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.ErrorDef e17 = hscript.ErrorDef.ECustom(( hscript.Checker.typeStr(ft) + " cannot be called" ));
								//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.Error e18 = new hscript.Error(((hscript.ErrorDef) (e17) ), ((int) (haxe.lang.Runtime.getField_f(e12, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(e12, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e12, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(e12, "line", true)) ));
								//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.isCompletion) ) 
								{
									//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e18)) );
								}
								
							}
							
							//line 945 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeMono();
						}
						
					}
					
				}
				
				
				case 9:
				{
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object cond = _g.params[0];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e19 = _g.params[1];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e22 = _g.params[2];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 959 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.typeExprWith(cond, hscript.TType.TBool);
						//line 960 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t18 = this.typeExpr(e19, withType);
						//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( e22 == null )) 
						{
							//line 962 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t18;
						}
						
						//line 963 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t28 = this.typeExpr(e22, withType);
						//line 964 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( withType == hscript._Checker.WithType.NoValue )) 
						{
							//line 965 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return hscript.TType.TVoid;
						}
						
						//line 966 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.tryUnify(t28, t18)) 
						{
							//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t18;
						}
						
						//line 968 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.tryUnify(t18, t28)) 
						{
							//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t28;
						}
						
						//line 970 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.unify(t28, t18, e22);
					}
					
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 10:
				{
					//line 971 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object cond1 = _g.params[0];
					//line 971 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e20 = _g.params[1];
					//line 972 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExprWith(cond1, hscript.TType.TBool);
					//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExpr(e20, hscript._Checker.WithType.NoValue);
					//line 974 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TVoid;
				}
				
				
				case 11:
				{
					//line 1081 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String v1 = haxe.lang.Runtime.toString(_g.params[0]);
					//line 1081 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object it = _g.params[1];
					//line 1081 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e23 = _g.params[2];
					//line 1082 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.ds.StringMap<hscript.TType> locals1 = this.saveLocals();
					//line 1083 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType itt = this.typeExpr(it, hscript._Checker.WithType.Value);
					//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType vt3 = null;
					//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType _g28 = this.follow(itt);
					//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					switch (_g28.index)
					{
						case 9:
						{
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object _g29 = _g28.params[0];
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> _g30 = ((haxe.root.Array<hscript.TType>) (_g28.params[1]) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object _g31 = haxe.lang.Runtime.getField(_g29, "constructor", true);
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.ds.StringMap<java.lang.Object> _g32 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g29, "fields", true)) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> _g33 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g29, "interfaces", true)) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object _g34 = haxe.lang.Runtime.getField(_g29, "isInterface", true);
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<hscript.TType> _g35 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g29, "params", true)) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.ds.StringMap<java.lang.Object> _g36 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g29, "statics", true)) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _g37 = ((hscript.TType) (haxe.lang.Runtime.getField(_g29, "superClass", true)) );
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.String __temp_svar24 = (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_g29, "name", true)));
								//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								boolean __temp_executeDef25 = true;
								//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( __temp_svar24 != null )) 
								{
									//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									switch (__temp_svar24.hashCode())
									{
										case 63537721:
										{
											//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (__temp_svar24.equals("Array")) 
											{
												//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												__temp_executeDef25 = false;
												//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												switch (_g30.length)
												{
													case 1:
													{
														//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType t5 = _g30.__get(0);
														//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														vt3 = t5;
														//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														break;
													}
													
													
													default:
													{
														//line 1088 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType ft1 = this.getField(itt, "iterator", it, null);
														//line 1089 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														if (( ft1 == null )) 
														{
															//line 1090 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															switch (itt.index)
															{
																case 12:
																{
																	//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	java.lang.Object a1 = itt.params[0];
																	//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	haxe.root.Array<hscript.TType> args1 = ((haxe.root.Array<hscript.TType>) (itt.params[1]) );
																	//line 1094 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	ft1 = this.getField(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(a1, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(a1, "params", true)) ), args1), "iterator", it, null);
																	//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	break;
																}
																
																
																default:
																{
																	//line 1095 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	break;
																}
																
															}
															
														}
														
														//line 1097 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														if (( ft1 != null )) 
														{
															//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															switch (ft1.index)
															{
																case 13:
																{
																	//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	hscript.TType _g38 = ((hscript.TType) (ft1.params[1]) );
																	//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	switch (((haxe.root.Array<java.lang.Object>) (ft1.params[0]) ).length)
																	{
																		case 0:
																		{
																			//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			hscript.TType ret1 = _g38;
																			//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			ft1 = ret1;
																			//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			break;
																		}
																		
																		
																		default:
																		{
																			//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			ft1 = null;
																			//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																			break;
																		}
																		
																	}
																	
																	//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	break;
																}
																
																
																default:
																{
																	//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	ft1 = null;
																	//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	break;
																}
																
															}
															
														}
														
														//line 1102 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType t6 = this.makeMono();
														//line 1103 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType iter = this.makeIterator(t6);
														//line 1104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														this.unify(( (( ft1 != null )) ? (ft1) : (itt) ), iter, it);
														//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														vt3 = t6;
														//line 1087 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														break;
													}
													
												}
												
											}
											
											//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											break;
										}
										
										
									}
									
								}
								
								//line 1087 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (__temp_executeDef25) 
								{
									//line 1088 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType ft2 = this.getField(itt, "iterator", it, null);
									//line 1089 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( ft2 == null )) 
									{
										//line 1090 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (itt.index)
										{
											case 12:
											{
												//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object a2 = itt.params[0];
												//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												haxe.root.Array<hscript.TType> args2 = ((haxe.root.Array<hscript.TType>) (itt.params[1]) );
												//line 1094 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												ft2 = this.getField(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(a2, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(a2, "params", true)) ), args2), "iterator", it, null);
												//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 1095 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
										}
										
									}
									
									//line 1097 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( ft2 != null )) 
									{
										//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (ft2.index)
										{
											case 13:
											{
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType _g39 = ((hscript.TType) (ft2.params[1]) );
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												switch (((haxe.root.Array<java.lang.Object>) (ft2.params[0]) ).length)
												{
													case 0:
													{
														//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.TType ret2 = _g39;
														//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														ft2 = ret2;
														//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														break;
													}
													
													
													default:
													{
														//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														ft2 = null;
														//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														break;
													}
													
												}
												
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												ft2 = null;
												//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
										}
										
									}
									
									//line 1102 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType t7 = this.makeMono();
									//line 1103 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType iter1 = this.makeIterator(t7);
									//line 1104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									this.unify(( (( ft2 != null )) ? (ft2) : (itt) ), iter1, it);
									//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									vt3 = t7;
								}
								
							}
							
							//line 1085 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							break;
						}
						
						
						default:
						{
							//line 1088 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType ft3 = this.getField(itt, "iterator", it, null);
							//line 1089 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( ft3 == null )) 
							{
								//line 1090 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (itt.index)
								{
									case 12:
									{
										//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.Object a3 = itt.params[0];
										//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<hscript.TType> args3 = ((haxe.root.Array<hscript.TType>) (itt.params[1]) );
										//line 1094 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										ft3 = this.getField(this.apply(((hscript.TType) (haxe.lang.Runtime.getField(a3, "t", true)) ), ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(a3, "params", true)) ), args3), "iterator", it, null);
										//line 1091 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									default:
									{
										//line 1095 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
								}
								
							}
							
							//line 1097 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( ft3 != null )) 
							{
								//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (ft3.index)
								{
									case 13:
									{
										//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType _g40 = ((hscript.TType) (ft3.params[1]) );
										//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										switch (((haxe.root.Array<java.lang.Object>) (ft3.params[0]) ).length)
										{
											case 0:
											{
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType ret3 = _g40;
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												ft3 = ret3;
												//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
											
											default:
											{
												//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												ft3 = null;
												//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												break;
											}
											
										}
										
										//line 1099 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									default:
									{
										//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										ft3 = null;
										//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
								}
								
							}
							
							//line 1102 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType t8 = this.makeMono();
							//line 1103 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType iter2 = this.makeIterator(t8);
							//line 1104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.unify(( (( ft3 != null )) ? (ft3) : (itt) ), iter2, it);
							//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							vt3 = t8;
							//line 1087 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							break;
						}
						
					}
					
					//line 1107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(v1, vt3);
					//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExpr(e23, hscript._Checker.WithType.NoValue);
					//line 1109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.locals = locals1;
					//line 1110 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TVoid;
				}
				
				
				case 12:
				case 13:
				{
					//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TVoid;
				}
				
				
				case 14:
				{
					//line 1019 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> args4 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 1019 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object body = _g.params[1];
					//line 1019 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String name = haxe.lang.Runtime.toString(_g.params[2]);
					//line 1019 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.CType ret4 = ((hscript.CType) (_g.params[3]) );
					//line 1020 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ft4 = null;
					//line 1020 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType tret = null;
					//line 1020 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> targs = null;
					//line 1021 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( this.currentFunType != null )) 
					{
						//line 1022 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 1022 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _g41 = this.currentFunType;
							//line 1022 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (_g41.index)
							{
								case 13:
								{
									//line 1023 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<java.lang.Object> args5 = ((haxe.root.Array<java.lang.Object>) (_g41.params[0]) );
									//line 1023 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType ret5 = ((hscript.TType) (_g41.params[1]) );
									//line 1023 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									{
										//line 1024 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										ft4 = this.currentFunType;
										//line 1025 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										tret = ret5;
										//line 1025 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										targs = args5;
									}
									
									//line 1023 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								default:
								{
									//line 1027 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
								}
								
							}
							
						}
						
						//line 1029 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.currentFunType = null;
					}
					else
					{
						//line 1031 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						tret = ( (( ret4 == null )) ? (this.makeMono()) : (this.makeType(ret4, expr)) );
					}
					
					//line 1033 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.ds.StringMap<hscript.TType> locals2 = this.saveLocals();
					//line 1034 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType oldRet = this.allowReturn;
					//line 1035 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					boolean oldGDef = this.allowDefine;
					//line 1036 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.allowReturn = tret;
					//line 1037 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.allowDefine = false;
					//line 1038 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> withArgs = null;
					//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					boolean tmp = false;
					//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( name != null )) 
					{
						//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						boolean tmp1 = false;
						//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						switch (withType.index)
						{
							case 2:
							{
								//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								hscript.TType _hx_tmp = this.follow(((hscript.TType) (withType.params[0]) ));
								//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								switch (_hx_tmp.index)
								{
									case 13:
									{
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<java.lang.Object> _g42 = ((haxe.root.Array<java.lang.Object>) (_hx_tmp.params[0]) );
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType _g43 = ((hscript.TType) (_hx_tmp.params[1]) );
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										tmp1 = true;
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
									
									default:
									{
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										tmp1 = false;
										//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
								}
								
								//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								break;
							}
							
							
							default:
							{
								//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								tmp1 = false;
								//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								break;
							}
							
						}
						
						//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						tmp =  ! (tmp1) ;
					}
					else
					{
						//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						tmp = false;
					}
					
					//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (tmp) 
					{
						//line 1040 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType ev = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.events) )) ).get(name)) );
						//line 1041 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( ev != null )) 
						{
							//line 1041 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							withType = hscript._Checker.WithType.WithType(ev);
						}
						
					}
					
					//line 1043 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					switch (withType.index)
					{
						case 2:
						{
							//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _hx_tmp1 = this.follow(((hscript.TType) (withType.params[0]) ));
							//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (_hx_tmp1.index)
							{
								case 13:
								{
									//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<java.lang.Object> args6 = ((haxe.root.Array<java.lang.Object>) (_hx_tmp1.params[0]) );
									//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType ret6 = ((hscript.TType) (_hx_tmp1.params[1]) );
									//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									{
										//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										withArgs = args6;
										//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.unify(tret, ret6, expr);
									}
									
									//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								default:
								{
									//line 1045 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
							}
							
							//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							break;
						}
						
						
						default:
						{
							//line 1045 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							break;
						}
						
					}
					
					//line 1047 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( targs == null )) 
					{
						//line 1048 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						targs = this.typeArgs(args4, expr);
					}
					
					//line 1049 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1049 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g44 = 0;
						//line 1049 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g45 = targs.length;
						//line 1049 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g44 < _g45 ))
						{
							//line 1049 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int i3 = _g44++;
							//line 1050 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object a4 = targs.__get(i3);
							//line 1051 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( withArgs != null )) 
							{
								//line 1052 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( i3 < withArgs.length )) 
								{
									//line 1053 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									this.unify(((hscript.TType) (haxe.lang.Runtime.getField(withArgs.__get(i3), "t", true)) ), ((hscript.TType) (haxe.lang.Runtime.getField(a4, "t", true)) ), expr);
								}
								else
								{
									//line 1055 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.ErrorDef e24 = hscript.ErrorDef.ECustom(( "Extra argument " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a4, "name", true)) ));
									//line 1055 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.Error e25 = new hscript.Error(((hscript.ErrorDef) (e24) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
									//line 1055 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.isCompletion) ) 
									{
										//line 1055 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e25)) );
									}
									
								}
								
							}
							
							//line 1057 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a4, "name", true)), ((hscript.TType) (haxe.lang.Runtime.getField(a4, "t", true)) ));
						}
						
					}
					
					//line 1059 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ( withArgs != null ) && ( targs.length < withArgs.length ) )) 
					{
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String msg = ( ( "Missing " + (( withArgs.length - targs.length )) ) + " arguments (" );
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g46 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g47 = targs.length;
							//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							int _g48 = withArgs.length;
							//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							while (( _g47 < _g48 ))
							{
								//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int i4 = _g47++;
								//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								_g46.push(hscript.Checker.typeStr(((hscript.TType) (haxe.lang.Runtime.getField(withArgs.__get(i4), "t", true)) )));
							}
							
						}
						
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.ErrorDef e26 = hscript.ErrorDef.ECustom(( ( msg + _g46.join(",") ) + ")" ));
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.Error e27 = new hscript.Error(((hscript.ErrorDef) (e26) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
						//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if ( ! (this.isCompletion) ) 
						{
							//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e27)) );
						}
						
					}
					
					//line 1061 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExpr(body, hscript._Checker.WithType.NoValue);
					//line 1062 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.allowDefine = oldGDef;
					//line 1063 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.allowReturn = oldRet;
					//line 1064 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.locals = locals2;
					//line 1065 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ft4 == null )) 
					{
						//line 1066 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						ft4 = hscript.TType.TFun(targs, tret);
						//line 1067 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						locals2.set(name, ft4);
					}
					
					//line 1069 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return ft4;
				}
				
				
				case 15:
				{
					//line 992 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object v2 = _g.params[0];
					//line 993 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType et2 = ( (( v2 == null )) ? (hscript.TType.TVoid) : (this.typeExpr(v2, ( (( this.allowReturn == null )) ? (hscript._Checker.WithType.Value) : (hscript._Checker.WithType.WithType(this.allowReturn)) ))) );
					//line 994 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( this.allowReturn == null )) 
					{
						//line 995 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.ErrorDef e28 = hscript.ErrorDef.ECustom("Return not allowed here");
						//line 995 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.Error e29 = new hscript.Error(((hscript.ErrorDef) (e28) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
						//line 995 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if ( ! (this.isCompletion) ) 
						{
							//line 995 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e29)) );
						}
						
					}
					else
					{
						//line 997 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.unify(et2, this.allowReturn, ( (( v2 == null )) ? (expr) : (v2) ));
					}
					
					//line 998 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.makeMono();
				}
				
				
				case 16:
				{
					//line 1009 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object a5 = _g.params[0];
					//line 1009 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object index = _g.params[1];
					//line 1009 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1010 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.typeExprWith(index, hscript.TType.TInt);
						//line 1011 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType at = this.typeExpr(a5, hscript._Checker.WithType.Value);
						//line 1012 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 1012 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _g49 = this.follow(at);
							//line 1012 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (_g49.index)
							{
								case 9:
								{
									//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object _g50 = _g49.params[0];
									//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<hscript.TType> _g51 = ((haxe.root.Array<hscript.TType>) (_g49.params[1]) );
									//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									{
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.Object _g52 = haxe.lang.Runtime.getField(_g50, "constructor", true);
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.ds.StringMap<java.lang.Object> _g53 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g50, "fields", true)) );
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<hscript.TType> _g54 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g50, "interfaces", true)) );
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.Object _g55 = haxe.lang.Runtime.getField(_g50, "isInterface", true);
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<hscript.TType> _g56 = ((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(_g50, "params", true)) );
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.ds.StringMap<java.lang.Object> _g57 = ((haxe.ds.StringMap<java.lang.Object>) (haxe.lang.Runtime.getField(_g50, "statics", true)) );
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType _g58 = ((hscript.TType) (haxe.lang.Runtime.getField(_g50, "superClass", true)) );
										//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.String __temp_svar26 = (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_g50, "name", true)));
											//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											boolean __temp_executeDef27 = true;
											//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (( __temp_svar26 != null )) 
											{
												//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												switch (__temp_svar26.hashCode())
												{
													case 63537721:
													{
														//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														if (__temp_svar26.equals("Array")) 
														{
															//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															__temp_executeDef27 = false;
															//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															switch (_g51.length)
															{
																case 1:
																{
																	//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	hscript.TType et3 = _g51.__get(0);
																	//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	return et3;
																}
																
																
																default:
																{
																	//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	hscript.ErrorDef e30 = hscript.ErrorDef.ECustom(( hscript.Checker.typeStr(at) + " is not an Array" ));
																	//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	hscript.Error e31 = new hscript.Error(((hscript.ErrorDef) (e30) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a5, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(a5, "line", true)) ));
																	//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	if ( ! (this.isCompletion) ) 
																	{
																		//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																		throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e31)) );
																	}
																	
																	//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
																	break;
																}
																
															}
															
														}
														
														//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														break;
													}
													
													
												}
												
											}
											
											//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											if (__temp_executeDef27) 
											{
												//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.ErrorDef e32 = hscript.ErrorDef.ECustom(( hscript.Checker.typeStr(at) + " is not an Array" ));
												//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.Error e33 = new hscript.Error(((hscript.ErrorDef) (e32) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a5, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(a5, "line", true)) ));
												//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												if ( ! (this.isCompletion) ) 
												{
													//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e33)) );
												}
												
											}
											
										}
										
									}
									
									//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
								
								default:
								{
									//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.ErrorDef e34 = hscript.ErrorDef.ECustom(( hscript.Checker.typeStr(at) + " is not an Array" ));
									//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.Error e35 = new hscript.Error(((hscript.ErrorDef) (e34) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(a5, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a5, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(a5, "line", true)) ));
									//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if ( ! (this.isCompletion) ) 
									{
										//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e35)) );
									}
									
									//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									break;
								}
								
							}
							
						}
						
					}
					
					//line 1009 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 17:
				{
					//line 999 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> el1 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType et4 = null;
					//line 1001 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1001 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g59 = 0;
						//line 1001 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g59 < el1.length ))
						{
							//line 1001 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object v3 = el1.__get(_g59);
							//line 1001 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g59;
							//line 1002 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType t9 = this.typeExpr(v3, ( (( et4 == null )) ? (hscript._Checker.WithType.Value) : (hscript._Checker.WithType.WithType(et4)) ));
							//line 1003 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( et4 == null )) 
							{
								//line 1003 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								et4 = t9;
							}
							else
							{
								//line 1003 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (this.tryUnify(t9, et4)) ) 
								{
									//line 1004 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (this.tryUnify(et4, t9)) 
									{
										//line 1004 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										et4 = t9;
									}
									else
									{
										//line 1004 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										this.unify(t9, et4, v3);
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 1007 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( et4 == null )) 
					{
						//line 1007 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						et4 = this.makeMono();
					}
					
					//line 1008 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.types.getType("Array", new haxe.root.Array<hscript.TType>(new hscript.TType[]{et4}));
				}
				
				
				case 18:
				{
					//line 1235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String cl = haxe.lang.Runtime.toString(_g.params[0]);
					//line 1235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> params1 = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
					//line 1235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 19:
				{
					//line 1016 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e36 = _g.params[0];
					//line 1017 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExpr(e36, hscript._Checker.WithType.Value);
					//line 1018 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.makeMono();
				}
				
				
				case 20:
				{
					//line 1197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object etry = _g.params[0];
					//line 1197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String v4 = haxe.lang.Runtime.toString(_g.params[1]);
					//line 1197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.CType et5 = ((hscript.CType) (_g.params[2]) );
					//line 1197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object ecatch = _g.params[3];
					//line 1198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType vt4 = this.typeExpr(etry, withType);
					//line 1200 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType old = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).get(v4)) );
					//line 1201 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(v4, this.makeType(et5, ecatch));
					//line 1202 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ct = this.typeExpr(ecatch, withType);
					//line 1203 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( old != null )) 
					{
						//line 1203 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).set(v4, old);
					}
					else
					{
						//line 1203 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.locals) )) ).remove(v4);
					}
					
					//line 1205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( withType == hscript._Checker.WithType.NoValue )) 
					{
						//line 1206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TVoid;
					}
					
					//line 1207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (this.tryUnify(vt4, ct)) 
					{
						//line 1208 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return ct;
					}
					
					//line 1209 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.unify(ct, vt4, ecatch);
					//line 1210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return vt4;
				}
				
				
				case 21:
				{
					//line 975 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> fl = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
					//line 976 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					switch (withType.index)
					{
						case 2:
						{
							//line 977 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType _hx_tmp2 = this.follow(((hscript.TType) (withType.params[0]) ));
							//line 977 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							switch (_hx_tmp2.index)
							{
								case 14:
								{
									//line 977 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<java.lang.Object> tfields = ((haxe.root.Array<java.lang.Object>) (_hx_tmp2.params[0]) );
									//line 977 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( tfields.length > 0 )) 
									{
										//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.ds.StringMap<java.lang.Object> _g60 = new haxe.ds.StringMap<java.lang.Object>();
										//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											int _g61 = 0;
											//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											while (( _g61 < tfields.length ))
											{
												//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object f3 = tfields.__get(_g61);
												//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												 ++ _g61;
												//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												_g60.set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f3, "name", true)), f3);
											}
											
										}
										
										//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.ds.StringMap<java.lang.Object> map = _g60;
										//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<java.lang.Object> _g62 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
										//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											int _g63 = 0;
											//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											while (( _g63 < fl.length ))
											{
												//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object f4 = fl.__get(_g63);
												//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												 ++ _g63;
												//line 980 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object ft5 = map.get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f4, "name", true)));
												//line 981 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType ft6 = null;
												//line 981 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												if (( ft5 == null )) 
												{
													//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													{
														//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														java.lang.Object curExpr1 = haxe.lang.Runtime.getField(f4, "e", true);
														//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.ErrorDef e37 = hscript.ErrorDef.ECustom(( "Extra field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f4, "name", true)) ));
														//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														hscript.Error e38 = new hscript.Error(((hscript.ErrorDef) (e37) ), ((int) (haxe.lang.Runtime.getField_f(curExpr1, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(curExpr1, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(curExpr1, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(curExpr1, "line", true)) ));
														//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
														if ( ! (this.isCompletion) ) 
														{
															//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
															throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e38)) );
														}
														
													}
													
													//line 981 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													ft6 = hscript.TType.TDynamic;
												}
												else
												{
													//line 981 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													ft6 = ((hscript.TType) (haxe.lang.Runtime.getField(ft5, "t", true)) );
												}
												
												//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object __temp_stmt12 = null;
												//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													hscript.TType __temp_odecl1 = this.typeExprWith(haxe.lang.Runtime.getField(f4, "e", true), ft6);
													//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													java.lang.String __temp_odecl2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f4, "name", true));
													//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl2, false, __temp_odecl1}, new java.lang.String[]{}, new double[]{});
												}
												
												//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												_g62.push(__temp_stmt12);
											}
											
										}
										
										//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TAnon(_g62);
									}
									else
									{
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										haxe.root.Array<java.lang.Object> _g64 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										{
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											int _g65 = 0;
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											while (( _g65 < fl.length ))
											{
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object f5 = fl.__get(_g65);
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												 ++ _g65;
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.Object __temp_stmt11 = null;
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												{
													//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													hscript.TType __temp_odecl3 = this.typeExpr(haxe.lang.Runtime.getField(f5, "e", true), hscript._Checker.WithType.Value);
													//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													java.lang.String __temp_odecl4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f5, "name", true));
													//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
													__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl4, false, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
												}
												
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												_g64.push(__temp_stmt11);
											}
											
										}
										
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										return hscript.TType.TAnon(_g64);
									}
									
								}
								
								
								default:
								{
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									haxe.root.Array<java.lang.Object> _g66 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									{
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										int _g67 = 0;
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										while (( _g67 < fl.length ))
										{
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object f6 = fl.__get(_g67);
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											 ++ _g67;
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											java.lang.Object __temp_stmt10 = null;
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											{
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												hscript.TType __temp_odecl5 = this.typeExpr(haxe.lang.Runtime.getField(f6, "e", true), hscript._Checker.WithType.Value);
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												java.lang.String __temp_odecl6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f6, "name", true));
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
												__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl6, false, __temp_odecl5}, new java.lang.String[]{}, new double[]{});
											}
											
											//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											_g66.push(__temp_stmt10);
										}
										
									}
									
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									return hscript.TType.TAnon(_g66);
								}
								
							}
							
						}
						
						
						default:
						{
							//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							haxe.root.Array<java.lang.Object> _g68 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
							//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g69 = 0;
								//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g69 < fl.length ))
								{
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object f7 = fl.__get(_g69);
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g69;
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object __temp_stmt9 = null;
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									{
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										hscript.TType __temp_odecl7 = this.typeExpr(haxe.lang.Runtime.getField(f7, "e", true), hscript._Checker.WithType.Value);
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										java.lang.String __temp_odecl8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f7, "name", true));
										//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl8, false, __temp_odecl7}, new java.lang.String[]{}, new double[]{});
									}
									
									//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									_g68.push(__temp_stmt9);
								}
								
							}
							
							//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return hscript.TType.TAnon(_g68);
						}
						
					}
					
				}
				
				
				case 22:
				{
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object cond2 = _g.params[0];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e110 = _g.params[1];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e210 = _g.params[2];
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 959 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.typeExprWith(cond2, hscript.TType.TBool);
						//line 960 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t19 = this.typeExpr(e110, withType);
						//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( e210 == null )) 
						{
							//line 962 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t19;
						}
						
						//line 963 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t29 = this.typeExpr(e210, withType);
						//line 964 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( withType == hscript._Checker.WithType.NoValue )) 
						{
							//line 965 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return hscript.TType.TVoid;
						}
						
						//line 966 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.tryUnify(t29, t19)) 
						{
							//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t19;
						}
						
						//line 968 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (this.tryUnify(t19, t29)) 
						{
							//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return t29;
						}
						
						//line 970 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.unify(t29, t19, e210);
					}
					
					//line 958 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					break;
				}
				
				
				case 23:
				{
					//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object value = _g.params[0];
					//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> cases = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
					//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object defaultExpr = _g.params[2];
					//line 1212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType tmin = null;
					//line 1213 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType vt5 = this.typeExpr(value, hscript._Checker.WithType.Value);
					//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g70 = 0;
						//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g70 < cases.length ))
						{
							//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.Object c1 = cases.__get(_g70);
							//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g70;
							//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g71 = 0;
								//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								haxe.root.Array<java.lang.Object> _g72 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "values", true)) );
								//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g71 < _g72.length ))
								{
									//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object v5 = _g72.__get(_g71);
									//line 1225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g71;
									//line 1226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									hscript.TType ct1 = this.typeExpr(v5, hscript._Checker.WithType.WithType(vt5));
									//line 1227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									this.unify(ct1, vt5, v5);
								}
								
							}
							
							//line 1229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType et6 = this.typeExpr(haxe.lang.Runtime.getField(c1, "expr", true), withType);
							//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								java.lang.Object p1 = haxe.lang.Runtime.getField(c1, "expr", true);
								//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if (( withType != hscript._Checker.WithType.NoValue )) 
								{
									//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (( tmin == null )) 
									{
										//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										tmin = et6;
									}
									else
									{
										//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										if ( ! (_gthis.tryUnify(et6, tmin)) ) 
										{
											//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											_gthis.unify(tmin, et6, p1);
											//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
											tmin = et6;
										}
										
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 1232 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( ! (( defaultExpr == null )) )) 
					{
						//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType t10 = this.typeExpr(defaultExpr, withType);
						//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( withType != hscript._Checker.WithType.NoValue )) 
						{
							//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							if (( tmin == null )) 
							{
								//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								tmin = t10;
							}
							else
							{
								//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								if ( ! (_gthis.tryUnify(t10, tmin)) ) 
								{
									//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									_gthis.unify(tmin, t10, defaultExpr);
									//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									tmin = t10;
								}
								
							}
							
						}
						
					}
					
					//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( withType == hscript._Checker.WithType.NoValue )) 
					{
						//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return hscript.TType.TVoid;
					}
					else
					{
						//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( tmin == null )) 
						{
							//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeMono();
						}
						else
						{
							//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return tmin;
						}
						
					}
					
				}
				
				
				case 24:
				{
					//line 971 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object cond3 = _g.params[0];
					//line 971 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e39 = _g.params[1];
					//line 972 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExprWith(cond3, hscript.TType.TBool);
					//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.typeExpr(e39, hscript._Checker.WithType.NoValue);
					//line 974 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return hscript.TType.TVoid;
				}
				
				
				case 25:
				{
					//line 954 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					haxe.root.Array<java.lang.Object> _g73 = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
					//line 954 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.String m = haxe.lang.Runtime.toString(_g.params[0]);
					//line 954 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object e40 = _g.params[2];
					//line 955 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (( haxe.lang.Runtime.valEq(m, ":untyped") && this.allowUntypedMeta )) 
					{
						//line 956 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return this.makeMono();
					}
					
					//line 957 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.typeExpr(e40, withType);
				}
				
				
				case 26:
				{
					//line 949 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object v6 = _g.params[0];
					//line 949 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.CType t20 = ((hscript.CType) (_g.params[1]) );
					//line 950 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType ct2 = this.makeType(t20, expr);
					//line 951 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					hscript.TType vt6 = this.typeExpr(v6, hscript._Checker.WithType.WithType(ct2));
					//line 952 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					this.unify(vt6, ct2, v6);
					//line 953 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return ct2;
				}
				
				
			}
			
		}
		
		//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.ErrorDef e41 = hscript.ErrorDef.ECustom(( "Don\'t know how to type " + haxe.root.Type.enumConstructor(((java.lang.Object) (haxe.lang.Runtime.getField(expr, "e", true)) )) ));
			//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.Error e42 = new hscript.Error(((hscript.ErrorDef) (e41) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(expr, "pmax", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(expr, "origin", true)), ((int) (haxe.lang.Runtime.getField_f(expr, "line", true)) ));
			//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if ( ! (this.isCompletion) ) 
			{
				//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(e42)) );
			}
			
		}
		
		//line 1238 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return hscript.TType.TDynamic;
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case 796014605:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowUntypedMeta")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.allowUntypedMeta = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 110844025:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("types")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.types = ((hscript.CheckerTypes) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1466400322:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowGlobalsDefine")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.allowGlobalsDefine = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1097462168:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("locals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.locals = ((haxe.ds.StringMap<hscript.TType>) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 970813913:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowReturn")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.allowReturn = ((hscript.TType) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 121073968:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("globals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.globals = ((haxe.ds.StringMap<hscript.TType>) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1369434957:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowAsync")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.allowAsync = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1291329255:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("events")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.events = ((haxe.ds.StringMap<hscript.TType>) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 569577060:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowDefine")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.allowDefine = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -2099959392:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("currentFunType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.currentFunType = ((hscript.TType) (value) );
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1630068902:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("isCompletion")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.isCompletion = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case -676753329:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeExpr")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "typeExpr")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 110844025:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("types")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.types;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 495949280:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeField")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "typeField")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1097462168:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("locals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.locals;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1495579877:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("onCompletion")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "onCompletion")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 121073968:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("globals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.globals;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -217951781:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("isString")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isString")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1291329255:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("events")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.events;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3486:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("mk")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "mk")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -2099959392:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("currentFunType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.currentFunType;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1789680516:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeIterator")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeIterator")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1630068902:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("isCompletion")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.isCompletion;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 40308209:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeMono")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeMono")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 569577060:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowDefine")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.allowDefine;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -857475659:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeExprWith")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "typeExprWith")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1369434957:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowAsync")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.allowAsync;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -293917821:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("unasync")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "unasync")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 970813913:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowReturn")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.allowReturn;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1953253188:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getField")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getField")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1466400322:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowGlobalsDefine")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.allowGlobalsDefine;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 421306799:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getFields")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getFields")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 796014605:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("allowUntypedMeta")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.allowUntypedMeta;
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1268958287:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("follow")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "follow")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1200227730:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setGlobals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setGlobals")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 836737718:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("mapType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "mapType")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1204456121:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("removeGlobal")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "removeGlobal")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 93029230:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("apply")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "apply")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 238377637:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setGlobal")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setGlobal")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 111433155:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("unify")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "unify")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1391604568:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setEvent")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setEvent")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1944748232:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("tryUnify")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "tryUnify")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1157934330:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getGlobals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getGlobals")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -858803834:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeEq")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "typeEq")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -676878537:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeArgs")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "typeArgs")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3321850:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("link")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "link")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 94627080:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("check")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "check")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1193958846:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("linkLoop")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "linkLoop")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3108224:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("edef")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "edef")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 40526408:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeType")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 96784904:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("error")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "error")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 864479813:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("saveLocals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "saveLocals")) );
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case -676753329:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeExpr")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeExpr(dynargs[0], ((hscript._Checker.WithType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1200227730:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setGlobals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.setGlobals(dynargs[0]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 495949280:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeField")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeField(dynargs[0], haxe.lang.Runtime.toString(dynargs[1]), dynargs[2], haxe.lang.Runtime.toBool(((java.lang.Boolean) (dynargs[3]) )));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1204456121:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("removeGlobal")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.removeGlobal(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1495579877:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("onCompletion")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.onCompletion(dynargs[0], ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 238377637:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setGlobal")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.setGlobal(haxe.lang.Runtime.toString(dynargs[0]), ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -217951781:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("isString")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.isString(((hscript.TType) (dynargs[0]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1391604568:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("setEvent")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.setEvent(haxe.lang.Runtime.toString(dynargs[0]), ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3486:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("mk")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.mk(((hscript.ExprDef) (dynargs[0]) ), dynargs[1]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1157934330:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getGlobals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.getGlobals();
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1789680516:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeIterator")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeIterator(((hscript.TType) (dynargs[0]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -676878537:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeArgs")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeArgs(((haxe.root.Array<java.lang.Object>) (dynargs[0]) ), dynargs[1]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 40308209:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeMono")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeMono();
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 94627080:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("check")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.check(dynargs[0], ((hscript._Checker.WithType) (( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) )) ), ( (( dynargs.length > 2 )) ? (dynargs[2]) : (null) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -857475659:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeExprWith")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeExprWith(dynargs[0], ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3108224:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("edef")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.edef(dynargs[0]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -293917821:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("unasync")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.unasync(((hscript.TType) (dynargs[0]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 96784904:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("error")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.error(haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1953253188:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getField")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.getField(((hscript.TType) (dynargs[0]) ), haxe.lang.Runtime.toString(dynargs[1]), dynargs[2], ( (( dynargs.length > 3 )) ? (dynargs[3]) : (null) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 864479813:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("saveLocals")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.saveLocals();
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 421306799:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getFields")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.getFields(((hscript.TType) (dynargs[0]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 40526408:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeType(((hscript.CType) (dynargs[0]) ), dynargs[1]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -1268958287:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("follow")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.follow(((hscript.TType) (dynargs[0]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1193958846:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("linkLoop")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.linkLoop(((hscript.TType) (dynargs[0]) ), ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 836737718:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("mapType")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.mapType(((hscript.TType) (dynargs[0]) ), ((haxe.lang.Function) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 3321850:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("link")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.link(((hscript.TType) (dynargs[0]) ), ((hscript.TType) (dynargs[1]) ), dynargs[2]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 93029230:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("apply")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.apply(((hscript.TType) (dynargs[0]) ), ((haxe.root.Array<hscript.TType>) (dynargs[1]) ), ((haxe.root.Array<hscript.TType>) (dynargs[2]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -858803834:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("typeEq")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.typeEq(((hscript.TType) (dynargs[0]) ), ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 111433155:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("unify")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.unify(((hscript.TType) (dynargs[0]) ), ((hscript.TType) (dynargs[1]) ), dynargs[2]);
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1944748232:
					{
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("tryUnify")) 
						{
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.tryUnify(((hscript.TType) (dynargs[0]) ), ((hscript.TType) (dynargs[1]) ));
						}
						
						//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("allowUntypedMeta");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("allowGlobalsDefine");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("allowReturn");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("allowAsync");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("allowDefine");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("isCompletion");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("currentFunType");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("events");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("globals");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("locals");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("types");
		//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


