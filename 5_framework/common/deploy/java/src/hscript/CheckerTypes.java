// Generated by Haxe 4.2.2
package hscript;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class CheckerTypes extends haxe.lang.HxObject
{
	public CheckerTypes(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public CheckerTypes()
	{
		//line 94 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.CheckerTypes.__hx_ctor_hscript_CheckerTypes(this);
	}
	
	
	protected static void __hx_ctor_hscript_CheckerTypes(hscript.CheckerTypes __hx_this)
	{
		//line 90 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		__hx_this.types = new haxe.ds.StringMap<hscript.CTypedecl>();
		//line 94 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 95 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			__hx_this.types = new haxe.ds.StringMap<hscript.CTypedecl>();
			//line 96 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (__hx_this.types) )) ).set("Void", hscript.CTypedecl.CTAlias(hscript.TType.TVoid));
			//line 97 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (__hx_this.types) )) ).set("Int", hscript.CTypedecl.CTAlias(hscript.TType.TInt));
			//line 98 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (__hx_this.types) )) ).set("Float", hscript.CTypedecl.CTAlias(hscript.TType.TFloat));
			//line 99 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (__hx_this.types) )) ).set("Bool", hscript.CTypedecl.CTAlias(hscript.TType.TBool));
			//line 100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (__hx_this.types) )) ).set("Dynamic", hscript.CTypedecl.CTAlias(hscript.TType.TDynamic));
		}
		
	}
	
	
	public haxe.ds.StringMap<hscript.CTypedecl> types;
	
	public hscript.TType t_string;
	
	public haxe.ds.StringMap<hscript.TType> localParams;
	
	public void addXmlApi(haxe.root.Xml api)
	{
		//line 104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.rtti.XmlParser types = new haxe.rtti.XmlParser();
		//line 105 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		types.process(api, "");
		//line 106 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		haxe.root.Array<haxe.lang.Function> todo = new haxe.root.Array<haxe.lang.Function>(new haxe.lang.Function[]{});
		//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g = 0;
			//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			haxe.root.Array<haxe.rtti.TypeTree> _g1 = types.root;
			//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			while (( _g < _g1.length ))
			{
				//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.rtti.TypeTree v = _g1.__get(_g);
				//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				 ++ _g;
				//line 108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				this.addXmlType(v, todo);
			}
			
		}
		
		//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			int _g2 = 0;
			//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			while (( _g2 < todo.length ))
			{
				//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.lang.Function f = todo.__get(_g2);
				//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				 ++ _g2;
				//line 110 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				f.__hx_invoke0_o();
			}
			
		}
		
		//line 111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		this.t_string = this.getType("String", null);
	}
	
	
	public void addXmlType(haxe.rtti.TypeTree x, haxe.root.Array<haxe.lang.Function> todo)
	{
		//line 114 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.CheckerTypes _gthis = this;
		//line 115 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (x.index)
		{
			case 0:
			{
				//line 116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name = haxe.lang.Runtime.toString(x.params[0]);
				//line 116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String full = haxe.lang.Runtime.toString(x.params[1]);
				//line 116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<haxe.rtti.TypeTree> subs = ((haxe.root.Array<haxe.rtti.TypeTree>) (x.params[2]) );
				//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g = 0;
					//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g < subs.length ))
					{
						//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.rtti.TypeTree s = subs.__get(_g);
						//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g;
						//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						this.addXmlType(s, todo);
					}
					
				}
				
				//line 116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 1:
			{
				//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object c = x.params[0];
				//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).exists(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c, "path", true)))) 
					{
						//line 119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return ;
					}
					
					//line 120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object cl = null;
					//line 120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 121 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(c, "path", true));
						//line 123 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.ds.StringMap<java.lang.Object> __temp_odecl2 = new haxe.ds.StringMap<java.lang.Object>();
						//line 124 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.ds.StringMap<java.lang.Object> __temp_odecl3 = new haxe.ds.StringMap<java.lang.Object>();
						//line 120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						cl = new haxe.lang.DynamicObject(new java.lang.String[]{"fields", "name", "params", "statics"}, new java.lang.Object[]{__temp_odecl2, __temp_odecl1, new haxe.root.Array<hscript.TType>(new hscript.TType[]{}), __temp_odecl3}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(c, "isInterface", true)) ))) 
					{
						//line 127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.lang.Runtime.setField(cl, "isInterface", true);
					}
					
					//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g1 = 0;
						//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g2 = ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(c, "params", true)) );
						//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g1 < _g2.length ))
						{
							//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String p = _g2.__get(_g1);
							//line 128 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g1;
							//line 129 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(cl, "params", true)) ).push(hscript.TType.TParam(p));
						}
						
					}
					
					//line 130 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					todo.push(new hscript.CheckerTypes_addXmlType_130__Fun(cl, c, _gthis));
					//line 171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(cl, "name", true)), hscript.CTypedecl.CTClass(cl));
				}
				
				//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 2:
			{
				//line 172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object e = x.params[0];
				//line 172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).exists(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "path", true)))) 
					{
						//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return ;
					}
					
					//line 174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object en = null;
					//line 174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String __temp_odecl4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "path", true));
						//line 174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						en = new haxe.lang.DynamicObject(new java.lang.String[]{"constructors", "name", "params"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}), __temp_odecl4, new haxe.root.Array<hscript.TType>(new hscript.TType[]{})}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g3 = 0;
						//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g4 = ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(e, "params", true)) );
						//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g3 < _g4.length ))
						{
							//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String p1 = _g4.__get(_g3);
							//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g3;
							//line 180 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(en, "params", true)) ).push(hscript.TType.TParam(p1));
						}
						
					}
					
					//line 181 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					todo.push(new hscript.CheckerTypes_addXmlType_181__Fun(en, e, _gthis));
					//line 187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(en, "name", true)), hscript.CTypedecl.CTEnum(en));
				}
				
				//line 172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 3:
			{
				//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object t = x.params[0];
				//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).exists(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t, "path", true)))) 
					{
						//line 189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return ;
					}
					
					//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object td = null;
					//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String __temp_odecl5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t, "path", true));
						//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						td = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "params", "t"}, new java.lang.Object[]{__temp_odecl5, new haxe.root.Array<hscript.TType>(new hscript.TType[]{}), null}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g5 = 0;
						//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g6 = ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(t, "params", true)) );
						//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g5 < _g6.length ))
						{
							//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String p2 = _g6.__get(_g5);
							//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g5;
							//line 196 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(td, "params", true)) ).push(hscript.TType.TParam(p2));
						}
						
					}
					
					//line 197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t, "path", true)), "hscript.TypeCheck")) 
					{
						//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(td, "params", true)) ).reverse();
					}
					
					//line 199 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					todo.push(new hscript.CheckerTypes_addXmlType_199__Fun(td, t, _gthis));
					//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(t, "path", true)), hscript.CTypedecl.CTTypedef(td));
				}
				
				//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
			case 4:
			{
				//line 205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object a = x.params[0];
				//line 205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					if (((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).exists(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "path", true)))) 
					{
						//line 206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						return ;
					}
					
					//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					java.lang.Object ta = null;
					//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 208 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String __temp_odecl6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "path", true));
						//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						ta = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "params", "t"}, new java.lang.Object[]{__temp_odecl6, new haxe.root.Array<hscript.TType>(new hscript.TType[]{}), null}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					{
						//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						int _g7 = 0;
						//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.String> _g8 = ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(a, "params", true)) );
						//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						while (( _g7 < _g8.length ))
						{
							//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String p3 = _g8.__get(_g7);
							//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							 ++ _g7;
							//line 213 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							((haxe.root.Array<hscript.TType>) (haxe.lang.Runtime.getField(ta, "params", true)) ).push(hscript.TType.TParam(p3));
						}
						
					}
					
					//line 214 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					todo.push(new hscript.CheckerTypes_addXmlType_214__Fun(ta, a, _gthis));
					//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).set(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "path", true)), hscript.CTypedecl.CTAbstract(ta));
				}
				
				//line 205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				break;
			}
			
			
		}
		
	}
	
	
	public hscript.TType makeXmlType(haxe.rtti.CType t)
	{
		//line 224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TUnresolved("Unknown");
			}
			
			
			case 1:
			{
				//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name = haxe.lang.Runtime.toString(t.params[0]);
				//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<haxe.rtti.CType> params = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
				//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g1 = 0;
					//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g1 < params.length ))
					{
						//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.rtti.CType t1 = params.__get(_g1);
						//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g1;
						//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g.push(this.makeXmlType(t1));
					}
					
				}
				
				//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.getType(name, _g);
			}
			
			
			case 2:
			{
				//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<haxe.rtti.CType> params1 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g2 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
				//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g3 = 0;
					//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g3 < params1.length ))
					{
						//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.rtti.CType t2 = params1.__get(_g3);
						//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g3;
						//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g2.push(this.makeXmlType(t2));
					}
					
				}
				
				//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.getType(name1, _g2);
			}
			
			
			case 3:
			{
				//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name2 = haxe.lang.Runtime.toString(t.params[0]);
				//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<haxe.rtti.CType> params2 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g4 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
				//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g5 = 0;
					//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g5 < params2.length ))
					{
						//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.rtti.CType t3 = params2.__get(_g5);
						//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g5;
						//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g4.push(this.makeXmlType(t3));
					}
					
				}
				
				//line 228 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.getType(name2, _g4);
			}
			
			
			case 4:
			{
				//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.rtti.CType ret = ((haxe.rtti.CType) (t.params[1]) );
				//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g6 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g7 = 0;
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g7 < args.length ))
					{
						//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object a = args.__get(_g7);
						//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g7;
						//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object __temp_stmt4 = null;
						//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						{
							//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "name", true));
							//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean __temp_odecl2 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(a, "opt", true)) ));
							//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							hscript.TType __temp_odecl3 = this.makeXmlType(((haxe.rtti.CType) (haxe.lang.Runtime.getField(a, "t", true)) ));
							//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_stmt4 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g6.push(__temp_stmt4);
					}
					
				}
				
				//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TFun(_g6, this.makeXmlType(ret));
			}
			
			
			case 5:
			{
				//line 230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<java.lang.Object> _g8 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g9 = 0;
					//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g9 < fields.length ))
					{
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.Object f = fields.__get(_g9);
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g9;
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						java.lang.String f1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true));
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						hscript.TType tmp = this.makeXmlType(((haxe.rtti.CType) (haxe.lang.Runtime.getField(f, "type", true)) ));
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.root.Array<java.lang.Object> m = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(f, "meta", true)) );
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						boolean tmp1 = false;
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (( m == null )) 
						{
							//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							tmp1 = false;
						}
						else
						{
							//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							boolean b = false;
							//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							{
								//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								int _g10 = 0;
								//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
								while (( _g10 < m.length ))
								{
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									java.lang.Object m1 = m.__get(_g10);
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									 ++ _g10;
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
									if (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(m1, "name", true)), ":optional")) 
									{
										//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										b = true;
										//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
										break;
									}
									
								}
								
							}
							
							//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							tmp1 = b;
						}
						
						//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g8.push(new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "t"}, new java.lang.Object[]{f1, tmp1, tmp}, new java.lang.String[]{}, new double[]{}));
					}
					
				}
				
				//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TAnon(_g8);
			}
			
			
			case 6:
			{
				//line 238 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.rtti.CType t4 = ((haxe.rtti.CType) (t.params[0]) );
				//line 238 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TDynamic;
			}
			
			
			case 7:
			{
				//line 239 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String name3 = haxe.lang.Runtime.toString(t.params[0]);
				//line 239 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<haxe.rtti.CType> params3 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				haxe.root.Array<hscript.TType> _g11 = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
				//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				{
					//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					int _g12 = 0;
					//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					while (( _g12 < params3.length ))
					{
						//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						haxe.rtti.CType t5 = params3.__get(_g12);
						//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						 ++ _g12;
						//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						_g11.push(this.makeXmlType(t5));
					}
					
				}
				
				//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return this.getType(name3, _g11);
			}
			
			
		}
		
		//line 223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	public hscript.TType getType(java.lang.String name, haxe.root.Array<hscript.TType> args)
	{
		//line 248 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( this.localParams != null )) 
		{
			//line 249 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			hscript.TType t = ((hscript.TType) (((haxe.ds.StringMap<hscript.TType>) (((haxe.IMap<java.lang.String, hscript.TType>) (this.localParams) )) ).get(name)) );
			//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( t != null )) 
			{
				//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t;
			}
			
		}
		
		//line 252 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.TType t1 = this.resolve(name, args);
		//line 253 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( t1 == null )) 
		{
			//line 254 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			haxe.root.Array<java.lang.String> pack = haxe.lang.StringExt.split(name, ".");
			//line 255 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( pack.length > 1 )) 
			{
				//line 257 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.String priv = pack.__get(( pack.length - 2 ));
				//line 258 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				if (haxe.lang.Runtime.eq(haxe.lang.StringExt.charCodeAt(priv, 0), 95)) 
				{
					//line 259 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					pack.remove(priv);
					//line 260 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
					return this.getType(pack.join("."), args);
				}
				
			}
			
			//line 263 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return hscript.TType.TUnresolved(name);
		}
		
		//line 265 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return t1;
	}
	
	
	public hscript.TType resolve(java.lang.String name, haxe.root.Array<hscript.TType> args)
	{
		//line 269 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (haxe.lang.Runtime.valEq(name, "Null")) 
		{
			//line 270 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( ( args == null ) || ( args.length != 1 ) )) 
			{
				//line 270 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Missing Null<T> parameter")) );
			}
			
			//line 271 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return hscript.TType.TNull(args.__get(0));
		}
		
		//line 273 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		hscript.CTypedecl t = ((hscript.CTypedecl) (((haxe.ds.StringMap<hscript.CTypedecl>) (((haxe.IMap<java.lang.String, hscript.CTypedecl>) (this.types) )) ).get(name)) );
		//line 274 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( t == null )) 
		{
			//line 274 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			return null;
		}
		
		//line 275 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		if (( args == null )) 
		{
			//line 275 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			args = new haxe.root.Array<hscript.TType>(new hscript.TType[]{});
		}
		
		//line 276 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object c = t.params[0];
				//line 277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TInst(c, args);
			}
			
			
			case 1:
			{
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object e = t.params[0];
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TEnum(e, args);
			}
			
			
			case 2:
			{
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object t1 = t.params[0];
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TType(t1, args);
			}
			
			
			case 3:
			{
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				hscript.TType t2 = ((hscript.TType) (t.params[0]) );
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return t2;
			}
			
			
			case 4:
			{
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				java.lang.Object a = t.params[0];
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return hscript.TType.TAbstract(a, args);
			}
			
			
		}
		
		//line 268 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case 1313687761:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("localParams")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.localParams = ((haxe.ds.StringMap<hscript.TType>) (value) );
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 110844025:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("types")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.types = ((haxe.ds.StringMap<hscript.CTypedecl>) (value) );
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 2119021116:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("t_string")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.t_string = ((hscript.TType) (value) );
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return value;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case 1097368044:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("resolve")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "resolve")) );
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 110844025:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("types")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.types;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -75106384:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getType")) );
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 2119021116:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("t_string")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.t_string;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -656172509:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeXmlType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeXmlType")) );
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 1313687761:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("localParams")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.localParams;
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -37533680:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("addXmlType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addXmlType")) );
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 137318020:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("addXmlApi")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addXmlApi")) );
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			boolean __temp_executeDef1 = true;
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (( field != null )) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				switch (field.hashCode())
				{
					case 1097368044:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("resolve")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.resolve(haxe.lang.Runtime.toString(dynargs[0]), ((haxe.root.Array<hscript.TType>) (( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) )) ));
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case 137318020:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("addXmlApi")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.addXmlApi(((haxe.root.Xml) (dynargs[0]) ));
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -75106384:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("getType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.getType(haxe.lang.Runtime.toString(dynargs[0]), ((haxe.root.Array<hscript.TType>) (( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) )) ));
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -37533680:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("addXmlType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							this.addXmlType(((haxe.rtti.TypeTree) (dynargs[0]) ), ((haxe.root.Array<haxe.lang.Function>) (dynargs[1]) ));
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
					case -656172509:
					{
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						if (field.equals("makeXmlType")) 
						{
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							__temp_executeDef1 = false;
							//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
							return this.makeXmlType(((haxe.rtti.CType) (dynargs[0]) ));
						}
						
						//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
			if (__temp_executeDef1) 
			{
				//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("localParams");
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("t_string");
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		baseArr.push("types");
		//line 88 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Checker.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


