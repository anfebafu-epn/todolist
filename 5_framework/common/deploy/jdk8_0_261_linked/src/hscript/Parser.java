// Generated by Haxe 4.2.2
package hscript;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Parser extends haxe.lang.HxObject
{
	public Parser(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Parser()
	{
		//line 113 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Parser.__hx_ctor_hscript_Parser(this);
	}
	
	
	protected static void __hx_ctor_hscript_Parser(hscript.Parser __hx_this)
	{
		//line 91 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		__hx_this.uid = 0;
		//line 62 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		__hx_this.preprocesorValues = new haxe.ds.StringMap();
		//line 113 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 114 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			__hx_this.line = 1;
			//line 115 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			__hx_this.opChars = "+*/-=!><&|^%~";
			//line 116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			__hx_this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
			//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> priorities = new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"%"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"*", "/"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"+", "-"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"<<", ">>", ">>>"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"|", "&", "^"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"==", "!=", ">", "<", ">=", "<="}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"..."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"&&"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"||"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "&=", "^=", "=>"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"->"})});
			//line 131 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			__hx_this.opPriority = new haxe.ds.StringMap<java.lang.Object>();
			//line 132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			__hx_this.opRightAssoc = new haxe.ds.StringMap<java.lang.Object>();
			//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int _g = 0;
				//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int _g1 = priorities.length;
				//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				while (( _g < _g1 ))
				{
					//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int i = _g++;
					//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						int _g2 = 0;
						//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						haxe.root.Array<java.lang.String> _g3 = priorities.__get(i);
						//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						while (( _g2 < _g3.length ))
						{
							//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String x = _g3.__get(_g2);
							//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							 ++ _g2;
							//line 139 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opPriority) )) ).set(x, i);
							//line 140 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( i == 9 )) 
							{
								//line 140 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opRightAssoc) )) ).set(x, true);
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String x1 = "!";
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opPriority) )) ).set(x1, ( (( haxe.lang.Runtime.valEq(x1, "++") || haxe.lang.Runtime.valEq(x1, "--") )) ? (-1) : (-2) ));
				}
				
				//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String x2 = "++";
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opPriority) )) ).set(x2, ( (( haxe.lang.Runtime.valEq(x2, "++") || haxe.lang.Runtime.valEq(x2, "--") )) ? (-1) : (-2) ));
				}
				
				//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String x3 = "--";
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opPriority) )) ).set(x3, ( (( haxe.lang.Runtime.valEq(x3, "++") || haxe.lang.Runtime.valEq(x3, "--") )) ? (-1) : (-2) ));
				}
				
				//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String x4 = "~";
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (__hx_this.opPriority) )) ).set(x4, ( (( haxe.lang.Runtime.valEq(x4, "++") || haxe.lang.Runtime.valEq(x4, "--") )) ? (-1) : (-2) ));
				}
				
			}
			
		}
		
	}
	
	
	public int line;
	
	public java.lang.String opChars;
	
	public java.lang.String identChars;
	
	public haxe.ds.StringMap<java.lang.Object> opPriority;
	
	public haxe.ds.StringMap<java.lang.Object> opRightAssoc;
	
	public haxe.ds.StringMap preprocesorValues;
	
	public boolean allowJSON;
	
	public boolean allowTypes;
	
	public boolean allowMetadata;
	
	public boolean resumeErrors;
	
	public java.lang.String input;
	
	public int readPos;
	
	public int _char;
	
	public haxe.root.Array<java.lang.Object> ops;
	
	public haxe.root.Array<java.lang.Object> idents;
	
	public int uid;
	
	public java.lang.String origin;
	
	public int tokenMin;
	
	public int tokenMax;
	
	public int oldTokenMin;
	
	public int oldTokenMax;
	
	public haxe.ds.List<java.lang.Object> tokens;
	
	public final void error(hscript.ErrorDef err, int pmin, int pmax)
	{
		//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if ( ! (this.resumeErrors) ) 
		{
			//line 149 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (err) ), ((int) (pmin) ), ((int) (pmax) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
		}
		
	}
	
	
	public void invalidChar(int c)
	{
		//line 156 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if ( ! (this.resumeErrors) ) 
		{
			//line 156 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EInvalidChar(c)) ), ((int) (( this.readPos - 1 )) ), ((int) (( this.readPos - 1 )) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
		}
		
	}
	
	
	public void initParser(java.lang.String origin)
	{
		//line 161 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.preprocStack = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 163 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.origin = origin;
		//line 164 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.readPos = 0;
		//line 165 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMin = this.oldTokenMin = 0;
		//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMax = this.oldTokenMax = 0;
		//line 167 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokens = new haxe.ds.List<java.lang.Object>();
		//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this._char = -1;
		//line 174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.ops = new haxe.root.Array<java.lang.Object>();
		//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.idents = new haxe.root.Array<java.lang.Object>();
		//line 176 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.uid = 0;
		//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int _g = 0;
			//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int _g1 = this.opChars.length();
			//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			while (( _g < _g1 ))
			{
				//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int i = _g++;
				//line 178 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean __temp_expr1 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.ops.__set(((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(this.opChars, i))) ), true)) ));
			}
			
		}
		
		//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int _g2 = 0;
			//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int _g3 = this.identChars.length();
			//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			while (( _g2 < _g3 ))
			{
				//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int i1 = _g2++;
				//line 180 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean __temp_expr2 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__set(((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(this.identChars, i1))) ), true)) ));
			}
			
		}
		
	}
	
	
	public java.lang.Object parseString(java.lang.String s, java.lang.String origin)
	{
		//line 183 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( origin == null )) 
		{
			//line 183 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			origin = "hscript";
		}
		
		//line 184 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.initParser(origin);
		//line 185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.input = s;
		//line 186 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.readPos = 0;
		//line 187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>();
		//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( tk == hscript.Token.TEof )) 
			{
				//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			
			//line 192 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.parseFullExpr(a);
		}
		
		//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( a.length == 1 )) 
		{
			//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return a.__get(0);
		}
		else
		{
			//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.ExprDef e = hscript.ExprDef.EBlock(a);
			//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object pmin = 0;
			//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object pmax = null;
			//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( e == null )) 
			{
				//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return null;
			}
			else
			{
				//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.eq(pmin, null)) 
				{
					//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					pmin = this.tokenMin;
				}
				
				//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.eq(pmax, null)) 
				{
					//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					pmax = this.tokenMax;
				}
				
				//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
			}
			
		}
		
	}
	
	
	public java.lang.Object unexpected(hscript.Token tk)
	{
		//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.ErrorDef err = hscript.ErrorDef.EUnexpected(this.tokenString(tk));
			//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if ( ! (this.resumeErrors) ) 
			{
				//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (err) ), ((int) (this.tokenMin) ), ((int) (this.tokenMax) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
			}
			
		}
		
		//line 199 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	public final void push(hscript.Token tk)
	{
		//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
		//line 205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMin = this.oldTokenMin;
		//line 206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMax = this.oldTokenMax;
	}
	
	
	public final void ensure(hscript.Token tk)
	{
		//line 213 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token t = this.token();
		//line 214 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( t != tk )) 
		{
			//line 214 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.unexpected(t);
		}
		
	}
	
	
	public final void ensureToken(hscript.Token tk)
	{
		//line 218 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token t = this.token();
		//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t) ), ((hscript.Token) (tk) ))) ))) ) 
		{
			//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.unexpected(t);
		}
		
	}
	
	
	public boolean maybe(hscript.Token tk)
	{
		//line 223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token t = this.token();
		//line 224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t) ), ((hscript.Token) (tk) ))) ))) 
		{
			//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return true;
		}
		
		//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
			//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMin = this.oldTokenMin;
			//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMax = this.oldTokenMax;
		}
		
		//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return false;
	}
	
	
	public java.lang.String getIdent()
	{
		//line 231 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 232 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (tk.index)
		{
			case 2:
			{
				//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id = haxe.lang.Runtime.toString(tk.params[0]);
				//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return id;
			}
			
			
			default:
			{
				//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.unexpected(tk);
				//line 236 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return null;
			}
			
		}
		
	}
	
	
	public final hscript.ExprDef expr(java.lang.Object e)
	{
		//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
	}
	
	
	public final int pmin(java.lang.Object e)
	{
		//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return 0;
		}
		else
		{
			//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return ((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) );
		}
		
	}
	
	
	public final int pmax(java.lang.Object e)
	{
		//line 258 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 258 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return 0;
		}
		else
		{
			//line 258 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return ((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) );
		}
		
	}
	
	
	public final java.lang.Object mk(hscript.ExprDef e, java.lang.Object pmin, java.lang.Object pmax)
	{
		//line 266 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 266 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		
		//line 267 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (haxe.lang.Runtime.eq(pmin, null)) 
		{
			//line 267 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			pmin = this.tokenMin;
		}
		
		//line 268 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (haxe.lang.Runtime.eq(pmax, null)) 
		{
			//line 268 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			pmax = this.tokenMax;
		}
		
		//line 269 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
	}
	
	
	public boolean isBlock(java.lang.Object e)
	{
		//line 276 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 276 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return false;
		}
		
		//line 277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
		//line 277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (_g.index)
		{
			case 2:
			{
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g1 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.CType t = ((hscript.CType) (_g.params[1]) );
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e1 = _g.params[2];
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ! (( e1 == null )) )) 
				{
					//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.isBlock(e1);
				}
				else
				{
					//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( t != null )) 
					{
						//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( t == null )) 
						{
							//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return false;
						}
						else
						{
							//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (t.index)
							{
								case 2:
								{
									//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									haxe.root.Array<java.lang.Object> _g2 = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
									//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return true;
								}
								
								
								default:
								{
									//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return false;
								}
								
							}
							
						}
						
					}
					else
					{
						//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return false;
					}
					
				}
				
			}
			
			
			case 4:
			{
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g3 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return true;
			}
			
			
			case 6:
			{
				//line 282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g4 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g5 = _g.params[1];
				//line 282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e2 = _g.params[2];
				//line 282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e2);
			}
			
			
			case 7:
			{
				//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g6 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean prefix = haxe.lang.Runtime.toBool(((java.lang.Boolean) (_g.params[1]) ));
				//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e3 = _g.params[2];
				//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if ( ! (prefix) ) 
				{
					//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.isBlock(e3);
				}
				else
				{
					//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return false;
				}
				
			}
			
			
			case 9:
			{
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g7 = _g.params[0];
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e11 = _g.params[1];
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e21 = _g.params[2];
				//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ! (( e21 == null )) )) 
				{
					//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.isBlock(e21);
				}
				else
				{
					//line 281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.isBlock(e11);
				}
				
			}
			
			
			case 10:
			{
				//line 284 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g8 = _g.params[0];
				//line 284 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e4 = _g.params[1];
				//line 284 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e4);
			}
			
			
			case 11:
			{
				//line 286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g9 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g10 = _g.params[1];
				//line 286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e5 = _g.params[2];
				//line 286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e5);
			}
			
			
			case 14:
			{
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g11 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g12 = haxe.lang.Runtime.toString(_g.params[2]);
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.CType _g13 = ((hscript.CType) (_g.params[3]) );
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e6 = _g.params[1];
				//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e6);
			}
			
			
			case 15:
			{
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e7 = _g.params[0];
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ! (( e7 == null )) )) 
				{
					//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.isBlock(e7);
				}
				else
				{
					//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return false;
				}
				
			}
			
			
			case 20:
			{
				//line 288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g14 = _g.params[0];
				//line 288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g15 = haxe.lang.Runtime.toString(_g.params[1]);
				//line 288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.CType _g16 = ((hscript.CType) (_g.params[2]) );
				//line 288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e8 = _g.params[3];
				//line 288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e8);
			}
			
			
			case 21:
			{
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g17 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return true;
			}
			
			
			case 23:
			{
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g18 = _g.params[0];
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g19 = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g20 = _g.params[2];
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return true;
			}
			
			
			case 24:
			{
				//line 285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g21 = _g.params[0];
				//line 285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e9 = _g.params[1];
				//line 285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e9);
			}
			
			
			case 25:
			{
				//line 289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String _g22 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g23 = ((haxe.root.Array<java.lang.Object>) (_g.params[1]) );
				//line 289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e10 = _g.params[2];
				//line 289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.isBlock(e10);
			}
			
			
			default:
			{
				//line 290 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return false;
			}
			
		}
		
	}
	
	
	public void parseFullExpr(haxe.root.Array<java.lang.Object> exprs)
	{
		//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object e = this.parseExpr();
		//line 296 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		exprs.push(e);
		//line 298 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean tmp = false;
			//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( ( tk == hscript.Token.TComma ) && ( ! (( e == null )) ) )) 
			{
				//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
				//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (_g.index)
				{
					case 2:
					{
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String _g1 = haxe.lang.Runtime.toString(_g.params[0]);
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.CType _g2 = ((hscript.CType) (_g.params[1]) );
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object _g3 = _g.params[2];
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tmp = true;
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tmp = false;
						//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
			}
			else
			{
				//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tmp = false;
			}
			
			//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if ( ! (tmp) ) 
			{
				//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			//line 301 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			e = this.parseStructure("var");
			//line 302 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			exprs.push(e);
			//line 303 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			tk = this.token();
		}
		
		//line 306 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( ( tk != hscript.Token.TSemicolon ) && ( tk != hscript.Token.TEof ) )) 
		{
			//line 307 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (this.isBlock(e)) 
			{
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			else
			{
				//line 310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.unexpected(tk);
			}
			
		}
		
	}
	
	
	public java.lang.Object parseObject(java.lang.Object p1)
	{
		//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> fl = new haxe.root.Array<java.lang.Object>();
		//line 317 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 318 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 319 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String id = null;
			//line 320 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (tk.index)
			{
				case 1:
				{
					//line 322 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.Const c = ((hscript.Const) (tk.params[0]) );
					//line 322 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 323 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if ( ! (this.allowJSON) ) 
						{
							//line 324 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.unexpected(tk);
						}
						
						//line 325 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (c.index)
						{
							case 2:
							{
								//line 326 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String s = haxe.lang.Runtime.toString(c.params[0]);
								//line 326 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								id = s;
								//line 326 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							default:
							{
								//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.unexpected(tk);
								//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
						}
						
					}
					
					//line 322 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 2:
				{
					//line 321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String i = haxe.lang.Runtime.toString(tk.params[0]);
					//line 321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					id = i;
					//line 321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 7:
				{
					//line 330 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
				
				default:
				{
					//line 332 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(tk);
					//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
			//line 335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.Token t = this.token();
				//line 335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( t != hscript.Token.TDoubleDot )) 
				{
					//line 335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(t);
				}
				
			}
			
			//line 336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object __temp_stmt2 = null;
			//line 336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object __temp_odecl1 = this.parseExpr();
				//line 336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				__temp_stmt2 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "name"}, new java.lang.Object[]{__temp_odecl1, id}, new java.lang.String[]{}, new double[]{});
			}
			
			//line 336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			fl.push(__temp_stmt2);
			//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			tk = this.token();
			//line 338 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (tk.index)
			{
				case 7:
				{
					//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
				
				case 9:
				{
					//line 341 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				default:
				{
					//line 343 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(tk);
					//line 343 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
			}
			
		}
		;
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef e = hscript.ExprDef.EObject(fl);
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmin = p1;
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmax = null;
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object tmp = null;
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			tmp = null;
		}
		else
		{
			//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmin, null)) 
			{
				//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmin = this.tokenMin;
			}
			
			//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmax, null)) 
			{
				//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmax = this.tokenMax;
			}
			
			//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			tmp = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
		}
		
		//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return this.parseExprNext(tmp);
	}
	
	
	public java.lang.Object parseExpr()
	{
		//line 350 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 352 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int p1 = this.tokenMin;
		//line 354 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (tk.index)
		{
			case 1:
			{
				//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.Const c = ((hscript.Const) (tk.params[0]) );
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e = hscript.ExprDef.EConst(c);
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin = null;
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax = null;
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object tmp = null;
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e == null )) 
				{
					//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp = null;
				}
				else
				{
					//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin, null)) 
					{
						//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin = this.tokenMin;
					}
					
					//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax, null)) 
					{
						//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax = this.tokenMax;
					}
					
					//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(tmp);
			}
			
			
			case 2:
			{
				//line 355 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id = haxe.lang.Runtime.toString(tk.params[0]);
				//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e1 = this.parseStructure(id);
				//line 357 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e1 == null )) 
				{
					//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e2 = hscript.ExprDef.EIdent(id);
					//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin1 = null;
					//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax1 = null;
					//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e2 == null )) 
					{
						//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e1 = null;
					}
					else
					{
						//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin1, null)) 
						{
							//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin1 = this.tokenMin;
						}
						
						//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax1, null)) 
						{
							//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax1 = this.tokenMax;
						}
						
						//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e1 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e2, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				
				//line 359 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(e1);
			}
			
			
			case 3:
			{
				//line 439 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String op = haxe.lang.Runtime.toString(tk.params[0]);
				//line 440 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.valEq(op, "-")) 
				{
					//line 441 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int start = this.tokenMin;
					//line 442 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object e3 = this.parseExpr();
					//line 443 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e3 == null )) 
					{
						//line 444 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return this.makeUnop(op, e3);
					}
					
					//line 445 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e3, "e", true)) );
					//line 445 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (_g.index)
					{
						case 0:
						{
							//line 448 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Const _g1 = ((hscript.Const) (_g.params[0]) );
							//line 448 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (_g1.index)
							{
								case 0:
								{
									//line 446 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									int i = ((int) (haxe.lang.Runtime.toInt(_g1.params[0])) );
									//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.ExprDef e4 = hscript.ExprDef.EConst(hscript.Const.CInt( - (i) ));
									//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmin2 = start;
									//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmax2 = ( (( e3 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e3, "pmax", true)) )) );
									//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( e4 == null )) 
									{
										//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return null;
									}
									else
									{
										//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmin2, null)) 
										{
											//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmin2 = this.tokenMin;
										}
										
										//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmax2, null)) 
										{
											//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmax2 = this.tokenMax;
										}
										
										//line 447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e4, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
									}
									
								}
								
								
								case 1:
								{
									//line 448 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									double f = ((double) (haxe.lang.Runtime.toDouble(_g1.params[0])) );
									//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.ExprDef e5 = hscript.ExprDef.EConst(hscript.Const.CFloat( - (f) ));
									//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmin3 = start;
									//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmax3 = ( (( e3 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e3, "pmax", true)) )) );
									//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( e5 == null )) 
									{
										//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return null;
									}
									else
									{
										//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmin3, null)) 
										{
											//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmin3 = this.tokenMin;
										}
										
										//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmax3, null)) 
										{
											//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmax3 = this.tokenMax;
										}
										
										//line 449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e5, this.origin, pmax3, pmin3}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
									}
									
								}
								
								
								default:
								{
									//line 451 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return this.makeUnop(op, e3);
								}
								
							}
							
						}
						
						
						default:
						{
							//line 451 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.makeUnop(op, e3);
						}
						
					}
					
				}
				
				//line 454 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ((int) (haxe.lang.Runtime.toInt(((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).get(op))) ) < 0 )) 
				{
					//line 455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.makeUnop(op, this.parseExpr());
				}
				
				//line 456 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.unexpected(tk);
			}
			
			
			case 4:
			{
				//line 363 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tk = this.token();
				//line 364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( tk == hscript.Token.TPClose )) 
				{
					//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.Token t = this.token();
						//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t) ), ((hscript.Token) (hscript.Token.TOp("->")) ))) ))) ) 
						{
							//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.unexpected(t);
						}
						
					}
					
					//line 366 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object eret = this.parseExpr();
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e6 = hscript.ExprDef.EReturn(eret);
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin4 = p1;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax4 = null;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object e7 = null;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e6 == null )) 
					{
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e7 = null;
					}
					else
					{
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin4, null)) 
						{
							//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin4 = this.tokenMin;
						}
						
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax4, null)) 
						{
							//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax4 = this.tokenMax;
						}
						
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e7 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e6, this.origin, pmax4, pmin4}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e8 = hscript.ExprDef.EFunction(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}), e7, null, null);
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin5 = p1;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax5 = null;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e8 == null )) 
					{
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin5, null)) 
						{
							//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin5 = this.tokenMin;
						}
						
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax5, null)) 
						{
							//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax5 = this.tokenMax;
						}
						
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e8, this.origin, pmax5, pmin5}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				
				//line 369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 370 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e9 = this.parseExpr();
				//line 371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tk = this.token();
				//line 372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (tk.index)
				{
					case 5:
					{
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef e10 = hscript.ExprDef.EParent(e9);
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmin6 = p1;
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmax6 = this.tokenMax;
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object tmp1 = null;
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( e10 == null )) 
						{
							//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							tmp1 = null;
						}
						else
						{
							//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmin6, null)) 
							{
								//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmin6 = this.tokenMin;
							}
							
							//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmax6, null)) 
							{
								//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmax6 = this.tokenMax;
							}
							
							//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							tmp1 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e10, this.origin, pmax6, pmin6}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
						}
						
						//line 374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return this.parseExprNext(tmp1);
					}
					
					
					case 9:
					{
						//line 389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef _g2 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e9, "e", true)) );
						//line 389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (_g2.index)
						{
							case 1:
							{
								//line 390 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String v = haxe.lang.Runtime.toString(_g2.params[0]);
								//line 390 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.parseLambda(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{v}, new java.lang.String[]{}, new double[]{})}), ( (( e9 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e9, "pmin", true)) )) ));
							}
							
							
							default:
							{
								//line 391 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
						}
						
						//line 389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 14:
					{
						//line 376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.CType t1 = this.parseType();
						//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tk = this.token();
						//line 378 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (tk.index)
						{
							case 5:
							{
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.ExprDef e11 = hscript.ExprDef.ECheckType(e9, t1);
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmin7 = p1;
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmax7 = this.tokenMax;
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object tmp2 = null;
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( e11 == null )) 
								{
									//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									tmp2 = null;
								}
								else
								{
									//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmin7, null)) 
									{
										//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmin7 = this.tokenMin;
									}
									
									//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmax7, null)) 
									{
										//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmax7 = this.tokenMax;
									}
									
									//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									tmp2 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e11, this.origin, pmax7, pmin7}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
								}
								
								//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.parseExprNext(tmp2);
							}
							
							
							case 9:
							{
								//line 382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.ExprDef _g3 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e9, "e", true)) );
								//line 382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (_g3.index)
								{
									case 1:
									{
										//line 383 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String v1 = haxe.lang.Runtime.toString(_g3.params[0]);
										//line 383 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.parseLambda(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{v1, t1}, new java.lang.String[]{}, new double[]{})}), ( (( e9 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e9, "pmin", true)) )) ));
									}
									
									
									default:
									{
										//line 384 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
								//line 382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							default:
							{
								//line 386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
						}
						
						//line 375 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 393 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 395 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.unexpected(tk);
			}
			
			
			case 6:
			{
				//line 397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tk = this.token();
				//line 398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (tk.index)
				{
					case 1:
					{
						//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.Const c1 = ((hscript.Const) (tk.params[0]) );
						//line 411 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (this.allowJSON) 
						{
							//line 412 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (c1.index)
							{
								case 2:
								{
									//line 413 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.String _g4 = haxe.lang.Runtime.toString(c1.params[0]);
									//line 413 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 414 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token tk2 = this.token();
										//line 415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk2}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
											//line 415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMin = this.oldTokenMin;
											//line 415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMax = this.oldTokenMax;
										}
										
										//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
											//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMin = this.oldTokenMin;
											//line 416 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMax = this.oldTokenMax;
										}
										
										//line 417 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										switch (tk2.index)
										{
											case 14:
											{
												//line 419 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												return this.parseExprNext(this.parseObject(p1));
											}
											
											
											default:
											{
												//line 420 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
										}
										
									}
									
									//line 413 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
								
								default:
								{
									//line 423 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
									//line 423 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMin = this.oldTokenMin;
									//line 423 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMax = this.oldTokenMax;
									//line 423 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
							}
							
						}
						else
						{
							//line 426 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
							//line 426 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMin = this.oldTokenMin;
							//line 426 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMax = this.oldTokenMax;
						}
						
						//line 410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 2:
					{
						//line 401 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String _g5 = haxe.lang.Runtime.toString(tk.params[0]);
						//line 401 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk21 = this.token();
							//line 403 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 403 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk21}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
								//line 403 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMin = this.oldTokenMin;
								//line 403 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMax = this.oldTokenMax;
							}
							
							//line 404 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 404 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
								//line 404 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMin = this.oldTokenMin;
								//line 404 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMax = this.oldTokenMax;
							}
							
							//line 405 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (tk21.index)
							{
								case 14:
								{
									//line 407 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return this.parseExprNext(this.parseObject(p1));
								}
								
								
								default:
								{
									//line 408 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
							}
							
						}
						
						//line 401 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 7:
					{
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef e12 = hscript.ExprDef.EObject(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmin8 = p1;
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmax8 = null;
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object tmp3 = null;
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( e12 == null )) 
						{
							//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							tmp3 = null;
						}
						else
						{
							//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmin8, null)) 
							{
								//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmin8 = this.tokenMin;
							}
							
							//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmax8, null)) 
							{
								//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmax8 = this.tokenMax;
							}
							
							//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							tmp3 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e12, this.origin, pmax8, pmin8}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
						}
						
						//line 400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return this.parseExprNext(tmp3);
					}
					
					
					default:
					{
						//line 428 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 428 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 428 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
						//line 428 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 430 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>();
				//line 431 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				while (true)
				{
					//line 432 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.parseFullExpr(a);
					//line 433 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tk = this.token();
					//line 434 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( ( tk == hscript.Token.TBrClose ) || ( this.resumeErrors && ( tk == hscript.Token.TEof ) ) )) 
					{
						//line 435 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					//line 436 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 436 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 436 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 436 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
					}
					
				}
				
				//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e13 = hscript.ExprDef.EBlock(a);
				//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin9 = p1;
				//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax9 = null;
				//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e13 == null )) 
				{
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin9, null)) 
					{
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin9 = this.tokenMin;
					}
					
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax9, null)) 
					{
						//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax9 = this.tokenMax;
					}
					
					//line 438 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e13, this.origin, pmax9, pmin9}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
			
			case 11:
			{
				//line 458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> a1 = new haxe.root.Array<java.lang.Object>();
				//line 459 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tk = this.token();
				//line 460 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				while (( ( tk != hscript.Token.TBkClose ) && ((  ! (this.resumeErrors)  || ( tk != hscript.Token.TEof ) )) ))
				{
					//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
					}
					
					//line 462 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					a1.push(this.parseExpr());
					//line 463 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tk = this.token();
					//line 464 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( tk == hscript.Token.TComma )) 
					{
						//line 465 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tk = this.token();
					}
					
				}
				
				//line 467 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ( a1.length == 1 ) && ( ! (( a1.__get(0) == null )) ) )) 
				{
					//line 468 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef _g6 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(a1.__get(0), "e", true)) );
					//line 468 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (_g6.index)
					{
						case 10:
						{
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g7 = _g6.params[0];
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g8 = _g6.params[1];
							//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String tmp4 = ( "__a_" + this.uid++ );
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e14 = hscript.ExprDef.EArrayDecl(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin10 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax10 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e15 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e14 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e15 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin10, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin10 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax10, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax10 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e15 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e14, this.origin, pmax10, pmin10}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e16 = hscript.ExprDef.EVar(tmp4, null, e15);
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin11 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax11 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e17 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e16 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e17 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin11, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin11 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax11, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax11 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e17 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e16, this.origin, pmax11, pmin11}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 473 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e18 = this.mapCompr(tmp4, a1.__get(0));
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e19 = hscript.ExprDef.EIdent(tmp4);
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin12 = p1;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax12 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e20 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e19 == null )) 
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e20 = null;
							}
							else
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin12, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin12 = this.tokenMin;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax12, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax12 = this.tokenMax;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e20 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e19, this.origin, pmax12, pmin12}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e21 = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e17, e18, e20}));
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin13 = p1;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax13 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e22 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e21 == null )) 
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e22 = null;
							}
							else
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin13, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin13 = this.tokenMin;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax13, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax13 = this.tokenMax;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e22 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e21, this.origin, pmax13, pmin13}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 476 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExprNext(e22);
						}
						
						
						case 11:
						{
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String _g9 = haxe.lang.Runtime.toString(_g6.params[0]);
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g10 = _g6.params[1];
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g11 = _g6.params[2];
							//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String tmp5 = ( "__a_" + this.uid++ );
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e23 = hscript.ExprDef.EArrayDecl(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin14 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax14 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e24 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e23 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e24 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin14, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin14 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax14, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax14 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e24 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e23, this.origin, pmax14, pmin14}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e25 = hscript.ExprDef.EVar(tmp5, null, e24);
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin15 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax15 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e26 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e25 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e26 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin15, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin15 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax15, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax15 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e26 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e25, this.origin, pmax15, pmin15}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 473 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e27 = this.mapCompr(tmp5, a1.__get(0));
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e28 = hscript.ExprDef.EIdent(tmp5);
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin16 = p1;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax16 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e29 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e28 == null )) 
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e29 = null;
							}
							else
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin16, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin16 = this.tokenMin;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax16, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax16 = this.tokenMax;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e29 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e28, this.origin, pmax16, pmin16}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e30 = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e26, e27, e29}));
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin17 = p1;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax17 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e31 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e30 == null )) 
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e31 = null;
							}
							else
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin17, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin17 = this.tokenMin;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax17, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax17 = this.tokenMax;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e31 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e30, this.origin, pmax17, pmin17}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 476 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExprNext(e31);
						}
						
						
						case 24:
						{
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g12 = _g6.params[0];
							//line 469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object _g13 = _g6.params[1];
							//line 470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String tmp6 = ( "__a_" + this.uid++ );
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e32 = hscript.ExprDef.EArrayDecl(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin18 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax18 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e33 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e32 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e33 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin18, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin18 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax18, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax18 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e33 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e32, this.origin, pmax18, pmin18}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e34 = hscript.ExprDef.EVar(tmp6, null, e33);
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin19 = p1;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax19 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e35 = null;
							//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e34 == null )) 
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e35 = null;
							}
							else
							{
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin19, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin19 = this.tokenMin;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax19, null)) 
								{
									//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax19 = this.tokenMax;
								}
								
								//line 472 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e35 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e34, this.origin, pmax19, pmin19}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 473 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e36 = this.mapCompr(tmp6, a1.__get(0));
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e37 = hscript.ExprDef.EIdent(tmp6);
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin20 = p1;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax20 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e38 = null;
							//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e37 == null )) 
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e38 = null;
							}
							else
							{
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin20, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin20 = this.tokenMin;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax20, null)) 
								{
									//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax20 = this.tokenMax;
								}
								
								//line 474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e38 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e37, this.origin, pmax20, pmin20}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e39 = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e35, e36, e38}));
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin21 = p1;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax21 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e40 = null;
							//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e39 == null )) 
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e40 = null;
							}
							else
							{
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin21, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin21 = this.tokenMin;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax21, null)) 
								{
									//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax21 = this.tokenMax;
								}
								
								//line 471 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e40 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e39, this.origin, pmax21, pmin21}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
							//line 476 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExprNext(e40);
						}
						
						
						default:
						{
							//line 477 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
					}
					
				}
				
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e41 = hscript.ExprDef.EArrayDecl(a1);
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin22 = p1;
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax22 = null;
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object tmp7 = null;
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e41 == null )) 
				{
					//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp7 = null;
				}
				else
				{
					//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin22, null)) 
					{
						//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin22 = this.tokenMin;
					}
					
					//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax22, null)) 
					{
						//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax22 = this.tokenMax;
					}
					
					//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp7 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e41, this.origin, pmax22, pmin22}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(tmp7);
			}
			
			
			case 15:
			{
				//line 480 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id1 = haxe.lang.Runtime.toString(tk.params[0]);
				//line 480 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (this.allowMetadata) 
				{
					//line 481 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					haxe.root.Array<java.lang.Object> args = this.parseMetaArgs();
					//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e42 = hscript.ExprDef.EMeta(id1, args, this.parseExpr());
					//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin23 = p1;
					//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax23 = null;
					//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e42 == null )) 
					{
						//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin23, null)) 
						{
							//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin23 = this.tokenMin;
						}
						
						//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax23, null)) 
						{
							//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax23 = this.tokenMax;
						}
						
						//line 482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e42, this.origin, pmax23, pmin23}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				else
				{
					//line 484 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.unexpected(tk);
				}
				
			}
			
			
			default:
			{
				//line 484 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.unexpected(tk);
			}
			
		}
		
	}
	
	
	public java.lang.Object parseLambda(haxe.root.Array<java.lang.Object> args, java.lang.Object pmin)
	{
		//line 489 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 490 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String id = this.getIdent();
			//line 491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.CType t = ( (this.maybe(hscript.Token.TDoubleDot)) ? (this.parseType()) : (null) );
			//line 492 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			args.push(new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{id, t}, new java.lang.String[]{}, new double[]{}));
			//line 493 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 494 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (tk.index)
			{
				case 5:
				{
					//line 497 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
				
				case 9:
				{
					//line 495 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				default:
				{
					//line 499 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(tk);
					//line 500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
		}
		;
		//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token t1 = this.token();
			//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t1) ), ((hscript.Token) (hscript.Token.TOp("->")) ))) ))) ) 
			{
				//line 503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.unexpected(t1);
			}
			
		}
		
		//line 504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object eret = this.parseExpr();
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef e = hscript.ExprDef.EReturn(eret);
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmin1 = pmin;
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmax = null;
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object e1 = null;
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			e1 = null;
		}
		else
		{
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmin1, null)) 
			{
				//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmin1 = this.tokenMin;
			}
			
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmax, null)) 
			{
				//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmax = this.tokenMax;
			}
			
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			e1 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
		}
		
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef e2 = hscript.ExprDef.EFunction(args, e1, null, null);
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmin2 = pmin;
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmax1 = null;
		//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e2 == null )) 
		{
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		else
		{
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmin2, null)) 
			{
				//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmin2 = this.tokenMin;
			}
			
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmax1, null)) 
			{
				//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmax1 = this.tokenMax;
			}
			
			//line 505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e2, this.origin, pmax1, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
		}
		
	}
	
	
	public haxe.root.Array<java.lang.Object> parseMetaArgs()
	{
		//line 509 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 510 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( tk != hscript.Token.TPOpen )) 
		{
			//line 511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			
			//line 512 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		
		//line 514 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> args = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		tk = this.token();
		//line 516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( tk != hscript.Token.TPClose )) 
		{
			//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			
			//line 518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			label1:
			while (true)
			{
				//line 519 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				args.push(this.parseExpr());
				//line 520 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 520 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.Token _g = this.token();
					//line 520 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (_g.index)
					{
						case 5:
						{
							//line 523 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break label1;
						}
						
						
						case 9:
						{
							//line 521 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 524 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk1 = _g;
							//line 525 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.unexpected(tk1);
							//line 524 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
					}
					
				}
				
			}
			;
		}
		
		//line 529 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return args;
	}
	
	
	public java.lang.Object mapCompr(java.lang.String tmp, java.lang.Object e)
	{
		//line 533 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( e == null )) 
		{
			//line 533 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		
		//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef edef = null;
		//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
		//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (_g.index)
		{
			case 3:
			{
				//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e2 = _g.params[0];
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				edef = hscript.ExprDef.EParent(this.mapCompr(tmp, e2));
				//line 545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			case 4:
			{
				//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> _g1 = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
				//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (_g1.length)
				{
					case 1:
					{
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object e1 = _g1.__get(0);
						//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						edef = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{this.mapCompr(tmp, e1)}));
						//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef e3 = hscript.ExprDef.EIdent(tmp);
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmin = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmax = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object e4 = null;
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( e3 == null )) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							e4 = null;
						}
						else
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmin, null)) 
							{
								//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmin = this.tokenMin;
							}
							
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmax, null)) 
							{
								//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmax = this.tokenMax;
							}
							
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							e4 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e3, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
						}
						
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef e5 = hscript.ExprDef.EField(e4, "push");
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmin1 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object pmax1 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.Object edef1 = null;
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( e5 == null )) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							edef1 = null;
						}
						else
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmin1, null)) 
							{
								//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmin1 = this.tokenMin;
							}
							
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.eq(pmax1, null)) 
							{
								//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								pmax1 = this.tokenMax;
							}
							
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							edef1 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e5, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
						}
						
						//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						edef = hscript.ExprDef.ECall(edef1, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e}));
						//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 543 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			case 9:
			{
				//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object cond = _g.params[0];
				//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e11 = _g.params[1];
				//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e21 = _g.params[2];
				//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e21 == null )) 
				{
					//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					edef = hscript.ExprDef.EIf(cond, this.mapCompr(tmp, e11), null);
				}
				else
				{
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e6 = hscript.ExprDef.EIdent(tmp);
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin2 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax2 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object e7 = null;
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e6 == null )) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e7 = null;
					}
					else
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin2, null)) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin2 = this.tokenMin;
						}
						
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax2, null)) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax2 = this.tokenMax;
						}
						
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						e7 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e6, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e8 = hscript.ExprDef.EField(e7, "push");
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin3 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax3 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object edef2 = null;
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e8 == null )) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						edef2 = null;
					}
					else
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin3, null)) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin3 = this.tokenMin;
						}
						
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax3, null)) 
						{
							//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax3 = this.tokenMax;
						}
						
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						edef2 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e8, this.origin, pmax3, pmin3}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
					//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					edef = hscript.ExprDef.ECall(edef2, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e}));
				}
				
				//line 541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			case 10:
			{
				//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object cond1 = _g.params[0];
				//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e22 = _g.params[1];
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				edef = hscript.ExprDef.EWhile(cond1, this.mapCompr(tmp, e22));
				//line 537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			case 11:
			{
				//line 535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String v = haxe.lang.Runtime.toString(_g.params[0]);
				//line 535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object it = _g.params[1];
				//line 535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e23 = _g.params[2];
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				edef = hscript.ExprDef.EFor(v, it, this.mapCompr(tmp, e23));
				//line 535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			case 24:
			{
				//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object cond2 = _g.params[0];
				//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e24 = _g.params[1];
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				edef = hscript.ExprDef.EDoWhile(cond2, this.mapCompr(tmp, e24));
				//line 539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			default:
			{
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e9 = hscript.ExprDef.EIdent(tmp);
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin4 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax4 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e10 = null;
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e9 == null )) 
				{
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					e10 = null;
				}
				else
				{
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin4, null)) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin4 = this.tokenMin;
					}
					
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax4, null)) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax4 = this.tokenMax;
					}
					
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					e10 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e9, this.origin, pmax4, pmin4}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e12 = hscript.ExprDef.EField(e10, "push");
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin5 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax5 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object edef3 = null;
				//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e12 == null )) 
				{
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					edef3 = null;
				}
				else
				{
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin5, null)) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin5 = this.tokenMin;
					}
					
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax5, null)) 
					{
						//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax5 = this.tokenMax;
					}
					
					//line 548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					edef3 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e12, this.origin, pmax5, pmin5}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				edef = hscript.ExprDef.ECall(edef3, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{e}));
				//line 534 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
		}
		
		//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmin6 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
		//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object pmax6 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
		//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( edef == null )) 
		{
			//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		else
		{
			//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmin6, null)) 
			{
				//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmin6 = this.tokenMin;
			}
			
			//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.eq(pmax6, null)) 
			{
				//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				pmax6 = this.tokenMax;
			}
			
			//line 550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{edef, this.origin, pmax6, pmin6}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
		}
		
	}
	
	
	public java.lang.Object makeUnop(java.lang.String op, java.lang.Object e)
	{
		//line 554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( ( e == null ) && this.resumeErrors )) 
		{
			//line 555 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return null;
		}
		
		//line 556 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
		//line 556 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (_g.index)
		{
			case 6:
			{
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String bop = haxe.lang.Runtime.toString(_g.params[0]);
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e1 = _g.params[1];
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e2 = _g.params[2];
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e3 = hscript.ExprDef.EBinop(bop, this.makeUnop(op, e1), e2);
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax = ( (( e2 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e2, "pmax", true)) )) );
				//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e3 == null )) 
				{
					//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin, null)) 
					{
						//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin = this.tokenMin;
					}
					
					//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax, null)) 
					{
						//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax = this.tokenMax;
					}
					
					//line 557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e3, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
			
			case 22:
			{
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e11 = _g.params[0];
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e21 = _g.params[1];
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e31 = _g.params[2];
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e4 = hscript.ExprDef.ETernary(this.makeUnop(op, e11), e21, e31);
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin1 = ( (( e11 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e11, "pmin", true)) )) );
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax1 = ( (( e31 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e31, "pmax", true)) )) );
				//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e4 == null )) 
				{
					//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin1, null)) 
					{
						//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin1 = this.tokenMin;
					}
					
					//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax1, null)) 
					{
						//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax1 = this.tokenMax;
					}
					
					//line 558 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e4, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
			
			default:
			{
				//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e5 = hscript.ExprDef.EUnop(op, true, e);
				//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin2 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmin", true)) )) );
				//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax2 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
				//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e5 == null )) 
				{
					//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin2, null)) 
					{
						//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin2 = this.tokenMin;
					}
					
					//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax2, null)) 
					{
						//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax2 = this.tokenMax;
					}
					
					//line 559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e5, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
		}
		
	}
	
	
	public java.lang.Object makeBinop(java.lang.String op, java.lang.Object e1, java.lang.Object e)
	{
		//line 564 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( ( e == null ) && this.resumeErrors )) 
		{
			//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.ExprDef e2 = hscript.ExprDef.EBinop(op, e1, e);
			//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object pmin = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
			//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object pmax = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmax", true)) )) );
			//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( e2 == null )) 
			{
				//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return null;
			}
			else
			{
				//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.eq(pmin, null)) 
				{
					//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					pmin = this.tokenMin;
				}
				
				//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.eq(pmax, null)) 
				{
					//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					pmax = this.tokenMax;
				}
				
				//line 565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e2, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
			}
			
		}
		
		//line 566 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
		//line 566 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (_g.index)
		{
			case 6:
			{
				//line 567 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String op2 = haxe.lang.Runtime.toString(_g.params[0]);
				//line 567 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e21 = _g.params[1];
				//line 567 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e3 = _g.params[2];
				//line 568 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( ( haxe.lang.Runtime.compare(((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).get(op), ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).get(op2)) <= 0 ) &&  ! (((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opRightAssoc) )) ).exists(op))  )) 
				{
					//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e4 = hscript.ExprDef.EBinop(op2, this.makeBinop(op, e1, e21), e3);
					//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin1 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
					//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax1 = ( (( e3 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e3, "pmax", true)) )) );
					//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e4 == null )) 
					{
						//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin1, null)) 
						{
							//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin1 = this.tokenMin;
						}
						
						//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax1, null)) 
						{
							//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax1 = this.tokenMax;
						}
						
						//line 569 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e4, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				else
				{
					//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e5 = hscript.ExprDef.EBinop(op, e1, e);
					//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin2 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
					//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax2 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
					//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e5 == null )) 
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin2, null)) 
						{
							//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin2 = this.tokenMin;
						}
						
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax2, null)) 
						{
							//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax2 = this.tokenMax;
						}
						
						//line 571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e5, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				
			}
			
			
			case 22:
			{
				//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e22 = _g.params[0];
				//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e31 = _g.params[1];
				//line 572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e41 = _g.params[2];
				//line 573 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opRightAssoc) )) ).exists(op)) 
				{
					//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e6 = hscript.ExprDef.EBinop(op, e1, e);
					//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin3 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
					//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax3 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
					//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e6 == null )) 
					{
						//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin3, null)) 
						{
							//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin3 = this.tokenMin;
						}
						
						//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax3, null)) 
						{
							//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax3 = this.tokenMax;
						}
						
						//line 574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e6, this.origin, pmax3, pmin3}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				else
				{
					//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e7 = hscript.ExprDef.ETernary(this.makeBinop(op, e1, e22), e31, e41);
					//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin4 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
					//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax4 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
					//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e7 == null )) 
					{
						//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return null;
					}
					else
					{
						//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin4, null)) 
						{
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin4 = this.tokenMin;
						}
						
						//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax4, null)) 
						{
							//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax4 = this.tokenMax;
						}
						
						//line 576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e7, this.origin, pmax4, pmin4}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
				}
				
			}
			
			
			default:
			{
				//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e8 = hscript.ExprDef.EBinop(op, e1, e);
				//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin5 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax5 = ( (( e == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e, "pmax", true)) )) );
				//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e8 == null )) 
				{
					//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin5, null)) 
					{
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin5 = this.tokenMin;
					}
					
					//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax5, null)) 
					{
						//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax5 = this.tokenMax;
					}
					
					//line 578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e8, this.origin, pmax5, pmin5}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
		}
		
	}
	
	
	public java.lang.Object parseStructure(java.lang.String id)
	{
		//line 584 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int p1 = this.tokenMin;
		//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String __temp_svar11 = (id);
			//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef12 = true;
			//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( __temp_svar11 != null )) 
			{
				//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (__temp_svar11.hashCode())
				{
					case 94001407:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("break")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e = hscript.ExprDef.EBreak;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin = null;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax = null;
							//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e == null )) 
							{
								//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin, null)) 
								{
									//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin = this.tokenMin;
								}
								
								//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax, null)) 
								{
									//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax = this.tokenMax;
								}
								
								//line 642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 113101617:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("while")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object econd1 = this.parseExpr();
							//line 622 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e31 = this.parseExpr();
							//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e32 = hscript.ExprDef.EWhile(econd1, e31);
							//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin16 = p1;
							//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax16 = ( (( e31 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e31, "pmax", true)) )) );
							//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e32 == null )) 
							{
								//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin16, null)) 
								{
									//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin16 = this.tokenMin;
								}
								
								//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax16, null)) 
								{
									//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax16 = this.tokenMax;
								}
								
								//line 623 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e32, this.origin, pmax16, pmin16}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -567202649:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("continue")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e1 = hscript.ExprDef.EContinue;
							//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin1 = null;
							//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax1 = null;
							//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e1 == null )) 
							{
								//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin1, null)) 
								{
									//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin1 = this.tokenMin;
								}
								
								//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax1, null)) 
								{
									//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax1 = this.tokenMax;
								}
								
								//line 643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e1, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 116519:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("var")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 607 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String ident = this.getIdent();
							//line 608 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk6 = this.token();
							//line 609 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.CType t13 = null;
							//line 610 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( ( tk6 == hscript.Token.TDoubleDot ) && this.allowTypes )) 
							{
								//line 611 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								t13 = this.parseType();
								//line 612 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								tk6 = this.token();
							}
							
							//line 614 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e29 = null;
							//line 615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (tk6) ), ((hscript.Token) (hscript.Token.TOp("=")) ))) ))) 
							{
								//line 616 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e29 = this.parseExpr();
							}
							else
							{
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk6}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMin = this.oldTokenMin;
								//line 618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMax = this.oldTokenMax;
							}
							
							//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e30 = hscript.ExprDef.EVar(ident, t13, e29);
							//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin15 = p1;
							//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax15 = ( (( e29 == null )) ? (this.tokenMax) : (( (( e29 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e29, "pmax", true)) )) )) );
							//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e30 == null )) 
							{
								//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin15, null)) 
								{
									//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin15 = this.tokenMin;
								}
								
								//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax15, null)) 
								{
									//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax15 = this.tokenMax;
								}
								
								//line 619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e30, this.origin, pmax15, pmin15}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3211:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("do")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 625 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e2 = this.parseExpr();
							//line 626 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk = this.token();
							//line 627 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (tk.index)
							{
								case 2:
								{
									//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String __temp_svar1 = (haxe.lang.Runtime.toString(tk.params[0]));
										//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										boolean __temp_executeDef2 = true;
										//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( __temp_svar1 != null )) 
										{
											//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											switch (__temp_svar1.hashCode())
											{
												case 113101617:
												{
													//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													if (__temp_svar1.equals("while")) 
													{
														//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														__temp_executeDef2 = false;
													}
													
													//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													break;
												}
												
												
											}
											
										}
										
										//line 630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (__temp_executeDef2) 
										{
											//line 630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.unexpected(tk);
										}
										
									}
									
									//line 629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
								
								default:
								{
									//line 630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(tk);
									//line 630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
							}
							
							//line 632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object econd = this.parseExpr();
							//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e3 = hscript.ExprDef.EDoWhile(econd, e2);
							//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin2 = p1;
							//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax2 = ( (( econd == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(econd, "pmax", true)) )) );
							//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e3 == null )) 
							{
								//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin2, null)) 
								{
									//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin2 = this.tokenMin;
								}
								
								//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax2, null)) 
								{
									//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax2 = this.tokenMax;
								}
								
								//line 633 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e3, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 115131:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("try")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 683 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e27 = this.parseExpr();
							//line 684 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 684 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t7 = this.token();
								//line 684 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t7) ), ((hscript.Token) (hscript.Token.TId("catch")) ))) ))) ) 
								{
									//line 684 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t7);
								}
								
							}
							
							//line 685 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 685 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t8 = this.token();
								//line 685 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t8 != hscript.Token.TPOpen )) 
								{
									//line 685 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t8);
								}
								
							}
							
							//line 686 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String vname1 = this.getIdent();
							//line 687 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 687 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t9 = this.token();
								//line 687 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t9 != hscript.Token.TDoubleDot )) 
								{
									//line 687 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t9);
								}
								
							}
							
							//line 688 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.CType t10 = null;
							//line 689 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (this.allowTypes) 
							{
								//line 690 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								t10 = this.parseType();
							}
							else
							{
								//line 692 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t11 = this.token();
								//line 692 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t11) ), ((hscript.Token) (hscript.Token.TId("Dynamic")) ))) ))) ) 
								{
									//line 692 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t11);
								}
								
							}
							
							//line 693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t12 = this.token();
								//line 693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t12 != hscript.Token.TPClose )) 
								{
									//line 693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t12);
								}
								
							}
							
							//line 694 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object ec = this.parseExpr();
							//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e28 = hscript.ExprDef.ETry(e27, vname1, t10, ec);
							//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin14 = p1;
							//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax14 = ( (( ec == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(ec, "pmax", true)) )) );
							//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e28 == null )) 
							{
								//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin14, null)) 
								{
									//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin14 = this.tokenMin;
								}
								
								//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax14, null)) 
								{
									//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax14 = this.tokenMax;
								}
								
								//line 695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e28, this.origin, pmax14, pmin14}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3116345:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("else")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 644 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.unexpected(hscript.Token.TId(id));
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110339814:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("throw")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 680 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e25 = this.parseExpr();
							//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e26 = hscript.ExprDef.EThrow(e25);
							//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin13 = p1;
							//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax13 = ( (( e25 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e25, "pmax", true)) )) );
							//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e26 == null )) 
							{
								//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin13, null)) 
								{
									//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin13 = this.tokenMin;
								}
								
								//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax13, null)) 
								{
									//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax13 = this.tokenMax;
								}
								
								//line 681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e26, this.origin, pmax13, pmin13}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 101577:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("for")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 635 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 635 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t = this.token();
								//line 635 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t != hscript.Token.TPOpen )) 
								{
									//line 635 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t);
								}
								
							}
							
							//line 636 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String vname = this.getIdent();
							//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t1 = this.token();
								//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t1) ), ((hscript.Token) (hscript.Token.TId("in")) ))) ))) ) 
								{
									//line 637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t1);
								}
								
							}
							
							//line 638 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object eiter = this.parseExpr();
							//line 639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t2 = this.token();
								//line 639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t2 != hscript.Token.TPClose )) 
								{
									//line 639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t2);
								}
								
							}
							
							//line 640 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e4 = this.parseExpr();
							//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e5 = hscript.ExprDef.EFor(vname, eiter, e4);
							//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin3 = p1;
							//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax3 = ( (( e4 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e4, "pmax", true)) )) );
							//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e5 == null )) 
							{
								//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin3, null)) 
								{
									//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin3 = this.tokenMin;
								}
								
								//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax3, null)) 
								{
									//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax3 = this.tokenMax;
								}
								
								//line 641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e5, this.origin, pmax3, pmin3}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -889473228:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("switch")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e13 = this.parseExpr();
							//line 698 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object def = null;
							//line 698 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.Object> cases = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
							//line 699 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 699 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t5 = this.token();
								//line 699 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t5 != hscript.Token.TBrOpen )) 
								{
									//line 699 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t5);
								}
								
							}
							
							//line 700 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							label2:
							while (true)
							{
								//line 701 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token tk5 = this.token();
								//line 702 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (tk5.index)
								{
									case 2:
									{
										//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.String __temp_svar9 = (haxe.lang.Runtime.toString(tk5.params[0]));
											//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											boolean __temp_executeDef10 = true;
											//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( __temp_svar9 != null )) 
											{
												//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												switch (__temp_svar9.hashCode())
												{
													case 3046192:
													{
														//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar9.equals("case")) 
														{
															//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef10 = false;
															//line 704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															java.lang.Object c = new haxe.lang.DynamicObject(new java.lang.String[]{"expr", "values"}, new java.lang.Object[]{null, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})}, new java.lang.String[]{}, new double[]{});
															//line 705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															cases.push(c);
															//line 706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															label3:
															while (true)
															{
																//line 707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																java.lang.Object e14 = this.parseExpr();
																//line 708 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c, "values", true)) ).push(e14);
																//line 709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																tk5 = this.token();
																//line 710 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																switch (tk5.index)
																{
																	case 9:
																	{
																		//line 711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																	
																	case 14:
																	{
																		//line 714 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break label3;
																	}
																	
																	
																	default:
																	{
																		//line 716 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		this.unexpected(tk5);
																		//line 717 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break label3;
																	}
																	
																}
																
															}
															;
															//line 720 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															haxe.root.Array<java.lang.Object> exprs = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
															//line 721 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															label4:
															while (true)
															{
																//line 722 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																tk5 = this.token();
																//line 723 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																{
																	//line 723 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk5}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
																	//line 723 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMin = this.oldTokenMin;
																	//line 723 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMax = this.oldTokenMax;
																}
																
																//line 724 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																switch (tk5.index)
																{
																	case 0:
																	{
																		//line 727 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (this.resumeErrors) 
																		{
																			//line 728 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			break label4;
																		}
																		else
																		{
																			//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			this.parseFullExpr(exprs);
																		}
																		
																		//line 727 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																	
																	case 2:
																	{
																		//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		{
																			//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			java.lang.String __temp_svar3 = (haxe.lang.Runtime.toString(tk5.params[0]));
																			//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			int __temp_hash5 = __temp_svar3.hashCode();
																			//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			boolean __temp_executeDef4 = true;
																			//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			if (( __temp_svar3 != null )) 
																			{
																				//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																				switch (__temp_hash5)
																				{
																					case 1544803905:
																					case 3046192:
																					{
																						//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																						if (( (( ( __temp_hash5 == 1544803905 ) && __temp_svar3.equals("default") )) || __temp_svar3.equals("case") )) 
																						{
																							//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																							__temp_executeDef4 = false;
																							//line 726 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																							break label4;
																						}
																						
																						//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																						break;
																					}
																					
																					
																				}
																				
																			}
																			
																			//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			if (__temp_executeDef4) 
																			{
																				//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																				this.parseFullExpr(exprs);
																			}
																			
																		}
																		
																		//line 725 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																	
																	case 7:
																	{
																		//line 726 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break label4;
																	}
																	
																	
																	default:
																	{
																		//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		this.parseFullExpr(exprs);
																		//line 730 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																}
																
															}
															;
															//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															java.lang.Object tmp = null;
															//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															if (( exprs.length == 1 )) 
															{
																//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																tmp = exprs.__get(0);
															}
															else
															{
																//line 735 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																if (( exprs.length == 0 )) 
																{
																	//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	hscript.ExprDef e15 = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
																	//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmin8 = this.tokenMin;
																	//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmax8 = this.tokenMin;
																	//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	if (( e15 == null )) 
																	{
																		//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		tmp = null;
																	}
																	else
																	{
																		//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmin8, null)) 
																		{
																			//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmin8 = this.tokenMin;
																		}
																		
																		//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmax8, null)) 
																		{
																			//line 736 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmax8 = this.tokenMax;
																		}
																		
																		//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		tmp = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e15, this.origin, pmax8, pmin8}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
																	}
																	
																}
																else
																{
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	hscript.ExprDef e16 = hscript.ExprDef.EBlock(exprs);
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object e17 = exprs.__get(0);
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmin9 = ( (( e17 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e17, "pmin", true)) )) );
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object e18 = exprs.__get(( exprs.length - 1 ));
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmax9 = ( (( e18 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e18, "pmax", true)) )) );
																	//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	if (( e16 == null )) 
																	{
																		//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		tmp = null;
																	}
																	else
																	{
																		//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmin9, null)) 
																		{
																			//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmin9 = this.tokenMin;
																		}
																		
																		//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmax9, null)) 
																		{
																			//line 738 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmax9 = this.tokenMax;
																		}
																		
																		//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		tmp = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e16, this.origin, pmax9, pmin9}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
																	}
																	
																}
																
															}
															
															//line 733 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															haxe.lang.Runtime.setField(c, "expr", tmp);
														}
														
														//line 703 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
													case 1544803905:
													{
														//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar9.equals("default")) 
														{
															//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef10 = false;
															//line 740 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															if (( ! (( def == null )) )) 
															{
																//line 740 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																this.unexpected(tk5);
															}
															
															//line 741 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															{
																//line 741 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																hscript.Token t6 = this.token();
																//line 741 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																if (( t6 != hscript.Token.TDoubleDot )) 
																{
																	//line 741 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.unexpected(t6);
																}
																
															}
															
															//line 742 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															haxe.root.Array<java.lang.Object> exprs1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
															//line 743 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															label5:
															while (true)
															{
																//line 744 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																tk5 = this.token();
																//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																{
																	//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk5}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
																	//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMin = this.oldTokenMin;
																	//line 745 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMax = this.oldTokenMax;
																}
																
																//line 746 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																switch (tk5.index)
																{
																	case 0:
																	{
																		//line 749 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (this.resumeErrors) 
																		{
																			//line 750 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			break label5;
																		}
																		else
																		{
																			//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			this.parseFullExpr(exprs1);
																		}
																		
																		//line 749 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																	
																	case 2:
																	{
																		//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		{
																			//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			java.lang.String __temp_svar6 = (haxe.lang.Runtime.toString(tk5.params[0]));
																			//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			int __temp_hash8 = __temp_svar6.hashCode();
																			//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			boolean __temp_executeDef7 = true;
																			//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			if (( __temp_svar6 != null )) 
																			{
																				//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																				switch (__temp_hash8)
																				{
																					case 1544803905:
																					case 3046192:
																					{
																						//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																						if (( (( ( __temp_hash8 == 1544803905 ) && __temp_svar6.equals("default") )) || __temp_svar6.equals("case") )) 
																						{
																							//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																							__temp_executeDef7 = false;
																							//line 748 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																							break label5;
																						}
																						
																						//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																						break;
																					}
																					
																					
																				}
																				
																			}
																			
																			//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			if (__temp_executeDef7) 
																			{
																				//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																				this.parseFullExpr(exprs1);
																			}
																			
																		}
																		
																		//line 747 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																	
																	case 7:
																	{
																		//line 748 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break label5;
																	}
																	
																	
																	default:
																	{
																		//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		this.parseFullExpr(exprs1);
																		//line 752 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		break;
																	}
																	
																}
																
															}
															;
															//line 755 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															if (( exprs1.length == 1 )) 
															{
																//line 756 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																def = exprs1.__get(0);
															}
															else
															{
																//line 757 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																if (( exprs1.length == 0 )) 
																{
																	//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	hscript.ExprDef e19 = hscript.ExprDef.EBlock(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
																	//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmin10 = this.tokenMin;
																	//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmax10 = this.tokenMin;
																	//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	if (( e19 == null )) 
																	{
																		//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		def = null;
																	}
																	else
																	{
																		//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmin10, null)) 
																		{
																			//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmin10 = this.tokenMin;
																		}
																		
																		//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmax10, null)) 
																		{
																			//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmax10 = this.tokenMax;
																		}
																		
																		//line 758 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		def = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e19, this.origin, pmax10, pmin10}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
																	}
																	
																}
																else
																{
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	hscript.ExprDef e20 = hscript.ExprDef.EBlock(exprs1);
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object e22 = exprs1.__get(0);
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmin11 = ( (( e22 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e22, "pmin", true)) )) );
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object e23 = exprs1.__get(( exprs1.length - 1 ));
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	java.lang.Object pmax11 = ( (( e23 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e23, "pmax", true)) )) );
																	//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	if (( e20 == null )) 
																	{
																		//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		def = null;
																	}
																	else
																	{
																		//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmin11, null)) 
																		{
																			//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmin11 = this.tokenMin;
																		}
																		
																		//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		if (haxe.lang.Runtime.eq(pmax11, null)) 
																		{
																			//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pmax11 = this.tokenMax;
																		}
																		
																		//line 760 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																		def = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e20, this.origin, pmax11, pmin11}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
																	}
																	
																}
																
															}
															
														}
														
														//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
												}
												
											}
											
											//line 763 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (__temp_executeDef10) 
											{
												//line 764 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.unexpected(tk5);
												//line 765 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break label2;
											}
											
										}
										
										//line 739 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 7:
									{
										//line 762 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break label2;
									}
									
									
									default:
									{
										//line 764 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.unexpected(tk5);
										//line 765 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break label2;
									}
									
								}
								
							}
							;
							//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e24 = hscript.ExprDef.ESwitch(e13, cases, def);
							//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin12 = p1;
							//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax12 = this.tokenMax;
							//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e24 == null )) 
							{
								//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin12, null)) 
								{
									//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin12 = this.tokenMin;
								}
								
								//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax12, null)) 
								{
									//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax12 = this.tokenMax;
								}
								
								//line 768 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e24, this.origin, pmax12, pmin12}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1380938712:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("function")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 649 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk1 = this.token();
							//line 650 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String name = null;
							//line 651 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							switch (tk1.index)
							{
								case 2:
								{
									//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.String id1 = haxe.lang.Runtime.toString(tk1.params[0]);
									//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									name = id1;
									//line 652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
								
								default:
								{
									//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk1}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
									//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMin = this.oldTokenMin;
									//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMax = this.oldTokenMax;
									//line 653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
							}
							
							//line 655 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object inf = this.parseFunctionDecl();
							//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e6 = hscript.ExprDef.EFunction(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(inf, "args", true)) ), haxe.lang.Runtime.getField(inf, "body", true), name, ((hscript.CType) (haxe.lang.Runtime.getField(inf, "ret", true)) ));
							//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin4 = p1;
							//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e7 = haxe.lang.Runtime.getField(inf, "body", true);
							//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax4 = ( (( e7 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e7, "pmax", true)) )) );
							//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e6 == null )) 
							{
								//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin4, null)) 
								{
									//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin4 = this.tokenMin;
								}
								
								//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax4, null)) 
								{
									//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax4 = this.tokenMax;
								}
								
								//line 656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e6, this.origin, pmax4, pmin4}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -934396624:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("return")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 658 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk4 = this.token();
							//line 659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk4}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
								//line 659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMin = this.oldTokenMin;
								//line 659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.tokenMax = this.oldTokenMax;
							}
							
							//line 660 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e10 = ( (( tk4 == hscript.Token.TSemicolon )) ? (null) : (this.parseExpr()) );
							//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e12 = hscript.ExprDef.EReturn(e10);
							//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin7 = p1;
							//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax7 = ( (( e10 == null )) ? (this.tokenMax) : (( (( e10 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e10, "pmax", true)) )) )) );
							//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e12 == null )) 
							{
								//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin7, null)) 
								{
									//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin7 = this.tokenMin;
								}
								
								//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax7, null)) 
								{
									//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax7 = this.tokenMax;
								}
								
								//line 661 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e12, this.origin, pmax7, pmin7}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3357:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("if")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t3 = this.token();
								//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t3 != hscript.Token.TPOpen )) 
								{
									//line 588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t3);
								}
								
							}
							
							//line 589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object cond = this.parseExpr();
							//line 590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t4 = this.token();
								//line 590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t4 != hscript.Token.TPClose )) 
								{
									//line 590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t4);
								}
								
							}
							
							//line 591 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e11 = this.parseExpr();
							//line 592 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e21 = null;
							//line 593 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							boolean semic = false;
							//line 594 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.Token tk2 = this.token();
							//line 595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( tk2 == hscript.Token.TSemicolon )) 
							{
								//line 596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								semic = true;
								//line 597 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								tk2 = this.token();
							}
							
							//line 599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (tk2) ), ((hscript.Token) (hscript.Token.TId("else")) ))) ))) 
							{
								//line 600 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								e21 = this.parseExpr();
							}
							else
							{
								//line 602 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 602 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk2}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
									//line 602 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMin = this.oldTokenMin;
									//line 602 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMax = this.oldTokenMax;
								}
								
								//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (semic) 
								{
									//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{hscript.Token.TSemicolon}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
									//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMin = this.oldTokenMin;
									//line 603 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.tokenMax = this.oldTokenMax;
								}
								
							}
							
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e8 = hscript.ExprDef.EIf(cond, e11, e21);
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin5 = p1;
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax5 = ( (( e21 == null )) ? (this.tokenMax) : (( (( e21 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e21, "pmax", true)) )) )) );
							//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e8 == null )) 
							{
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin5, null)) 
								{
									//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin5 = this.tokenMin;
								}
								
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax5, null)) 
								{
									//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax5 = this.tokenMax;
								}
								
								//line 605 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e8, this.origin, pmax5, pmin5}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 108960:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("new")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 663 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.String> a = new haxe.root.Array<java.lang.String>();
							//line 664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							a.push(this.getIdent());
							//line 665 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							label1:
							while (true)
							{
								//line 666 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token tk3 = this.token();
								//line 667 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (tk3.index)
								{
									case 4:
									{
										//line 671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break label1;
									}
									
									
									case 8:
									{
										//line 669 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										a.push(this.getIdent());
										//line 669 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 673 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.unexpected(tk3);
										//line 674 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break label1;
									}
									
								}
								
							}
							;
							//line 677 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.Object> args = this.parseExprList(hscript.Token.TPClose);
							//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ExprDef e9 = hscript.ExprDef.ENew(a.join("."), args);
							//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmin6 = p1;
							//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object pmax6 = null;
							//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( e9 == null )) 
							{
								//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return null;
							}
							else
							{
								//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmin6, null)) 
								{
									//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmin6 = this.tokenMin;
								}
								
								//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pmax6, null)) 
								{
									//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									pmax6 = this.tokenMax;
								}
								
								//line 678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e9, this.origin, pmax6, pmin6}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
							}
							
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1183997287:
					{
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar11.equals("inline")) 
						{
							//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef12 = false;
							//line 646 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (this.maybe(hscript.Token.TId("function"))) ) 
							{
								//line 646 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.unexpected(hscript.Token.TId("inline"));
							}
							
							//line 647 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseStructure("function");
						}
						
						//line 586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 770 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef12) 
			{
				//line 770 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return null;
			}
			else
			{
				//line 770 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public java.lang.Object parseExprNext(java.lang.Object e1)
	{
		//line 775 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 776 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (tk.index)
		{
			case 3:
			{
				//line 777 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String op = haxe.lang.Runtime.toString(tk.params[0]);
				//line 779 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.valEq(op, "->")) 
				{
					//line 781 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 781 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e1, "e", true)) );
						//line 781 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (_g.index)
						{
							case 1:
							{
								//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String i = haxe.lang.Runtime.toString(_g.params[0]);
								//line 783 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object eret = this.parseExpr();
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.ExprDef e = hscript.ExprDef.EReturn(eret);
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmin = ( (( eret == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(eret, "pmin", true)) )) );
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmax = null;
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object e2 = null;
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( e == null )) 
								{
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									e2 = null;
								}
								else
								{
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmin, null)) 
									{
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmin = this.tokenMin;
									}
									
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmax, null)) 
									{
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmax = this.tokenMax;
									}
									
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									e2 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
								}
								
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.ExprDef e3 = hscript.ExprDef.EFunction(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{i}, new java.lang.String[]{}, new double[]{})}), e2, null, null);
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmin1 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pmax1 = null;
								//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( e3 == null )) 
								{
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return null;
								}
								else
								{
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmin1, null)) 
									{
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmin1 = this.tokenMin;
									}
									
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.eq(pmax1, null)) 
									{
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										pmax1 = this.tokenMax;
									}
									
									//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e3, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
								}
								
							}
							
							
							case 3:
							{
								//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.ExprDef _hx_tmp = ((hscript.ExprDef) (haxe.lang.Runtime.getField(_g.params[0], "e", true)) );
								//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (_hx_tmp.index)
								{
									case 1:
									{
										//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String i1 = haxe.lang.Runtime.toString(_hx_tmp.params[0]);
										//line 783 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object eret1 = this.parseExpr();
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.ExprDef e4 = hscript.ExprDef.EReturn(eret1);
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object pmin2 = ( (( eret1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(eret1, "pmin", true)) )) );
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object pmax2 = null;
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object e5 = null;
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( e4 == null )) 
										{
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											e5 = null;
										}
										else
										{
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.eq(pmin2, null)) 
											{
												//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												pmin2 = this.tokenMin;
											}
											
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.eq(pmax2, null)) 
											{
												//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												pmax2 = this.tokenMax;
											}
											
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											e5 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e4, this.origin, pmax2, pmin2}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
										}
										
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.ExprDef e6 = hscript.ExprDef.EFunction(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{i1}, new java.lang.String[]{}, new double[]{})}), e5, null, null);
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object pmin3 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object pmax3 = null;
										//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( e6 == null )) 
										{
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											return null;
										}
										else
										{
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.eq(pmin3, null)) 
											{
												//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												pmin3 = this.tokenMin;
											}
											
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.eq(pmax3, null)) 
											{
												//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												pmax3 = this.tokenMax;
											}
											
											//line 784 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e6, this.origin, pmax3, pmin3}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
										}
										
									}
									
									
									default:
									{
										//line 788 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
								//line 782 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							case 26:
							{
								//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.CType _g1 = ((hscript.CType) (_g.params[1]) );
								//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.ExprDef _hx_tmp1 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(_g.params[0], "e", true)) );
									//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									switch (_hx_tmp1.index)
									{
										case 1:
										{
											//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.String i2 = haxe.lang.Runtime.toString(_hx_tmp1.params[0]);
											//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.CType t = _g1;
											//line 786 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object eret2 = this.parseExpr();
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.ExprDef e7 = hscript.ExprDef.EReturn(eret2);
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object pmin4 = ( (( eret2 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(eret2, "pmin", true)) )) );
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object pmax4 = null;
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object e8 = null;
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( e7 == null )) 
											{
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												e8 = null;
											}
											else
											{
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												if (haxe.lang.Runtime.eq(pmin4, null)) 
												{
													//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													pmin4 = this.tokenMin;
												}
												
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												if (haxe.lang.Runtime.eq(pmax4, null)) 
												{
													//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													pmax4 = this.tokenMax;
												}
												
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												e8 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e7, this.origin, pmax4, pmin4}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
											}
											
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.ExprDef e9 = hscript.ExprDef.EFunction(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"name", "t"}, new java.lang.Object[]{i2, t}, new java.lang.String[]{}, new double[]{})}), e8, null, null);
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object pmin5 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object pmax5 = null;
											//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( e9 == null )) 
											{
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												return null;
											}
											else
											{
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												if (haxe.lang.Runtime.eq(pmin5, null)) 
												{
													//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													pmin5 = this.tokenMin;
												}
												
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												if (haxe.lang.Runtime.eq(pmax5, null)) 
												{
													//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													pmax5 = this.tokenMax;
												}
												
												//line 787 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e9, this.origin, pmax5, pmin5}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
											}
											
										}
										
										
										default:
										{
											//line 788 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											break;
										}
										
									}
									
								}
								
								//line 785 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							default:
							{
								//line 788 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
						}
						
					}
					
					//line 790 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(tk);
				}
				
				//line 793 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (haxe.lang.Runtime.eq(((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).get(op), -1)) 
				{
					//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					boolean tmp = false;
					//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if ( ! (this.isBlock(e1)) ) 
					{
						//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.ExprDef _g2 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e1, "e", true)) );
						//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (_g2.index)
						{
							case 3:
							{
								//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object _g3 = _g2.params[0];
								//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								tmp = true;
								//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							default:
							{
								//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								tmp = false;
								//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
						}
						
					}
					else
					{
						//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tmp = true;
					}
					
					//line 794 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (tmp) 
					{
						//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
							//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMin = this.oldTokenMin;
							//line 795 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMax = this.oldTokenMax;
						}
						
						//line 796 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return e1;
					}
					
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ExprDef e10 = hscript.ExprDef.EUnop(op, false, e1);
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmin6 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object pmax6 = null;
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object tmp1 = null;
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( e10 == null )) 
					{
						//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tmp1 = null;
					}
					else
					{
						//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmin6, null)) 
						{
							//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmin6 = this.tokenMin;
						}
						
						//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.eq(pmax6, null)) 
						{
							//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							pmax6 = this.tokenMax;
						}
						
						//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tmp1 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e10, this.origin, pmax6, pmin6}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
					}
					
					//line 798 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return this.parseExprNext(tmp1);
				}
				
				//line 800 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.makeBinop(op, e1, this.parseExpr());
			}
			
			
			case 4:
			{
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e11 = hscript.ExprDef.ECall(e1, this.parseExprList(hscript.Token.TPClose));
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin7 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax7 = null;
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object tmp2 = null;
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e11 == null )) 
				{
					//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp2 = null;
				}
				else
				{
					//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin7, null)) 
					{
						//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin7 = this.tokenMin;
					}
					
					//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax7, null)) 
					{
						//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax7 = this.tokenMax;
					}
					
					//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp2 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e11, this.origin, pmax7, pmin7}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 805 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(tmp2);
			}
			
			
			case 8:
			{
				//line 802 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String field = this.getIdent();
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e12 = hscript.ExprDef.EField(e1, field);
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin8 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax8 = null;
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object tmp3 = null;
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e12 == null )) 
				{
					//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp3 = null;
				}
				else
				{
					//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin8, null)) 
					{
						//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin8 = this.tokenMin;
					}
					
					//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax8, null)) 
					{
						//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax8 = this.tokenMax;
					}
					
					//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp3 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e12, this.origin, pmax8, pmin8}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 803 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(tmp3);
			}
			
			
			case 11:
			{
				//line 807 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e21 = this.parseExpr();
				//line 808 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 808 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.Token t1 = this.token();
					//line 808 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( t1 != hscript.Token.TBkClose )) 
					{
						//line 808 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.unexpected(t1);
					}
					
				}
				
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e13 = hscript.ExprDef.EArray(e1, e21);
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin9 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax9 = null;
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object tmp4 = null;
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e13 == null )) 
				{
					//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp4 = null;
				}
				else
				{
					//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin9, null)) 
					{
						//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin9 = this.tokenMin;
					}
					
					//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax9, null)) 
					{
						//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax9 = this.tokenMax;
					}
					
					//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					tmp4 = new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e13, this.origin, pmax9, pmin9}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
				//line 809 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExprNext(tmp4);
			}
			
			
			case 13:
			{
				//line 811 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e22 = this.parseExpr();
				//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.Token t2 = this.token();
					//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( t2 != hscript.Token.TDoubleDot )) 
					{
						//line 812 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.unexpected(t2);
					}
					
				}
				
				//line 813 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e31 = this.parseExpr();
				//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e14 = hscript.ExprDef.ETernary(e1, e22, e31);
				//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin10 = ( (( e1 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e1, "pmin", true)) )) );
				//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax10 = ( (( e31 == null )) ? (0) : (((int) (haxe.lang.Runtime.getField_f(e31, "pmax", true)) )) );
				//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e14 == null )) 
				{
					//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin10, null)) 
					{
						//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin10 = this.tokenMin;
					}
					
					//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax10, null)) 
					{
						//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax10 = this.tokenMax;
					}
					
					//line 814 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e14, this.origin, pmax10, pmin10}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
			
			default:
			{
				//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 816 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 817 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return e1;
			}
			
		}
		
	}
	
	
	public haxe.root.Array<java.lang.Object> parseFunctionArgs()
	{
		//line 822 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> args = new haxe.root.Array<java.lang.Object>();
		//line 823 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 824 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( tk != hscript.Token.TPClose )) 
		{
			//line 825 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean done = false;
			//line 826 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			label1:
			while ( ! (done) )
			{
				//line 827 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String name = null;
				//line 827 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean opt = false;
				//line 828 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (tk.index)
				{
					case 13:
					{
						//line 830 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						opt = true;
						//line 831 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tk = this.token();
						//line 829 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 832 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 834 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (tk.index)
				{
					case 2:
					{
						//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String id = haxe.lang.Runtime.toString(tk.params[0]);
						//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						name = id;
						//line 835 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 837 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.unexpected(tk);
						//line 838 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break label1;
					}
					
				}
				
				//line 840 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object arg = new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{name}, new java.lang.String[]{}, new double[]{});
				//line 841 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				args.push(arg);
				//line 842 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (opt) 
				{
					//line 842 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					haxe.lang.Runtime.setField(arg, "opt", true);
				}
				
				//line 843 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (this.allowTypes) 
				{
					//line 844 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (this.maybe(hscript.Token.TDoubleDot)) 
					{
						//line 845 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.CType __temp_expr1 = ((hscript.CType) (haxe.lang.Runtime.setField(arg, "t", this.parseType())) );
					}
					
					//line 846 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (this.maybe(hscript.Token.TOp("="))) 
					{
						//line 847 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						haxe.lang.Runtime.setField(arg, "value", this.parseExpr());
					}
					
				}
				
				//line 849 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				tk = this.token();
				//line 850 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (tk.index)
				{
					case 5:
					{
						//line 854 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						done = true;
						//line 854 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 9:
					{
						//line 852 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						tk = this.token();
						//line 852 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 856 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.unexpected(tk);
						//line 856 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
			}
			;
		}
		
		//line 860 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return args;
	}
	
	
	public java.lang.Object parseFunctionDecl()
	{
		//line 864 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 864 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token t = this.token();
			//line 864 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( t != hscript.Token.TPOpen )) 
			{
				//line 864 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.unexpected(t);
			}
			
		}
		
		//line 865 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> args = this.parseFunctionArgs();
		//line 866 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.CType ret = null;
		//line 867 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (this.allowTypes) 
		{
			//line 868 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 869 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( tk != hscript.Token.TDoubleDot )) 
			{
				//line 870 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 870 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 870 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			else
			{
				//line 872 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				ret = this.parseType();
			}
			
		}
		
		//line 874 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 874 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.Object __temp_odecl1 = this.parseExpr();
			//line 874 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"args", "body", "ret"}, new java.lang.Object[]{args, __temp_odecl1, ret}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
	public haxe.root.Array<java.lang.String> parsePath()
	{
		//line 878 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.String> path = new haxe.root.Array<java.lang.String>(new java.lang.String[]{this.getIdent()});
		//line 879 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 880 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token t = this.token();
			//line 881 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( t != hscript.Token.TDot )) 
			{
				//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 882 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 883 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			//line 885 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			path.push(this.getIdent());
		}
		
		//line 887 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return path;
	}
	
	
	public hscript.CType parseType()
	{
		//line 891 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token t = this.token();
		//line 890 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Parser _gthis = this;
		//line 892 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (t.index)
		{
			case 2:
			{
				//line 893 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String v = haxe.lang.Runtime.toString(t.params[0]);
				//line 894 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 894 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 894 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 894 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 895 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.String> path = this.parsePath();
				//line 896 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<hscript.CType> params = null;
				//line 897 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				t = this.token();
				//line 898 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (t.index)
				{
					case 3:
					{
						//line 899 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String op = haxe.lang.Runtime.toString(t.params[0]);
						//line 900 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (haxe.lang.Runtime.valEq(op, "<")) 
						{
							//line 901 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							params = new haxe.root.Array<hscript.CType>(new hscript.CType[]{});
							//line 902 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							label1:
							while (true)
							{
								//line 903 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								params.push(this.parseType());
								//line 904 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								t = this.token();
								//line 905 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (t.index)
								{
									case 3:
									{
										//line 907 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String op1 = haxe.lang.Runtime.toString(t.params[0]);
										//line 907 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 908 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.valEq(op1, ">")) 
											{
												//line 908 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break label1;
											}
											
											//line 909 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (haxe.lang.Runtime.eq(haxe.lang.StringExt.charCodeAt(op1, 0), 62)) 
											{
												//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												java.lang.Object __temp_stmt5 = null;
												//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												{
													//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													hscript.Token __temp_odecl1 = hscript.Token.TOp(haxe.lang.StringExt.substr(op1, 1, null));
													//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													__temp_stmt5 = new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (( ( this.tokenMax - op1.length() ) - 1 )) )) )});
												}
												
												//line 911 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokens.add(__temp_stmt5);
												//line 915 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break label1;
											}
											
										}
										
										//line 907 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 9:
									{
										//line 906 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										continue;
									}
									
									
									default:
									{
										//line 917 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
								//line 919 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.unexpected(t);
								//line 920 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							;
						}
						else
						{
							//line 923 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
							//line 923 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMin = this.oldTokenMin;
							//line 923 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMax = this.oldTokenMax;
						}
						
						//line 899 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
						//line 925 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 927 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseTypeNext(hscript.CType.CTPath(path, params));
			}
			
			
			case 4:
			{
				//line 929 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.Token a = this.token();
				//line 929 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.Token b = this.token();
				//line 932 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 932 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{b}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 932 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 932 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 933 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 933 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{a}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 933 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 933 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 935 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.lang.Function withReturn = new hscript.Parser_parseType_935__Fun(_gthis);
				//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (a.index)
				{
					case 2:
					{
						//line 945 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String _g = haxe.lang.Runtime.toString(a.params[0]);
						//line 944 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (b.index)
						{
							case 14:
							{
								//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								haxe.root.Array<hscript.CType> _g1 = new haxe.root.Array<hscript.CType>(new hscript.CType[]{});
								//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									int _g2 = 0;
									//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									haxe.root.Array<java.lang.Object> _g3 = this.parseFunctionArgs();
									//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									while (( _g2 < _g3.length ))
									{
										//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object arg = _g3.__get(_g2);
										//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										 ++ _g2;
										//line 948 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 948 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object _g4 = haxe.lang.Runtime.getField(arg, "value", true);
											//line 949 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( ! (( _g4 == null )) )) 
											{
												//line 950 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												java.lang.Object v1 = _g4;
												//line 951 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												if ( ! (this.resumeErrors) ) 
												{
													//line 951 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.ECustom("Default values not allowed in function types")) ), ((int) (haxe.lang.Runtime.getField_f(v1, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(v1, "pmax", true)) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
												}
												
											}
											
										}
										
										//line 954 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										_g1.push(hscript.CType.CTNamed(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg, "name", true)), ( (haxe.lang.Runtime.toBool(((java.lang.Boolean) ((haxe.lang.Runtime.getField(arg, "opt", true))) ))) ? (hscript.CType.CTOpt(((hscript.CType) (haxe.lang.Runtime.getField(arg, "t", true)) ))) : (((hscript.CType) (haxe.lang.Runtime.getField(arg, "t", true)) )) )));
									}
									
								}
								
								//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								haxe.root.Array<hscript.CType> args = _g1;
								//line 957 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return ((hscript.CType) (withReturn.__hx_invoke1_o(0.0, args)) );
							}
							
							
							default:
							{
								//line 960 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.CType t1 = this.parseType();
								//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token _g5 = this.token();
								//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (_g5.index)
								{
									case 5:
									{
										//line 972 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.parseTypeNext(hscript.CType.CTParent(t1));
									}
									
									
									case 9:
									{
										//line 963 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										haxe.root.Array<hscript.CType> args1 = new haxe.root.Array<hscript.CType>(new hscript.CType[]{t1});
										//line 965 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										while (true)
										{
											//line 966 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											args1.push(this.parseType());
											//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if ( ! (this.maybe(hscript.Token.TComma)) ) 
											{
												//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
										}
										
										//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.Token t2 = this.token();
											//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( t2 != hscript.Token.TPClose )) 
											{
												//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.unexpected(t2);
											}
											
										}
										
										//line 970 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return ((hscript.CType) (withReturn.__hx_invoke1_o(0.0, args1)) );
									}
									
									
									default:
									{
										//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token t3 = _g5;
										//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return ((hscript.CType) (this.unexpected(t3)) );
									}
									
								}
								
							}
							
						}
						
					}
					
					
					case 5:
					{
						//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						haxe.root.Array<hscript.CType> _g6 = new haxe.root.Array<hscript.CType>(new hscript.CType[]{});
						//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int _g7 = 0;
							//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.Object> _g8 = this.parseFunctionArgs();
							//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							while (( _g7 < _g8.length ))
							{
								//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object arg1 = _g8.__get(_g7);
								//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								 ++ _g7;
								//line 948 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 948 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object _g9 = haxe.lang.Runtime.getField(arg1, "value", true);
									//line 949 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( ! (( _g9 == null )) )) 
									{
										//line 950 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object v2 = _g9;
										//line 951 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if ( ! (this.resumeErrors) ) 
										{
											//line 951 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.ECustom("Default values not allowed in function types")) ), ((int) (haxe.lang.Runtime.getField_f(v2, "pmin", true)) ), ((int) (haxe.lang.Runtime.getField_f(v2, "pmax", true)) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
										}
										
									}
									
								}
								
								//line 954 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								_g6.push(hscript.CType.CTNamed(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg1, "name", true)), ( (haxe.lang.Runtime.toBool(((java.lang.Boolean) ((haxe.lang.Runtime.getField(arg1, "opt", true))) ))) ? (hscript.CType.CTOpt(((hscript.CType) (haxe.lang.Runtime.getField(arg1, "t", true)) ))) : (((hscript.CType) (haxe.lang.Runtime.getField(arg1, "t", true)) )) )));
							}
							
						}
						
						//line 947 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						haxe.root.Array<hscript.CType> args2 = _g6;
						//line 957 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return ((hscript.CType) (withReturn.__hx_invoke1_o(0.0, args2)) );
					}
					
					
					default:
					{
						//line 960 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.CType t4 = this.parseType();
						//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						hscript.Token _g10 = this.token();
						//line 961 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (_g10.index)
						{
							case 5:
							{
								//line 972 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.parseTypeNext(hscript.CType.CTParent(t4));
							}
							
							
							case 9:
							{
								//line 963 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								haxe.root.Array<hscript.CType> args3 = new haxe.root.Array<hscript.CType>(new hscript.CType[]{t4});
								//line 965 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								while (true)
								{
									//line 966 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									args3.push(this.parseType());
									//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if ( ! (this.maybe(hscript.Token.TComma)) ) 
									{
										//line 967 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
								//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.Token t5 = this.token();
									//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( t5 != hscript.Token.TPClose )) 
									{
										//line 969 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.unexpected(t5);
									}
									
								}
								
								//line 970 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return ((hscript.CType) (withReturn.__hx_invoke1_o(0.0, args3)) );
							}
							
							
							default:
							{
								//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t6 = _g10;
								//line 973 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return ((hscript.CType) (this.unexpected(t6)) );
							}
							
						}
						
					}
					
				}
				
			}
			
			
			case 6:
			{
				//line 977 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> fields = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 978 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<java.lang.Object> meta = null;
				//line 979 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				label6:
				while (true)
				{
					//line 980 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					t = this.token();
					//line 981 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (t.index)
					{
						case 2:
						{
							//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String _g11 = haxe.lang.Runtime.toString(t.params[0]);
							//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String __temp_svar9 = (_g11);
								//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								boolean __temp_executeDef10 = true;
								//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( __temp_svar9 != null )) 
								{
									//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									switch (__temp_svar9.hashCode())
									{
										case 116519:
										{
											//line 983 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (__temp_svar9.equals("var")) 
											{
												//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												__temp_executeDef10 = false;
												//line 984 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												java.lang.String name = this.getIdent();
												//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												{
													//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													hscript.Token t7 = this.token();
													//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													if (( t7 != hscript.Token.TDoubleDot )) 
													{
														//line 985 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														this.unexpected(t7);
													}
													
												}
												
												//line 986 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												java.lang.Object __temp_stmt7 = null;
												//line 986 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												{
													//line 986 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													hscript.CType __temp_odecl2 = this.parseType();
													//line 986 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"meta", "name", "t"}, new java.lang.Object[]{meta, name, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
												}
												
												//line 986 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												fields.push(__temp_stmt7);
												//line 987 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												meta = null;
												//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												{
													//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													hscript.Token t8 = this.token();
													//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													if (( t8 != hscript.Token.TSemicolon )) 
													{
														//line 988 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														this.unexpected(t8);
													}
													
												}
												
											}
											
											//line 983 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											break;
										}
										
										
									}
									
								}
								
								//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (__temp_executeDef10) 
								{
									//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.String name1 = _g11;
									//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 990 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 990 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.Token t9 = this.token();
											//line 990 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( t9 != hscript.Token.TDoubleDot )) 
											{
												//line 990 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.unexpected(t9);
											}
											
										}
										
										//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object __temp_stmt6 = null;
										//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											hscript.CType __temp_odecl3 = this.parseType();
											//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"meta", "name", "t"}, new java.lang.Object[]{meta, name1, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
										}
										
										//line 991 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										fields.push(__temp_stmt6);
										//line 992 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										t = this.token();
										//line 993 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										switch (t.index)
										{
											case 7:
											{
												//line 995 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break label6;
											}
											
											
											case 9:
											{
												//line 994 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
											
											default:
											{
												//line 996 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.unexpected(t);
												//line 996 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
										}
										
									}
									
								}
								
							}
							
							//line 989 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case 7:
						{
							//line 982 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break label6;
						}
						
						
						case 15:
						{
							//line 998 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String name2 = haxe.lang.Runtime.toString(t.params[0]);
							//line 998 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 999 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( meta == null )) 
								{
									//line 999 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									meta = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
								}
								
								//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object __temp_stmt8 = null;
								//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									haxe.root.Array<java.lang.Object> __temp_odecl4 = this.parseMetaArgs();
									//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "params"}, new java.lang.Object[]{name2, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
								}
								
								//line 1000 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								meta.push(__temp_stmt8);
							}
							
							//line 998 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						default:
						{
							//line 1002 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.unexpected(t);
							//line 1003 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break label6;
						}
						
					}
					
				}
				;
				//line 1006 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseTypeNext(hscript.CType.CTAnon(fields));
			}
			
			
			default:
			{
				//line 1008 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ((hscript.CType) (this.unexpected(t)) );
			}
			
		}
		
	}
	
	
	public hscript.CType parseTypeNext(hscript.CType t)
	{
		//line 1013 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 1014 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (tk.index)
		{
			case 3:
			{
				//line 1015 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String op = haxe.lang.Runtime.toString(tk.params[0]);
				//line 1016 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if ( ! (haxe.lang.Runtime.valEq(op, "->")) ) 
				{
					//line 1017 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 1017 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 1017 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 1017 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
					}
					
					//line 1018 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return t;
				}
				
				//line 1015 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			
			default:
			{
				//line 1021 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1021 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 1021 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 1021 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 1022 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return t;
			}
			
		}
		
		//line 1024 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.CType t2 = this.parseType();
		//line 1025 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (t2.index)
		{
			case 1:
			{
				//line 1026 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.CType _g = ((hscript.CType) (t2.params[1]) );
				//line 1026 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				haxe.root.Array<hscript.CType> args = ((haxe.root.Array<hscript.CType>) (t2.params[0]) );
				//line 1027 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				args.unshift(t);
				//line 1028 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return t2;
			}
			
			
			default:
			{
				//line 1030 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return hscript.CType.CTFun(new haxe.root.Array<hscript.CType>(new hscript.CType[]{t}), t2);
			}
			
		}
		
	}
	
	
	public haxe.root.Array<java.lang.Object> parseExprList(hscript.Token etk)
	{
		//line 1035 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> args = new haxe.root.Array<java.lang.Object>();
		//line 1036 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 1037 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( tk == etk )) 
		{
			//line 1038 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return args;
		}
		
		//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
			//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMin = this.oldTokenMin;
			//line 1039 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMax = this.oldTokenMax;
		}
		
		//line 1040 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 1041 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			args.push(this.parseExpr());
			//line 1042 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			tk = this.token();
			//line 1043 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (tk.index)
			{
				case 9:
				{
					//line 1044 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				default:
				{
					//line 1046 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( tk == etk )) 
					{
						//line 1046 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break label1;
					}
					
					//line 1047 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(tk);
					//line 1048 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
		}
		;
		//line 1051 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return args;
	}
	
	
	public haxe.root.Array<hscript.ModuleDecl> parseModule(java.lang.String content, java.lang.String origin)
	{
		//line 1056 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( origin == null )) 
		{
			//line 1056 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			origin = "hscript";
		}
		
		//line 1057 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.initParser(origin);
		//line 1058 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.input = content;
		//line 1059 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.readPos = 0;
		//line 1060 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.allowTypes = true;
		//line 1061 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.allowMetadata = true;
		//line 1062 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<hscript.ModuleDecl> decls = new haxe.root.Array<hscript.ModuleDecl>(new hscript.ModuleDecl[]{});
		//line 1063 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 1064 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 1065 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( tk == hscript.Token.TEof )) 
			{
				//line 1065 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			//line 1066 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 1066 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
				//line 1066 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMin = this.oldTokenMin;
				//line 1066 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.tokenMax = this.oldTokenMax;
			}
			
			//line 1067 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			decls.push(this.parseModuleDecl());
		}
		
		//line 1069 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return decls;
	}
	
	
	public haxe.root.Array<java.lang.Object> parseMetadata()
	{
		//line 1073 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> meta = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 1074 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 1075 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 1076 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (tk.index)
			{
				case 15:
				{
					//line 1077 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String name = haxe.lang.Runtime.toString(tk.params[0]);
					//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.Object __temp_stmt2 = null;
					//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						haxe.root.Array<java.lang.Object> __temp_odecl1 = this.parseMetaArgs();
						//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						__temp_stmt2 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "params"}, new java.lang.Object[]{name, __temp_odecl1}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 1078 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					meta.push(__temp_stmt2);
					//line 1077 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				default:
				{
					//line 1080 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					{
						//line 1080 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
						//line 1080 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMin = this.oldTokenMin;
						//line 1080 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.tokenMax = this.oldTokenMax;
					}
					
					//line 1081 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
		}
		;
		//line 1084 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return meta;
	}
	
	
	public java.lang.Object parseParams()
	{
		//line 1088 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (this.maybe(hscript.Token.TOp("<"))) 
		{
			//line 1089 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if ( ! (this.resumeErrors) ) 
			{
				//line 1089 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EInvalidOp("Unsupported class type parameters")) ), ((int) (this.readPos) ), ((int) (this.readPos) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
			}
			
		}
		
		//line 1090 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
	}
	
	
	public hscript.ModuleDecl parseModuleDecl()
	{
		//line 1094 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> meta = this.parseMetadata();
		//line 1095 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.String ident = this.getIdent();
		//line 1096 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		boolean isPrivate = false;
		//line 1096 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		boolean isExtern = false;
		//line 1097 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String __temp_svar1 = (ident);
				//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean __temp_executeDef2 = true;
				//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( __temp_svar1 != null )) 
				{
					//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (__temp_svar1.hashCode())
					{
						case -1289044064:
						{
							//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar1.equals("extern")) 
							{
								//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef2 = false;
								//line 1102 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								isExtern = true;
							}
							
							//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case -314497661:
						{
							//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar1.equals("private")) 
							{
								//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef2 = false;
								//line 1100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								isPrivate = true;
							}
							
							//line 1098 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
					}
					
				}
				
				//line 1104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (__temp_executeDef2) 
				{
					//line 1104 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
			//line 1106 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			ident = this.getIdent();
		}
		;
		//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String __temp_svar7 = (ident);
			//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef8 = true;
			//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( __temp_svar7 != null )) 
			{
				//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (__temp_svar7.hashCode())
				{
					case 94742904:
					{
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar7.equals("class")) 
						{
							//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef8 = false;
							//line 1135 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String name = this.getIdent();
							//line 1136 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object params = this.parseParams();
							//line 1137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.CType extend = null;
							//line 1138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<hscript.CType> implement = new haxe.root.Array<hscript.CType>(new hscript.CType[]{});
							//line 1140 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							label2:
							while (true)
							{
								//line 1141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t = this.token();
								//line 1142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (t.index)
								{
									case 2:
									{
										//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.String __temp_svar3 = (haxe.lang.Runtime.toString(t.params[0]));
											//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											boolean __temp_executeDef4 = true;
											//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( __temp_svar3 != null )) 
											{
												//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												switch (__temp_svar3.hashCode())
												{
													case -1305664359:
													{
														//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar3.equals("extends")) 
														{
															//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef4 = false;
															//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															extend = this.parseType();
														}
														
														//line 1144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
													case -915384400:
													{
														//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar3.equals("implements")) 
														{
															//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef4 = false;
															//line 1146 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															implement.push(this.parseType());
														}
														
														//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
												}
												
											}
											
											//line 1147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (__temp_executeDef4) 
											{
												//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												{
													//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
													//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													this.tokenMin = this.oldTokenMin;
													//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													this.tokenMax = this.oldTokenMax;
												}
												
												//line 1149 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break label2;
											}
											
										}
										
										//line 1145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
											//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMin = this.oldTokenMin;
											//line 1148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMax = this.oldTokenMax;
										}
										
										//line 1149 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break label2;
									}
									
								}
								
							}
							;
							//line 1153 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.Object> fields = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
							//line 1154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 1154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t1 = this.token();
								//line 1154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t1 != hscript.Token.TBrOpen )) 
								{
									//line 1154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t1);
								}
								
							}
							
							//line 1155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							while ( ! (this.maybe(hscript.Token.TBrClose)) )
							{
								//line 1156 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								fields.push(this.parseField());
							}
							
							//line 1158 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.ModuleDecl.DClass(new haxe.lang.DynamicObject(new java.lang.String[]{"extend", "fields", "implement", "isExtern", "isPrivate", "meta", "name", "params"}, new java.lang.Object[]{extend, fields, implement, isExtern, isPrivate, meta, name, params}, new java.lang.String[]{}, new double[]{}));
						}
						
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -853085557:
					{
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar7.equals("typedef")) 
						{
							//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef8 = false;
							//line 1169 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String name1 = this.getIdent();
							//line 1170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object params1 = this.parseParams();
							//line 1171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 1171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t5 = this.token();
								//line 1171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Type.enumEq(((hscript.Token) (t5) ), ((hscript.Token) (hscript.Token.TOp("=")) ))) ))) ) 
								{
									//line 1171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t5);
								}
								
							}
							
							//line 1172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.CType t6 = this.parseType();
							//line 1173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.ModuleDecl.DTypedef(new haxe.lang.DynamicObject(new java.lang.String[]{"isPrivate", "meta", "name", "params", "t"}, new java.lang.Object[]{isPrivate, meta, name1, params1, t6}, new java.lang.String[]{}, new double[]{}));
						}
						
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1184795739:
					{
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar7.equals("import")) 
						{
							//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef8 = false;
							//line 1114 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.String> path = new haxe.root.Array<java.lang.String>(new java.lang.String[]{this.getIdent()});
							//line 1115 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							boolean star = false;
							//line 1116 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							while (true)
							{
								//line 1117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t2 = this.token();
								//line 1118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t2 != hscript.Token.TDot )) 
								{
									//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{t2}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
										//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokenMin = this.oldTokenMin;
										//line 1119 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokenMax = this.oldTokenMax;
									}
									
									//line 1120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									break;
								}
								
								//line 1122 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								t2 = this.token();
								//line 1123 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (t2.index)
								{
									case 2:
									{
										//line 1124 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String id = haxe.lang.Runtime.toString(t2.params[0]);
										//line 1125 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										path.push(id);
										//line 1124 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 3:
									{
										//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.String __temp_svar5 = (haxe.lang.Runtime.toString(t2.params[0]));
											//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											boolean __temp_executeDef6 = true;
											//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( __temp_svar5 != null )) 
											{
												//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												switch (__temp_svar5.hashCode())
												{
													case 42:
													{
														//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar5.equals("*")) 
														{
															//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef6 = false;
															//line 1127 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															star = true;
														}
														
														//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
												}
												
											}
											
											//line 1129 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (__temp_executeDef6) 
											{
												//line 1129 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.unexpected(t2);
											}
											
										}
										
										//line 1126 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 1129 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.unexpected(t2);
										//line 1129 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
							}
							
							//line 1132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 1132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t3 = this.token();
								//line 1132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t3 != hscript.Token.TSemicolon )) 
								{
									//line 1132 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t3);
								}
								
							}
							
							//line 1133 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.ModuleDecl.DImport(path, star);
						}
						
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -807062458:
					{
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar7.equals("package")) 
						{
							//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef8 = false;
							//line 1110 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							haxe.root.Array<java.lang.String> path1 = this.parsePath();
							//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							{
								//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token t4 = this.token();
								//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( t4 != hscript.Token.TSemicolon )) 
								{
									//line 1111 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.unexpected(t4);
								}
								
							}
							
							//line 1112 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.ModuleDecl.DPackage(path1);
						}
						
						//line 1108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 1181 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef8) 
			{
				//line 1181 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.unexpected(hscript.Token.TId(ident));
			}
			
		}
		
		//line 1183 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	public java.lang.Object parseField()
	{
		//line 1187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<java.lang.Object> meta = this.parseMetadata();
		//line 1188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.Array<hscript.FieldAccess> access = new haxe.root.Array<hscript.FieldAccess>(new hscript.FieldAccess[]{});
		//line 1189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		label1:
		while (true)
		{
			//line 1190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String id = this.getIdent();
			//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			{
				//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String __temp_svar7 = (id);
				//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean __temp_executeDef8 = true;
				//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( __temp_svar7 != null )) 
				{
					//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (__temp_svar7.hashCode())
					{
						case 1380938712:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("function")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String name = this.getIdent();
								//line 1206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object inf = this.parseFunctionDecl();
								//line 1207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object __temp_stmt6 = null;
									//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 1212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										haxe.root.Array<java.lang.Object> __temp_odecl1 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(inf, "args", true)) );
										//line 1213 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.Object __temp_odecl2 = haxe.lang.Runtime.getField(inf, "body", true);
										//line 1214 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.CType __temp_odecl3 = ((hscript.CType) (haxe.lang.Runtime.getField(inf, "ret", true)) );
										//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"args", "expr", "ret"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
									}
									
									//line 1211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.FieldKind __temp_odecl4 = hscript.FieldKind.KFunction(__temp_stmt6);
									//line 1207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return new haxe.lang.DynamicObject(new java.lang.String[]{"access", "kind", "meta", "name"}, new java.lang.Object[]{access, __temp_odecl4, meta, name}, new java.lang.String[]{}, new double[]{});
								}
								
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case 116519:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("var")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1218 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String name1 = this.getIdent();
								//line 1219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String get = null;
								//line 1219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String set = null;
								//line 1220 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (this.maybe(hscript.Token.TPOpen)) 
								{
									//line 1221 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									get = this.getIdent();
									//line 1222 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 1222 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token t = this.token();
										//line 1222 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( t != hscript.Token.TComma )) 
										{
											//line 1222 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.unexpected(t);
										}
										
									}
									
									//line 1223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									set = this.getIdent();
									//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									{
										//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token t1 = this.token();
										//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( t1 != hscript.Token.TPClose )) 
										{
											//line 1224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.unexpected(t1);
										}
										
									}
									
								}
								
								//line 1226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.CType type = ( (this.maybe(hscript.Token.TDoubleDot)) ? (this.parseType()) : (null) );
								//line 1227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object expr = ( (this.maybe(hscript.Token.TOp("="))) ? (this.parseExpr()) : (null) );
								//line 1229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( ! (( expr == null )) )) 
								{
									//line 1230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (this.isBlock(expr)) 
									{
										//line 1231 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.maybe(hscript.Token.TSemicolon);
									}
									else
									{
										//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token t2 = this.token();
										//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( t2 != hscript.Token.TSemicolon )) 
										{
											//line 1233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.unexpected(t2);
										}
										
									}
									
								}
								else
								{
									//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									boolean tmp = false;
									//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( type != null )) 
									{
										//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( type == null )) 
										{
											//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											tmp = false;
										}
										else
										{
											//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											switch (type.index)
											{
												case 2:
												{
													//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													haxe.root.Array<java.lang.Object> _g = ((haxe.root.Array<java.lang.Object>) (type.params[0]) );
													//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													tmp = true;
													//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													break;
												}
												
												
												default:
												{
													//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													tmp = false;
													//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
													break;
												}
												
											}
											
										}
										
									}
									else
									{
										//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										tmp = false;
									}
									
									//line 1234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (tmp) 
									{
										//line 1235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.maybe(hscript.Token.TSemicolon);
									}
									else
									{
										//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Token t3 = this.token();
										//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( t3 != hscript.Token.TSemicolon )) 
										{
											//line 1237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.unexpected(t3);
										}
										
									}
									
								}
								
								//line 1239 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								{
									//line 1243 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.FieldKind __temp_odecl5 = hscript.FieldKind.KVar(new haxe.lang.DynamicObject(new java.lang.String[]{"expr", "get", "set", "type"}, new java.lang.Object[]{expr, get, set, type}, new java.lang.String[]{}, new double[]{}));
									//line 1239 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return new haxe.lang.DynamicObject(new java.lang.String[]{"access", "kind", "meta", "name"}, new java.lang.Object[]{access, __temp_odecl5, meta, name1}, new java.lang.String[]{}, new double[]{});
								}
								
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case -1183997287:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("inline")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1199 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.AInline);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case -892481938:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("static")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1201 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.AStatic);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case 103652300:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("macro")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1203 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.AMacro);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case -977423767:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("public")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.APublic);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case 529996748:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("override")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.AOverride);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
						case -314497661:
						{
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (__temp_svar7.equals("private")) 
							{
								//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								__temp_executeDef8 = false;
								//line 1197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								access.push(hscript.FieldAccess.APrivate);
							}
							
							//line 1191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							break;
						}
						
						
					}
					
				}
				
				//line 1250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (__temp_executeDef8) 
				{
					//line 1251 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.unexpected(hscript.Token.TId(id));
					//line 1252 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break label1;
				}
				
			}
			
		}
		;
		//line 1255 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	public final int readChar()
	{
		//line 1261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.String s = this.input;
		//line 1261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int index = this.readPos++;
		//line 1261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( index < s.length() )) 
		{
			//line 1261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return ((int) (((java.lang.String) (((java.lang.Object) (s) )) ).charAt(index)) );
		}
		else
		{
			//line 1261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return -1;
		}
		
	}
	
	
	public java.lang.String readString(int until)
	{
		//line 1265 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int c = 0;
		//line 1266 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		haxe.root.StringBuf b = new haxe.root.StringBuf();
		//line 1267 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		boolean esc = false;
		//line 1268 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int old = this.line;
		//line 1269 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.String s = this.input;
		//line 1271 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int p1 = ( this.readPos - 1 );
		//line 1273 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 1274 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String s1 = this.input;
			//line 1274 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int index = this.readPos++;
			//line 1274 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int c1 = ( (( index < s1.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s1) )) ).charAt(index)) )) : (-1) );
			//line 1275 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( c1 == -1 )) 
			{
				//line 1276 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this.line = old;
				//line 1277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if ( ! (this.resumeErrors) ) 
				{
					//line 1277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EUnterminatedString) ), ((int) (p1) ), ((int) (p1) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
				}
				
				//line 1278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
			//line 1280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (esc) 
			{
				//line 1281 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				esc = false;
				//line 1282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (c1)
				{
					case 34:
					case 39:
					case 92:
					{
						//line 1286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(c1);
						//line 1286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 47:
					{
						//line 1287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (this.allowJSON) 
						{
							//line 1287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							b.addChar(c1);
						}
						else
						{
							//line 1287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.invalidChar(c1);
						}
						
						//line 1287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110:
					{
						//line 1283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(10);
						//line 1283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 114:
					{
						//line 1284 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(13);
						//line 1284 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 116:
					{
						//line 1285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(9);
						//line 1285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 117:
					{
						//line 1289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if ( ! (this.allowJSON) ) 
						{
							//line 1289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.invalidChar(c1);
						}
						
						//line 1290 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						int k = 0;
						//line 1291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 1291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int _g = 0;
							//line 1291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							while (( _g < 4 ))
							{
								//line 1291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int i = _g++;
								//line 1292 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								k <<= 4;
								//line 1293 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String s2 = this.input;
								//line 1293 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int index1 = this.readPos++;
								//line 1293 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int _char = ( (( index1 < s2.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s2) )) ).charAt(index1)) )) : (-1) );
								//line 1294 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (_char)
								{
									case 48:
									case 49:
									case 50:
									case 51:
									case 52:
									case 53:
									case 54:
									case 55:
									case 56:
									case 57:
									{
										//line 1296 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										k += ( _char - 48 );
										//line 1296 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 65:
									case 66:
									case 67:
									case 68:
									case 69:
									case 70:
									{
										//line 1298 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										k += ( _char - 55 );
										//line 1298 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 97:
									case 98:
									case 99:
									case 100:
									case 101:
									case 102:
									{
										//line 1300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										k += ( _char - 87 );
										//line 1300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 1302 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (( _char == -1 )) 
										{
											//line 1303 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.line = old;
											//line 1304 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if ( ! (this.resumeErrors) ) 
											{
												//line 1304 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EUnterminatedString) ), ((int) (p1) ), ((int) (p1) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
											}
											
										}
										
										//line 1306 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.invalidChar(_char);
										//line 1301 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
							}
							
						}
						
						//line 1309 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(k);
						//line 1288 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					default:
					{
						//line 1310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.invalidChar(c1);
						//line 1310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
			}
			else
			{
				//line 1312 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( c1 == 92 )) 
				{
					//line 1313 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					esc = true;
				}
				else
				{
					//line 1314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( c1 == until )) 
					{
						//line 1315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					else
					{
						//line 1317 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( c1 == 10 )) 
						{
							//line 1317 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.line++;
						}
						
						//line 1318 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						b.addChar(c1);
					}
					
				}
				
			}
			
		}
		
		//line 1321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return b.toString();
	}
	
	
	public hscript.Token token()
	{
		//line 1326 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object t = this.tokens.pop();
		//line 1327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( ! (( t == null )) )) 
		{
			//line 1328 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMin = ((int) (haxe.lang.Runtime.getField_f(t, "min", true)) );
			//line 1329 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this.tokenMax = ((int) (haxe.lang.Runtime.getField_f(t, "max", true)) );
			//line 1330 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return ((hscript.Token) (haxe.lang.Runtime.getField(t, "t", true)) );
		}
		
		//line 1332 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.oldTokenMin = this.tokenMin;
		//line 1333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.oldTokenMax = this.tokenMax;
		//line 1334 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMin = ( (( this._char < 0 )) ? (this.readPos) : (( this.readPos - 1 )) );
		//line 1335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token t1 = this._token();
		//line 1336 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this.tokenMax = ( (( this._char < 0 )) ? (( this.readPos - 1 )) : (( this.readPos - 2 )) );
		//line 1337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return t1;
	}
	
	
	public hscript.Token _token()
	{
		//line 1345 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int _char = 0;
		//line 1346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (( this._char < 0 )) 
		{
			//line 1347 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String s = this.input;
			//line 1347 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int index = this.readPos++;
			//line 1347 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			_char = ( (( index < s.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s) )) ).charAt(index)) )) : (-1) );
		}
		else
		{
			//line 1349 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			_char = this._char;
			//line 1350 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this._char = -1;
		}
		
		//line 1352 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 1353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( _char == -1 )) 
			{
				//line 1354 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this._char = _char;
				//line 1355 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return hscript.Token.TEof;
			}
			
			//line 1357 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			switch (_char)
			{
				case 0:
				{
					//line 1359 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TEof;
				}
				
				
				case 10:
				{
					//line 1364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.line++;
					//line 1366 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin++;
					//line 1364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 9:
				case 13:
				case 32:
				{
					//line 1362 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin++;
					//line 1362 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 35:
				{
					//line 1512 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String s1 = this.input;
					//line 1512 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int index1 = this.readPos++;
					//line 1512 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					_char = ( (( index1 < s1.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s1) )) ).charAt(index1)) )) : (-1) );
					//line 1513 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) ))) 
					{
						//line 1514 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String id = new java.lang.String( java.lang.Character.toChars((int) _char) );
						//line 1515 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						while (true)
						{
							//line 1516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String s2 = this.input;
							//line 1516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int index2 = this.readPos++;
							//line 1516 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							_char = ( (( index2 < s2.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s2) )) ).charAt(index2)) )) : (-1) );
							//line 1517 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) ))) ) 
							{
								//line 1518 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1519 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.preprocess(id);
							}
							
							//line 1521 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							id += new java.lang.String( java.lang.Character.toChars((int) _char) );
						}
						
					}
					
					//line 1524 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.invalidChar(_char);
					//line 1511 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 34:
				case 39:
				{
					//line 1486 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TConst(hscript.Const.CString(this.readString(_char)));
				}
				
				
				case 40:
				{
					//line 1453 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TPOpen;
				}
				
				
				case 41:
				{
					//line 1454 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TPClose;
				}
				
				
				case 44:
				{
					//line 1455 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TComma;
				}
				
				
				case 46:
				{
					//line 1457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String s3 = this.input;
					//line 1457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int index3 = this.readPos++;
					//line 1457 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					_char = ( (( index3 < s3.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s3) )) ).charAt(index3)) )) : (-1) );
					//line 1458 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					switch (_char)
					{
						case 46:
						{
							//line 1474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String s4 = this.input;
							//line 1474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int index4 = this.readPos++;
							//line 1474 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							_char = ( (( index4 < s4.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s4) )) ).charAt(index4)) )) : (-1) );
							//line 1475 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( _char != 46 )) 
							{
								//line 1476 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.invalidChar(_char);
							}
							
							//line 1477 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.Token.TOp("...");
						}
						
						
						case 48:
						case 49:
						case 50:
						case 51:
						case 52:
						case 53:
						case 54:
						case 55:
						case 56:
						case 57:
						{
							//line 1460 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int n = ( _char - 48 );
							//line 1461 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int exp = 1;
							//line 1462 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							while (true)
							{
								//line 1463 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.String s5 = this.input;
								//line 1463 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int index5 = this.readPos++;
								//line 1463 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								_char = ( (( index5 < s5.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s5) )) ).charAt(index5)) )) : (-1) );
								//line 1464 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								exp *= 10;
								//line 1465 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (_char)
								{
									case 48:
									case 49:
									case 50:
									case 51:
									case 52:
									case 53:
									case 54:
									case 55:
									case 56:
									case 57:
									{
										//line 1467 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										n = ( ( n * 10 ) + (( _char - 48 )) );
										//line 1467 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 1469 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this._char = _char;
										//line 1470 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return hscript.Token.TConst(hscript.Const.CFloat(( ((double) (n) ) / exp )));
									}
									
								}
								
							}
							
						}
						
						
						default:
						{
							//line 1479 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this._char = _char;
							//line 1480 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.Token.TDot;
						}
						
					}
					
				}
				
				
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				{
					//line 1369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					double n1 = ( (( _char - 48 )) * 1.0 );
					//line 1370 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					double exp1 = 0.;
					//line 1371 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					while (true)
					{
						//line 1372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String s6 = this.input;
						//line 1372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						int index6 = this.readPos++;
						//line 1372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						_char = ( (( index6 < s6.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s6) )) ).charAt(index6)) )) : (-1) );
						//line 1373 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						exp1 *= ((double) (10) );
						//line 1374 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (_char)
						{
							case 46:
							{
								//line 1395 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( exp1 > 0 )) 
								{
									//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									boolean tmp = false;
									//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( exp1 == 10 )) 
									{
										//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										java.lang.String s7 = this.input;
										//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										int index7 = this.readPos++;
										//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										tmp = ( (( (( index7 < s7.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s7) )) ).charAt(index7)) )) : (-1) )) == 46 );
									}
									else
									{
										//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										tmp = false;
									}
									
									//line 1397 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (tmp) 
									{
										//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.Object __temp_stmt2 = null;
											//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											{
												//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												hscript.Token __temp_odecl1 = hscript.Token.TOp("...");
												//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												__temp_stmt2 = new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )});
											}
											
											//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokens.push(__temp_stmt2);
											//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMin = this.oldTokenMin;
											//line 1398 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this.tokenMax = this.oldTokenMax;
										}
										
										//line 1399 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										int i = ((int) (n1) );
										//line 1400 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return hscript.Token.TConst(( (( i == n1 )) ? (hscript.Const.CInt(i)) : (hscript.Const.CFloat(n1)) ));
									}
									
									//line 1402 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.invalidChar(_char);
								}
								
								//line 1404 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								exp1 = 1.;
								//line 1394 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							case 48:
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
							{
								//line 1376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								n1 = ( ( n1 * 10 ) + (( _char - 48 )) );
								//line 1376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							case 69:
							case 101:
							{
								//line 1378 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								hscript.Token tk = this.token();
								//line 1379 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								java.lang.Object pow = null;
								//line 1380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								switch (tk.index)
								{
									case 1:
									{
										//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										hscript.Const _g = ((hscript.Const) (tk.params[0]) );
										//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										switch (_g.index)
										{
											case 0:
											{
												//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												int e = ((int) (haxe.lang.Runtime.toInt(_g.params[0])) );
												//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												pow = e;
												//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
											
											default:
											{
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokenMin = this.oldTokenMin;
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokenMax = this.oldTokenMax;
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												break;
											}
											
										}
										
										//line 1381 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									case 3:
									{
										//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										{
											//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											java.lang.String __temp_svar3 = (haxe.lang.Runtime.toString(tk.params[0]));
											//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											boolean __temp_executeDef4 = true;
											//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (( __temp_svar3 != null )) 
											{
												//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												switch (__temp_svar3.hashCode())
												{
													case 45:
													{
														//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														if (__temp_svar3.equals("-")) 
														{
															//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															__temp_executeDef4 = false;
															//line 1383 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															tk = this.token();
															//line 1384 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
															switch (tk.index)
															{
																case 1:
																{
																	//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	hscript.Const _g1 = ((hscript.Const) (tk.params[0]) );
																	//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	switch (_g1.index)
																	{
																		case 0:
																		{
																			//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			int e1 = ((int) (haxe.lang.Runtime.toInt(_g1.params[0])) );
																			//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			pow =  - (e1) ;
																			//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			break;
																		}
																		
																		
																		default:
																		{
																			//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
																			//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			this.tokenMin = this.oldTokenMin;
																			//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			this.tokenMax = this.oldTokenMax;
																			//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																			break;
																		}
																		
																	}
																	
																	//line 1385 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	break;
																}
																
																
																default:
																{
																	//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
																	//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMin = this.oldTokenMin;
																	//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	this.tokenMax = this.oldTokenMax;
																	//line 1386 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
																	break;
																}
																
															}
															
														}
														
														//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
														break;
													}
													
													
												}
												
											}
											
											//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											if (__temp_executeDef4) 
											{
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokenMin = this.oldTokenMin;
												//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
												this.tokenMax = this.oldTokenMax;
											}
											
										}
										
										//line 1382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
									
									default:
									{
										//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
										//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokenMin = this.oldTokenMin;
										//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.tokenMax = this.oldTokenMax;
										//line 1389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										break;
									}
									
								}
								
								//line 1391 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.eq(pow, null)) 
								{
									//line 1392 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.invalidChar(_char);
								}
								
								//line 1393 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TConst(hscript.Const.CFloat(( ( ( java.lang.Math.pow(((double) (10) ), ((double) (haxe.lang.Runtime.toDouble(pow)) )) / exp1 ) * n1 ) * 10 )));
							}
							
							
							case 120:
							{
								//line 1406 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( ( n1 > 0 ) || ( exp1 > 0 ) )) 
								{
									//line 1407 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.invalidChar(_char);
								}
								
								//line 1410 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int n2 = 0;
								//line 1411 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								while (true)
								{
									//line 1412 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.String s8 = this.input;
									//line 1412 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									int index8 = this.readPos++;
									//line 1412 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									_char = ( (( index8 < s8.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s8) )) ).charAt(index8)) )) : (-1) );
									//line 1413 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									switch (_char)
									{
										case 48:
										case 49:
										case 50:
										case 51:
										case 52:
										case 53:
										case 54:
										case 55:
										case 56:
										case 57:
										{
											//line 1415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											n2 = ( ( (( n2 << 4 )) + _char ) - 48 );
											//line 1415 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											break;
										}
										
										
										case 65:
										case 66:
										case 67:
										case 68:
										case 69:
										case 70:
										{
											//line 1417 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											n2 = ( (( n2 << 4 )) + (( _char - 55 )) );
											//line 1417 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											break;
										}
										
										
										case 97:
										case 98:
										case 99:
										case 100:
										case 101:
										case 102:
										{
											//line 1419 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											n2 = ( (( n2 << 4 )) + (( _char - 87 )) );
											//line 1419 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											break;
										}
										
										
										default:
										{
											//line 1421 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											this._char = _char;
											//line 1422 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											return hscript.Token.TConst(hscript.Const.CInt(n2));
										}
										
									}
									
								}
								
							}
							
							
							default:
							{
								//line 1447 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1448 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								int i1 = ((int) (n1) );
								//line 1449 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TConst(( (( exp1 > 0 )) ? (hscript.Const.CFloat(( ( n1 * 10 ) / exp1 ))) : (( (( i1 == n1 )) ? (hscript.Const.CInt(i1)) : (hscript.Const.CFloat(n1)) )) ));
							}
							
						}
						
					}
					
				}
				
				
				case 58:
				{
					//line 1488 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TDoubleDot;
				}
				
				
				case 59:
				{
					//line 1452 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TSemicolon;
				}
				
				
				case 61:
				{
					//line 1490 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String s9 = this.input;
					//line 1490 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int index9 = this.readPos++;
					//line 1490 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					_char = ( (( index9 < s9.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s9) )) ).charAt(index9)) )) : (-1) );
					//line 1491 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( _char == 61 )) 
					{
						//line 1492 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return hscript.Token.TOp("==");
					}
					else
					{
						//line 1493 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( _char == 62 )) 
						{
							//line 1494 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return hscript.Token.TOp("=>");
						}
						
					}
					
					//line 1495 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this._char = _char;
					//line 1496 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TOp("=");
				}
				
				
				case 63:
				{
					//line 1487 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TQuestion;
				}
				
				
				case 64:
				{
					//line 1498 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String s10 = this.input;
					//line 1498 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int index10 = this.readPos++;
					//line 1498 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					_char = ( (( index10 < s10.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s10) )) ).charAt(index10)) )) : (-1) );
					//line 1499 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) )) || ( _char == 58 ) )) 
					{
						//line 1500 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String id1 = new java.lang.String( java.lang.Character.toChars((int) _char) );
						//line 1501 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						while (true)
						{
							//line 1502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String s11 = this.input;
							//line 1502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int index11 = this.readPos++;
							//line 1502 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							_char = ( (( index11 < s11.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s11) )) ).charAt(index11)) )) : (-1) );
							//line 1503 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) ))) ) 
							{
								//line 1504 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1505 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TMeta(id1);
							}
							
							//line 1507 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							id1 += new java.lang.String( java.lang.Character.toChars((int) _char) );
						}
						
					}
					
					//line 1510 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.invalidChar(_char);
					//line 1497 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				
				case 91:
				{
					//line 1484 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TBkOpen;
				}
				
				
				case 93:
				{
					//line 1485 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TBkClose;
				}
				
				
				case 123:
				{
					//line 1482 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TBrOpen;
				}
				
				
				case 125:
				{
					//line 1483 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return hscript.Token.TBrClose;
				}
				
				
				default:
				{
					//line 1526 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.ops.__get(_char)) ))) 
					{
						//line 1527 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String op = new java.lang.String( java.lang.Character.toChars((int) _char) );
						//line 1528 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						while (true)
						{
							//line 1529 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String s12 = this.input;
							//line 1529 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int index12 = this.readPos++;
							//line 1529 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							_char = ( (( index12 < s12.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s12) )) ).charAt(index12)) )) : (-1) );
							//line 1530 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( _char == -1 )) 
							{
								//line 1530 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								_char = 0;
							}
							
							//line 1531 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.ops.__get(_char)) ))) ) 
							{
								//line 1532 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1533 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TOp(op);
							}
							
							//line 1535 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String pop = op;
							//line 1536 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							op += new java.lang.String( java.lang.Character.toChars((int) _char) );
							//line 1537 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ((  ! (((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).exists(op))  && ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.opPriority) )) ).exists(pop) )) 
							{
								//line 1538 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (( haxe.lang.Runtime.valEq(op, "//") || haxe.lang.Runtime.valEq(op, "/*") )) 
								{
									//line 1539 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return this.tokenComment(op, _char);
								}
								
								//line 1540 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1541 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TOp(pop);
							}
							
						}
						
					}
					
					//line 1545 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) ))) 
					{
						//line 1546 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						java.lang.String id2 = new java.lang.String( java.lang.Character.toChars((int) _char) );
						//line 1547 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						while (true)
						{
							//line 1548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.String s13 = this.input;
							//line 1548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							int index13 = this.readPos++;
							//line 1548 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							_char = ( (( index13 < s13.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s13) )) ).charAt(index13)) )) : (-1) );
							//line 1549 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( _char == -1 )) 
							{
								//line 1549 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								_char = 0;
							}
							
							//line 1550 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (this.idents.__get(_char)) ))) ) 
							{
								//line 1551 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this._char = _char;
								//line 1552 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TId(id2);
							}
							
							//line 1554 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							id2 += new java.lang.String( java.lang.Character.toChars((int) _char) );
						}
						
					}
					
					//line 1557 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.invalidChar(_char);
					//line 1525 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
			}
			
			//line 1559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String s14 = this.input;
			//line 1559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int index14 = this.readPos++;
			//line 1559 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			_char = ( (( index14 < s14.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s14) )) ).charAt(index14)) )) : (-1) );
		}
		
	}
	
	
	public java.lang.Object preprocValue(java.lang.String id)
	{
		//line 1565 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return ((haxe.ds.StringMap) (((haxe.IMap) (this.preprocesorValues) )) ).get(id);
	}
	
	
	public haxe.root.Array<java.lang.Object> preprocStack;
	
	public java.lang.Object parsePreproCond()
	{
		//line 1571 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.Token tk = this.token();
		//line 1572 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (tk.index)
		{
			case 2:
			{
				//line 1576 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id = haxe.lang.Runtime.toString(tk.params[0]);
				//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.ExprDef e = hscript.ExprDef.EIdent(id);
				//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmin = this.tokenMin;
				//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object pmax = this.tokenMax;
				//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( e == null )) 
				{
					//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return null;
				}
				else
				{
					//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmin, null)) 
					{
						//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmin = this.tokenMin;
					}
					
					//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (haxe.lang.Runtime.eq(pmax, null)) 
					{
						//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						pmax = this.tokenMax;
					}
					
					//line 1577 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e, this.origin, pmax, pmin}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
				}
				
			}
			
			
			case 3:
			{
				//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String __temp_svar1 = (haxe.lang.Runtime.toString(tk.params[0]));
					//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					boolean __temp_executeDef2 = true;
					//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( __temp_svar1 != null )) 
					{
						//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (__temp_svar1.hashCode())
						{
							case 33:
							{
								//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (__temp_svar1.equals("!")) 
								{
									//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									__temp_executeDef2 = false;
									//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									hscript.ExprDef e1 = hscript.ExprDef.EUnop("!", true, this.parsePreproCond());
									//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmin1 = this.tokenMin;
									//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object pmax1 = this.tokenMax;
									//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (( e1 == null )) 
									{
										//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return null;
									}
									else
									{
										//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmin1, null)) 
										{
											//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmin1 = this.tokenMin;
										}
										
										//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										if (haxe.lang.Runtime.eq(pmax1, null)) 
										{
											//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
											pmax1 = this.tokenMax;
										}
										
										//line 1579 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin", "pmax", "pmin"}, new java.lang.Object[]{e1, this.origin, pmax1, pmin1}, new java.lang.String[]{"line"}, new double[]{((double) (((double) (this.line) )) )});
									}
									
								}
								
								//line 1578 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
						}
						
					}
					
					//line 1581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (__temp_executeDef2) 
					{
						//line 1581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return this.unexpected(tk);
					}
					else
					{
						//line 1581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						throw null;
					}
					
				}
				
			}
			
			
			case 4:
			{
				//line 1574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{hscript.Token.TPOpen}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 1574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 1574 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 1575 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.parseExpr();
			}
			
			
			default:
			{
				//line 1581 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.unexpected(tk);
			}
			
		}
		
	}
	
	
	public boolean evalPreproCond(java.lang.Object e)
	{
		//line 1586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		hscript.ExprDef _g = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
		//line 1586 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (_g.index)
		{
			case 1:
			{
				//line 1587 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id = haxe.lang.Runtime.toString(_g.params[0]);
				//line 1588 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ( ! (( this.preprocValue(id) == null )) );
			}
			
			
			case 3:
			{
				//line 1591 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object e1 = _g.params[0];
				//line 1592 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.evalPreproCond(e1);
			}
			
			
			case 6:
			{
				//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g1 = _g.params[1];
				//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g2 = _g.params[2];
				//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String __temp_svar1 = (haxe.lang.Runtime.toString(_g.params[0]));
					//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					boolean __temp_executeDef2 = true;
					//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( __temp_svar1 != null )) 
					{
						//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (__temp_svar1.hashCode())
						{
							case 1216:
							{
								//line 1593 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (__temp_svar1.equals("&&")) 
								{
									//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									__temp_executeDef2 = false;
									//line 1593 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object e11 = _g1;
									//line 1593 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object e2 = _g2;
									//line 1594 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (this.evalPreproCond(e11)) 
									{
										//line 1594 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.evalPreproCond(e2);
									}
									else
									{
										//line 1594 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return false;
									}
									
								}
								
								//line 1593 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
							case 3968:
							{
								//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (__temp_svar1.equals("||")) 
								{
									//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									__temp_executeDef2 = false;
									//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object e12 = _g1;
									//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object e21 = _g2;
									//line 1596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if ( ! (this.evalPreproCond(e12)) ) 
									{
										//line 1596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.evalPreproCond(e21);
									}
									else
									{
										//line 1596 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return true;
									}
									
								}
								
								//line 1595 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
						}
						
					}
					
					//line 1597 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (__temp_executeDef2) 
					{
						//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ErrorDef err = hscript.ErrorDef.EInvalidPreprocessor(( "Can\'t eval " + haxe.root.Type.enumConstructor(((java.lang.Object) (haxe.lang.Runtime.getField(e, "e", true)) )) ));
							//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (this.resumeErrors) ) 
							{
								//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (err) ), ((int) (this.readPos) ), ((int) (this.readPos) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
							}
							
						}
						
						//line 1599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return false;
					}
					else
					{
						//line 1597 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						throw null;
					}
					
				}
				
			}
			
			
			case 7:
			{
				//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				boolean _g3 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (_g.params[1]) ));
				//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.Object _g4 = _g.params[2];
				//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String __temp_svar3 = (haxe.lang.Runtime.toString(_g.params[0]));
					//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					boolean __temp_executeDef4 = true;
					//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( __temp_svar3 != null )) 
					{
						//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						switch (__temp_svar3.hashCode())
						{
							case 33:
							{
								//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (__temp_svar3.equals("!")) 
								{
									//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									__temp_executeDef4 = false;
									//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									java.lang.Object e3 = _g4;
									//line 1590 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return  ! (this.evalPreproCond(e3)) ;
								}
								
								//line 1589 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								break;
							}
							
							
						}
						
					}
					
					//line 1597 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (__temp_executeDef4) 
					{
						//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						{
							//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							hscript.ErrorDef err1 = hscript.ErrorDef.EInvalidPreprocessor(( "Can\'t eval " + haxe.root.Type.enumConstructor(((java.lang.Object) (haxe.lang.Runtime.getField(e, "e", true)) )) ));
							//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if ( ! (this.resumeErrors) ) 
							{
								//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (err1) ), ((int) (this.readPos) ), ((int) (this.readPos) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
							}
							
						}
						
						//line 1599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						return false;
					}
					else
					{
						//line 1597 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						throw null;
					}
					
				}
				
			}
			
			
			default:
			{
				//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					hscript.ErrorDef err2 = hscript.ErrorDef.EInvalidPreprocessor(( "Can\'t eval " + haxe.root.Type.enumConstructor(((java.lang.Object) (haxe.lang.Runtime.getField(e, "e", true)) )) ));
					//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if ( ! (this.resumeErrors) ) 
					{
						//line 1598 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (err2) ), ((int) (this.readPos) ), ((int) (this.readPos) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
					}
					
				}
				
				//line 1599 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return false;
			}
			
		}
		
	}
	
	
	public hscript.Token preprocess(java.lang.String id)
	{
		//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			java.lang.String __temp_svar2 = (id);
			//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int __temp_hash4 = __temp_svar2.hashCode();
			//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef3 = true;
			//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( __temp_svar2 != null )) 
			{
				//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (__temp_hash4)
				{
					case -1300156394:
					case 3116345:
					{
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (( (( ( __temp_hash4 == -1300156394 ) && __temp_svar2.equals("elseif") )) || __temp_svar2.equals("else") )) 
						{
							//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef3 = false;
							//line 1614 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( this.preprocStack.length > 0 )) 
							{
								//line 1615 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(this.preprocStack.__get(( this.preprocStack.length - 1 )), "r", true)) ))) 
								{
									//line 1616 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									boolean __temp_expr1 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.setField(this.preprocStack.__get(( this.preprocStack.length - 1 )), "r", false)) ));
									//line 1617 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									this.skipTokens();
									//line 1618 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									return this.token();
								}
								else
								{
									//line 1619 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
									if (haxe.lang.Runtime.valEq(id, "else")) 
									{
										//line 1620 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.preprocStack.pop();
										//line 1621 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.preprocStack.push(new haxe.lang.DynamicObject(new java.lang.String[]{"r"}, new java.lang.Object[]{true}, new java.lang.String[]{}, new double[]{}));
										//line 1622 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.token();
									}
									else
									{
										//line 1625 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										this.preprocStack.pop();
										//line 1626 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
										return this.preprocess("if");
									}
									
								}
								
							}
							else
							{
								//line 1632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TPrepro(id);
							}
							
						}
						
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3357:
					{
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar2.equals("if")) 
						{
							//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef3 = false;
							//line 1606 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							java.lang.Object e = this.parsePreproCond();
							//line 1607 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (this.evalPreproCond(e)) 
							{
								//line 1608 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.preprocStack.push(new haxe.lang.DynamicObject(new java.lang.String[]{"r"}, new java.lang.Object[]{true}, new java.lang.String[]{}, new double[]{}));
								//line 1609 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.token();
							}
							
							//line 1611 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.preprocStack.push(new haxe.lang.DynamicObject(new java.lang.String[]{"r"}, new java.lang.Object[]{false}, new java.lang.String[]{}, new double[]{}));
							//line 1612 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.skipTokens();
							//line 1613 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.token();
						}
						
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 100571:
					{
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (__temp_svar2.equals("end")) 
						{
							//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef3 = false;
							//line 1628 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							if (( this.preprocStack.length > 0 )) 
							{
								//line 1629 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								this.preprocStack.pop();
								//line 1630 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return this.token();
							}
							else
							{
								//line 1632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
								return hscript.Token.TPrepro(id);
							}
							
						}
						
						//line 1604 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 1632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef3) 
			{
				//line 1632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return hscript.Token.TPrepro(id);
			}
			else
			{
				//line 1632 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public void skipTokens()
	{
		//line 1637 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int spos = ( this.preprocStack.length - 1 );
		//line 1638 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object obj = this.preprocStack.__get(spos);
		//line 1639 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		int pos = this.readPos;
		//line 1640 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		while (true)
		{
			//line 1641 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			hscript.Token tk = this.token();
			//line 1642 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( tk == hscript.Token.TEof )) 
			{
				//line 1643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if ( ! (this.resumeErrors) ) 
				{
					//line 1643 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EInvalidPreprocessor("Unclosed")) ), ((int) (pos) ), ((int) (pos) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
				}
				
			}
			
			//line 1644 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( ! (haxe.lang.Runtime.refEq(this.preprocStack.__get(spos), obj)) )) 
			{
				//line 1645 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				{
					//line 1645 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokens.push(new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{tk}, new java.lang.String[]{"max", "min"}, new double[]{((double) (((double) (this.tokenMax) )) ), ((double) (((double) (this.tokenMin) )) )}));
					//line 1645 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMin = this.oldTokenMin;
					//line 1645 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.tokenMax = this.oldTokenMax;
				}
				
				//line 1646 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				break;
			}
			
		}
		
	}
	
	
	public hscript.Token tokenComment(java.lang.String op, int _char)
	{
		//line 1652 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.Object c = haxe.lang.StringExt.charCodeAt(op, 1);
		//line 1653 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		java.lang.String s = this.input;
		//line 1654 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (haxe.lang.Runtime.eq(c, 47)) 
		{
			//line 1655 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			while (( ( _char != 13 ) && ( _char != 10 ) ))
			{
				//line 1656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String s1 = this.input;
				//line 1656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int index = this.readPos++;
				//line 1656 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				_char = ( (( index < s1.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s1) )) ).charAt(index)) )) : (-1) );
				//line 1657 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( _char == -1 )) 
				{
					//line 1657 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
			}
			
			//line 1659 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			this._char = _char;
			//line 1660 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return this.token();
		}
		
		//line 1662 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		if (haxe.lang.Runtime.eq(c, 42)) 
		{
			//line 1663 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			int old = this.line;
			//line 1664 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (haxe.lang.Runtime.valEq(op, "/**/")) 
			{
				//line 1665 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				this._char = _char;
				//line 1666 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.token();
			}
			
			//line 1668 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			while (true)
			{
				//line 1669 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				while (( _char != 42 ))
				{
					//line 1670 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( _char == 10 )) 
					{
						//line 1670 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.line++;
					}
					
					//line 1671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					java.lang.String s2 = this.input;
					//line 1671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					int index1 = this.readPos++;
					//line 1671 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					_char = ( (( index1 < s2.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s2) )) ).charAt(index1)) )) : (-1) );
					//line 1672 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if (( _char == -1 )) 
					{
						//line 1673 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						this.line = old;
						//line 1674 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if ( ! (this.resumeErrors) ) 
						{
							//line 1674 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EUnterminatedComment) ), ((int) (this.tokenMin) ), ((int) (this.tokenMin) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
						}
						
						//line 1675 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
				}
				
				//line 1678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String s3 = this.input;
				//line 1678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int index2 = this.readPos++;
				//line 1678 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				_char = ( (( index2 < s3.length() )) ? (((int) (((java.lang.String) (((java.lang.Object) (s3) )) ).charAt(index2)) )) : (-1) );
				//line 1679 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( _char == -1 )) 
				{
					//line 1680 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					this.line = old;
					//line 1681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					if ( ! (this.resumeErrors) ) 
					{
						//line 1681 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(new hscript.Error(((hscript.ErrorDef) (hscript.ErrorDef.EUnterminatedComment) ), ((int) (this.tokenMin) ), ((int) (this.tokenMin) ), haxe.lang.Runtime.toString(this.origin), ((int) (this.line) )))) );
					}
					
					//line 1682 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
				//line 1684 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				if (( _char == 47 )) 
				{
					//line 1685 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
					break;
				}
				
			}
			
			//line 1687 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			return this.token();
		}
		
		//line 1689 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		this._char = _char;
		//line 1690 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return hscript.Token.TOp(op);
	}
	
	
	public java.lang.String constString(hscript.Const c)
	{
		//line 1694 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (c.index)
		{
			case 0:
			{
				//line 1695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				int v = ((int) (haxe.lang.Runtime.toInt(c.params[0])) );
				//line 1695 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return haxe.root.Std.string(v);
			}
			
			
			case 1:
			{
				//line 1696 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				double f = ((double) (haxe.lang.Runtime.toDouble(c.params[0])) );
				//line 1696 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return haxe.root.Std.string(f);
			}
			
			
			case 2:
			{
				//line 1697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String s = haxe.lang.Runtime.toString(c.params[0]);
				//line 1697 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return s;
			}
			
			
		}
		
		//line 1693 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	public java.lang.String tokenString(hscript.Token t)
	{
		//line 1705 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 1706 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "<eof>";
			}
			
			
			case 1:
			{
				//line 1707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				hscript.Const c = ((hscript.Const) (t.params[0]) );
				//line 1707 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return this.constString(c);
			}
			
			
			case 2:
			{
				//line 1708 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String s = haxe.lang.Runtime.toString(t.params[0]);
				//line 1708 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return s;
			}
			
			
			case 3:
			{
				//line 1709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String s1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 1709 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return s1;
			}
			
			
			case 4:
			{
				//line 1710 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "(";
			}
			
			
			case 5:
			{
				//line 1711 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ")";
			}
			
			
			case 6:
			{
				//line 1712 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "{";
			}
			
			
			case 7:
			{
				//line 1713 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "}";
			}
			
			
			case 8:
			{
				//line 1714 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ".";
			}
			
			
			case 9:
			{
				//line 1715 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ",";
			}
			
			
			case 10:
			{
				//line 1716 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ";";
			}
			
			
			case 11:
			{
				//line 1717 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "[";
			}
			
			
			case 12:
			{
				//line 1718 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "]";
			}
			
			
			case 13:
			{
				//line 1719 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return "?";
			}
			
			
			case 14:
			{
				//line 1720 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ":";
			}
			
			
			case 15:
			{
				//line 1721 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id = haxe.lang.Runtime.toString(t.params[0]);
				//line 1721 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ( "@" + id );
			}
			
			
			case 16:
			{
				//line 1722 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				java.lang.String id1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 1722 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return ( "#" + id1 );
			}
			
			
		}
		
		//line 1704 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef1 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( field != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (field.hashCode())
				{
					case 1257242610:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.oldTokenMax = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3321844:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("line")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.line = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242848:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.oldTokenMin = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1080389854:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readPos")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.readPos = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821653:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMax = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3052374:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("char")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this._char = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821415:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMin = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 115792:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("uid")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.uid = ((int) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef1) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef1 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( field != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (field.hashCode())
				{
					case -901027441:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocStack")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.preprocStack = ((haxe.root.Array<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3321844:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("line")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.line = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -868186726:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokens")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokens = ((haxe.ds.List<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1294770564:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opChars")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.opChars = haxe.lang.Runtime.toString(value);
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242610:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.oldTokenMax = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1653474355:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("identChars")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.identChars = haxe.lang.Runtime.toString(value);
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242848:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.oldTokenMin = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -2010416475:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opPriority")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.opPriority = ((haxe.ds.StringMap<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821653:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMax = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1668681702:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opRightAssoc")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.opRightAssoc = ((haxe.ds.StringMap<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821415:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.tokenMin = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1339730124:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocesorValues")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.preprocesorValues = ((haxe.ds.StringMap) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1008619738:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("origin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.origin = haxe.lang.Runtime.toString(value);
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 371702705:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowJSON")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.allowJSON = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 115792:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("uid")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.uid = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1351718224:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowTypes")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.allowTypes = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1193436029:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("idents")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.idents = ((haxe.root.Array<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 801253784:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowMetadata")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.allowMetadata = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110258:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ops")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.ops = ((haxe.root.Array<java.lang.Object>) (value) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1099599352:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("resumeErrors")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.resumeErrors = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3052374:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("char")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this._char = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 100358090:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("input")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.input = haxe.lang.Runtime.toString(value);
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1080389854:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readPos")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.readPos = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return value;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef1) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef1 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( field != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (field.hashCode())
				{
					case -1491998870:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "tokenString")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3321844:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("line")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.line;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1818570068:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("constString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "constString")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1294770564:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opChars")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.opChars;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -470134234:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenComment")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "tokenComment")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1653474355:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("identChars")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.identChars;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 189987833:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("skipTokens")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "skipTokens")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -2010416475:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opPriority")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.opPriority;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -805388692:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocess")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "preprocess")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1668681702:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("opRightAssoc")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.opRightAssoc;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 242405672:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("evalPreproCond")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "evalPreproCond")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1339730124:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocesorValues")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.preprocesorValues;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1792357761:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parsePreproCond")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parsePreproCond")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 371702705:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowJSON")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.allowJSON;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -901027441:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocStack")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.preprocStack;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1351718224:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowTypes")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.allowTypes;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -898811784:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocValue")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "preprocValue")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 801253784:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("allowMetadata")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.allowMetadata;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1464656646:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("_token")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "_token")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1099599352:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("resumeErrors")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.resumeErrors;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110541305:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("token")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "token")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 100358090:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("input")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.input;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -500196025:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readString")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1080389854:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readPos")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.readPos;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -868047348:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readChar")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readChar")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3052374:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("char")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this._char;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1004057081:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseField")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseField")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110258:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ops")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.ops;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1856670647:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseModuleDecl")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseModuleDecl")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1193436029:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("idents")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.idents;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -781717991:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseParams")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseParams")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 115792:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("uid")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.uid;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1233152254:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseMetadata")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseMetadata")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1008619738:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("origin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.origin;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -855074049:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseModule")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseModule")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821415:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.tokenMin;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1587410950:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExprList")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseExprList")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821653:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.tokenMax;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1459651296:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseTypeNext")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseTypeNext")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242848:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.oldTokenMin;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833071475:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseType")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseType")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242610:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.oldTokenMax;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833213576:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parsePath")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parsePath")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -868186726:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokens")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.tokens;
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1405891317:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFunctionDecl")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseFunctionDecl")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 96784904:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("error")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "error")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1405814568:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFunctionArgs")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseFunctionArgs")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -953670163:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("invalidChar")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "invalidChar")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1587466843:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExprNext")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseExprNext")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 155550031:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("initParser")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "initParser")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1636731904:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseStructure")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseStructure")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -678275932:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseString")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1239217114:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("makeBinop")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeBinop")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -409490351:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("unexpected")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "unexpected")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 40545608:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("makeUnop")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "makeUnop")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3452698:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("push")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "push")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 153065287:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("mapCompr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "mapCompr")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1298293698:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ensure")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "ensure")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1234178987:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseMetaArgs")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseMetaArgs")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 170140763:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ensureToken")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "ensureToken")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -896382886:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseLambda")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseLambda")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 103672936:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("maybe")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "maybe")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833519288:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExpr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseExpr")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1955874874:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("getIdent")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getIdent")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -809658414:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseObject")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseObject")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3127797:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("expr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "expr")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 547458295:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFullExpr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseFullExpr")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3444706:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("pmin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "pmin")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 2055238019:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("isBlock")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isBlock")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3444468:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("pmax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "pmax")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3486:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("mk")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "mk")) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef1) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef1 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( field != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (field.hashCode())
				{
					case 1257242610:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.oldTokenMax) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3321844:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("line")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.line) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1257242848:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("oldTokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.oldTokenMin) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1080389854:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readPos")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.readPos) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821653:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.tokenMax) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3052374:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("char")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this._char) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1103821415:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenMin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.tokenMin) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 115792:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("uid")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return ((double) (this.uid) );
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef1) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		{
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			boolean __temp_executeDef1 = true;
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (( field != null )) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				switch (field.hashCode())
				{
					case -1491998870:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.tokenString(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 96784904:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("error")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.error(((hscript.ErrorDef) (dynargs[0]) ), ((int) (haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (haxe.lang.Runtime.toInt(dynargs[2])) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1818570068:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("constString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.constString(((hscript.Const) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -953670163:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("invalidChar")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.invalidChar(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -470134234:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("tokenComment")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.tokenComment(haxe.lang.Runtime.toString(dynargs[0]), ((int) (haxe.lang.Runtime.toInt(dynargs[1])) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 155550031:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("initParser")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.initParser(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 189987833:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("skipTokens")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.skipTokens();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -678275932:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseString(haxe.lang.Runtime.toString(dynargs[0]), haxe.lang.Runtime.toString(( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -805388692:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocess")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.preprocess(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -409490351:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("unexpected")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.unexpected(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 242405672:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("evalPreproCond")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.evalPreproCond(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3452698:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("push")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.push(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1792357761:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parsePreproCond")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parsePreproCond();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1298293698:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ensure")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.ensure(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -898811784:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("preprocValue")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.preprocValue(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 170140763:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("ensureToken")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.ensureToken(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1464656646:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("_token")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this._token();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 103672936:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("maybe")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.maybe(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 110541305:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("token")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.token();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1955874874:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("getIdent")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.getIdent();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -500196025:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readString")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.readString(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3127797:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("expr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.expr(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -868047348:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("readChar")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.readChar();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3444706:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("pmin")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.pmin(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1004057081:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseField")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseField();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3444468:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("pmax")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.pmax(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1856670647:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseModuleDecl")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseModuleDecl();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 3486:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("mk")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.mk(((hscript.ExprDef) (dynargs[0]) ), ( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) ), ( (( dynargs.length > 2 )) ? (dynargs[2]) : (null) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -781717991:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseParams")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseParams();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 2055238019:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("isBlock")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.isBlock(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1233152254:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseMetadata")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseMetadata();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 547458295:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFullExpr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							this.parseFullExpr(((haxe.root.Array<java.lang.Object>) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -855074049:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseModule")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseModule(haxe.lang.Runtime.toString(dynargs[0]), haxe.lang.Runtime.toString(( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) )));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -809658414:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseObject")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseObject(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1587410950:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExprList")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExprList(((hscript.Token) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833519288:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExpr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExpr();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1459651296:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseTypeNext")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseTypeNext(((hscript.CType) (dynargs[0]) ));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -896382886:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseLambda")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseLambda(((haxe.root.Array<java.lang.Object>) (dynargs[0]) ), dynargs[1]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833071475:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseType")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseType();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1234178987:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseMetaArgs")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseMetaArgs();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case -1833213576:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parsePath")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parsePath();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 153065287:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("mapCompr")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.mapCompr(haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1405891317:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFunctionDecl")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseFunctionDecl();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 40545608:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("makeUnop")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.makeUnop(haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1405814568:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseFunctionArgs")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseFunctionArgs();
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1239217114:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("makeBinop")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.makeBinop(haxe.lang.Runtime.toString(dynargs[0]), dynargs[1], dynargs[2]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1587466843:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseExprNext")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseExprNext(dynargs[0]);
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
					case 1636731904:
					{
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						if (field.equals("parseStructure")) 
						{
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							__temp_executeDef1 = false;
							//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
							return this.parseStructure(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
			if (__temp_executeDef1) 
			{
				//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("preprocStack");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("tokens");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("oldTokenMax");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("oldTokenMin");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("tokenMax");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("tokenMin");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("origin");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("uid");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("idents");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("ops");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("char");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("readPos");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("input");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("resumeErrors");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("allowMetadata");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("allowTypes");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("allowJSON");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("preprocesorValues");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("opRightAssoc");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("opPriority");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("identChars");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("opChars");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		baseArr.push("line");
		//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Parser.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


