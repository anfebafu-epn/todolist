// Generated by Haxe 4.2.2
package hscript;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Bytes extends haxe.lang.HxObject
{
	public Bytes(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Bytes(haxe.io.Bytes bin)
	{
		//line 34 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		hscript.Bytes.__hx_ctor_hscript_Bytes(this, bin);
	}
	
	
	protected static void __hx_ctor_hscript_Bytes(hscript.Bytes __hx_this, haxe.io.Bytes bin)
	{
		//line 35 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.bin = bin;
		//line 36 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.pin = 0;
		//line 37 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.bout = new haxe.io.BytesBuffer();
		//line 38 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.hstrings = new haxe.ds.StringMap<java.lang.Object>();
		//line 39 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.strings = new haxe.root.Array<java.lang.String>(new java.lang.String[]{null});
		//line 40 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		__hx_this.nstrings = 1;
	}
	
	
	public static haxe.io.Bytes encode(java.lang.Object e)
	{
		//line 389 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		hscript.Bytes b = new hscript.Bytes(((haxe.io.Bytes) (null) ));
		//line 390 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		b.doEncode(e);
		//line 391 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		return b.bout.getBytes();
	}
	
	
	public static java.lang.Object decode(haxe.io.Bytes bytes)
	{
		//line 395 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		hscript.Bytes b = new hscript.Bytes(((haxe.io.Bytes) (bytes) ));
		//line 396 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		return b.doDecode();
	}
	
	
	public haxe.io.Bytes bin;
	
	public haxe.io.BytesBuffer bout;
	
	public int pin;
	
	public haxe.ds.StringMap<java.lang.Object> hstrings;
	
	public haxe.root.Array<java.lang.String> strings;
	
	public int nstrings;
	
	public void doEncodeString(java.lang.String v)
	{
		//line 43 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		try 
		{
			//line 44 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			java.lang.Object vid = ((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.hstrings) )) ).get(v);
			//line 45 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (haxe.lang.Runtime.eq(vid, null)) 
			{
				//line 46 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				if (( this.nstrings == 256 )) 
				{
					//line 47 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.hstrings = new haxe.ds.StringMap<java.lang.Object>();
					//line 48 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.nstrings = 1;
				}
				
				//line 50 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				((haxe.ds.StringMap<java.lang.Object>) (((haxe.IMap<java.lang.String, java.lang.Object>) (this.hstrings) )) ).set(v, this.nstrings);
				//line 51 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.bout.b.write(((int) (0) ));
				//line 52 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.io.Bytes vb = haxe.io.Bytes.ofString(v, null);
				//line 53 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.bout.b.write(((int) (vb.length) ));
				//line 54 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.bout.b.write(((byte[]) (vb.b) ), ((int) (0) ), ((int) (vb.length) ));
				//line 55 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.nstrings++;
			}
			else
			{
				//line 57 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.bout.b.write(((int) (haxe.lang.Runtime.toInt(vid)) ));
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 43 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public java.lang.String doDecodeString()
	{
		//line 61 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		int id = ( this.bin.b[this.pin++] & 255 );
		//line 62 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		if (( id == 0 )) 
		{
			//line 63 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			int len = ( this.bin.b[this.pin] & 255 );
			//line 64 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			java.lang.String str = this.bin.getString(( this.pin + 1 ), len, null);
			//line 65 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			this.pin += ( len + 1 );
			//line 66 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( this.strings.length == 255 )) 
			{
				//line 67 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				this.strings = new haxe.root.Array<java.lang.String>(new java.lang.String[]{null});
			}
			
			//line 68 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			this.strings.push(str);
			//line 69 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			return str;
		}
		
		//line 71 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		return this.strings.__get(id);
	}
	
	
	public void doEncodeInt(int v)
	{
		//line 75 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		this.bout.addInt32(v);
	}
	
	
	public void doEncodeConst(hscript.Const c)
	{
		//line 79 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		try 
		{
			//line 79 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			switch (c.index)
			{
				case 0:
				{
					//line 80 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int v = ((int) (haxe.lang.Runtime.toInt(c.params[0])) );
					//line 81 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					if (( ( v >= 0 ) && ( v <= 255 ) )) 
					{
						//line 82 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (0) ));
						//line 83 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (v) ));
					}
					else
					{
						//line 85 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (1) ));
						//line 86 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeInt(v);
					}
					
					//line 80 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 1:
				{
					//line 97 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					double f = ((double) (haxe.lang.Runtime.toDouble(c.params[0])) );
					//line 97 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 98 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (2) ));
						//line 99 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(haxe.root.Std.string(f));
					}
					
					//line 97 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 2:
				{
					//line 100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String s = haxe.lang.Runtime.toString(c.params[0]);
					//line 100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (3) ));
						//line 102 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(s);
					}
					
					//line 100 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 78 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public int doDecodeInt()
	{
		//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		haxe.io.Bytes _this = this.bin;
		//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		int pos = this.pin;
		//line 107 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		int i = ( ( ( ( _this.b[pos] & 255 ) | ( (( _this.b[( pos + 1 )] & 255 )) << 8 ) ) | ( (( _this.b[( pos + 2 )] & 255 )) << 16 ) ) | ( (( _this.b[( pos + 3 )] & 255 )) << 24 ) );
		//line 108 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		this.pin += 4;
		//line 109 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		return i;
	}
	
	
	public hscript.Const doDecodeConst()
	{
		//line 113 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		switch (( this.bin.b[this.pin++] & 255 ))
		{
			case 0:
			{
				//line 115 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.Const.CInt(( this.bin.b[this.pin++] & 255 ));
			}
			
			
			case 1:
			{
				//line 117 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				int i = this.doDecodeInt();
				//line 118 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.Const.CInt(i);
			}
			
			
			case 2:
			{
				//line 120 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.Const.CFloat(haxe.root.Std.parseFloat(this.doDecodeString()));
			}
			
			
			case 3:
			{
				//line 122 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.Const.CString(this.doDecodeString());
			}
			
			
			default:
			{
				//line 131 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Invalid code " + (( this.bin.b[( this.pin - 1 )] & 255 )) ))) );
			}
			
		}
		
	}
	
	
	public void doEncode(java.lang.Object e)
	{
		//line 135 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		try 
		{
			//line 137 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			this.doEncodeString(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(e, "origin", true)));
			//line 138 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			this.doEncodeInt(((int) (haxe.lang.Runtime.getField_f(e, "line", true)) ));
			//line 139 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			hscript.ExprDef e1 = ((hscript.ExprDef) (haxe.lang.Runtime.getField(e, "e", true)) );
			//line 141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			{
				//line 141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.io.BytesBuffer _this = this.bout;
				//line 141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				int _byte = e1.index;
				//line 141 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				_this.b.write(((int) (_byte) ));
			}
			
			//line 142 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			switch (e1.index)
			{
				case 0:
				{
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					hscript.Const c = ((hscript.Const) (e1.params[0]) );
					//line 144 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.doEncodeConst(c);
					//line 143 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 1:
				{
					//line 145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String v = haxe.lang.Runtime.toString(e1.params[0]);
					//line 146 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.doEncodeString(v);
					//line 145 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 2:
				{
					//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					hscript.CType _g = ((hscript.CType) (e1.params[1]) );
					//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.String n = haxe.lang.Runtime.toString(e1.params[0]);
						//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object e2 = e1.params[2];
						//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 148 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeString(n);
							//line 149 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							if (( e2 == null )) 
							{
								//line 150 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.bout.b.write(((int) (255) ));
							}
							else
							{
								//line 152 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e2);
							}
							
						}
						
					}
					
					//line 147 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 3:
				{
					//line 153 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e3 = e1.params[0];
					//line 154 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.doEncode(e3);
					//line 153 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 4:
				{
					//line 155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> el = ((haxe.root.Array<java.lang.Object>) (e1.params[0]) );
					//line 155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 156 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (el.length) ));
						//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g1 = 0;
							//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g1 < el.length ))
							{
								//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object e4 = el.__get(_g1);
								//line 157 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g1;
								//line 158 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e4);
							}
							
						}
						
					}
					
					//line 155 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 5:
				{
					//line 159 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e5 = e1.params[0];
					//line 159 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String f = haxe.lang.Runtime.toString(e1.params[1]);
					//line 159 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 160 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e5);
						//line 161 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(f);
					}
					
					//line 159 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 6:
				{
					//line 162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String op = haxe.lang.Runtime.toString(e1.params[0]);
					//line 162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e11 = e1.params[1];
					//line 162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e21 = e1.params[2];
					//line 162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 163 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(op);
						//line 164 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e11);
						//line 165 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e21);
					}
					
					//line 162 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 7:
				{
					//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String op1 = haxe.lang.Runtime.toString(e1.params[0]);
					//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					boolean prefix = haxe.lang.Runtime.toBool(((java.lang.Boolean) (e1.params[1]) ));
					//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e6 = e1.params[2];
					//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 167 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(op1);
						//line 168 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (( (prefix) ? (1) : (0) )) ));
						//line 169 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e6);
					}
					
					//line 166 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 8:
				{
					//line 170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e7 = e1.params[0];
					//line 170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> el1 = ((haxe.root.Array<java.lang.Object>) (e1.params[1]) );
					//line 170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 171 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e7);
						//line 172 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (el1.length) ));
						//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g2 = 0;
							//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g2 < el1.length ))
							{
								//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object e8 = el1.__get(_g2);
								//line 173 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g2;
								//line 174 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e8);
							}
							
						}
						
					}
					
					//line 170 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 9:
				{
					//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object cond = e1.params[0];
					//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e12 = e1.params[1];
					//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e22 = e1.params[2];
					//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 176 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(cond);
						//line 177 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e12);
						//line 178 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (( e22 == null )) 
						{
							//line 179 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.bout.b.write(((int) (255) ));
						}
						else
						{
							//line 181 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(e22);
						}
						
					}
					
					//line 175 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 10:
				{
					//line 182 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object cond1 = e1.params[0];
					//line 182 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e9 = e1.params[1];
					//line 182 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 183 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(cond1);
						//line 184 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e9);
					}
					
					//line 182 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 11:
				{
					//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String v1 = haxe.lang.Runtime.toString(e1.params[0]);
					//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object it = e1.params[1];
					//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e10 = e1.params[2];
					//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 189 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(v1);
						//line 190 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(it);
						//line 191 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e10);
					}
					
					//line 188 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 12:
				case 13:
				{
					//line 192 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 14:
				{
					//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					hscript.CType _g3 = ((hscript.CType) (e1.params[3]) );
					//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						haxe.root.Array<java.lang.Object> params = ((haxe.root.Array<java.lang.Object>) (e1.params[0]) );
						//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object e13 = e1.params[1];
						//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.String name = haxe.lang.Runtime.toString(e1.params[2]);
						//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 194 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.bout.b.write(((int) (params.length) ));
							//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							{
								//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								int _g4 = 0;
								//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								while (( _g4 < params.length ))
								{
									//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									java.lang.Object p = params.__get(_g4);
									//line 195 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									 ++ _g4;
									//line 196 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									this.doEncodeString(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(p, "name", true)));
								}
								
							}
							
							//line 197 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(e13);
							//line 198 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeString(( (( name == null )) ? ("") : (name) ));
						}
						
					}
					
					//line 193 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 15:
				{
					//line 199 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e14 = e1.params[0];
					//line 200 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					if (( e14 == null )) 
					{
						//line 201 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (255) ));
					}
					else
					{
						//line 203 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e14);
					}
					
					//line 199 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 16:
				{
					//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e15 = e1.params[0];
					//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object index = e1.params[1];
					//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 205 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e15);
						//line 206 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(index);
					}
					
					//line 204 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 17:
				{
					//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> el2 = ((haxe.root.Array<java.lang.Object>) (e1.params[0]) );
					//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 208 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (( el2.length >= 255 )) 
						{
							//line 208 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
						}
						
						//line 209 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (el2.length) ));
						//line 210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g5 = 0;
							//line 210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g5 < el2.length ))
							{
								//line 210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object e16 = el2.__get(_g5);
								//line 210 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g5;
								//line 211 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e16);
							}
							
						}
						
					}
					
					//line 207 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 18:
				{
					//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String cl = haxe.lang.Runtime.toString(e1.params[0]);
					//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> params1 = ((haxe.root.Array<java.lang.Object>) (e1.params[1]) );
					//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 213 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(cl);
						//line 214 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (params1.length) ));
						//line 215 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 215 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g6 = 0;
							//line 215 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g6 < params1.length ))
							{
								//line 215 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object e17 = params1.__get(_g6);
								//line 215 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g6;
								//line 216 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e17);
							}
							
						}
						
					}
					
					//line 212 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 19:
				{
					//line 217 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e18 = e1.params[0];
					//line 218 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					this.doEncode(e18);
					//line 217 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 20:
				{
					//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					hscript.CType _g7 = ((hscript.CType) (e1.params[2]) );
					//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object e19 = e1.params[0];
						//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.String v2 = haxe.lang.Runtime.toString(e1.params[1]);
						//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object ecatch = e1.params[3];
						//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 220 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(e19);
							//line 221 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeString(v2);
							//line 222 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(ecatch);
						}
						
					}
					
					//line 219 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 21:
				{
					//line 223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> fl = ((haxe.root.Array<java.lang.Object>) (e1.params[0]) );
					//line 223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 224 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (fl.length) ));
						//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g8 = 0;
							//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g8 < fl.length ))
							{
								//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object f1 = fl.__get(_g8);
								//line 225 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g8;
								//line 226 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncodeString(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f1, "name", true)));
								//line 227 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(haxe.lang.Runtime.getField(f1, "e", true));
							}
							
						}
						
					}
					
					//line 223 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 22:
				{
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object cond2 = e1.params[0];
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e110 = e1.params[1];
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e23 = e1.params[2];
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 230 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(cond2);
						//line 231 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e110);
						//line 232 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e23);
					}
					
					//line 229 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 23:
				{
					//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e20 = e1.params[0];
					//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> cases = ((haxe.root.Array<java.lang.Object>) (e1.params[1]) );
					//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object def = e1.params[2];
					//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 234 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e20);
						//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g9 = 0;
							//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g9 < cases.length ))
							{
								//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object c1 = cases.__get(_g9);
								//line 235 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g9;
								//line 236 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								if (( ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "values", true)) ).length == 0 )) 
								{
									//line 236 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									throw ((java.lang.RuntimeException) (haxe.Exception.thrown("assert")) );
								}
								
								//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								{
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									int _g10 = 0;
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									haxe.root.Array<java.lang.Object> _g11 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(c1, "values", true)) );
									//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
									while (( _g10 < _g11.length ))
									{
										//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
										java.lang.Object v3 = _g11.__get(_g10);
										//line 237 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
										 ++ _g10;
										//line 238 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
										this.doEncode(v3);
									}
									
								}
								
								//line 239 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.bout.b.write(((int) (255) ));
								//line 240 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(haxe.lang.Runtime.getField(c1, "expr", true));
							}
							
						}
						
						//line 242 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (255) ));
						//line 243 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (( def == null )) 
						{
							//line 243 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.bout.b.write(((int) (255) ));
						}
						else
						{
							//line 243 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(def);
						}
						
					}
					
					//line 233 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 24:
				{
					//line 185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object cond3 = e1.params[0];
					//line 185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e24 = e1.params[1];
					//line 185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 186 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(cond3);
						//line 187 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e24);
					}
					
					//line 185 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 25:
				{
					//line 244 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.String name1 = haxe.lang.Runtime.toString(e1.params[0]);
					//line 244 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (e1.params[1]) );
					//line 244 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object e25 = e1.params[2];
					//line 244 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 245 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncodeString(name1);
						//line 246 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.bout.b.write(((int) (( (( args == null )) ? (0) : (( args.length + 1 )) )) ));
						//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (( args != null )) 
						{
							//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int _g12 = 0;
							//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							while (( _g12 < args.length ))
							{
								//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								java.lang.Object e26 = args.__get(_g12);
								//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								 ++ _g12;
								//line 247 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
								this.doEncode(e26);
							}
							
						}
						
						//line 248 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e25);
					}
					
					//line 244 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
				case 26:
				{
					//line 249 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					hscript.CType _g13 = ((hscript.CType) (e1.params[1]) );
					//line 249 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 249 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object e27 = e1.params[0];
						//line 250 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						this.doEncode(e27);
					}
					
					//line 249 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					break;
				}
				
				
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 135 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public java.lang.Object doDecode()
	{
		//line 256 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		if (( (( this.bin.b[this.pin] & 255 )) == 255 )) 
		{
			//line 257 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			this.pin++;
			//line 258 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			return null;
		}
		
		//line 260 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		java.lang.String origin = this.doDecodeString();
		//line 261 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		int line = this.doDecodeInt();
		//line 262 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 262 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			hscript.ExprDef __temp_odecl1 = this._doDecode();
			//line 262 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"e", "origin"}, new java.lang.Object[]{__temp_odecl1, origin}, new java.lang.String[]{"line", "pmax", "pmin"}, new double[]{((double) (((double) (line) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
		}
		
	}
	
	
	public hscript.ExprDef _doDecode()
	{
		//line 266 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		switch (( this.bin.b[this.pin++] & 255 ))
		{
			case 0:
			{
				//line 268 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EConst(this.doDecodeConst());
			}
			
			
			case 1:
			{
				//line 270 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EIdent(this.doDecodeString());
			}
			
			
			case 2:
			{
				//line 272 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String v = this.doDecodeString();
				//line 273 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EVar(v, null, this.doDecode());
			}
			
			
			case 3:
			{
				//line 275 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EParent(this.doDecode());
			}
			
			
			case 4:
			{
				//line 277 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>();
				//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g = 0;
					//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g1 = ( this.bin.b[this.pin++] & 255 );
					//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g < _g1 ))
					{
						//line 278 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i = _g++;
						//line 279 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						a.push(this.doDecode());
					}
					
				}
				
				//line 280 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EBlock(a);
			}
			
			
			case 5:
			{
				//line 282 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e = this.doDecode();
				//line 283 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EField(e, this.doDecodeString());
			}
			
			
			case 6:
			{
				//line 285 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String op = this.doDecodeString();
				//line 286 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e1 = this.doDecode();
				//line 287 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EBinop(op, e1, this.doDecode());
			}
			
			
			case 7:
			{
				//line 289 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String op1 = this.doDecodeString();
				//line 290 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				boolean prefix = ( (( this.bin.b[this.pin++] & 255 )) != 0 );
				//line 291 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EUnop(op1, prefix, this.doDecode());
			}
			
			
			case 8:
			{
				//line 293 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e2 = this.doDecode();
				//line 294 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> params = new haxe.root.Array<java.lang.Object>();
				//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g2 = 0;
					//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g3 = ( this.bin.b[this.pin++] & 255 );
					//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g2 < _g3 ))
					{
						//line 295 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i1 = _g2++;
						//line 296 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						params.push(this.doDecode());
					}
					
				}
				
				//line 297 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ECall(e2, params);
			}
			
			
			case 9:
			{
				//line 299 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object cond = this.doDecode();
				//line 300 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e11 = this.doDecode();
				//line 301 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EIf(cond, e11, this.doDecode());
			}
			
			
			case 10:
			{
				//line 303 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object cond1 = this.doDecode();
				//line 304 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EWhile(cond1, this.doDecode());
			}
			
			
			case 11:
			{
				//line 306 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String v1 = this.doDecodeString();
				//line 307 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object it = this.doDecode();
				//line 308 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EFor(v1, it, this.doDecode());
			}
			
			
			case 12:
			{
				//line 310 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EBreak;
			}
			
			
			case 13:
			{
				//line 312 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EContinue;
			}
			
			
			case 14:
			{
				//line 314 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> params1 = new haxe.root.Array<java.lang.Object>();
				//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g4 = 0;
					//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g5 = ( this.bin.b[this.pin++] & 255 );
					//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g4 < _g5 ))
					{
						//line 315 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i2 = _g4++;
						//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object __temp_stmt3 = null;
						//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						{
							//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							java.lang.String __temp_odecl1 = this.doDecodeString();
							//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 316 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						params1.push(__temp_stmt3);
					}
					
				}
				
				//line 317 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e3 = this.doDecode();
				//line 318 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String name = this.doDecodeString();
				//line 319 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EFunction(params1, e3, ( (haxe.lang.Runtime.valEq(name, "")) ? (null) : (name) ), null);
			}
			
			
			case 15:
			{
				//line 321 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EReturn(this.doDecode());
			}
			
			
			case 16:
			{
				//line 323 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e4 = this.doDecode();
				//line 324 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EArray(e4, this.doDecode());
			}
			
			
			case 17:
			{
				//line 326 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> el = new haxe.root.Array<java.lang.Object>();
				//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g6 = 0;
					//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g7 = ( this.bin.b[this.pin++] & 255 );
					//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g6 < _g7 ))
					{
						//line 327 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i3 = _g6++;
						//line 328 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						el.push(this.doDecode());
					}
					
				}
				
				//line 329 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EArrayDecl(el);
			}
			
			
			case 18:
			{
				//line 331 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String cl = this.doDecodeString();
				//line 332 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> el1 = new haxe.root.Array<java.lang.Object>();
				//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g8 = 0;
					//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g9 = ( this.bin.b[this.pin++] & 255 );
					//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g8 < _g9 ))
					{
						//line 333 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i4 = _g8++;
						//line 334 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						el1.push(this.doDecode());
					}
					
				}
				
				//line 335 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ENew(cl, el1);
			}
			
			
			case 19:
			{
				//line 337 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EThrow(this.doDecode());
			}
			
			
			case 20:
			{
				//line 339 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e5 = this.doDecode();
				//line 340 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String v2 = this.doDecodeString();
				//line 341 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ETry(e5, v2, null, this.doDecode());
			}
			
			
			case 21:
			{
				//line 343 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> fl = new haxe.root.Array<java.lang.Object>();
				//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				{
					//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g10 = 0;
					//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					int _g11 = ( this.bin.b[this.pin++] & 255 );
					//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (( _g10 < _g11 ))
					{
						//line 344 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int i5 = _g10++;
						//line 345 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.String name1 = this.doDecodeString();
						//line 346 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object e6 = this.doDecode();
						//line 347 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						fl.push(new haxe.lang.DynamicObject(new java.lang.String[]{"e", "name"}, new java.lang.Object[]{e6, name1}, new java.lang.String[]{}, new double[]{}));
					}
					
				}
				
				//line 349 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EObject(fl);
			}
			
			
			case 22:
			{
				//line 351 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object cond2 = this.doDecode();
				//line 352 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e12 = this.doDecode();
				//line 353 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e21 = this.doDecode();
				//line 354 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ETernary(cond2, e12, e21);
			}
			
			
			case 23:
			{
				//line 356 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object e7 = this.doDecode();
				//line 357 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> cases = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 358 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				while (true)
				{
					//line 359 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object v3 = this.doDecode();
					//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					if (( v3 == null )) 
					{
						//line 360 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					//line 361 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> values = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{v3});
					//line 362 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					while (true)
					{
						//line 363 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						v3 = this.doDecode();
						//line 364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (( v3 == null )) 
						{
							//line 364 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							break;
						}
						
						//line 365 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						values.push(v3);
					}
					
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					java.lang.Object __temp_stmt4 = null;
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						java.lang.Object __temp_odecl2 = this.doDecode();
						//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						__temp_stmt4 = new haxe.lang.DynamicObject(new java.lang.String[]{"expr", "values"}, new java.lang.Object[]{__temp_odecl2, values}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 367 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					cases.push(__temp_stmt4);
				}
				
				//line 369 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object def = this.doDecode();
				//line 370 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ESwitch(e7, cases, def);
			}
			
			
			case 24:
			{
				//line 372 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.Object cond3 = this.doDecode();
				//line 373 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EDoWhile(cond3, this.doDecode());
			}
			
			
			case 25:
			{
				//line 375 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				java.lang.String name2 = this.doDecodeString();
				//line 376 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				int count = ( this.bin.b[this.pin++] & 255 );
				//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				haxe.root.Array<java.lang.Object> args = null;
				//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				if (( count == 0 )) 
				{
					//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					args = null;
				}
				else
				{
					//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					haxe.root.Array<java.lang.Object> _g12 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
					//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					{
						//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int _g13 = 0;
						//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						int _g14 = ( count - 1 );
						//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						while (( _g13 < _g14 ))
						{
							//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							int i6 = _g13++;
							//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							_g12.push(this.doDecode());
						}
						
					}
					
					//line 377 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
					args = _g12;
				}
				
				//line 378 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.EMeta(name2, args, this.doDecode());
			}
			
			
			case 26:
			{
				//line 380 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return hscript.ExprDef.ECheckType(this.doDecode(), hscript.CType.CTPath(new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Void"}), null));
			}
			
			
			case 255:
			{
				//line 382 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return null;
			}
			
			
			default:
			{
				//line 384 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Invalid code " + (( this.bin.b[( this.pin - 1 )] & 255 )) ))) );
			}
			
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			boolean __temp_executeDef1 = true;
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( field != null )) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				switch (field.hashCode())
				{
					case 848816724:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("nstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.nstrings = ((int) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 110997:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("pin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.pin = ((int) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (__temp_executeDef1) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			boolean __temp_executeDef1 = true;
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( field != null )) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				switch (field.hashCode())
				{
					case 848816724:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("nstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.nstrings = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 97543:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("bin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.bin = ((haxe.io.Bytes) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1881759102:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("strings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.strings = ((haxe.root.Array<java.lang.String>) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 3029932:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("bout")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.bout = ((haxe.io.BytesBuffer) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1018110694:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("hstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.hstrings = ((haxe.ds.StringMap<java.lang.Object>) (value) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 110997:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("pin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.pin = ((int) (haxe.lang.Runtime.toInt(value)) );
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return value;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (__temp_executeDef1) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			boolean __temp_executeDef1 = true;
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( field != null )) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				switch (field.hashCode())
				{
					case 49670072:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("_doDecode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "_doDecode")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 97543:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("bin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.bin;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -40847783:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doDecode")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 3029932:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("bout")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.bout;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -3906943:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doEncode")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 110997:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("pin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.pin;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 708092042:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeConst")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doDecodeConst")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1018110694:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("hstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.hstrings;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1420484906:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeInt")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doDecodeInt")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1881759102:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("strings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.strings;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 1437486434:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeConst")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doEncodeConst")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 848816724:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("nstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.nstrings;
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -427548242:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeInt")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doEncodeInt")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 2075199986:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeString")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doEncodeString")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 938810314:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeString")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doDecodeString")) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (__temp_executeDef1) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			boolean __temp_executeDef1 = true;
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( field != null )) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				switch (field.hashCode())
				{
					case 848816724:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("nstrings")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((double) (this.nstrings) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 110997:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("pin")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return ((double) (this.pin) );
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (__temp_executeDef1) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		{
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			boolean __temp_executeDef1 = true;
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (( field != null )) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				switch (field.hashCode())
				{
					case 49670072:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("_doDecode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this._doDecode();
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 2075199986:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeString")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeString(haxe.lang.Runtime.toString(dynargs[0]));
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -40847783:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.doDecode();
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 938810314:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeString")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.doDecodeString();
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -3906943:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncode")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncode(dynargs[0]);
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -427548242:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeInt")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeInt(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 708092042:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeConst")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.doDecodeConst();
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case 1437486434:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doEncodeConst")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							this.doEncodeConst(((hscript.Const) (dynargs[0]) ));
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
					case -1420484906:
					{
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						if (field.equals("doDecodeInt")) 
						{
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							__temp_executeDef1 = false;
							//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
							return this.doDecodeInt();
						}
						
						//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
			if (__temp_executeDef1) 
			{
				//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("nstrings");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("strings");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("hstrings");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("pin");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("bout");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		baseArr.push("bin");
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\hscript\\2,5,0\\hscript\\Bytes.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


