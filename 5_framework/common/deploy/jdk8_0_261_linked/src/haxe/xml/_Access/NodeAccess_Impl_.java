// Generated by Haxe 4.2.2
package haxe.xml._Access;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class NodeAccess_Impl_
{
	public static haxe.root.Xml resolve(haxe.root.Xml this1, java.lang.String name)
	{
		//line 28 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Xml x = ((haxe.root.Xml) (haxe.lang.Runtime.callField(this1.elementsNamed(name), "next", null)) );
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( x == null )) 
		{
			//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			java.lang.String xname = null;
			//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( this1.nodeType == haxe.root.Xml.Document )) 
			{
				//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				xname = "Document";
			}
			else
			{
				//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( this1.nodeType != haxe.root.Xml.Element )) 
				{
					//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(this1.nodeType) ))) );
				}
				
				//line 30 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				xname = this1.nodeName;
			}
			
			//line 31 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( xname + " is missing element " ) + name ))) );
		}
		
		//line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( ( x.nodeType != haxe.root.Xml.Document ) && ( x.nodeType != haxe.root.Xml.Element ) )) 
		{
			//line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Invalid nodeType " + _Xml.XmlType_Impl_.toString(x.nodeType) ))) );
		}
		
		//line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Xml this2 = x;
		//line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return ((haxe.root.Xml) (this2) );
	}
	
	
}


