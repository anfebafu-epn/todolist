// Generated by Haxe 4.2.2
package haxe.xml._Access;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class NodeListAccess_Impl_
{
	public static haxe.root.Array<haxe.root.Xml> resolve(haxe.root.Xml this1, java.lang.String name)
	{
		//line 76 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Array<haxe.root.Xml> l = new haxe.root.Array<haxe.root.Xml>(new haxe.root.Xml[]{});
		//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		{
			//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			java.lang.Object x = this1.elementsNamed(name);
			//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(x, "hasNext", null)) )))
			{
				//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				haxe.root.Xml x1 = ((haxe.root.Xml) (haxe.lang.Runtime.callField(x, "next", null)) );
				//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( ( x1.nodeType != haxe.root.Xml.Document ) && ( x1.nodeType != haxe.root.Xml.Element ) )) 
				{
					//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Invalid nodeType " + _Xml.XmlType_Impl_.toString(x1.nodeType) ))) );
				}
				
				//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				haxe.root.Xml this2 = x1;
				//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				l.push(((haxe.root.Xml) (this2) ));
			}
			
		}
		
		//line 79 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return l;
	}
	
	
}


