// Generated by Haxe 4.2.2
package haxe.xml._Access;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Access_Impl_
{
	
	
	public static haxe.root.Xml get_x(haxe.root.Xml this1)
	{
		//line 91 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return this1;
	}
	
	
	
	
	public static java.lang.String get_name(haxe.root.Xml this1)
	{
		//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( this1.nodeType == haxe.root.Xml.Document )) 
		{
			//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			return "Document";
		}
		else
		{
			//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( this1.nodeType != haxe.root.Xml.Element )) 
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(this1.nodeType) ))) );
			}
			
			//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			return this1.nodeName;
		}
		
	}
	
	
	
	
	
	
	
	
	public static haxe.root.Xml get_node(haxe.root.Xml this1)
	{
		//line 134 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return ((haxe.root.Xml) (this1) );
	}
	
	
	
	
	public static haxe.root.Xml get_nodes(haxe.root.Xml this1)
	{
		//line 156 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return this1;
	}
	
	
	
	
	public static haxe.root.Xml get_att(haxe.root.Xml this1)
	{
		//line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return this1;
	}
	
	
	
	
	public static haxe.root.Xml get_has(haxe.root.Xml this1)
	{
		//line 183 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return this1;
	}
	
	
	
	
	public static haxe.root.Xml get_hasNode(haxe.root.Xml this1)
	{
		//line 199 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return ((haxe.root.Xml) (this1) );
	}
	
	
	
	
	public static java.lang.Object get_elements(haxe.root.Xml this1)
	{
		//line 207 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return ((java.lang.Object) (this1.elements()) );
	}
	
	
	public static haxe.root.Xml _new(haxe.root.Xml x)
	{
		//line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( ( x.nodeType != haxe.root.Xml.Document ) && ( x.nodeType != haxe.root.Xml.Element ) )) 
		{
			//line 211 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Invalid nodeType " + _Xml.XmlType_Impl_.toString(x.nodeType) ))) );
		}
		
		//line 209 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Xml this1 = x;
		//line 209 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return ((haxe.root.Xml) (this1) );
	}
	
	
	public static java.lang.String get_innerData(haxe.root.Xml this1)
	{
		//line 216 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( ( this1.nodeType != haxe.root.Xml.Document ) && ( this1.nodeType != haxe.root.Xml.Element ) )) 
		{
			//line 216 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element or Document but found " + _Xml.XmlType_Impl_.toString(this1.nodeType) ))) );
		}
		
		//line 216 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		int it_current = 0;
		//line 216 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Array<haxe.root.Xml> it_array = this1.children;
		//line 217 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( it_current >= it_array.length )) 
		{
			//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			java.lang.String tmp = null;
			//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( ((haxe.root.Xml) (this1) ).nodeType == haxe.root.Xml.Document )) 
			{
				//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp = "Document";
			}
			else
			{
				//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( ((haxe.root.Xml) (this1) ).nodeType != haxe.root.Xml.Element )) 
				{
					//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(((haxe.root.Xml) (this1) ).nodeType) ))) );
				}
				
				//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp = ((haxe.root.Xml) (this1) ).nodeName;
			}
			
			//line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( tmp + " does not have data" ))) );
		}
		
		//line 219 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.Xml v = it_array.__get(it_current++);
		//line 220 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( it_current < it_array.length )) 
		{
			//line 221 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			haxe.root.Xml n = it_array.__get(it_current++);
			//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			boolean tmp1 = false;
			//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( ( v.nodeType == haxe.root.Xml.PCData ) && ( n.nodeType == haxe.root.Xml.CData ) )) 
			{
				//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( ( v.nodeType == haxe.root.Xml.Document ) || ( v.nodeType == haxe.root.Xml.Element ) )) 
				{
					//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, unexpected " + _Xml.XmlType_Impl_.toString(v.nodeType) ))) );
				}
				
				//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp1 = haxe.lang.Runtime.valEq(((java.lang.String) (((java.lang.Object) (v.nodeValue) )) ).trim(), "");
			}
			else
			{
				//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp1 = false;
			}
			
			//line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (tmp1) 
			{
				//line 224 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( it_current >= it_array.length )) 
				{
					//line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					if (( ( n.nodeType == haxe.root.Xml.Document ) || ( n.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, unexpected " + _Xml.XmlType_Impl_.toString(n.nodeType) ))) );
					}
					
					//line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					return n.nodeValue;
				}
				
				//line 226 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				haxe.root.Xml n2 = it_array.__get(it_current++);
				//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				boolean tmp2 = false;
				//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( n2.nodeType == haxe.root.Xml.PCData )) 
				{
					//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					if (( ( n2.nodeType == haxe.root.Xml.Document ) || ( n2.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, unexpected " + _Xml.XmlType_Impl_.toString(n2.nodeType) ))) );
					}
					
					//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					tmp2 = haxe.lang.Runtime.valEq(((java.lang.String) (((java.lang.Object) (n2.nodeValue) )) ).trim(), "");
				}
				else
				{
					//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					tmp2 = false;
				}
				
				//line 227 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( tmp2 && ( it_current >= it_array.length ) )) 
				{
					//line 228 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					if (( ( n.nodeType == haxe.root.Xml.Document ) || ( n.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 228 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
						throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, unexpected " + _Xml.XmlType_Impl_.toString(n.nodeType) ))) );
					}
					
					//line 228 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					return n.nodeValue;
				}
				
			}
			
			//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			java.lang.String tmp3 = null;
			//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( ((haxe.root.Xml) (this1) ).nodeType == haxe.root.Xml.Document )) 
			{
				//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp3 = "Document";
			}
			else
			{
				//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( ((haxe.root.Xml) (this1) ).nodeType != haxe.root.Xml.Element )) 
				{
					//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(((haxe.root.Xml) (this1) ).nodeType) ))) );
				}
				
				//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp3 = ((haxe.root.Xml) (this1) ).nodeName;
			}
			
			//line 230 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( tmp3 + " does not only have data" ))) );
		}
		
		//line 232 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( ( v.nodeType != haxe.root.Xml.PCData ) && ( v.nodeType != haxe.root.Xml.CData ) )) 
		{
			//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			java.lang.String tmp4 = null;
			//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( ((haxe.root.Xml) (this1) ).nodeType == haxe.root.Xml.Document )) 
			{
				//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp4 = "Document";
			}
			else
			{
				//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				if (( ((haxe.root.Xml) (this1) ).nodeType != haxe.root.Xml.Element )) 
				{
					//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element but found " + _Xml.XmlType_Impl_.toString(((haxe.root.Xml) (this1) ).nodeType) ))) );
				}
				
				//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				tmp4 = ((haxe.root.Xml) (this1) ).nodeName;
			}
			
			//line 233 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( tmp4 + " does not have data" ))) );
		}
		
		//line 234 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		if (( ( v.nodeType == haxe.root.Xml.Document ) || ( v.nodeType == haxe.root.Xml.Element ) )) 
		{
			//line 234 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, unexpected " + _Xml.XmlType_Impl_.toString(v.nodeType) ))) );
		}
		
		//line 234 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return v.nodeValue;
	}
	
	
	public static java.lang.String get_innerHTML(haxe.root.Xml this1)
	{
		//line 238 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		haxe.root.StringBuf s = new haxe.root.StringBuf();
		//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		{
			//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			if (( ( this1.nodeType != haxe.root.Xml.Document ) && ( this1.nodeType != haxe.root.Xml.Element ) )) 
			{
				//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( "Bad node type, expected Element or Document but found " + _Xml.XmlType_Impl_.toString(this1.nodeType) ))) );
			}
			
			//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			int _g_current = 0;
			//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			haxe.root.Array<haxe.root.Xml> _g_array = this1.children;
			//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
			while (( _g_current < _g_array.length ))
			{
				//line 239 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				haxe.root.Xml x = _g_array.__get(_g_current++);
				//line 240 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				s.add(haxe.lang.Runtime.toString(haxe.xml.Printer.print(x, null)));
				//line 240 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
				java.lang.Object __temp_expr1 = ((java.lang.Object) (null) );
			}
			
		}
		
		//line 241 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Access.hx"
		return s.toString();
	}
	
	
}


