// Generated by Haxe 4.2.2
package haxe.rtti;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class CTypeTools extends haxe.lang.HxObject
{
	public CTypeTools(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public CTypeTools()
	{
		//line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		haxe.rtti.CTypeTools.__hx_ctor_haxe_rtti_CTypeTools(this);
	}
	
	
	protected static void __hx_ctor_haxe_rtti_CTypeTools(haxe.rtti.CTypeTools __hx_this)
	{
	}
	
	
	public static java.lang.String toString(haxe.rtti.CType t)
	{
		//line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		switch (t.index)
		{
			case 0:
			{
				//line 558 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return "unknown";
			}
			
			
			case 1:
			{
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name = haxe.lang.Runtime.toString(t.params[0]);
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 560 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return haxe.rtti.CTypeTools.nameWithParams(name, params);
			}
			
			
			case 2:
			{
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name1 = haxe.lang.Runtime.toString(t.params[0]);
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params1 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 560 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return haxe.rtti.CTypeTools.nameWithParams(name1, params1);
			}
			
			
			case 3:
			{
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name2 = haxe.lang.Runtime.toString(t.params[0]);
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params2 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 560 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return haxe.rtti.CTypeTools.nameWithParams(name2, params2);
			}
			
			
			case 4:
			{
				//line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.rtti.CType ret = ((haxe.rtti.CType) (t.params[1]) );
				//line 562 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				if (( args.length == 0 )) 
				{
					//line 563 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return ( "Void -> " + haxe.rtti.CTypeTools.toString(ret) );
				}
				else
				{
					//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.CTypeTools.class, "functionArgumentName")) );
					//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					haxe.root.Array<java.lang.String> ret1 = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (args.length) ))) )) );
					//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					{
						//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						int _g = 0;
						//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						int _g1 = args.length;
						//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						while (( _g < _g1 ))
						{
							//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							int i = _g++;
							//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
							ret1.__set(i, haxe.lang.Runtime.toString(f.__hx_invoke1_o(0.0, args.__get(i))));
						}
						
					}
					
					//line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return ( ( ret1.join(" -> ") + " -> " ) + haxe.rtti.CTypeTools.toString(ret) );
				}
				
			}
			
			
			case 5:
			{
				//line 573 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (t.params[0]) );
				//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.lang.Function f1 = ((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.CTypeTools.class, "classField")) );
				//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<java.lang.String> ret2 = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (fields.length) ))) )) );
				//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				{
					//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					int _g2 = 0;
					//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					int _g3 = fields.length;
					//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					while (( _g2 < _g3 ))
					{
						//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						int i1 = _g2++;
						//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
						ret2.__set(i1, haxe.lang.Runtime.toString(f1.__hx_invoke1_o(0.0, fields.__get(i1))));
					}
					
				}
				
				//line 574 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return ( ( "{ " + ret2.join(", ") ) + "}" );
			}
			
			
			case 6:
			{
				//line 567 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.rtti.CType d = ((haxe.rtti.CType) (t.params[0]) );
				//line 568 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				if (( d == null )) 
				{
					//line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return "Dynamic";
				}
				else
				{
					//line 571 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
					return ( ( "Dynamic<" + haxe.rtti.CTypeTools.toString(d) ) + ">" );
				}
				
			}
			
			
			case 7:
			{
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				java.lang.String name3 = haxe.lang.Runtime.toString(t.params[0]);
				//line 559 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				haxe.root.Array<haxe.rtti.CType> params3 = ((haxe.root.Array<haxe.rtti.CType>) (t.params[1]) );
				//line 560 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				return haxe.rtti.CTypeTools.nameWithParams(name3, params3);
			}
			
			
		}
		
		//line 555 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return null;
	}
	
	
	public static java.lang.String nameWithParams(java.lang.String name, haxe.root.Array<haxe.rtti.CType> params)
	{
		//line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		if (( params.length == 0 )) 
		{
			//line 580 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			return name;
		}
		
		//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		java.lang.String tmp = ( name + "<" );
		//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(haxe.rtti.CTypeTools.class, "toString")) );
		//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		haxe.root.Array<java.lang.String> ret = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (params.length) ))) )) );
		//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		{
			//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			int _g = 0;
			//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			int _g1 = params.length;
			//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
			while (( _g < _g1 ))
			{
				//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				int i = _g++;
				//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
				ret.__set(i, haxe.lang.Runtime.toString(f.__hx_invoke1_o(0.0, params.__get(i))));
			}
			
		}
		
		//line 582 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return ( ( tmp + ret.join(", ") ) + ">" );
	}
	
	
	public static java.lang.String functionArgumentName(java.lang.Object arg)
	{
		//line 586 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return ( ( ( (( (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(arg, "opt", true)) ))) ? ("?") : ("") )) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg, "name", true)), "")) ? ("") : (( haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg, "name", true)) + ":" )) )) ) + haxe.rtti.CTypeTools.toString(((haxe.rtti.CType) (haxe.lang.Runtime.getField(arg, "t", true)) )) ) + (( (( haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg, "value", true)) == null )) ? ("") : (( " = " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(arg, "value", true)) )) )) );
	}
	
	
	public static java.lang.String classField(java.lang.Object cf)
	{
		//line 593 "C:\\HaxeToolkit\\haxe\\std\\haxe\\rtti\\CType.hx"
		return ( ( haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(cf, "name", true)) + ":" ) + haxe.rtti.CTypeTools.toString(((haxe.rtti.CType) (haxe.lang.Runtime.getField(cf, "type", true)) )) );
	}
	
	
}


