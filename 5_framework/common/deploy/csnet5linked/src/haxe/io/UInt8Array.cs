// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.io._UInt8Array {
	public sealed class UInt8Array_Impl_ {
		
		static UInt8Array_Impl_() {
			unchecked{
				global::haxe.io._UInt8Array.UInt8Array_Impl_.BYTES_PER_ELEMENT = 1;
			}
		}
		
		
		public static int BYTES_PER_ELEMENT;
		
		
		
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::haxe.io.ArrayBufferViewImpl _new(int elements) {
			global::haxe.io.ArrayBufferViewImpl this1 = new global::haxe.io.ArrayBufferViewImpl(((global::haxe.io.Bytes) (global::haxe.io.Bytes.alloc(elements)) ), ((int) (0) ), ((int) (elements) ));
			global::haxe.io.ArrayBufferViewImpl this2 = ((global::haxe.io.ArrayBufferViewImpl) (this1) );
			return ((global::haxe.io.ArrayBufferViewImpl) (this2) );
		}
		
		
		public static int get_length(global::haxe.io.ArrayBufferViewImpl this1) {
			return this1.byteLength;
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl get_view(global::haxe.io.ArrayBufferViewImpl this1) {
			return ((global::haxe.io.ArrayBufferViewImpl) (this1) );
		}
		
		
		public static int @get(global::haxe.io.ArrayBufferViewImpl this1, int index) {
			return ((int) (this1.bytes.b[( index + this1.byteOffset )]) );
		}
		
		
		public static int @set(global::haxe.io.ArrayBufferViewImpl this1, int index, int @value) {
			if (( ( index >= 0 ) && ( index < ((global::haxe.io.ArrayBufferViewImpl) (this1) ).byteLength ) )) {
				this1.bytes.b[( index + this1.byteOffset )] = ((byte) (@value) );
				return @value;
			}
			
			return 0;
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl sub(global::haxe.io.ArrayBufferViewImpl this1, int begin, global::haxe.lang.Null<int> length) {
			return global::haxe.io._UInt8Array.UInt8Array_Impl_.fromData(this1.sub(begin, length));
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl subarray(global::haxe.io.ArrayBufferViewImpl this1, global::haxe.lang.Null<int> begin, global::haxe.lang.Null<int> end) {
			return global::haxe.io._UInt8Array.UInt8Array_Impl_.fromData(this1.subarray(begin, end));
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl getData(global::haxe.io.ArrayBufferViewImpl this1) {
			return this1;
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl fromData(global::haxe.io.ArrayBufferViewImpl d) {
			return ((global::haxe.io.ArrayBufferViewImpl) (d) );
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl fromArray(global::Array<int> a, global::haxe.lang.Null<int> pos, global::haxe.lang.Null<int> length) {
			int pos1 = ( ( ! (pos.hasValue) ) ? (0) : ((pos).@value) );
			if ( ! (length.hasValue) ) {
				length = new global::haxe.lang.Null<int>(( a.length - pos1 ), true);
			}
			
			if (( ( ( pos1 < 0 ) || ( (length).@value < 0 ) ) || ( ( pos1 + (length).@value ) > a.length ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.io.Error.OutsideBounds)) );
			}
			
			int elements = a.length;
			global::haxe.io.ArrayBufferViewImpl this1 = new global::haxe.io.ArrayBufferViewImpl(((global::haxe.io.Bytes) (global::haxe.io.Bytes.alloc(elements)) ), ((int) (0) ), ((int) (elements) ));
			global::haxe.io.ArrayBufferViewImpl this2 = ((global::haxe.io.ArrayBufferViewImpl) (this1) );
			global::haxe.io.ArrayBufferViewImpl i = ((global::haxe.io.ArrayBufferViewImpl) (this2) );
			{
				int _g = 0;
				global::haxe.lang.Null<int> _g1 = length;
				while (( _g < (_g1).@value )) {
					int idx = _g++;
					{
						int @value = a[( idx + pos1 )];
						if (( ( idx >= 0 ) && ( idx < ((global::haxe.io.ArrayBufferViewImpl) (i) ).byteLength ) )) {
							((global::haxe.io.ArrayBufferViewImpl) (i) ).bytes.b[( idx + ((global::haxe.io.ArrayBufferViewImpl) (i) ).byteOffset )] = ((byte) (@value) );
						}
						
					}
					
				}
				
			}
			
			return i;
		}
		
		
		public static global::haxe.io.ArrayBufferViewImpl fromBytes(global::haxe.io.Bytes bytes, global::haxe.lang.Null<int> bytePos, global::haxe.lang.Null<int> length) {
			int bytePos1 = ( ( ! (bytePos.hasValue) ) ? (0) : ((bytePos).@value) );
			return global::haxe.io._UInt8Array.UInt8Array_Impl_.fromData(((global::haxe.io.ArrayBufferViewImpl) (global::haxe.io._ArrayBufferView.ArrayBufferView_Impl_.fromBytes(bytes, new global::haxe.lang.Null<int>(bytePos1, true), length)) ));
		}
		
		
	}
}


