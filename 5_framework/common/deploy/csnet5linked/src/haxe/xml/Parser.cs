// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml {
	public class XmlParserException : global::haxe.lang.HxObject {
		
		public XmlParserException(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public XmlParserException(string message, string xml, int position) {
			global::haxe.xml.XmlParserException.__hx_ctor_haxe_xml_XmlParserException(this, message, xml, position);
		}
		
		
		protected static void __hx_ctor_haxe_xml_XmlParserException(global::haxe.xml.XmlParserException __hx_this, string message, string xml, int position) {
			unchecked {
				__hx_this.xml = xml;
				__hx_this.message = message;
				__hx_this.position = position;
				__hx_this.lineNumber = 1;
				__hx_this.positionAtLine = 0;
				{
					int _g = 0;
					int _g1 = position;
					while (( _g < _g1 )) {
						int i = _g++;
						int c = ( (( ((uint) (i) ) < xml.Length )) ? (((int) (xml[i]) )) : (-1) );
						if (( c == 10 )) {
							__hx_this.lineNumber++;
							__hx_this.positionAtLine = 0;
						}
						else if (( c != 13 )) {
							__hx_this.positionAtLine++;
						}
						
					}
					
				}
				
			}
		}
		
		
		public string message;
		
		public int lineNumber;
		
		public int positionAtLine;
		
		public int position;
		
		public string xml;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::Type.getClassName(global::Type.getClass<object>(((object) (this) ))), ": "), this.message), " at line "), global::haxe.lang.Runtime.toString(this.lineNumber)), " char "), global::haxe.lang.Runtime.toString(this.positionAtLine));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						this.position = ((int) (@value) );
						return @value;
					}
					
					
					case 446171152:
					{
						this.positionAtLine = ((int) (@value) );
						return @value;
					}
					
					
					case 1981972957:
					{
						this.lineNumber = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5991895:
					{
						this.xml = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1257939113:
					{
						this.position = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 446171152:
					{
						this.positionAtLine = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1981972957:
					{
						this.lineNumber = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 437335495:
					{
						this.message = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5991895:
					{
						return this.xml;
					}
					
					
					case 1257939113:
					{
						return this.position;
					}
					
					
					case 446171152:
					{
						return this.positionAtLine;
					}
					
					
					case 1981972957:
					{
						return this.lineNumber;
					}
					
					
					case 437335495:
					{
						return this.message;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						return ((double) (this.position) );
					}
					
					
					case 446171152:
					{
						return ((double) (this.positionAtLine) );
					}
					
					
					case 1981972957:
					{
						return ((double) (this.lineNumber) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("xml");
			baseArr.push("position");
			baseArr.push("positionAtLine");
			baseArr.push("lineNumber");
			baseArr.push("message");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml {
	public class Parser : global::haxe.lang.HxObject {
		
		static Parser() {
			object __temp_stmt2 = null;
			{
				global::haxe.ds.StringMap<string> h = new global::haxe.ds.StringMap<string>();
				h.@set("lt", "<");
				h.@set("gt", ">");
				h.@set("amp", "&");
				h.@set("quot", "\"");
				h.@set("apos", "\'");
				__temp_stmt2 = h;
			}
			
			object __temp_stmt1 = global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (__temp_stmt2) ));
			global::haxe.xml.Parser.escapes = ((global::haxe.ds.StringMap<string>) (__temp_stmt1) );
		}
		
		
		public Parser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Parser() {
			global::haxe.xml.Parser.__hx_ctor_haxe_xml_Parser(this);
		}
		
		
		protected static void __hx_ctor_haxe_xml_Parser(global::haxe.xml.Parser __hx_this) {
		}
		
		
		public static global::haxe.ds.StringMap<string> escapes;
		
		public static global::Xml parse(string str, global::haxe.lang.Null<bool> strict) {
			bool strict1 = ( ( ! (strict.hasValue) ) ? (false) : ((strict).@value) );
			global::Xml doc = global::Xml.createDocument();
			global::haxe.xml.Parser.doParse(str, strict1, new global::haxe.lang.Null<int>(0, true), doc);
			return doc;
		}
		
		
		public static int doParse(string str, bool strict, global::haxe.lang.Null<int> p, global::Xml parent) {
			unchecked {
				int p1 = ( ( ! (p.hasValue) ) ? (0) : ((p).@value) );
				global::Xml xml = null;
				int state = ((int) (1) );
				int next = ((int) (1) );
				string aname = null;
				int start = 0;
				int nsubs = 0;
				int nbrackets = 0;
				global::StringBuf buf = new global::StringBuf();
				int escapeNext = ((int) (1) );
				int attrValQuote = -1;
				while (( p1 < str.Length )) {
					int c = ((int) (str[p1]) );
					switch (state) {
						case 0:
						{
							switch (c) {
								case 9:
								case 10:
								case 13:
								case 32:
								{
									break;
								}
								
								
								default:
								{
									state = next;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 1:
						{
							if (( c == 60 )) {
								state = ((int) (0) );
								next = ((int) (2) );
							}
							else {
								start = p1;
								state = ((int) (13) );
								continue;
							}
							
							break;
						}
						
						
						case 2:
						{
							switch (c) {
								case 33:
								{
									int index = ( p1 + 1 );
									if (( (( (( ((uint) (index) ) < str.Length )) ? (((int) (str[index]) )) : (-1) )) == 91 )) {
										p1 += 2;
										if (( global::haxe.lang.StringExt.substr(str, p1, new global::haxe.lang.Null<int>(6, true)).ToUpperInvariant() != "CDATA[" )) {
											throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected <![CDATA[") ), ((string) (str) ), ((int) (p1) )))) );
										}
										
										p1 += 5;
										state = ((int) (17) );
										start = ( p1 + 1 );
									}
									else {
										bool tmp = default(bool);
										int index1 = ( p1 + 1 );
										if (( (( (( ((uint) (index1) ) < str.Length )) ? (((int) (str[index1]) )) : (-1) )) != 68 )) {
											int index2 = ( p1 + 1 );
											tmp = ( (( (( ((uint) (index2) ) < str.Length )) ? (((int) (str[index2]) )) : (-1) )) == 100 );
										}
										else {
											tmp = true;
										}
										
										if (tmp) {
											if (( global::haxe.lang.StringExt.substr(str, ( p1 + 2 ), new global::haxe.lang.Null<int>(6, true)).ToUpperInvariant() != "OCTYPE" )) {
												throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected <!DOCTYPE") ), ((string) (str) ), ((int) (p1) )))) );
											}
											
											p1 += 8;
											state = ((int) (16) );
											start = ( p1 + 1 );
										}
										else {
											bool tmp1 = default(bool);
											int index3 = ( p1 + 1 );
											if (( (( (( ((uint) (index3) ) < str.Length )) ? (((int) (str[index3]) )) : (-1) )) == 45 )) {
												int index4 = ( p1 + 2 );
												tmp1 = ( (( (( ((uint) (index4) ) < str.Length )) ? (((int) (str[index4]) )) : (-1) )) != 45 );
											}
											else {
												tmp1 = true;
											}
											
											if (tmp1) {
												throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected <!--") ), ((string) (str) ), ((int) (p1) )))) );
											}
											else {
												p1 += 2;
												state = ((int) (15) );
												start = ( p1 + 1 );
											}
											
										}
										
									}
									
									break;
								}
								
								
								case 47:
								{
									if (( parent == null )) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected node name") ), ((string) (str) ), ((int) (p1) )))) );
									}
									
									start = ( p1 + 1 );
									state = ((int) (0) );
									next = ((int) (10) );
									break;
								}
								
								
								case 63:
								{
									state = ((int) (14) );
									start = p1;
									break;
								}
								
								
								default:
								{
									state = ((int) (3) );
									start = p1;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 3:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								if (( p1 == start )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected node name") ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								xml = global::Xml.createElement(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true)));
								{
									parent.addChild(xml);
									 ++ nsubs;
								}
								
								state = ((int) (0) );
								next = ((int) (4) );
								continue;
							}
							
							break;
						}
						
						
						case 4:
						{
							switch (c) {
								case 47:
								{
									state = ((int) (11) );
									break;
								}
								
								
								case 62:
								{
									state = ((int) (9) );
									break;
								}
								
								
								default:
								{
									state = ((int) (5) );
									start = p1;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 5:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								if (( start == p1 )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected attribute name") ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								string tmp2 = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true));
								aname = tmp2;
								if (xml.exists(aname)) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Duplicate attribute [", aname), "]")) ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								state = ((int) (0) );
								next = ((int) (6) );
								continue;
							}
							
							break;
						}
						
						
						case 6:
						{
							if (( c == 61 )) {
								state = ((int) (0) );
								next = ((int) (7) );
							}
							else {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected =") ), ((string) (str) ), ((int) (p1) )))) );
							}
							
							break;
						}
						
						
						case 7:
						{
							switch (c) {
								case 34:
								case 39:
								{
									buf = new global::StringBuf();
									state = ((int) (8) );
									start = ( p1 + 1 );
									attrValQuote = c;
									break;
								}
								
								
								default:
								{
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected \"") ), ((string) (str) ), ((int) (p1) )))) );
								}
								
							}
							
							break;
						}
						
						
						case 8:
						{
							switch (c) {
								case 38:
								{
									{
										global::haxe.lang.Null<int> len = new global::haxe.lang.Null<int>(( p1 - start ), true);
										buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len.hasValue) ) ? (( str.Length - start )) : ((len).@value) )) ));
									}
									
									state = ((int) (18) );
									escapeNext = ((int) (8) );
									start = ( p1 + 1 );
									break;
								}
								
								
								case 60:
								case 62:
								{
									if (strict) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid unescaped ", global::haxe.lang.StringExt.fromCharCode(c)), " in attribute value")) ), ((string) (str) ), ((int) (p1) )))) );
									}
									else if (( c == attrValQuote )) {
										{
											global::haxe.lang.Null<int> len1 = new global::haxe.lang.Null<int>(( p1 - start ), true);
											buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len1.hasValue) ) ? (( str.Length - start )) : ((len1).@value) )) ));
										}
										
										string val = buf.b.ToString();
										buf = new global::StringBuf();
										xml.@set(aname, val);
										state = ((int) (0) );
										next = ((int) (4) );
									}
									
									break;
								}
								
								
								default:
								{
									if (( c == attrValQuote )) {
										{
											global::haxe.lang.Null<int> len2 = new global::haxe.lang.Null<int>(( p1 - start ), true);
											buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len2.hasValue) ) ? (( str.Length - start )) : ((len2).@value) )) ));
										}
										
										string val1 = buf.b.ToString();
										buf = new global::StringBuf();
										xml.@set(aname, val1);
										state = ((int) (0) );
										next = ((int) (4) );
									}
									
									break;
								}
								
							}
							
							break;
						}
						
						
						case 9:
						{
							p1 = global::haxe.xml.Parser.doParse(str, strict, new global::haxe.lang.Null<int>(p1, true), xml);
							start = p1;
							state = ((int) (1) );
							break;
						}
						
						
						case 10:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								if (( start == p1 )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected node name") ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								string v = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true));
								if (( ( parent == null ) || ( parent.nodeType != ((int) (0) ) ) )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Unexpected </", v), ">, tag is not open")) ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								if (( parent.nodeType != global::Xml.Element )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(parent.nodeType)))) );
								}
								
								if (( v != parent.nodeName )) {
									if (( parent.nodeType != global::Xml.Element )) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(parent.nodeType)))) );
									}
									
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Expected </", parent.nodeName), ">")) ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								state = ((int) (0) );
								next = ((int) (12) );
								continue;
							}
							
							break;
						}
						
						
						case 11:
						{
							if (( c == 62 )) {
								state = ((int) (1) );
							}
							else {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected >") ), ((string) (str) ), ((int) (p1) )))) );
							}
							
							break;
						}
						
						
						case 12:
						{
							if (( c == 62 )) {
								if (( nsubs == 0 )) {
									parent.addChild(global::Xml.createPCData(""));
								}
								
								return p1;
							}
							else {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Expected >") ), ((string) (str) ), ((int) (p1) )))) );
							}
							
						}
						
						
						case 13:
						{
							if (( c == 60 )) {
								{
									global::haxe.lang.Null<int> len3 = new global::haxe.lang.Null<int>(( p1 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len3.hasValue) ) ? (( str.Length - start )) : ((len3).@value) )) ));
								}
								
								global::Xml child = global::Xml.createPCData(buf.b.ToString());
								buf = new global::StringBuf();
								{
									parent.addChild(child);
									 ++ nsubs;
								}
								
								state = ((int) (0) );
								next = ((int) (2) );
							}
							else if (( c == 38 )) {
								{
									global::haxe.lang.Null<int> len4 = new global::haxe.lang.Null<int>(( p1 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len4.hasValue) ) ? (( str.Length - start )) : ((len4).@value) )) ));
								}
								
								state = ((int) (18) );
								escapeNext = ((int) (13) );
								start = ( p1 + 1 );
							}
							
							break;
						}
						
						
						case 14:
						{
							bool tmp3 = default(bool);
							if (( c == 63 )) {
								int index5 = ( p1 + 1 );
								tmp3 = ( (( (( ((uint) (index5) ) < str.Length )) ? (((int) (str[index5]) )) : (-1) )) == 62 );
							}
							else {
								tmp3 = false;
							}
							
							if (tmp3) {
								 ++ p1;
								string str1 = global::haxe.lang.StringExt.substr(str, ( start + 1 ), new global::haxe.lang.Null<int>(( ( p1 - start ) - 2 ), true));
								{
									parent.addChild(global::Xml.createProcessingInstruction(str1));
									 ++ nsubs;
								}
								
								state = ((int) (1) );
							}
							
							break;
						}
						
						
						case 15:
						{
							bool tmp4 = default(bool);
							bool tmp5 = default(bool);
							if (( c == 45 )) {
								int index6 = ( p1 + 1 );
								tmp5 = ( (( (( ((uint) (index6) ) < str.Length )) ? (((int) (str[index6]) )) : (-1) )) == 45 );
							}
							else {
								tmp5 = false;
							}
							
							if (tmp5) {
								int index7 = ( p1 + 2 );
								tmp4 = ( (( (( ((uint) (index7) ) < str.Length )) ? (((int) (str[index7]) )) : (-1) )) == 62 );
							}
							else {
								tmp4 = false;
							}
							
							if (tmp4) {
								{
									parent.addChild(global::Xml.createComment(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true))));
									 ++ nsubs;
								}
								
								p1 += 2;
								state = ((int) (1) );
							}
							
							break;
						}
						
						
						case 16:
						{
							if (( c == 91 )) {
								 ++ nbrackets;
							}
							else if (( c == 93 )) {
								 -- nbrackets;
							}
							else if (( ( c == 62 ) && ( nbrackets == 0 ) )) {
								{
									parent.addChild(global::Xml.createDocType(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true))));
									 ++ nsubs;
								}
								
								state = ((int) (1) );
							}
							
							break;
						}
						
						
						case 17:
						{
							bool tmp6 = default(bool);
							bool tmp7 = default(bool);
							if (( c == 93 )) {
								int index8 = ( p1 + 1 );
								tmp7 = ( (( (( ((uint) (index8) ) < str.Length )) ? (((int) (str[index8]) )) : (-1) )) == 93 );
							}
							else {
								tmp7 = false;
							}
							
							if (tmp7) {
								int index9 = ( p1 + 2 );
								tmp6 = ( (( (( ((uint) (index9) ) < str.Length )) ? (((int) (str[index9]) )) : (-1) )) == 62 );
							}
							else {
								tmp6 = false;
							}
							
							if (tmp6) {
								global::Xml child1 = global::Xml.createCData(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true)));
								{
									parent.addChild(child1);
									 ++ nsubs;
								}
								
								p1 += 2;
								state = ((int) (1) );
							}
							
							break;
						}
						
						
						case 18:
						{
							if (( c == 59 )) {
								string s = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( p1 - start ), true));
								if (( (( (( ((uint) (0) ) < s.Length )) ? (((int) (s[0]) )) : (-1) )) == 35 )) {
									global::haxe.lang.Null<int> c1 = ( (( (( (( ((uint) (1) ) < s.Length )) ? (((int) (s[1]) )) : (-1) )) == 120 )) ? (global::Std.parseInt(global::haxe.lang.Runtime.concat("0", global::haxe.lang.StringExt.substr(s, 1, new global::haxe.lang.Null<int>(( s.Length - 1 ), true))))) : (global::Std.parseInt(global::haxe.lang.StringExt.substr(s, 1, new global::haxe.lang.Null<int>(( s.Length - 1 ), true)))) );
									buf.addChar((c1).@value);
								}
								else if ( ! (global::haxe.xml.Parser.escapes.exists(s)) ) {
									if (strict) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat("Undefined entity: ", s)) ), ((string) (str) ), ((int) (p1) )))) );
									}
									
									buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("&", s), ";"))) ));
								}
								else {
									string x = global::haxe.lang.Runtime.toString((global::haxe.xml.Parser.escapes.@get(s)).toDynamic());
									buf.b.Append(((string) (global::Std.@string(x)) ));
								}
								
								start = ( p1 + 1 );
								state = escapeNext;
							}
							else if ((  ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) )))  && ( c != 35 ) )) {
								if (strict) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat("Invalid character in entity: ", global::haxe.lang.StringExt.fromCharCode(c))) ), ((string) (str) ), ((int) (p1) )))) );
								}
								
								buf.addChar(38);
								{
									global::haxe.lang.Null<int> len5 = new global::haxe.lang.Null<int>(( p1 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len5.hasValue) ) ? (( str.Length - start )) : ((len5).@value) )) ));
								}
								
								 -- p1;
								start = ( p1 + 1 );
								state = escapeNext;
							}
							
							break;
						}
						
						
					}
					
					 ++ p1;
				}
				
				if (( state == ((int) (1) ) )) {
					start = p1;
					state = ((int) (13) );
				}
				
				if (( state == ((int) (13) ) )) {
					if (( parent.nodeType == ((int) (0) ) )) {
						if (( parent.nodeType != global::Xml.Element )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(parent.nodeType)))) );
						}
						
						throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Unclosed node <", parent.nodeName), ">")) ), ((string) (str) ), ((int) (p1) )))) );
					}
					
					if (( ( p1 != start ) || ( nsubs == 0 ) )) {
						{
							global::haxe.lang.Null<int> len6 = new global::haxe.lang.Null<int>(( p1 - start ), true);
							buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len6.hasValue) ) ? (( str.Length - start )) : ((len6).@value) )) ));
						}
						
						{
							parent.addChild(global::Xml.createPCData(buf.b.ToString()));
							 ++ nsubs;
						}
						
					}
					
					return p1;
				}
				
				if (( (  ! (strict)  && ( state == ((int) (18) ) ) ) && ( escapeNext == ((int) (13) ) ) )) {
					buf.addChar(38);
					{
						global::haxe.lang.Null<int> len7 = new global::haxe.lang.Null<int>(( p1 - start ), true);
						buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len7.hasValue) ) ? (( str.Length - start )) : ((len7).@value) )) ));
					}
					
					{
						parent.addChild(global::Xml.createPCData(buf.b.ToString()));
						 ++ nsubs;
					}
					
					return p1;
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::haxe.xml.XmlParserException(((string) ("Unexpected end") ), ((string) (str) ), ((int) (p1) )))) );
			}
		}
		
		
		public static bool isValidChar(int c) {
			unchecked {
				if ( ! ((( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ))) ) {
					return ( c == 45 );
				}
				else {
					return true;
				}
				
			}
		}
		
		
	}
}


