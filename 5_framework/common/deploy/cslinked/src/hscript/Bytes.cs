// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Bytes : global::haxe.lang.HxObject {
		
		public Bytes(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Bytes(global::haxe.io.Bytes bin) {
			global::hscript.Bytes.__hx_ctor_hscript_Bytes(this, bin);
		}
		
		
		protected static void __hx_ctor_hscript_Bytes(global::hscript.Bytes __hx_this, global::haxe.io.Bytes bin) {
			unchecked {
				__hx_this.bin = bin;
				__hx_this.pin = 0;
				__hx_this.bout = new global::haxe.io.BytesBuffer();
				__hx_this.hstrings = new global::haxe.ds.StringMap<int>();
				__hx_this.strings = new global::Array<string>(new string[]{null});
				__hx_this.nstrings = 1;
			}
		}
		
		
		public static global::haxe.io.Bytes encode(object e) {
			global::hscript.Bytes b = new global::hscript.Bytes(default(global::haxe.io.Bytes));
			b.doEncode(e);
			return b.bout.getBytes();
		}
		
		
		public static object decode(global::haxe.io.Bytes bytes) {
			global::hscript.Bytes b = new global::hscript.Bytes(((global::haxe.io.Bytes) (bytes) ));
			return b.doDecode();
		}
		
		
		public global::haxe.io.Bytes bin;
		
		public global::haxe.io.BytesBuffer bout;
		
		public int pin;
		
		public global::haxe.ds.StringMap<int> hstrings;
		
		public global::Array<string> strings;
		
		public int nstrings;
		
		public virtual void doEncodeString(string v) {
			unchecked {
				global::haxe.lang.Null<int> vid = ((global::haxe.ds.StringMap<int>) (global::haxe.ds.StringMap<object>.__hx_cast<int>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, int>) (this.hstrings) )) ))) ).@get(v);
				if ( ! (vid.hasValue) ) {
					if (( this.nstrings == 256 )) {
						this.hstrings = new global::haxe.ds.StringMap<int>();
						this.nstrings = 1;
					}
					
					((global::haxe.ds.StringMap<int>) (global::haxe.ds.StringMap<object>.__hx_cast<int>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, int>) (this.hstrings) )) ))) ).@set(v, this.nstrings);
					( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (0) ));
					global::haxe.io.Bytes vb = global::haxe.io.Bytes.ofString(v, null);
					( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (vb.length) ));
					( this.bout.b as global::System.IO.Stream ).Write(((byte[]) (vb.b) ), ((int) (0) ), ((int) (vb.length) ));
					this.nstrings++;
				}
				else {
					( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) ((vid).@value) ));
				}
				
			}
		}
		
		
		public virtual string doDecodeString() {
			unchecked {
				int id = ((int) (this.bin.b[this.pin++]) );
				if (( id == 0 )) {
					int len = ((int) (this.bin.b[this.pin]) );
					string str = this.bin.getString(( this.pin + 1 ), len, null);
					this.pin += ( len + 1 );
					if (( this.strings.length == 255 )) {
						this.strings = new global::Array<string>(new string[]{null});
					}
					
					this.strings.push(str);
					return str;
				}
				
				return this.strings[id];
			}
		}
		
		
		public virtual void doEncodeInt(int v) {
			this.bout.addInt32(v);
		}
		
		
		public virtual void doEncodeConst(global::hscript.Const c) {
			unchecked {
				switch (c._hx_index) {
					case 0:
					{
						int v = ( c as global::hscript.Const_CInt ).v;
						if (( ( v >= 0 ) && ( v <= 255 ) )) {
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (0) ));
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (v) ));
						}
						else {
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (1) ));
							this.doEncodeInt(v);
						}
						
						break;
					}
					
					
					case 1:
					{
						double f = ( c as global::hscript.Const_CFloat ).f;
						{
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (2) ));
							this.doEncodeString(global::Std.@string(f));
						}
						
						break;
					}
					
					
					case 2:
					{
						string s = ( c as global::hscript.Const_CString ).s;
						{
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (3) ));
							this.doEncodeString(s);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual int doDecodeInt() {
			unchecked {
				global::haxe.io.Bytes _this = this.bin;
				int pos = this.pin;
				int i = ( ( ( ((int) (_this.b[pos]) ) | ( ((int) (_this.b[( pos + 1 )]) ) << 8 ) ) | ( ((int) (_this.b[( pos + 2 )]) ) << 16 ) ) | ( ((int) (_this.b[( pos + 3 )]) ) << 24 ) );
				this.pin += 4;
				return i;
			}
		}
		
		
		public virtual global::hscript.Const doDecodeConst() {
			unchecked {
				switch (((int) (this.bin.b[this.pin++]) )) {
					case 0:
					{
						return global::hscript.Const.CInt(((int) (this.bin.b[this.pin++]) ));
					}
					
					
					case 1:
					{
						int i = this.doDecodeInt();
						return global::hscript.Const.CInt(i);
					}
					
					
					case 2:
					{
						return global::hscript.Const.CFloat(global::Std.parseFloat(this.doDecodeString()));
					}
					
					
					case 3:
					{
						return global::hscript.Const.CString(this.doDecodeString());
					}
					
					
					default:
					{
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid code ", global::haxe.lang.Runtime.toString(((int) (this.bin.b[( this.pin - 1 )]) ))))) );
					}
					
				}
				
			}
		}
		
		
		public virtual void doEncode(object e) {
			unchecked {
				this.doEncodeString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "origin", 1258363366, true)));
				this.doEncodeInt(((int) (global::haxe.lang.Runtime.getField_f(e, "line", 1202919412, true)) ));
				global::hscript.ExprDef e1 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e, "e", 101, true)) );
				( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (e1._hx_index) ));
				switch (e1._hx_index) {
					case 0:
					{
						global::hscript.Const c = ( e1 as global::hscript.ExprDef_EConst ).c;
						this.doEncodeConst(c);
						break;
					}
					
					
					case 1:
					{
						string v = ( e1 as global::hscript.ExprDef_EIdent ).v;
						this.doEncodeString(v);
						break;
					}
					
					
					case 2:
					{
						global::hscript.CType _g = ( e1 as global::hscript.ExprDef_EVar ).t;
						{
							string n = ( e1 as global::hscript.ExprDef_EVar ).n;
							object e2 = ( e1 as global::hscript.ExprDef_EVar ).e;
							{
								this.doEncodeString(n);
								if (( e2 == null )) {
									( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
								}
								else {
									this.doEncode(e2);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 3:
					{
						object e3 = ( e1 as global::hscript.ExprDef_EParent ).e;
						this.doEncode(e3);
						break;
					}
					
					
					case 4:
					{
						global::Array<object> el = ( e1 as global::hscript.ExprDef_EBlock ).e;
						{
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (el.length) ));
							{
								int _g1 = 0;
								while (( _g1 < el.length )) {
									object e4 = el[_g1];
									 ++ _g1;
									this.doEncode(e4);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 5:
					{
						object e5 = ( e1 as global::hscript.ExprDef_EField ).e;
						string f = ( e1 as global::hscript.ExprDef_EField ).f;
						{
							this.doEncode(e5);
							this.doEncodeString(f);
						}
						
						break;
					}
					
					
					case 6:
					{
						string op = ( e1 as global::hscript.ExprDef_EBinop ).op;
						object e11 = ( e1 as global::hscript.ExprDef_EBinop ).e1;
						object e21 = ( e1 as global::hscript.ExprDef_EBinop ).e2;
						{
							this.doEncodeString(op);
							this.doEncode(e11);
							this.doEncode(e21);
						}
						
						break;
					}
					
					
					case 7:
					{
						string op1 = ( e1 as global::hscript.ExprDef_EUnop ).op;
						bool prefix = ( e1 as global::hscript.ExprDef_EUnop ).prefix;
						object e6 = ( e1 as global::hscript.ExprDef_EUnop ).e;
						{
							this.doEncodeString(op1);
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (( (prefix) ? (1) : (0) )) ));
							this.doEncode(e6);
						}
						
						break;
					}
					
					
					case 8:
					{
						object e7 = ( e1 as global::hscript.ExprDef_ECall ).e;
						global::Array<object> el1 = ( e1 as global::hscript.ExprDef_ECall ).@params;
						{
							this.doEncode(e7);
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (el1.length) ));
							{
								int _g2 = 0;
								while (( _g2 < el1.length )) {
									object e8 = el1[_g2];
									 ++ _g2;
									this.doEncode(e8);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 9:
					{
						object cond = ( e1 as global::hscript.ExprDef_EIf ).cond;
						object e12 = ( e1 as global::hscript.ExprDef_EIf ).e1;
						object e22 = ( e1 as global::hscript.ExprDef_EIf ).e2;
						{
							this.doEncode(cond);
							this.doEncode(e12);
							if (( e22 == null )) {
								( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
							}
							else {
								this.doEncode(e22);
							}
							
						}
						
						break;
					}
					
					
					case 10:
					{
						object cond1 = ( e1 as global::hscript.ExprDef_EWhile ).cond;
						object e9 = ( e1 as global::hscript.ExprDef_EWhile ).e;
						{
							this.doEncode(cond1);
							this.doEncode(e9);
						}
						
						break;
					}
					
					
					case 11:
					{
						string v1 = ( e1 as global::hscript.ExprDef_EFor ).v;
						object it = ( e1 as global::hscript.ExprDef_EFor ).it;
						object e10 = ( e1 as global::hscript.ExprDef_EFor ).e;
						{
							this.doEncodeString(v1);
							this.doEncode(it);
							this.doEncode(e10);
						}
						
						break;
					}
					
					
					case 12:
					case 13:
					{
						break;
					}
					
					
					case 14:
					{
						global::hscript.CType _g3 = ( e1 as global::hscript.ExprDef_EFunction ).ret;
						{
							global::Array<object> @params = ( e1 as global::hscript.ExprDef_EFunction ).args;
							object e13 = ( e1 as global::hscript.ExprDef_EFunction ).e;
							string name = ( e1 as global::hscript.ExprDef_EFunction ).name;
							{
								( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (@params.length) ));
								{
									int _g4 = 0;
									while (( _g4 < @params.length )) {
										object p = @params[_g4];
										 ++ _g4;
										this.doEncodeString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p, "name", 1224700491, true)));
									}
									
								}
								
								this.doEncode(e13);
								this.doEncodeString(( (( name == null )) ? ("") : (name) ));
							}
							
						}
						
						break;
					}
					
					
					case 15:
					{
						object e14 = ( e1 as global::hscript.ExprDef_EReturn ).e;
						if (( e14 == null )) {
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
						}
						else {
							this.doEncode(e14);
						}
						
						break;
					}
					
					
					case 16:
					{
						object e15 = ( e1 as global::hscript.ExprDef_EArray ).e;
						object index = ( e1 as global::hscript.ExprDef_EArray ).index;
						{
							this.doEncode(e15);
							this.doEncode(index);
						}
						
						break;
					}
					
					
					case 17:
					{
						global::Array<object> el2 = ( e1 as global::hscript.ExprDef_EArrayDecl ).e;
						{
							if (( el2.length >= 255 )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
							}
							
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (el2.length) ));
							{
								int _g5 = 0;
								while (( _g5 < el2.length )) {
									object e16 = el2[_g5];
									 ++ _g5;
									this.doEncode(e16);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 18:
					{
						string cl = ( e1 as global::hscript.ExprDef_ENew ).cl;
						global::Array<object> params1 = ( e1 as global::hscript.ExprDef_ENew ).@params;
						{
							this.doEncodeString(cl);
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (params1.length) ));
							{
								int _g6 = 0;
								while (( _g6 < params1.length )) {
									object e17 = params1[_g6];
									 ++ _g6;
									this.doEncode(e17);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 19:
					{
						object e18 = ( e1 as global::hscript.ExprDef_EThrow ).e;
						this.doEncode(e18);
						break;
					}
					
					
					case 20:
					{
						global::hscript.CType _g7 = ( e1 as global::hscript.ExprDef_ETry ).t;
						{
							object e19 = ( e1 as global::hscript.ExprDef_ETry ).e;
							string v2 = ( e1 as global::hscript.ExprDef_ETry ).v;
							object ecatch = ( e1 as global::hscript.ExprDef_ETry ).ecatch;
							{
								this.doEncode(e19);
								this.doEncodeString(v2);
								this.doEncode(ecatch);
							}
							
						}
						
						break;
					}
					
					
					case 21:
					{
						global::Array<object> fl = ( e1 as global::hscript.ExprDef_EObject ).fl;
						{
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (fl.length) ));
							{
								int _g8 = 0;
								while (( _g8 < fl.length )) {
									object f1 = fl[_g8];
									 ++ _g8;
									this.doEncodeString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true)));
									this.doEncode(global::haxe.lang.Runtime.getField(f1, "e", 101, true));
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 22:
					{
						object cond2 = ( e1 as global::hscript.ExprDef_ETernary ).cond;
						object e110 = ( e1 as global::hscript.ExprDef_ETernary ).e1;
						object e23 = ( e1 as global::hscript.ExprDef_ETernary ).e2;
						{
							this.doEncode(cond2);
							this.doEncode(e110);
							this.doEncode(e23);
						}
						
						break;
					}
					
					
					case 23:
					{
						object e20 = ( e1 as global::hscript.ExprDef_ESwitch ).e;
						global::Array<object> cases = ( e1 as global::hscript.ExprDef_ESwitch ).cases;
						object def = ( e1 as global::hscript.ExprDef_ESwitch ).defaultExpr;
						{
							this.doEncode(e20);
							{
								int _g9 = 0;
								while (( _g9 < cases.length )) {
									object c1 = cases[_g9];
									 ++ _g9;
									if (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c1, "values", 1337394146, true)) ))) ).length == 0 )) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
									}
									
									{
										int _g10 = 0;
										global::Array<object> _g11 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c1, "values", 1337394146, true)) ))) );
										while (( _g10 < _g11.length )) {
											object v3 = _g11[_g10];
											 ++ _g10;
											this.doEncode(v3);
										}
										
									}
									
									( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
									this.doEncode(global::haxe.lang.Runtime.getField(c1, "expr", 1126038837, true));
								}
								
							}
							
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
							if (( def == null )) {
								( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (255) ));
							}
							else {
								this.doEncode(def);
							}
							
						}
						
						break;
					}
					
					
					case 24:
					{
						object cond3 = ( e1 as global::hscript.ExprDef_EDoWhile ).cond;
						object e24 = ( e1 as global::hscript.ExprDef_EDoWhile ).e;
						{
							this.doEncode(cond3);
							this.doEncode(e24);
						}
						
						break;
					}
					
					
					case 25:
					{
						string name1 = ( e1 as global::hscript.ExprDef_EMeta ).name;
						global::Array<object> args = ( e1 as global::hscript.ExprDef_EMeta ).args;
						object e25 = ( e1 as global::hscript.ExprDef_EMeta ).e;
						{
							this.doEncodeString(name1);
							( this.bout.b as global::System.IO.Stream ).WriteByte(((byte) (( (( args == null )) ? (0) : (( args.length + 1 )) )) ));
							if (( args != null )) {
								int _g12 = 0;
								while (( _g12 < args.length )) {
									object e26 = args[_g12];
									 ++ _g12;
									this.doEncode(e26);
								}
								
							}
							
							this.doEncode(e25);
						}
						
						break;
					}
					
					
					case 26:
					{
						global::hscript.CType _g13 = ( e1 as global::hscript.ExprDef_ECheckType ).t;
						{
							object e27 = ( e1 as global::hscript.ExprDef_ECheckType ).e;
							this.doEncode(e27);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual object doDecode() {
			unchecked {
				if (( ((int) (this.bin.b[this.pin]) ) == 255 )) {
					this.pin++;
					return null;
				}
				
				string origin = this.doDecodeString();
				int line = this.doDecodeInt();
				{
					global::hscript.ExprDef __temp_odecl1 = this._doDecode();
					return new global::haxe.lang.DynamicObject(new int[]{101, 1258363366}, new object[]{__temp_odecl1, origin}, new int[]{1202919412, 1247473716, 1247475490}, new double[]{((double) (line) ), ((double) (0) ), ((double) (0) )});
				}
				
			}
		}
		
		
		public virtual global::hscript.ExprDef _doDecode() {
			unchecked {
				switch (((int) (this.bin.b[this.pin++]) )) {
					case 0:
					{
						return global::hscript.ExprDef.EConst(this.doDecodeConst());
					}
					
					
					case 1:
					{
						return global::hscript.ExprDef.EIdent(this.doDecodeString());
					}
					
					
					case 2:
					{
						string v = this.doDecodeString();
						return global::hscript.ExprDef.EVar(v, null, this.doDecode());
					}
					
					
					case 3:
					{
						return global::hscript.ExprDef.EParent(this.doDecode());
					}
					
					
					case 4:
					{
						global::Array<object> a = new global::Array<object>();
						{
							int _g = 0;
							int _g1 = ((int) (this.bin.b[this.pin++]) );
							while (( _g < _g1 )) {
								int i = _g++;
								a.push(this.doDecode());
							}
							
						}
						
						return global::hscript.ExprDef.EBlock(a);
					}
					
					
					case 5:
					{
						object e = this.doDecode();
						return global::hscript.ExprDef.EField(e, this.doDecodeString());
					}
					
					
					case 6:
					{
						string op = this.doDecodeString();
						object e1 = this.doDecode();
						return global::hscript.ExprDef.EBinop(op, e1, this.doDecode());
					}
					
					
					case 7:
					{
						string op1 = this.doDecodeString();
						bool prefix = ( ((int) (this.bin.b[this.pin++]) ) != 0 );
						return global::hscript.ExprDef.EUnop(op1, prefix, this.doDecode());
					}
					
					
					case 8:
					{
						object e2 = this.doDecode();
						global::Array<object> @params = new global::Array<object>();
						{
							int _g2 = 0;
							int _g3 = ((int) (this.bin.b[this.pin++]) );
							while (( _g2 < _g3 )) {
								int i1 = _g2++;
								@params.push(this.doDecode());
							}
							
						}
						
						return global::hscript.ExprDef.ECall(e2, @params);
					}
					
					
					case 9:
					{
						object cond = this.doDecode();
						object e11 = this.doDecode();
						return global::hscript.ExprDef.EIf(cond, e11, this.doDecode());
					}
					
					
					case 10:
					{
						object cond1 = this.doDecode();
						return global::hscript.ExprDef.EWhile(cond1, this.doDecode());
					}
					
					
					case 11:
					{
						string v1 = this.doDecodeString();
						object it = this.doDecode();
						return global::hscript.ExprDef.EFor(v1, it, this.doDecode());
					}
					
					
					case 12:
					{
						return global::hscript.ExprDef.EBreak;
					}
					
					
					case 13:
					{
						return global::hscript.ExprDef.EContinue;
					}
					
					
					case 14:
					{
						global::Array<object> params1 = new global::Array<object>();
						{
							int _g4 = 0;
							int _g5 = ((int) (this.bin.b[this.pin++]) );
							while (( _g4 < _g5 )) {
								int i2 = _g4++;
								object __temp_stmt3 = null;
								{
									string __temp_odecl1 = this.doDecodeString();
									__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{1224700491}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
								}
								
								params1.push(__temp_stmt3);
							}
							
						}
						
						object e3 = this.doDecode();
						string name = this.doDecodeString();
						return global::hscript.ExprDef.EFunction(params1, e3, ( (( name == "" )) ? (null) : (name) ), null);
					}
					
					
					case 15:
					{
						return global::hscript.ExprDef.EReturn(this.doDecode());
					}
					
					
					case 16:
					{
						object e4 = this.doDecode();
						return global::hscript.ExprDef.EArray(e4, this.doDecode());
					}
					
					
					case 17:
					{
						global::Array<object> el = new global::Array<object>();
						{
							int _g6 = 0;
							int _g7 = ((int) (this.bin.b[this.pin++]) );
							while (( _g6 < _g7 )) {
								int i3 = _g6++;
								el.push(this.doDecode());
							}
							
						}
						
						return global::hscript.ExprDef.EArrayDecl(el);
					}
					
					
					case 18:
					{
						string cl = this.doDecodeString();
						global::Array<object> el1 = new global::Array<object>();
						{
							int _g8 = 0;
							int _g9 = ((int) (this.bin.b[this.pin++]) );
							while (( _g8 < _g9 )) {
								int i4 = _g8++;
								el1.push(this.doDecode());
							}
							
						}
						
						return global::hscript.ExprDef.ENew(cl, el1);
					}
					
					
					case 19:
					{
						return global::hscript.ExprDef.EThrow(this.doDecode());
					}
					
					
					case 20:
					{
						object e5 = this.doDecode();
						string v2 = this.doDecodeString();
						return global::hscript.ExprDef.ETry(e5, v2, null, this.doDecode());
					}
					
					
					case 21:
					{
						global::Array<object> fl = new global::Array<object>();
						{
							int _g10 = 0;
							int _g11 = ((int) (this.bin.b[this.pin++]) );
							while (( _g10 < _g11 )) {
								int i5 = _g10++;
								string name1 = this.doDecodeString();
								object e6 = this.doDecode();
								fl.push(new global::haxe.lang.DynamicObject(new int[]{101, 1224700491}, new object[]{e6, name1}, new int[]{}, new double[]{}));
							}
							
						}
						
						return global::hscript.ExprDef.EObject(fl);
					}
					
					
					case 22:
					{
						object cond2 = this.doDecode();
						object e12 = this.doDecode();
						object e21 = this.doDecode();
						return global::hscript.ExprDef.ETernary(cond2, e12, e21);
					}
					
					
					case 23:
					{
						object e7 = this.doDecode();
						global::Array<object> cases = new global::Array<object>(new object[]{});
						while (true) {
							object v3 = this.doDecode();
							if (( v3 == null )) {
								break;
							}
							
							global::Array<object> values = new global::Array<object>(new object[]{v3});
							while (true) {
								v3 = this.doDecode();
								if (( v3 == null )) {
									break;
								}
								
								values.push(v3);
							}
							
							object __temp_stmt4 = null;
							{
								object __temp_odecl2 = this.doDecode();
								__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{1126038837, 1337394146}, new object[]{__temp_odecl2, values}, new int[]{}, new double[]{});
							}
							
							cases.push(__temp_stmt4);
						}
						
						object def = this.doDecode();
						return global::hscript.ExprDef.ESwitch(e7, cases, def);
					}
					
					
					case 24:
					{
						object cond3 = this.doDecode();
						return global::hscript.ExprDef.EDoWhile(cond3, this.doDecode());
					}
					
					
					case 25:
					{
						string name2 = this.doDecodeString();
						int count = ((int) (this.bin.b[this.pin++]) );
						global::Array<object> args = null;
						if (( count == 0 )) {
							args = null;
						}
						else {
							global::Array<object> _g12 = new global::Array<object>(new object[]{});
							{
								int _g13 = 0;
								int _g14 = ( count - 1 );
								while (( _g13 < _g14 )) {
									int i6 = _g13++;
									_g12.push(this.doDecode());
								}
								
							}
							
							args = _g12;
						}
						
						return global::hscript.ExprDef.EMeta(name2, args, this.doDecode());
					}
					
					
					case 26:
					{
						return global::hscript.ExprDef.ECheckType(this.doDecode(), global::hscript.CType.CTPath(new global::Array<string>(new string[]{"Void"}), null));
					}
					
					
					case 255:
					{
						return null;
					}
					
					
					default:
					{
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid code ", global::haxe.lang.Runtime.toString(((int) (this.bin.b[( this.pin - 1 )]) ))))) );
					}
					
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 211851220:
					{
						this.nstrings = ((int) (@value) );
						return @value;
					}
					
					
					case 5593173:
					{
						this.pin = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 211851220:
					{
						this.nstrings = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2029227650:
					{
						this.strings = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 896658202:
					{
						this.hstrings = ((global::haxe.ds.StringMap<int>) (global::haxe.ds.StringMap<object>.__hx_cast<int>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 5593173:
					{
						this.pin = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1092323692:
					{
						this.bout = ((global::haxe.io.BytesBuffer) (@value) );
						return @value;
					}
					
					
					case 4896967:
					{
						this.bin = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1083890296:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "_doDecode", 1083890296)) );
					}
					
					
					case 2030363417:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doDecode", 2030363417)) );
					}
					
					
					case 234584065:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doEncode", 234584065)) );
					}
					
					
					case 937143178:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doDecodeConst", 937143178)) );
					}
					
					
					case 497620822:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doDecodeInt", 497620822)) );
					}
					
					
					case 2069384610:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doEncodeConst", 2069384610)) );
					}
					
					
					case 1935704942:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doEncodeInt", 1935704942)) );
					}
					
					
					case 1907251402:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doDecodeString", 1907251402)) );
					}
					
					
					case 994020274:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doEncodeString", 994020274)) );
					}
					
					
					case 211851220:
					{
						return this.nstrings;
					}
					
					
					case 2029227650:
					{
						return this.strings;
					}
					
					
					case 896658202:
					{
						return this.hstrings;
					}
					
					
					case 5593173:
					{
						return this.pin;
					}
					
					
					case 1092323692:
					{
						return this.bout;
					}
					
					
					case 4896967:
					{
						return this.bin;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 211851220:
					{
						return ((double) (this.nstrings) );
					}
					
					
					case 5593173:
					{
						return ((double) (this.pin) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1083890296:
					{
						return this._doDecode();
					}
					
					
					case 2030363417:
					{
						return this.doDecode();
					}
					
					
					case 234584065:
					{
						this.doEncode(dynargs[0]);
						break;
					}
					
					
					case 937143178:
					{
						return this.doDecodeConst();
					}
					
					
					case 497620822:
					{
						return this.doDecodeInt();
					}
					
					
					case 2069384610:
					{
						this.doEncodeConst(((global::hscript.Const) (dynargs[0]) ));
						break;
					}
					
					
					case 1935704942:
					{
						this.doEncodeInt(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1907251402:
					{
						return this.doDecodeString();
					}
					
					
					case 994020274:
					{
						this.doEncodeString(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("nstrings");
			baseArr.push("strings");
			baseArr.push("hstrings");
			baseArr.push("pin");
			baseArr.push("bout");
			baseArr.push("bin");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


