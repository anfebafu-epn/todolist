<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \haxe\io\_BytesData\Container;
use \php\_Boot\HxAnon;
use \haxe\io\Error as IoError;
use \php\Boot;
use \haxe\Exception;
use \haxe\io\BytesBuffer;
use \haxe\io\Bytes as IoBytes;
use \haxe\ds\StringMap;

class Bytes {
	/**
	 * @var IoBytes
	 */
	public $bin;
	/**
	 * @var BytesBuffer
	 */
	public $bout;
	/**
	 * @var StringMap
	 */
	public $hstrings;
	/**
	 * @var int
	 */
	public $nstrings;
	/**
	 * @var int
	 */
	public $pin;
	/**
	 * @var string[]|\Array_hx
	 */
	public $strings;

	/**
	 * @param IoBytes $bytes
	 * 
	 * @return object
	 */
	public static function decode ($bytes) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:395: characters 3-28
		$b = new Bytes($bytes);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:396: characters 3-22
		return $b->doDecode();
	}

	/**
	 * @param object $e
	 * 
	 * @return IoBytes
	 */
	public static function encode ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:389: characters 3-23
		$b = new Bytes();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:390: characters 3-16
		$b->doEncode($e);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:391: characters 3-27
		return $b->bout->getBytes();
	}

	/**
	 * @param IoBytes $bin
	 * 
	 * @return void
	 */
	public function __construct ($bin = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:35: characters 3-17
		$this->bin = $bin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:36: characters 3-10
		$this->pin = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:37: characters 3-35
		$this->bout = new BytesBuffer();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:38: characters 3-33
		$this->hstrings = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:39: characters 3-19
		$this->strings = \Array_hx::wrap([null]);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:40: characters 3-15
		$this->nstrings = 1;
	}

	/**
	 * @return ExprDef
	 */
	public function _doDecode () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:266: characters 18-32
		$__hx__switch = (\ord($this->bin->b->s[$this->pin++]));
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:268: characters 4-29
			return ExprDef::EConst($this->doDecodeConst());
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:270: characters 4-30
			return ExprDef::EIdent($this->doDecodeString());
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:272: characters 4-29
			$v = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:273: characters 4-22
			return ExprDef::EVar($v, null, $this->doDecode());
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:275: characters 4-23
			return ExprDef::EParent($this->doDecode());
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:277: characters 4-24
			$a = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:278: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:278: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:278: lines 278-279
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:278: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:279: characters 5-23
				$x = $this->doDecode();
				$a->arr[$a->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:280: characters 4-13
			return ExprDef::EBlock($a);
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:282: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:283: characters 4-30
			return ExprDef::EField($e, $this->doDecodeString());
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:285: characters 4-30
			$op = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:286: characters 4-24
			$e1 = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:287: characters 4-28
			return ExprDef::EBinop($op, $e1, $this->doDecode());
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:289: characters 4-30
			$op = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:290: characters 4-37
			$prefix = \ord($this->bin->b->s[$this->pin++]) !== 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:291: characters 4-31
			return ExprDef::EUnop($op, $prefix, $this->doDecode());
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:293: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:294: characters 4-29
			$params = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:295: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:295: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:295: lines 295-296
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:295: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:296: characters 5-28
				$x = $this->doDecode();
				$params->arr[$params->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:297: characters 4-19
			return ExprDef::ECall($e, $params);
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:299: characters 4-26
			$cond = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:300: characters 4-24
			$e1 = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:301: characters 4-27
			return ExprDef::EIf($cond, $e1, $this->doDecode());
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:303: characters 4-26
			$cond = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:304: characters 4-27
			return ExprDef::EWhile($cond, $this->doDecode());
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:306: characters 4-29
			$v = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:307: characters 4-24
			$it = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:308: characters 4-25
			return ExprDef::EFor($v, $it, $this->doDecode());
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:310: characters 4-10
			return ExprDef::EBreak();
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:312: characters 4-13
			return ExprDef::EContinue();
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:314: characters 4-39
			$params = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:315: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:315: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:315: lines 315-316
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:315: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:316: characters 5-45
				$x = new _HxAnon_Bytes0($this->doDecodeString());
				$params->arr[$params->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:317: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:318: characters 4-32
			$name = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:319: characters 4-49
			return ExprDef::EFunction($params, $e, ($name === "" ? null : $name));
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:321: characters 4-23
			return ExprDef::EReturn($this->doDecode());
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:323: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:324: characters 4-24
			return ExprDef::EArray($e, $this->doDecode());
		} else if ($__hx__switch === 17) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:326: characters 4-25
			$el = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:327: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:327: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:327: lines 327-328
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:327: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:328: characters 5-24
				$x = $this->doDecode();
				$el->arr[$el->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:329: characters 4-18
			return ExprDef::EArrayDecl($el);
		} else if ($__hx__switch === 18) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:331: characters 4-30
			$cl = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:332: characters 4-25
			$el = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:333: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:333: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:333: lines 333-334
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:333: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:334: characters 5-24
				$x = $this->doDecode();
				$el->arr[$el->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:335: characters 4-15
			return ExprDef::ENew($cl, $el);
		} else if ($__hx__switch === 19) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:337: characters 4-22
			return ExprDef::EThrow($this->doDecode());
		} else if ($__hx__switch === 20) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:339: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:340: characters 4-29
			$v = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:341: characters 4-29
			return ExprDef::ETry($e, $v, null, $this->doDecode());
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:343: characters 4-25
			$fl = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:344: characters 14-18
			$_g = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:344: characters 18-32
			$_g1 = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:344: lines 344-348
			while ($_g < $_g1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:344: characters 14-32
				$i = $_g++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:345: characters 5-33
				$name = $this->doDecodeString();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:346: characters 5-24
				$e = $this->doDecode();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:347: characters 5-36
				$fl->arr[$fl->length++] = new _HxAnon_Bytes1($name, $e);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:349: characters 4-15
			return ExprDef::EObject($fl);
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:351: characters 4-26
			$cond = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:352: characters 4-24
			$e1 = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:353: characters 4-24
			$e2 = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:354: characters 4-26
			return ExprDef::ETernary($cond, $e1, $e2);
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:356: characters 4-23
			$e = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:357: characters 4-19
			$cases = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:358: lines 358-368
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:359: characters 5-24
				$v = $this->doDecode();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:360: characters 5-26
				if ($v === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:360: characters 21-26
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:361: characters 5-22
				$values = \Array_hx::wrap([$v]);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:362: lines 362-366
				while (true) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:363: characters 6-20
					$v = $this->doDecode();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:364: characters 6-27
					if ($v === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:364: characters 22-27
						break;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:365: characters 6-20
					$values->arr[$values->length++] = $v;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:367: characters 5-57
				$x = new _HxAnon_Bytes2($values, $this->doDecode());
				$cases->arr[$cases->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:369: characters 4-25
			$def = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:370: characters 4-26
			return ExprDef::ESwitch($e, $cases, $def);
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:372: characters 4-26
			$cond = $this->doDecode();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:373: characters 4-29
			return ExprDef::EDoWhile($cond, $this->doDecode());
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:375: characters 4-32
			$name = $this->doDecodeString();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:376: characters 4-31
			$count = \ord($this->bin->b->s[$this->pin++]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 4-74
			$args = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 15-73
			if ($count === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 4-74
				$args = null;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 35-73
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 46-50
				$_g1 = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 50-59
				$_g2 = $count - 1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 36-72
				while ($_g1 < $_g2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 46-59
					$i = $_g1++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 62-72
					$x = $this->doDecode();
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:377: characters 4-74
				$args = $_g;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:378: characters 4-33
			return ExprDef::EMeta($name, $args, $this->doDecode());
		} else if ($__hx__switch === 26) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:380: characters 4-44
			return ExprDef::ECheckType($this->doDecode(), CType::CTPath(\Array_hx::wrap(["Void"])));
		} else if ($__hx__switch === 255) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:382: characters 4-8
			return null;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:384: characters 4-9
			throw Exception::thrown("Invalid code " . (\ord($this->bin->b->s[$this->pin - 1])??'null'));
		}
	}

	/**
	 * @return object
	 */
	public function doDecode () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:256: lines 256-259
		if (\ord($this->bin->b->s[$this->pin]) === 255) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:257: characters 4-9
			$this->pin++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:258: characters 4-15
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:260: characters 3-33
		$origin = $this->doDecodeString();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:261: characters 3-28
		$line = $this->doDecodeInt();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:262: characters 3-79
		return new _HxAnon_Bytes3($this->_doDecode(), 0, 0, $origin, $line);
	}

	/**
	 * @return Const_hx
	 */
	public function doDecodeConst () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:113: characters 18-32
		$__hx__switch = (\ord($this->bin->b->s[$this->pin++]));
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:115: characters 4-24
			return Const_hx::CInt(\ord($this->bin->b->s[$this->pin++]));
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:117: characters 4-26
			$i = $this->doDecodeInt();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:118: characters 4-11
			return Const_hx::CInt($i);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:120: characters 4-46
			return Const_hx::CFloat(\Std::parseFloat($this->doDecodeString()));
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:122: characters 4-31
			return Const_hx::CString($this->doDecodeString());
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:131: characters 4-9
			throw Exception::thrown("Invalid code " . (\ord($this->bin->b->s[$this->pin - 1])??'null'));
		}
	}

	/**
	 * @return int
	 */
	public function doDecodeInt () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:107: characters 11-28
		$_this = $this->bin;
		$pos = $this->pin;
		$v = \ord($_this->b->s[$pos]) | (\ord($_this->b->s[$pos + 1]) << 8) | (\ord($_this->b->s[$pos + 2]) << 16) | (\ord($_this->b->s[$pos + 3]) << 24);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:107: characters 3-29
		$i = (($v & ((int)-2147483648)) !== 0 ? $v | ((int)-2147483648) : $v);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:108: characters 3-11
		$this->pin += 4;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:109: characters 3-11
		return $i;
	}

	/**
	 * @return string
	 */
	public function doDecodeString () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:61: characters 3-27
		$id = \ord($this->bin->b->s[$this->pin++]);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:62: lines 62-70
		if ($id === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:63: characters 4-27
			$len = \ord($this->bin->b->s[$this->pin]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:64: characters 70-94
			$_this = $this->bin;
			$pos = $this->pin + 1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:64: characters 4-95
			$str = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:64: characters 70-94
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(IoError::OutsideBounds());
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:64: characters 4-95
				$str = \substr($_this->b->s, $pos, $len);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:65: characters 4-18
			$this->pin += $len + 1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:66: lines 66-67
			if ($this->strings->length === 255) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:67: characters 5-21
				$this->strings = \Array_hx::wrap([null]);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:68: characters 4-21
			$_this = $this->strings;
			$_this->arr[$_this->length++] = $str;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:69: characters 4-14
			return $str;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:71: characters 3-21
		return ($this->strings->arr[$id] ?? null);
	}

	/**
	 * @param object $e
	 * 
	 * @return void
	 */
	public function doEncode ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:137: characters 3-27
		$this->doEncodeString($e->origin);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:138: characters 3-22
		$this->doEncodeInt($e->line);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:139: characters 3-15
		$e1 = $e->e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:141: characters 3-34
		$_this = $this->bout;
		$_this->b = ($_this->b . \chr($e1->index));
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:142: lines 142-251
		$__hx__switch = ($e1->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:143: characters 15-16
			$c = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:144: characters 4-20
			$this->doEncodeConst($c);
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:145: characters 15-16
			$v = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:146: characters 4-21
			$this->doEncodeString($v);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:147: characters 15-16
			$_g = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:147: characters 13-14
			$n = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:147: characters 17-18
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:148: characters 4-21
			$this->doEncodeString($n);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:149: lines 149-152
			if ($e === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:150: characters 5-22
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(255));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:152: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:153: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:154: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:155: characters 15-17
			$el = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:156: characters 4-27
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($el->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:157: lines 157-158
			$_g = 0;
			while ($_g < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:157: characters 9-10
				$e = ($el->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:157: lines 157-158
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:158: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:159: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:159: characters 17-18
			$f = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:160: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:161: characters 4-21
			$this->doEncodeString($f);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:162: characters 15-17
			$op = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:162: characters 18-20
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:162: characters 21-23
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:163: characters 4-22
			$this->doEncodeString($op);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:164: characters 4-16
			$this->doEncode($e11);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:165: characters 4-16
			$this->doEncode($e2);
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:166: characters 14-16
			$op = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:166: characters 17-23
			$prefix = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:166: characters 24-25
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:167: characters 4-22
			$this->doEncodeString($op);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:168: characters 4-28
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(($prefix ? 1 : 0)));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:169: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:170: characters 14-15
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:170: characters 16-18
			$el = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:171: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:172: characters 4-27
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($el->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:173: lines 173-174
			$_g = 0;
			while ($_g < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:173: characters 9-10
				$e = ($el->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:173: lines 173-174
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:174: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:175: characters 12-16
			$cond = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:175: characters 17-19
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:175: characters 20-22
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:176: characters 4-18
			$this->doEncode($cond);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:177: characters 4-16
			$this->doEncode($e11);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:178: lines 178-181
			if ($e2 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:179: characters 5-22
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(255));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:181: characters 5-17
				$this->doEncode($e2);
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:182: characters 15-19
			$cond = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:182: characters 20-21
			$e = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:183: characters 4-18
			$this->doEncode($cond);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:184: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:188: characters 13-14
			$v = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:188: characters 15-17
			$it = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:188: characters 18-19
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:189: characters 4-21
			$this->doEncodeString($v);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:190: characters 4-16
			$this->doEncode($it);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:191: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 12 || $__hx__switch === 13) {
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:193: characters 32-33
			$_g = $e1->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:193: characters 18-24
			$params = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:193: characters 25-26
			$e = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:193: characters 27-31
			$name = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:194: characters 4-31
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($params->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:195: lines 195-196
			$_g = 0;
			while ($_g < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:195: characters 9-10
				$p = ($params->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:195: lines 195-196
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:196: characters 5-27
				$this->doEncodeString($p->name);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:197: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:198: characters 4-40
			$this->doEncodeString(($name === null ? "" : $name));
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:199: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:200: lines 200-203
			if ($e === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:201: characters 5-22
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(255));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:203: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:204: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:204: characters 17-22
			$index = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:205: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:206: characters 4-19
			$this->doEncode($index);
		} else if ($__hx__switch === 17) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:207: characters 19-21
			$el = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:208: characters 4-32
			if ($el->length >= 255) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:208: characters 27-32
				throw Exception::thrown("assert");
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:209: characters 4-27
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($el->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:210: lines 210-211
			$_g = 0;
			while ($_g < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:210: characters 9-10
				$e = ($el->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:210: lines 210-211
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:211: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 18) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:212: characters 13-15
			$cl = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:212: characters 16-22
			$params = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:213: characters 4-22
			$this->doEncodeString($cl);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:214: characters 4-31
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($params->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:215: lines 215-216
			$_g = 0;
			while ($_g < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:215: characters 9-10
				$e = ($params->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:215: lines 215-216
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:216: characters 5-16
				$this->doEncode($e);
			}
		} else if ($__hx__switch === 19) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:217: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:218: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 20) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:219: characters 17-18
			$_g = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:219: characters 13-14
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:219: characters 15-16
			$v = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:219: characters 19-25
			$ecatch = $e1->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:220: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:221: characters 4-21
			$this->doEncodeString($v);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:222: characters 4-20
			$this->doEncode($ecatch);
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:223: characters 16-18
			$fl = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:224: characters 4-27
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($fl->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:225: lines 225-228
			$_g = 0;
			while ($_g < $fl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:225: characters 9-10
				$f = ($fl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:225: lines 225-228
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:226: characters 5-27
				$this->doEncodeString($f->name);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:227: characters 5-18
				$this->doEncode($f->e);
			}
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:229: characters 17-21
			$cond = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:229: characters 23-25
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:229: characters 27-29
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:230: characters 4-18
			$this->doEncode($cond);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:231: characters 4-16
			$this->doEncode($e11);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:232: characters 4-16
			$this->doEncode($e2);
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:233: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:233: characters 19-24
			$cases = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:233: characters 26-29
			$def = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:234: characters 4-15
			$this->doEncode($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:235: lines 235-241
			$_g = 0;
			while ($_g < $cases->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:235: characters 9-10
				$c = ($cases->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:235: lines 235-241
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:236: characters 5-37
				if ($c->values->length === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:236: characters 32-37
					throw Exception::thrown("assert");
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:237: lines 237-238
				$_g1 = 0;
				$_g2 = $c->values;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:237: characters 10-11
					$v = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:237: lines 237-238
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:238: characters 6-17
					$this->doEncode($v);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:239: characters 5-22
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(255));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:240: characters 5-21
				$this->doEncode($c->expr);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:242: characters 4-21
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(255));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:243: characters 4-58
			if ($def === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:243: characters 22-39
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(255));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:243: characters 45-58
				$this->doEncode($def);
			}
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:185: characters 17-21
			$cond = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:185: characters 22-23
			$e = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:186: characters 4-18
			$this->doEncode($cond);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:187: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:244: characters 14-18
			$name = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:244: characters 19-23
			$args = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:244: characters 24-25
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:245: characters 4-24
			$this->doEncodeString($name);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:246: characters 4-52
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(($args === null ? 0 : $args->length + 1)));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:247: characters 4-51
			if ($args !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:247: characters 23-51
				$_g = 0;
				while ($_g < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:247: characters 28-29
					$e2 = ($args->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:247: characters 23-51
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:247: characters 40-51
					$this->doEncode($e2);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:248: characters 4-15
			$this->doEncode($e);
		} else if ($__hx__switch === 26) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:249: characters 21-22
			$_g = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:249: characters 19-20
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:250: characters 4-15
			$this->doEncode($e);
		}
	}

	/**
	 * @param Const_hx $c
	 * 
	 * @return void
	 */
	public function doEncodeConst ($c) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:79: lines 79-103
		$__hx__switch = ($c->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:80: characters 13-14
			$v = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:81: lines 81-87
			if (($v >= 0) && ($v <= 255)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:82: characters 5-20
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(0));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:83: characters 5-20
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr($v));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:85: characters 5-20
				$_this = $this->bout;
				$_this->b = ($_this->b . \chr(1));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:86: characters 5-19
				$this->doEncodeInt($v);
			}
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:97: characters 15-16
			$f = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:98: characters 4-19
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(2));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:99: characters 4-33
			$this->doEncodeString(\Std::string($f));
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:100: characters 16-17
			$s = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:101: characters 4-19
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(3));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:102: characters 4-21
			$this->doEncodeString($s);
		}
	}

	/**
	 * @param int $v
	 * 
	 * @return void
	 */
	public function doEncodeInt ($v) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:75: characters 3-19
		$this->bout->addInt32($v);
	}

	/**
	 * @param string $v
	 * 
	 * @return void
	 */
	public function doEncodeString ($v) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:44: characters 3-29
		$vid = ($this->hstrings->data[$v] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:45: lines 45-57
		if ($vid === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:46: lines 46-49
			if ($this->nstrings === 256) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:47: characters 5-35
				$this->hstrings = new StringMap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:48: characters 5-17
				$this->nstrings = 1;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:50: characters 4-28
			$this->hstrings->data[$v] = $this->nstrings;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:51: characters 4-19
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr(0));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:52: characters 13-38
			$vb = \strlen($v);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:52: characters 4-39
			$vb1 = new IoBytes($vb, new Container($v));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:53: characters 4-27
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($vb1->length));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:54: characters 4-16
			$_this = $this->bout;
			$_this->b = ($_this->b . $vb1->b->s);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:55: characters 4-14
			$this->nstrings++;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Bytes.hx:57: characters 4-21
			$_this = $this->bout;
			$_this->b = ($_this->b . \chr($vid));
		}
	}
}

class _HxAnon_Bytes0 extends HxAnon {
	function __construct($name) {
		$this->name = $name;
	}
}

class _HxAnon_Bytes1 extends HxAnon {
	function __construct($name, $e) {
		$this->name = $name;
		$this->e = $e;
	}
}

class _HxAnon_Bytes2 extends HxAnon {
	function __construct($values, $expr) {
		$this->values = $values;
		$this->expr = $expr;
	}
}

class _HxAnon_Bytes3 extends HxAnon {
	function __construct($e, $pmin, $pmax, $origin, $line) {
		$this->e = $e;
		$this->pmin = $pmin;
		$this->pmax = $pmax;
		$this->origin = $origin;
		$this->line = $line;
	}
}

Boot::registerClass(Bytes::class, 'hscript.Bytes');
