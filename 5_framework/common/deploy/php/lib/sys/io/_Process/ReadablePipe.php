<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace sys\io\_Process;

use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \haxe\io\Eof;
use \haxe\io\Error;
use \haxe\io\Input;
use \haxe\io\Bytes;

class ReadablePipe extends Input {
	/**
	 * @var mixed
	 */
	public $pipe;
	/**
	 * @var Bytes
	 */
	public $tmpBytes;

	/**
	 * @param mixed $pipe
	 * 
	 * @return void
	 */
	public function __construct ($pipe) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:53: characters 3-19
		$this->pipe = $pipe;
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:54: characters 3-28
		$this->tmpBytes = Bytes::alloc(1);
	}

	/**
	 * @return void
	 */
	public function close () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:58: characters 3-16
		\fclose($this->pipe);
	}

	/**
	 * @return int
	 */
	public function readByte () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:62: lines 62-63
		if ($this->readBytes($this->tmpBytes, 0, 1) === 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:63: characters 4-9
			throw Exception::thrown(Error::Blocked());
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:64: characters 10-25
		return \ord($this->tmpBytes->b->s[0]);
	}

	/**
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:68: lines 68-69
		if (\feof($this->pipe)) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:69: characters 4-9
			throw Exception::thrown(new Eof());
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:71: characters 3-32
		$result = \fread($this->pipe, $len);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:72: lines 72-73
		if ($result === "") {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:73: characters 4-9
			throw Exception::thrown(new Eof());
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:74: lines 74-75
		if ($result === false) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:75: characters 11-16
			throw Exception::thrown(Error::Custom("Failed to read process output"));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:76: characters 3-30
		$result1 = $result;
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:78: characters 15-37
		$bytes = \strlen($result1);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:78: characters 3-38
		$bytes1 = new Bytes($bytes, new Container($result1));
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:79: characters 3-41
		$len = \strlen($result1);
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length) || ($len > $bytes1->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		} else {
			$this1 = $s->b;
			$src = $bytes1->b;
			$this1->s = ((\substr($this1->s, 0, $pos) . \substr($src->s, 0, $len)) . \substr($this1->s, $pos + $len));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/Process.hx:80: characters 3-25
		return \strlen($result1);
	}
}

Boot::registerClass(ReadablePipe::class, 'sys.io._Process.ReadablePipe');
