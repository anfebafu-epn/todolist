// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys {
	public class Http : global::haxe.http.HttpBase {
		
		static Http() {
			global::sys.Http.PROXY = null;
		}
		
		
		public Http(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public Http(string url) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::sys.Http.__hx_ctor_sys_Http(this, url);
		}
		
		
		protected static void __hx_ctor_sys_Http(global::sys.Http __hx_this, string url) {
			unchecked {
				__hx_this.cnxTimeout = ((double) (10) );
				global::haxe.http.HttpBase.__hx_ctor_haxe_http_HttpBase(__hx_this, url);
			}
		}
		
		
		public static object PROXY;
		
		public static string requestUrl(string url) {
			global::sys.Http h = new global::sys.Http(((string) (url) ));
			string[] r = new string[]{null};
			h.onData = new global::sys.Http_requestUrl_491__Fun(r);
			h.onError = ( (( global::sys.Http_requestUrl_494__Fun.__hx_current != null )) ? (global::sys.Http_requestUrl_494__Fun.__hx_current) : (global::sys.Http_requestUrl_494__Fun.__hx_current = ((global::sys.Http_requestUrl_494__Fun) (new global::sys.Http_requestUrl_494__Fun()) )) );
			h.request(new global::haxe.lang.Null<bool>(false, true));
			return ((string) (r[0]) );
		}
		
		
		public bool noShutdown;
		
		public double cnxTimeout;
		
		public global::haxe.ds.StringMap<string> responseHeaders;
		
		public global::haxe.lang.Null<int> chunk_size;
		
		public global::haxe.io.Bytes chunk_buf;
		
		public object file;
		
		public override void request(global::haxe.lang.Null<bool> post) {
			global::haxe.io.BytesOutput output = new global::haxe.io.BytesOutput();
			global::haxe.lang.Function old = this.onError;
			bool[] err = new bool[]{false};
			global::sys.Http _gthis = this;
			this.onError = new global::sys.Http_request_60__Fun(output, old, err, _gthis);
			post = new global::haxe.lang.Null<bool>(( ( (post).@value || ( this.postBytes != null ) ) || ( this.postData != null ) ), true);
			this.customRequest((post).@value, output, null, null);
			if ( ! (err[0]) ) {
				this.success(output.getBytes());
			}
			
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public void fileTransfert(string argname, string filename, global::haxe.io.Input file, int size, string mimeType) {
			if (( mimeType == null )) {
				mimeType = "application/octet-stream";
			}
			
			this.fileTransfer(argname, filename, file, size, mimeType);
		}
		
		
		public virtual void fileTransfer(string argname, string filename, global::haxe.io.Input file, int size, string mimeType) {
			if (( mimeType == null )) {
				mimeType = "application/octet-stream";
			}
			
			this.file = new global::haxe.lang.DynamicObject(new int[]{23526, 1029013645, 1560893070, 2003447495}, new object[]{file, argname, mimeType, filename}, new int[]{1280549057}, new double[]{((double) (size) )});
		}
		
		
		public virtual void customRequest(bool post, global::haxe.io.Output api, global::sys.net.Socket sock, string method) {
			unchecked {
				this.responseAsString = null;
				this.responseBytes = null;
				global::EReg url_regexp = new global::EReg(((string) ("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$") ), ((string) ("") ));
				if ( ! (url_regexp.match(this.url)) ) {
					this.onError.__hx_invoke1_o(default(double), "Invalid URL");
					return;
				}
				
				bool secure = ( url_regexp.matched(1) == "https://" );
				if (( sock == null )) {
					if (secure) {
						throw new global::haxe.exceptions.NotImplementedException(((string) ("Https support in haxe.Http is not implemented for this target") ), default(global::haxe.Exception), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"customRequest", "sys.Http", "sys/Http.hx"}, new int[]{1981972957}, new double[]{((double) (112) )})) ));
					}
					else {
						sock = new global::sys.net.Socket();
					}
					
					sock.setTimeout(this.cnxTimeout);
				}
				
				string host = url_regexp.matched(2);
				string portString = url_regexp.matched(3);
				string request = url_regexp.matched(4);
				if (( global::haxe.lang.StringExt.charAt(request, 0) != "/" )) {
					request = global::haxe.lang.Runtime.concat("/", request);
				}
				
				global::haxe.lang.Null<int> port = ( (( ( portString == null ) || ( portString == "" ) )) ? (new global::haxe.lang.Null<int>(( (secure) ? (443) : (80) ), true)) : (global::Std.parseInt(global::haxe.lang.StringExt.substr(portString, 1, new global::haxe.lang.Null<int>(( portString.Length - 1 ), true)))) );
				bool multipart = ( this.file != null );
				string boundary = null;
				string uri = null;
				if (multipart) {
					post = true;
					boundary = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::Std.@string(global::Std.random(1000)), global::Std.@string(global::Std.random(1000))), global::Std.@string(global::Std.random(1000))), global::Std.@string(global::Std.random(1000)));
					while (( boundary.Length < 38 )) {
						boundary = global::haxe.lang.Runtime.concat("-", boundary);
					}
					
					global::System.Text.StringBuilder b_b = new global::System.Text.StringBuilder();
					{
						int _g = 0;
						global::Array<object> _g1 = this.@params;
						while (( _g < _g1.length )) {
							object p = _g1[_g];
							 ++ _g;
							b_b.Append(((string) ("--") ));
							b_b.Append(((string) (global::Std.@string(boundary)) ));
							b_b.Append(((string) ("\r\n") ));
							b_b.Append(((string) ("Content-Disposition: form-data; name=\"") ));
							b_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p, "name", 1224700491, true)))) ));
							b_b.Append(((string) ("\"") ));
							b_b.Append(((string) ("\r\n") ));
							b_b.Append(((string) ("\r\n") ));
							b_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p, "value", 834174833, true)))) ));
							b_b.Append(((string) ("\r\n") ));
						}
						
					}
					
					b_b.Append(((string) ("--") ));
					b_b.Append(((string) (global::Std.@string(boundary)) ));
					b_b.Append(((string) ("\r\n") ));
					b_b.Append(((string) ("Content-Disposition: form-data; name=\"") ));
					b_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.file, "param", 1029013645, true)))) ));
					b_b.Append(((string) ("\"; filename=\"") ));
					b_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.file, "filename", 2003447495, true)))) ));
					b_b.Append(((string) ("\"") ));
					b_b.Append(((string) ("\r\n") ));
					b_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Content-Type: ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.file, "mimeType", 1560893070, true))), "\r\n"), "\r\n"))) ));
					uri = b_b.ToString();
				}
				else {
					int _g2 = 0;
					global::Array<object> _g3 = this.@params;
					while (( _g2 < _g3.length )) {
						object p1 = _g3[_g2];
						 ++ _g2;
						if (( uri == null )) {
							uri = "";
						}
						else {
							uri = global::haxe.lang.Runtime.concat(uri, "&");
						}
						
						uri = global::haxe.lang.Runtime.concat(uri, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::System.Uri.EscapeDataString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p1, "name", 1224700491, true))), "="), global::System.Uri.EscapeDataString(((string) (global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p1, "value", 834174833, true)))) ))));
					}
					
				}
				
				global::haxe.io.BytesOutput b = new global::haxe.io.BytesOutput();
				if (( method != null )) {
					b.writeString(method, null);
					b.writeString(" ", null);
				}
				else if (post) {
					b.writeString("POST ", null);
				}
				else {
					b.writeString("GET ", null);
				}
				
				if (( global::sys.Http.PROXY != null )) {
					b.writeString("http://", null);
					b.writeString(host, null);
					if (( ! (global::haxe.lang.Runtime.eq((port).toDynamic(), 80)) )) {
						b.writeString(":", null);
						b.writeString(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString((port).toDynamic())), null);
					}
					
				}
				
				b.writeString(request, null);
				if ((  ! (post)  && ( uri != null ) )) {
					if (( global::haxe.lang.StringExt.indexOf(request, "?", new global::haxe.lang.Null<int>(0, true)) >= 0 )) {
						b.writeString("&", null);
					}
					else {
						b.writeString("?", null);
					}
					
					b.writeString(uri, null);
				}
				
				b.writeString(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" HTTP/1.1\r\nHost: ", host), "\r\n"), null);
				if (( this.postData != null )) {
					this.postBytes = global::haxe.io.Bytes.ofString(this.postData, null);
					this.postData = null;
				}
				
				if (( this.postBytes != null )) {
					b.writeString(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Content-Length: ", global::haxe.lang.Runtime.toString(this.postBytes.length)), "\r\n"), null);
				}
				else if (( post && ( uri != null ) )) {
					if (( multipart ||  ! (global::Lambda.exists<object>(((object) (this.headers) ), ((global::haxe.lang.Function) (( (( global::sys.Http_customRequest_209__Fun.__hx_current != null )) ? (global::sys.Http_customRequest_209__Fun.__hx_current) : (global::sys.Http_customRequest_209__Fun.__hx_current = ((global::sys.Http_customRequest_209__Fun) (new global::sys.Http_customRequest_209__Fun()) )) )) )))  )) {
						b.writeString("Content-Type: ", null);
						if (multipart) {
							b.writeString("multipart/form-data", null);
							b.writeString("; boundary=", null);
							b.writeString(boundary, null);
						}
						else {
							b.writeString("application/x-www-form-urlencoded", null);
						}
						
						b.writeString("\r\n", null);
					}
					
					if (multipart) {
						b.writeString(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Content-Length: ", global::haxe.lang.Runtime.toString((( ( ( uri.Length + ((int) (global::haxe.lang.Runtime.getField_f(this.file, "size", 1280549057, true)) ) ) + boundary.Length ) + 6 )))), "\r\n"), null);
					}
					else {
						b.writeString(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Content-Length: ", global::haxe.lang.Runtime.toString(uri.Length)), "\r\n"), null);
					}
					
				}
				
				b.writeString("Connection: close\r\n", null);
				{
					int _g4 = 0;
					global::Array<object> _g5 = this.headers;
					while (( _g4 < _g5.length )) {
						object h = _g5[_g4];
						 ++ _g4;
						b.writeString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(h, "name", 1224700491, true)), null);
						b.writeString(": ", null);
						b.writeString(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(h, "value", 834174833, true)), null);
						b.writeString("\r\n", null);
					}
					
				}
				
				b.writeString("\r\n", null);
				if (( this.postBytes != null )) {
					b.writeFullBytes(this.postBytes, 0, this.postBytes.length);
				}
				else if (( post && ( uri != null ) )) {
					b.writeString(uri, null);
				}
				
				try {
					if (( global::sys.Http.PROXY != null )) {
						sock.connect(new global::sys.net.Host(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::sys.Http.PROXY, "host", 1158860648, true))), ((int) (global::haxe.lang.Runtime.getField_f(global::sys.Http.PROXY, "port", 1247576961, true)) ));
					}
					else {
						sock.connect(new global::sys.net.Host(((string) (host) )), (port).@value);
					}
					
					if (multipart) {
						this.writeBody(b, ((global::haxe.io.Input) (global::haxe.lang.Runtime.getField(this.file, "io", 23526, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(this.file, "size", 1280549057, true)) ), boundary, sock);
					}
					else {
						this.writeBody(b, null, 0, null, sock);
					}
					
					this.readHttpResponse(api, sock);
					sock.close();
				}
				catch (global::System.Exception _g6){
					{
						global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g6) )) );
					}
					
					object e = ((object) (global::haxe.Exception.caught(_g6).unwrap()) );
					{
						try {
							sock.close();
						}
						catch (global::System.Exception _g7){
						}
						
						
						this.onError.__hx_invoke1_o(default(double), global::Std.@string(e));
					}
					
				}
				
				
			}
		}
		
		
		public virtual void writeBody(global::haxe.io.BytesOutput body, global::haxe.io.Input fileInput, int fileSize, string boundary, global::sys.net.Socket sock) {
			unchecked {
				if (( body != null )) {
					global::haxe.io.Bytes bytes = body.getBytes();
					sock.output.writeFullBytes(bytes, 0, bytes.length);
				}
				
				if (( boundary != null )) {
					int bufsize = 4096;
					global::haxe.io.Bytes buf = global::haxe.io.Bytes.alloc(bufsize);
					while (( fileSize > 0 )) {
						int size = ( (( fileSize > bufsize )) ? (bufsize) : (fileSize) );
						int len = 0;
						try {
							len = fileInput.readBytes(buf, 0, size);
						}
						catch (global::System.Exception _g){
							{
								global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g) )) );
							}
							
							if (( ((object) (global::haxe.Exception.caught(_g).unwrap()) ) is global::haxe.io.Eof )) {
								break;
							}
							else {
								throw;
							}
							
						}
						
						
						sock.output.writeFullBytes(buf, 0, len);
						fileSize -= len;
					}
					
					sock.output.writeString("\r\n", null);
					sock.output.writeString("--", null);
					sock.output.writeString(boundary, null);
					sock.output.writeString("--", null);
				}
				
			}
		}
		
		
		public virtual void readHttpResponse(global::haxe.io.Output api, global::sys.net.Socket sock) {
			unchecked {
				global::haxe.io.BytesBuffer b = new global::haxe.io.BytesBuffer();
				int k = 4;
				global::haxe.io.Bytes s = global::haxe.io.Bytes.alloc(4);
				sock.setTimeout(this.cnxTimeout);
				while (true) {
					int p = sock.input.readBytes(s, 0, k);
					while (( p != k )) {
						p += sock.input.readBytes(s, p, ( k - p ));
					}
					
					{
						if (( ( k < 0 ) || ( k > s.length ) )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.io.Error.OutsideBounds)) );
						}
						
						( b.b as global::System.IO.Stream ).Write(((byte[]) (s.b) ), ((int) (0) ), ((int) (k) ));
					}
					
					switch (k) {
						case 1:
						{
							int c = ((int) (s.b[0]) );
							if (( c == 10 )) {
								goto label1;
							}
							
							if (( c == 13 )) {
								k = 3;
							}
							else {
								k = 4;
							}
							
							break;
						}
						
						
						case 2:
						{
							int c1 = ((int) (s.b[1]) );
							if (( c1 == 10 )) {
								if (( ((int) (s.b[0]) ) == 13 )) {
									goto label1;
								}
								
								k = 4;
							}
							else if (( c1 == 13 )) {
								k = 3;
							}
							else {
								k = 4;
							}
							
							break;
						}
						
						
						case 3:
						{
							int c2 = ((int) (s.b[2]) );
							if (( c2 == 10 )) {
								if (( ((int) (s.b[1]) ) != 13 )) {
									k = 4;
								}
								else if (( ((int) (s.b[0]) ) != 10 )) {
									k = 2;
								}
								else {
									goto label1;
								}
								
							}
							else if (( c2 == 13 )) {
								if (( ( ((int) (s.b[1]) ) != 10 ) || ( ((int) (s.b[0]) ) != 13 ) )) {
									k = 1;
								}
								else {
									k = 3;
								}
								
							}
							else {
								k = 4;
							}
							
							break;
						}
						
						
						case 4:
						{
							int c3 = ((int) (s.b[3]) );
							if (( c3 == 10 )) {
								if (( ((int) (s.b[2]) ) != 13 )) {
									continue;
								}
								else if (( ( ((int) (s.b[1]) ) != 10 ) || ( ((int) (s.b[0]) ) != 13 ) )) {
									k = 2;
								}
								else {
									goto label1;
								}
								
							}
							else if (( c3 == 13 )) {
								if (( ( ((int) (s.b[2]) ) != 10 ) || ( ((int) (s.b[1]) ) != 13 ) )) {
									k = 3;
								}
								else {
									k = 1;
								}
								
							}
							
							break;
						}
						
						
					}
					
				}
				label1: {};
				global::Array<string> headers = global::haxe.lang.StringExt.split(b.getBytes().toString(), "\r\n");
				string response = global::haxe.lang.Runtime.toString((headers.shift()).toDynamic());
				global::Array<string> rp = global::haxe.lang.StringExt.split(response, " ");
				global::haxe.lang.Null<int> status = global::Std.parseInt(rp[1]);
				if (( global::haxe.lang.Runtime.eq((status).toDynamic(), 0) ||  ! (status.hasValue)  )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Response status error")) );
				}
				
				string __temp_expr1 = global::haxe.lang.Runtime.toString((headers.pop()).toDynamic());
				string __temp_expr2 = global::haxe.lang.Runtime.toString((headers.pop()).toDynamic());
				this.responseHeaders = ((global::haxe.ds.StringMap<string>) (new global::haxe.ds.StringMap<string>()) );
				global::haxe.lang.Null<int> size = default(global::haxe.lang.Null<int>);
				bool chunked = false;
				{
					int _g = 0;
					while (( _g < headers.length )) {
						string hline = headers[_g];
						 ++ _g;
						global::Array<string> a = global::haxe.lang.StringExt.split(hline, ": ");
						string hname = global::haxe.lang.Runtime.toString((a.shift()).toDynamic());
						string hval = ( (( a.length == 1 )) ? (a[0]) : (a.@join(": ")) );
						hval = hval.TrimEnd().TrimStart();
						((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.responseHeaders) )) ))) ).@set(hname, hval);
						switch (hname.ToLowerInvariant()) {
							case "content-length":
							{
								size = global::Std.parseInt(hval);
								break;
							}
							
							
							case "transfer-encoding":
							{
								chunked = ( hval.ToLowerInvariant() == "chunked" );
								break;
							}
							
							
						}
						
					}
					
				}
				
				this.onStatus.__hx_invoke1_o(default(double), (status).toDynamic());
				global::EReg chunk_re = new global::EReg(((string) ("^([0-9A-Fa-f]+)[ ]*\r\n") ), ((string) ("m") ));
				this.chunk_size = default(global::haxe.lang.Null<int>);
				this.chunk_buf = null;
				int bufsize = 1024;
				global::haxe.io.Bytes buf = global::haxe.io.Bytes.alloc(bufsize);
				if (chunked) {
					try {
						while (true) {
							int len = sock.input.readBytes(buf, 0, bufsize);
							if ( ! (this.readChunk(chunk_re, api, buf, len)) ) {
								break;
							}
							
						}
						
					}
					catch (global::System.Exception _g1){
						{
							global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g1) )) );
						}
						
						if (( ((object) (global::haxe.Exception.caught(_g1).unwrap()) ) is global::haxe.io.Eof )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("Transfer aborted")) );
						}
						else {
							throw;
						}
						
					}
					
					
				}
				else if ( ! (size.hasValue) ) {
					if ( ! (this.noShutdown) ) {
						sock.shutdown(false, true);
					}
					
					try {
						while (true) {
							int len1 = sock.input.readBytes(buf, 0, bufsize);
							if (( len1 == 0 )) {
								break;
							}
							
							api.writeBytes(buf, 0, len1);
						}
						
					}
					catch (global::System.Exception _g2){
						{
							global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g2) )) );
						}
						
						if (( ((object) (global::haxe.Exception.caught(_g2).unwrap()) ) is global::haxe.io.Eof )) {
						}
						else {
							throw;
						}
						
					}
					
					
				}
				else {
					api.prepare((size).@value);
					try {
						while (( (size).@value > 0 )) {
							int len2 = sock.input.readBytes(buf, 0, ( (( (size).@value > bufsize )) ? (bufsize) : ((size).@value) ));
							api.writeBytes(buf, 0, len2);
							size = new global::haxe.lang.Null<int>(((int) (( (size).@value - (new global::haxe.lang.Null<int>(len2, true)).@value )) ), true);
						}
						
					}
					catch (global::System.Exception _g3){
						{
							global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g3) )) );
						}
						
						if (( ((object) (global::haxe.Exception.caught(_g3).unwrap()) ) is global::haxe.io.Eof )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("Transfer aborted")) );
						}
						else {
							throw;
						}
						
					}
					
					
				}
				
				if (( chunked && (( this.chunk_size.hasValue || ( this.chunk_buf != null ) )) )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("Invalid chunk")) );
				}
				
				if (( ( (status).@value < 200 ) || ( (status).@value >= 400 ) )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Http Error #", global::haxe.lang.Runtime.toString((status).toDynamic())))) );
				}
				
				api.close();
			}
		}
		
		
		public virtual bool readChunk(global::EReg chunk_re, global::haxe.io.Output api, global::haxe.io.Bytes buf, int len) {
			unchecked {
				if ( ! (this.chunk_size.hasValue) ) {
					if (( this.chunk_buf != null )) {
						global::haxe.io.BytesBuffer b = new global::haxe.io.BytesBuffer();
						{
							global::haxe.io.Bytes src = this.chunk_buf;
							( b.b as global::System.IO.Stream ).Write(((byte[]) (src.b) ), ((int) (0) ), ((int) (src.length) ));
						}
						
						{
							if (( ( len < 0 ) || ( len > buf.length ) )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.io.Error.OutsideBounds)) );
							}
							
							( b.b as global::System.IO.Stream ).Write(((byte[]) (buf.b) ), ((int) (0) ), ((int) (len) ));
						}
						
						buf = b.getBytes();
						len += this.chunk_buf.length;
						this.chunk_buf = null;
					}
					
					if (chunk_re.match(buf.toString())) {
						object p = chunk_re.matchedPos();
						if (( ((int) (global::haxe.lang.Runtime.getField_f(p, "len", 5393365, true)) ) <= len )) {
							string cstr = chunk_re.matched(1);
							this.chunk_size = global::Std.parseInt(global::haxe.lang.Runtime.concat("0x", cstr));
							if (global::haxe.lang.Runtime.eq((this.chunk_size).toDynamic(), 0)) {
								this.chunk_size = default(global::haxe.lang.Null<int>);
								this.chunk_buf = null;
								return false;
							}
							
							len = ( ((int) (len) ) - ((int) (global::haxe.lang.Runtime.getField_f(p, "len", 5393365, true)) ) );
							return this.readChunk(chunk_re, api, buf.sub(((int) (global::haxe.lang.Runtime.getField_f(p, "len", 5393365, true)) ), len), len);
						}
						
					}
					
					if (( len > 10 )) {
						this.onError.__hx_invoke1_o(default(double), "Invalid chunk");
						return false;
					}
					
					this.chunk_buf = buf.sub(0, len);
					return true;
				}
				
				if (( (this.chunk_size).@value > len )) {
					global::sys.Http tmp = this;
					tmp.chunk_size = new global::haxe.lang.Null<int>(( (tmp.chunk_size).@value - len ), true);
					api.writeBytes(buf, 0, len);
					return true;
				}
				
				int end = ( (this.chunk_size).@value + 2 );
				if (( len >= end )) {
					if (( (this.chunk_size).@value > 0 )) {
						api.writeBytes(buf, 0, (this.chunk_size).@value);
					}
					
					len -= end;
					this.chunk_size = default(global::haxe.lang.Null<int>);
					if (( len == 0 )) {
						return true;
					}
					
					return this.readChunk(chunk_re, api, buf.sub(end, len), len);
				}
				
				if (( (this.chunk_size).@value > 0 )) {
					api.writeBytes(buf, 0, (this.chunk_size).@value);
				}
				
				global::sys.Http tmp1 = this;
				tmp1.chunk_size = new global::haxe.lang.Null<int>(( (tmp1.chunk_size).@value - len ), true);
				return true;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1136381564:
					{
						this.file = ((object) (@value) );
						return @value;
					}
					
					
					case 1987394228:
					{
						this.cnxTimeout = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1136381564:
					{
						this.file = ((object) (@value) );
						return @value;
					}
					
					
					case 660670753:
					{
						this.chunk_buf = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 1488620307:
					{
						this.chunk_size = global::haxe.lang.Null<object>.ofDynamic<int>(@value);
						return @value;
					}
					
					
					case 1137315269:
					{
						this.responseHeaders = ((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 1987394228:
					{
						this.cnxTimeout = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1533657591:
					{
						this.noShutdown = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 380244791:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readChunk", 380244791)) );
					}
					
					
					case 1196428959:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readHttpResponse", 1196428959)) );
					}
					
					
					case 1238331169:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeBody", 1238331169)) );
					}
					
					
					case 1855145886:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "customRequest", 1855145886)) );
					}
					
					
					case 440931783:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fileTransfer", 440931783)) );
					}
					
					
					case 1691023565:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fileTransfert", 1691023565)) );
					}
					
					
					case 1149558607:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "request", 1149558607)) );
					}
					
					
					case 1136381564:
					{
						return this.file;
					}
					
					
					case 660670753:
					{
						return this.chunk_buf;
					}
					
					
					case 1488620307:
					{
						return (this.chunk_size).toDynamic();
					}
					
					
					case 1137315269:
					{
						return this.responseHeaders;
					}
					
					
					case 1987394228:
					{
						return this.cnxTimeout;
					}
					
					
					case 1533657591:
					{
						return this.noShutdown;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1136381564:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.file)) );
					}
					
					
					case 1987394228:
					{
						return this.cnxTimeout;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1149558607:
					{
						return global::haxe.lang.Runtime.slowCallField(this, field, dynargs);
					}
					
					
					case 380244791:
					{
						return this.readChunk(((global::EReg) (dynargs[0]) ), ((global::haxe.io.Output) (dynargs[1]) ), ((global::haxe.io.Bytes) (dynargs[2]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ));
					}
					
					
					case 1196428959:
					{
						this.readHttpResponse(((global::haxe.io.Output) (dynargs[0]) ), ((global::sys.net.Socket) (dynargs[1]) ));
						break;
					}
					
					
					case 1238331169:
					{
						this.writeBody(((global::haxe.io.BytesOutput) (dynargs[0]) ), ((global::haxe.io.Input) (dynargs[1]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ), global::haxe.lang.Runtime.toString(dynargs[3]), ((global::sys.net.Socket) (dynargs[4]) ));
						break;
					}
					
					
					case 1855145886:
					{
						this.customRequest(global::haxe.lang.Runtime.toBool(dynargs[0]), ((global::haxe.io.Output) (dynargs[1]) ), ((global::sys.net.Socket) (( (( dynargs.Length > 2 )) ? (dynargs[2]) : (null) )) ), global::haxe.lang.Runtime.toString(( (( dynargs.Length > 3 )) ? (dynargs[3]) : (null) )));
						break;
					}
					
					
					case 440931783:
					{
						this.fileTransfer(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::haxe.io.Input) (dynargs[2]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), global::haxe.lang.Runtime.toString(( (( dynargs.Length > 4 )) ? (dynargs[4]) : (null) )));
						break;
					}
					
					
					case 1691023565:
					{
						this.fileTransfert(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::haxe.io.Input) (dynargs[2]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), global::haxe.lang.Runtime.toString(( (( dynargs.Length > 4 )) ? (dynargs[4]) : (null) )));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("file");
			baseArr.push("chunk_buf");
			baseArr.push("chunk_size");
			baseArr.push("responseHeaders");
			baseArr.push("cnxTimeout");
			baseArr.push("noShutdown");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys {
	public class Http_request_60__Fun : global::haxe.lang.Function {
		
		public Http_request_60__Fun(global::haxe.io.BytesOutput output, global::haxe.lang.Function old, bool[] err, global::sys.Http _gthis) : base(1, 0) {
			this.output = output;
			this.old = old;
			this.err = err;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			this._gthis.responseBytes = this.output.getBytes();
			this.err[0] = true;
			this._gthis.onError = this.old;
			this._gthis.onError.__hx_invoke1_o(default(double), e);
			return null;
		}
		
		
		public global::haxe.io.BytesOutput output;
		
		public global::haxe.lang.Function old;
		
		public bool[] err;
		
		public global::sys.Http _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys {
	public class Http_customRequest_209__Fun : global::haxe.lang.Function {
		
		public Http_customRequest_209__Fun() : base(1, 0) {
		}
		
		
		public static global::sys.Http_customRequest_209__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object h = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return ( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(h, "name", 1224700491, true)) == "Content-Type" );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys {
	public class Http_requestUrl_491__Fun : global::haxe.lang.Function {
		
		public Http_requestUrl_491__Fun(string[] r) : base(1, 0) {
			this.r = r;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string d = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			this.r[0] = d;
			return null;
		}
		
		
		public string[] r;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys {
	public class Http_requestUrl_494__Fun : global::haxe.lang.Function {
		
		public Http_requestUrl_494__Fun() : base(1, 0) {
		}
		
		
		public static global::sys.Http_requestUrl_494__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			throw ((global::System.Exception) (global::haxe.Exception.thrown(e)) );
		}
		
		
	}
}


