// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.rtti {
	public class XmlParser : global::haxe.lang.HxObject {
		
		public XmlParser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public XmlParser() {
			global::haxe.rtti.XmlParser.__hx_ctor_haxe_rtti_XmlParser(this);
		}
		
		
		protected static void __hx_ctor_haxe_rtti_XmlParser(global::haxe.rtti.XmlParser __hx_this) {
			__hx_this.newField = ( (( global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun.__hx_current != null )) ? (global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun.__hx_current) : (global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun.__hx_current = ((global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun) (new global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun()) )) );
			{
				__hx_this.root = new global::Array<object>();
			}
			
		}
		
		
		public global::Array<object> root;
		
		public string curplatform;
		
		public virtual void sort(global::Array<object> l) {
			unchecked {
				if (( l == null )) {
					l = this.root;
				}
				
				l.sort(( (( global::haxe.rtti.XmlParser_sort_46__Fun.__hx_current != null )) ? (global::haxe.rtti.XmlParser_sort_46__Fun.__hx_current) : (global::haxe.rtti.XmlParser_sort_46__Fun.__hx_current = ((global::haxe.rtti.XmlParser_sort_46__Fun) (new global::haxe.rtti.XmlParser_sort_46__Fun()) )) ));
				{
					int _g = 0;
					while (( _g < l.length )) {
						global::haxe.rtti.TypeTree x = ((global::haxe.rtti.TypeTree) (l[_g]) );
						 ++ _g;
						switch (x._hx_index) {
							case 0:
							{
								string _g1 = ( x as global::haxe.rtti.TypeTree_TPackage ).name;
								string _g2 = ( x as global::haxe.rtti.TypeTree_TPackage ).full;
								{
									global::Array<object> l1 = ( x as global::haxe.rtti.TypeTree_TPackage ).subs;
									this.sort(l1);
								}
								
								break;
							}
							
							
							case 1:
							{
								object c = ( x as global::haxe.rtti.TypeTree_TClassdecl ).c;
								{
									this.sortFields(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "fields", 9342585, true)) ))) ));
									this.sortFields(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "statics", 912604165, true)) ))) ));
								}
								
								break;
							}
							
							
							case 2:
							{
								object _g3 = ( x as global::haxe.rtti.TypeTree_TEnumdecl ).e;
								break;
							}
							
							
							case 3:
							{
								object _g4 = ( x as global::haxe.rtti.TypeTree_TTypedecl ).t;
								break;
							}
							
							
							case 4:
							{
								object _g5 = ( x as global::haxe.rtti.TypeTree_TAbstractdecl ).a;
								break;
							}
							
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void sortFields(global::Array<object> a) {
			a.sort(( (( global::haxe.rtti.XmlParser_sortFields_73__Fun.__hx_current != null )) ? (global::haxe.rtti.XmlParser_sortFields_73__Fun.__hx_current) : (global::haxe.rtti.XmlParser_sortFields_73__Fun.__hx_current = ((global::haxe.rtti.XmlParser_sortFields_73__Fun) (new global::haxe.rtti.XmlParser_sortFields_73__Fun()) )) ));
		}
		
		
		public virtual void process(global::Xml x, string platform) {
			this.curplatform = platform;
			if (( ( x.nodeType != global::Xml.Document ) && ( x.nodeType != global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x.nodeType)))) );
			}
			
			global::Xml this1 = x;
			this.xroot(((global::Xml) (this1) ));
		}
		
		
		public virtual bool mergeRights(object f1, object f2) {
			if (( ( ( ( ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f1, "get", 5144726, true)) ) == global::haxe.rtti.Rights.RInline ) && ( ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f1, "set", 5741474, true)) ) == global::haxe.rtti.Rights.RNo ) ) && ( ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f2, "get", 5144726, true)) ) == global::haxe.rtti.Rights.RNormal ) ) && ( ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f2, "set", 5741474, true)) ) == global::haxe.rtti.Rights.RMethod ) )) {
				global::haxe.rtti.Rights __temp_expr1 = ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.setField(f1, "get", 5144726, global::haxe.rtti.Rights.RNormal)) );
				global::haxe.rtti.Rights __temp_expr2 = ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.setField(f1, "set", 5741474, global::haxe.rtti.Rights.RMethod)) );
				return true;
			}
			
			if (global::Type.enumEq<object>(((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f1, "get", 5144726, true)) ), ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f2, "get", 5144726, true)) ))) {
				return global::Type.enumEq<object>(((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f1, "set", 5741474, true)) ), ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f2, "set", 5741474, true)) ));
			}
			else {
				return false;
			}
			
		}
		
		
		public virtual bool mergeDoc(object f1, object f2) {
			if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "doc", 4997752, true)) == null )) {
				string __temp_expr2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.setField(f1, "doc", 4997752, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "doc", 4997752, true))));
			}
			else if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "doc", 4997752, true)) == null )) {
				string __temp_expr1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.setField(f2, "doc", 4997752, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "doc", 4997752, true))));
			}
			
			return true;
		}
		
		
		public virtual bool mergeFields(object f, object f2) {
			if ( ! (global::haxe.rtti.TypeApi.fieldEq(f, f2)) ) {
				if (( ( ( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)) == global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "name", 1224700491, true)) ) && (( this.mergeRights(f, f2) || this.mergeRights(f2, f) )) ) && this.mergeDoc(f, f2) )) {
					return global::haxe.rtti.TypeApi.fieldEq(f, f2);
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public global::haxe.lang.Function newField;
		
		public virtual bool mergeClasses(object c, object c2) {
			if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c, "isInterface", 408610927, true)) != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c2, "isInterface", 408610927, true)) )) {
				return false;
			}
			
			if (( this.curplatform != null )) {
				((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(c, "platforms", 310553184, true)) ))) ).push(this.curplatform);
			}
			
			if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c, "isExtern", 528773354, true)) != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c2, "isExtern", 528773354, true)) )) {
				bool __temp_expr1 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.setField(c, "isExtern", 528773354, false));
			}
			
			{
				int _g = 0;
				global::Array<object> _g1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c2, "fields", 9342585, true)) ))) );
				while (( _g < _g1.length )) {
					object f2 = _g1[_g];
					 ++ _g;
					object found = null;
					{
						int _g2 = 0;
						global::Array<object> _g3 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "fields", 9342585, true)) ))) );
						while (( _g2 < _g3.length )) {
							object f = _g3[_g2];
							 ++ _g2;
							if (this.mergeFields(f, f2)) {
								found = f;
								break;
							}
							
						}
						
					}
					
					if (( found == null )) {
						this.newField.__hx_invoke2_o(default(double), c, default(double), f2);
						((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "fields", 9342585, true)) ))) ).push(f2);
					}
					else if (( this.curplatform != null )) {
						((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(found, "platforms", 310553184, true)) ))) ).push(this.curplatform);
					}
					
				}
				
			}
			
			{
				int _g4 = 0;
				global::Array<object> _g5 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c2, "statics", 912604165, true)) ))) );
				while (( _g4 < _g5.length )) {
					object f21 = _g5[_g4];
					 ++ _g4;
					object found1 = null;
					{
						int _g6 = 0;
						global::Array<object> _g7 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "statics", 912604165, true)) ))) );
						while (( _g6 < _g7.length )) {
							object f1 = _g7[_g6];
							 ++ _g6;
							if (this.mergeFields(f1, f21)) {
								found1 = f1;
								break;
							}
							
						}
						
					}
					
					if (( found1 == null )) {
						this.newField.__hx_invoke2_o(default(double), c, default(double), f21);
						((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "statics", 912604165, true)) ))) ).push(f21);
					}
					else if (( this.curplatform != null )) {
						((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(found1, "platforms", 310553184, true)) ))) ).push(this.curplatform);
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public virtual bool mergeEnums(object e, object e2) {
			if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(e, "isExtern", 528773354, true)) != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(e2, "isExtern", 528773354, true)) )) {
				return false;
			}
			
			if (( this.curplatform != null )) {
				((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(e, "platforms", 310553184, true)) ))) ).push(this.curplatform);
			}
			
			{
				int _g = 0;
				global::Array<object> _g1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(e2, "constructors", 885141049, true)) ))) );
				while (( _g < _g1.length )) {
					object c2 = _g1[_g];
					 ++ _g;
					object found = null;
					{
						int _g2 = 0;
						global::Array<object> _g3 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(e, "constructors", 885141049, true)) ))) );
						while (( _g2 < _g3.length )) {
							object c = _g3[_g2];
							 ++ _g2;
							if (global::haxe.rtti.TypeApi.constructorEq(c, c2)) {
								found = c;
								break;
							}
							
						}
						
					}
					
					if (( found == null )) {
						((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(e, "constructors", 885141049, true)) ))) ).push(c2);
					}
					else if (( this.curplatform != null )) {
						((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(found, "platforms", 310553184, true)) ))) ).push(this.curplatform);
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public virtual bool mergeTypedefs(object t, object t2) {
			if (( this.curplatform == null )) {
				return false;
			}
			
			((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(t, "platforms", 310553184, true)) ))) ).push(this.curplatform);
			((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(t, "types", 449540217, true)) )) ))) ).@set(this.curplatform, ((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(t2, "type", 1292432058, true)) ));
			return true;
		}
		
		
		public virtual bool mergeAbstracts(object a, object a2) {
			if (( this.curplatform == null )) {
				return false;
			}
			
			if (( ( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "to", 25979, true)) ))) ).length != ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a2, "to", 25979, true)) ))) ).length ) || ( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "from", 1136829802, true)) ))) ).length != ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a2, "from", 1136829802, true)) ))) ).length ) )) {
				return false;
			}
			
			{
				int _g = 0;
				int _g1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "to", 25979, true)) ))) ).length;
				while (( _g < _g1 )) {
					int i = _g++;
					if ( ! (global::haxe.rtti.TypeApi.typeEq(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "to", 25979, true)) ))) )[i], "t", 116, true)) ), ((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a2, "to", 25979, true)) ))) )[i], "t", 116, true)) ))) ) {
						return false;
					}
					
				}
				
			}
			
			{
				int _g2 = 0;
				int _g3 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "from", 1136829802, true)) ))) ).length;
				while (( _g2 < _g3 )) {
					int i1 = _g2++;
					if ( ! (global::haxe.rtti.TypeApi.typeEq(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a, "from", 1136829802, true)) ))) )[i1], "t", 116, true)) ), ((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a2, "from", 1136829802, true)) ))) )[i1], "t", 116, true)) ))) ) {
						return false;
					}
					
				}
				
			}
			
			if (( global::haxe.lang.Runtime.getField(a2, "impl", 1169850080, true) != null )) {
				this.mergeClasses(global::haxe.lang.Runtime.getField(a, "impl", 1169850080, true), global::haxe.lang.Runtime.getField(a2, "impl", 1169850080, true));
			}
			
			((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(a, "platforms", 310553184, true)) ))) ).push(this.curplatform);
			return true;
		}
		
		
		public virtual void merge(global::haxe.rtti.TypeTree t) {
			unchecked {
				object inf = global::haxe.rtti.TypeApi.typeInfos(t);
				global::Array<string> pack = global::haxe.lang.StringExt.split(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "path", 1246881189, true)), ".");
				global::Array<object> cur = this.root;
				global::Array<string> curpack = new global::Array<string>();
				string __temp_expr1 = global::haxe.lang.Runtime.toString((pack.pop()).toDynamic());
				{
					int _g = 0;
					while (( _g < pack.length )) {
						string p = pack[_g];
						 ++ _g;
						bool found = false;
						{
							int _g1 = 0;
							while (( _g1 < cur.length )) {
								global::haxe.rtti.TypeTree pk = ((global::haxe.rtti.TypeTree) (cur[_g1]) );
								 ++ _g1;
								if (( pk._hx_index == 0 )) {
									string _g2 = ( pk as global::haxe.rtti.TypeTree_TPackage ).full;
									{
										string pname = ( pk as global::haxe.rtti.TypeTree_TPackage ).name;
										global::Array<object> subs = ( pk as global::haxe.rtti.TypeTree_TPackage ).subs;
										if (( pname == p )) {
											found = true;
											cur = subs;
											break;
										}
										
									}
									
								}
								
							}
							
						}
						
						curpack.push(p);
						if ( ! (found) ) {
							global::Array<object> pk1 = new global::Array<object>();
							cur.push(global::haxe.rtti.TypeTree.TPackage(p, curpack.@join("."), pk1));
							cur = pk1;
						}
						
					}
					
				}
				
				{
					int _g3 = 0;
					while (( _g3 < cur.length )) {
						global::haxe.rtti.TypeTree ct = ((global::haxe.rtti.TypeTree) (cur[_g3]) );
						 ++ _g3;
						bool tmp = default(bool);
						if (( ct._hx_index == 0 )) {
							string _g4 = ( ct as global::haxe.rtti.TypeTree_TPackage ).name;
							string _g5 = ( ct as global::haxe.rtti.TypeTree_TPackage ).full;
							global::Array<object> _g6 = ( ct as global::haxe.rtti.TypeTree_TPackage ).subs;
							tmp = true;
						}
						else {
							tmp = false;
						}
						
						if (tmp) {
							continue;
						}
						
						object tinf = global::haxe.rtti.TypeApi.typeInfos(ct);
						if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "path", 1246881189, true)) == global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "path", 1246881189, true)) )) {
							bool sameType = true;
							if (( ( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "doc", 4997752, true)) == null ) != (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "doc", 4997752, true)) == null )) )) {
								if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "doc", 4997752, true)) == null )) {
									string __temp_expr3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.setField(inf, "doc", 4997752, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "doc", 4997752, true))));
								}
								else {
									string __temp_expr2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.setField(tinf, "doc", 4997752, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "doc", 4997752, true))));
								}
								
							}
							
							if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "path", 1246881189, true)) == "haxe._Int64.NativeInt64" )) {
								continue;
							}
							
							if (( ( ( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "module", 1087583404, true)) == global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "module", 1087583404, true)) ) && ( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "doc", 4997752, true)) == global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "doc", 4997752, true)) ) ) && ( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(tinf, "isPrivate", 225290809, true)) == global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(inf, "isPrivate", 225290809, true)) ) )) {
								switch (ct._hx_index) {
									case 0:
									{
										string _g7 = ( ct as global::haxe.rtti.TypeTree_TPackage ).name;
										string _g8 = ( ct as global::haxe.rtti.TypeTree_TPackage ).full;
										global::Array<object> _g9 = ( ct as global::haxe.rtti.TypeTree_TPackage ).subs;
										sameType = false;
										break;
									}
									
									
									case 1:
									{
										object c = ( ct as global::haxe.rtti.TypeTree_TClassdecl ).c;
										if (( t._hx_index == 1 )) {
											object c2 = ( t as global::haxe.rtti.TypeTree_TClassdecl ).c;
											if (this.mergeClasses(c, c2)) {
												return;
											}
											
										}
										else {
											sameType = false;
										}
										
										break;
									}
									
									
									case 2:
									{
										object e = ( ct as global::haxe.rtti.TypeTree_TEnumdecl ).e;
										if (( t._hx_index == 2 )) {
											object e2 = ( t as global::haxe.rtti.TypeTree_TEnumdecl ).e;
											if (this.mergeEnums(e, e2)) {
												return;
											}
											
										}
										else {
											sameType = false;
										}
										
										break;
									}
									
									
									case 3:
									{
										object td = ( ct as global::haxe.rtti.TypeTree_TTypedecl ).t;
										if (( t._hx_index == 3 )) {
											object td2 = ( t as global::haxe.rtti.TypeTree_TTypedecl ).t;
											if (this.mergeTypedefs(td, td2)) {
												return;
											}
											
										}
										
										break;
									}
									
									
									case 4:
									{
										object a = ( ct as global::haxe.rtti.TypeTree_TAbstractdecl ).a;
										if (( t._hx_index == 4 )) {
											object a2 = ( t as global::haxe.rtti.TypeTree_TAbstractdecl ).a;
											if (this.mergeAbstracts(a, a2)) {
												return;
											}
											
										}
										else {
											sameType = false;
										}
										
										break;
									}
									
									
								}
								
							}
							
							string msg = ( (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "module", 1087583404, true)) != global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "module", 1087583404, true)) )) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("module ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "module", 1087583404, true))), " should be "), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "module", 1087583404, true)))) : (( (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "doc", 4997752, true)) != global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(inf, "doc", 4997752, true)) )) ? ("documentation is different") : (( (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(tinf, "isPrivate", 225290809, true)) != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(inf, "isPrivate", 225290809, true)) )) ? ("private flag is different") : (( ( ! (sameType) ) ? ("type kind is different") : ("could not merge definition") )) )) )) );
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Incompatibilities between ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tinf, "path", 1246881189, true))), " in "), ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(tinf, "platforms", 310553184, true)) ))) ).@join(",")), " and "), this.curplatform), " ("), msg), ")"))) );
						}
						
					}
					
				}
				
				cur.push(t);
			}
		}
		
		
		public virtual string mkPath(string p) {
			return p;
		}
		
		
		public virtual global::Array<string> mkTypeParams(string p) {
			global::Array<string> pl = global::haxe.lang.StringExt.split(p, ":");
			if (( pl[0] == "" )) {
				return new global::Array<string>();
			}
			
			return pl;
		}
		
		
		public virtual global::haxe.rtti.Rights mkRights(string r) {
			switch (r) {
				case "dynamic":
				{
					return global::haxe.rtti.Rights.RDynamic;
				}
				
				
				case "inline":
				{
					return global::haxe.rtti.Rights.RInline;
				}
				
				
				case "method":
				{
					return global::haxe.rtti.Rights.RMethod;
				}
				
				
				case "null":
				{
					return global::haxe.rtti.Rights.RNo;
				}
				
				
				default:
				{
					return global::haxe.rtti.Rights.RCall(r);
				}
				
			}
			
		}
		
		
		public virtual object xerror(global::Xml c) {
			string tmp = null;
			if (( ((global::Xml) (c) ).nodeType == global::Xml.Document )) {
				tmp = "Document";
			}
			else {
				if (( ((global::Xml) (c) ).nodeType != global::Xml.Element )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c) ).nodeType)))) );
				}
				
				tmp = ((global::Xml) (c) ).nodeName;
			}
			
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid ", tmp))) );
		}
		
		
		public virtual void xroot(global::Xml x) {
			object c = ((global::Xml) (x) ).elements();
			while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
				global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
				this.merge(this.processElement(c1));
			}
			
		}
		
		
		public virtual global::haxe.rtti.TypeTree processElement(global::Xml x) {
			if (( ( x.nodeType != global::Xml.Document ) && ( x.nodeType != global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x.nodeType)))) );
			}
			
			global::Xml this1 = x;
			global::Xml c = ((global::Xml) (this1) );
			string _g = null;
			if (( ((global::Xml) (c) ).nodeType == global::Xml.Document )) {
				_g = "Document";
			}
			else {
				if (( ((global::Xml) (c) ).nodeType != global::Xml.Element )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c) ).nodeType)))) );
				}
				
				_g = ((global::Xml) (c) ).nodeName;
			}
			
			switch (_g) {
				case "abstract":
				{
					return global::haxe.rtti.TypeTree.TAbstractdecl(this.xabstract(c));
				}
				
				
				case "class":
				{
					return global::haxe.rtti.TypeTree.TClassdecl(this.xclass(c));
				}
				
				
				case "enum":
				{
					return global::haxe.rtti.TypeTree.TEnumdecl(this.xenum(c));
				}
				
				
				case "typedef":
				{
					return global::haxe.rtti.TypeTree.TTypedecl(this.xtypedef(c));
				}
				
				
				default:
				{
					return ((global::haxe.rtti.TypeTree) (this.xerror(c)) );
				}
				
			}
			
		}
		
		
		public virtual global::Array<object> xmeta(global::Xml x) {
			global::Array<object> ml = new global::Array<object>(new object[]{});
			{
				int _g = 0;
				global::Array<object> _g1 = global::haxe.xml._Access.NodeListAccess_Impl_.resolve(((global::Xml) (x) ), "m");
				while (( _g < _g1.length )) {
					global::Xml m = ((global::Xml) (_g1[_g]) );
					 ++ _g;
					global::Array<string> pl = new global::Array<string>(new string[]{});
					{
						int _g2 = 0;
						global::Array<object> _g3 = global::haxe.xml._Access.NodeListAccess_Impl_.resolve(((global::Xml) (m) ), "e");
						while (( _g2 < _g3.length )) {
							global::Xml p = ((global::Xml) (_g3[_g2]) );
							 ++ _g2;
							pl.push(global::haxe.xml._Access.Access_Impl_.get_innerHTML(p));
						}
						
					}
					
					object __temp_stmt2 = null;
					{
						string __temp_odecl1 = global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (m) ), "n");
						__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{1224700491, 1836776262}, new object[]{__temp_odecl1, pl}, new int[]{}, new double[]{});
					}
					
					ml.push(__temp_stmt2);
				}
				
			}
			
			return ml;
		}
		
		
		public virtual global::Array<object> xoverloads(global::Xml x) {
			global::Array<object> l = new global::Array<object>();
			{
				object m = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(m, "hasNext", 407283053, null))) {
					global::Xml m1 = ((global::Xml) (global::haxe.lang.Runtime.callField(m, "next", 1224901875, null)) );
					l.push(this.xclassfield(m1, default(global::haxe.lang.Null<bool>)));
				}
				
			}
			
			return l;
		}
		
		
		public virtual object xpath(global::Xml x) {
			string path = this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path"));
			global::Array<object> @params = new global::Array<object>();
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					@params.push(this.xtype(c1));
				}
				
			}
			
			return new global::haxe.lang.DynamicObject(new int[]{1246881189, 1836776262}, new object[]{path, @params}, new int[]{}, new double[]{});
		}
		
		
		public virtual object xclass(global::Xml x) {
			object csuper = null;
			string doc = null;
			global::haxe.rtti.CType tdynamic = null;
			global::Array<object> interfaces = new global::Array<object>();
			global::Array<object> fields = new global::Array<object>();
			global::Array<object> statics = new global::Array<object>();
			global::Array<object> meta = new global::Array<object>(new object[]{});
			bool isInterface = ((global::Xml) (x) ).exists("interface");
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					{
						string _g = null;
						if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
							_g = "Document";
						}
						else {
							if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
							}
							
							_g = ((global::Xml) (c1) ).nodeName;
						}
						
						switch (_g) {
							case "extends":
							{
								if (isInterface) {
									interfaces.push(this.xpath(c1));
								}
								else {
									csuper = this.xpath(c1);
								}
								
								break;
							}
							
							
							case "haxe_doc":
							{
								doc = global::haxe.xml._Access.Access_Impl_.get_innerData(c1);
								break;
							}
							
							
							case "haxe_dynamic":
							{
								global::Xml x1 = ((global::Xml) (c1) ).firstElement();
								if (( ( x1.nodeType != global::Xml.Document ) && ( x1.nodeType != global::Xml.Element ) )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x1.nodeType)))) );
								}
								
								global::Xml this1 = x1;
								tdynamic = this.xtype(((global::Xml) (this1) ));
								break;
							}
							
							
							case "implements":
							{
								interfaces.push(this.xpath(c1));
								break;
							}
							
							
							case "meta":
							{
								meta = this.xmeta(c1);
								break;
							}
							
							
							default:
							{
								if (((global::Xml) (c1) ).exists("static")) {
									statics.push(this.xclassfield(c1, default(global::haxe.lang.Null<bool>)));
								}
								else {
									fields.push(this.xclassfield(c1, default(global::haxe.lang.Null<bool>)));
								}
								
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			string tmp = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) : (null) );
			string tmp1 = this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path"));
			string tmp2 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "module")) ? (this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "module"))) : (null) );
			bool tmp3 = ((global::Xml) (x) ).exists("private");
			bool tmp4 = ((global::Xml) (x) ).exists("extern");
			bool tmp5 = ((global::Xml) (x) ).exists("final");
			global::Array<string> tmp6 = this.mkTypeParams(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "params"));
			{
				global::Array<string> __temp_odecl1 = this.defplat();
				return new global::haxe.lang.DynamicObject(new int[]{4997752, 9342585, 225290809, 310553184, 408610927, 488637228, 528773354, 552686987, 671590589, 912604165, 1087583404, 1136381564, 1213811397, 1246881189, 1695633562, 1836776262}, new object[]{doc, fields, tmp3, __temp_odecl1, isInterface, tmp5, tmp4, tdynamic, csuper, statics, tmp2, tmp, meta, tmp1, interfaces, tmp6}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual object xclassfield(global::Xml x, global::haxe.lang.Null<bool> defPublic) {
			global::haxe.lang.Null<bool> defPublic1 = ( ( ! (defPublic.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (defPublic) );
			object e = ((object) (((global::Xml) (x) ).elements()) );
			global::haxe.rtti.CType t = this.xtype(((global::Xml) (global::haxe.lang.Runtime.callField(e, "next", 1224901875, null)) ));
			string doc = null;
			global::Array<object> meta = new global::Array<object>(new object[]{});
			global::Array<object> overloads = null;
			{
				object c = e;
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					{
						string _g = null;
						if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
							_g = "Document";
						}
						else {
							if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
							}
							
							_g = ((global::Xml) (c1) ).nodeName;
						}
						
						switch (_g) {
							case "haxe_doc":
							{
								doc = global::haxe.xml._Access.Access_Impl_.get_innerData(c1);
								break;
							}
							
							
							case "meta":
							{
								meta = this.xmeta(c1);
								break;
							}
							
							
							case "overloads":
							{
								overloads = this.xoverloads(c1);
								break;
							}
							
							
							default:
							{
								this.xerror(c1);
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			string tmp = null;
			if (( ((global::Xml) (x) ).nodeType == global::Xml.Document )) {
				tmp = "Document";
			}
			else {
				if (( ((global::Xml) (x) ).nodeType != global::Xml.Element )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (x) ).nodeType)))) );
				}
				
				tmp = ((global::Xml) (x) ).nodeName;
			}
			
			bool tmp1 = ( ((global::Xml) (x) ).exists("public") || (defPublic1).@value );
			bool tmp2 = ((global::Xml) (x) ).exists("final");
			bool tmp3 = ((global::Xml) (x) ).exists("override");
			global::haxe.lang.Null<int> tmp4 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "line")) ? (global::Std.parseInt(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "line"))) : (default(global::haxe.lang.Null<int>)) );
			global::haxe.rtti.Rights tmp5 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "get")) ? (this.mkRights(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "get"))) : (global::haxe.rtti.Rights.RNormal) );
			global::haxe.rtti.Rights tmp6 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "set")) ? (this.mkRights(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "set"))) : (global::haxe.rtti.Rights.RNormal) );
			global::Array<string> tmp7 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "params")) ? (this.mkTypeParams(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "params"))) : (new global::Array<string>(new string[]{})) );
			global::Array<string> tmp8 = this.defplat();
			{
				string __temp_odecl1 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "expr")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "expr")) : (null) );
				return new global::haxe.lang.DynamicObject(new int[]{4997752, 5144726, 5741474, 310553184, 488637228, 1063066675, 1126038837, 1138177110, 1202919412, 1213811397, 1224700491, 1233348025, 1292432058, 1836776262}, new object[]{doc, tmp5, tmp6, tmp8, tmp2, tmp1, __temp_odecl1, tmp3, (tmp4).toDynamic(), meta, tmp, overloads, t, tmp7}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual object xenum(global::Xml x) {
			global::Array<object> cl = new global::Array<object>();
			string doc = null;
			global::Array<object> meta = new global::Array<object>(new object[]{});
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					string tmp = null;
					if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
						tmp = "Document";
					}
					else {
						if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
						}
						
						tmp = ((global::Xml) (c1) ).nodeName;
					}
					
					if (( tmp == "haxe_doc" )) {
						doc = global::haxe.xml._Access.Access_Impl_.get_innerData(c1);
					}
					else {
						string tmp1 = null;
						if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
							tmp1 = "Document";
						}
						else {
							if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
							}
							
							tmp1 = ((global::Xml) (c1) ).nodeName;
						}
						
						if (( tmp1 == "meta" )) {
							meta = this.xmeta(c1);
						}
						else {
							cl.push(this.xenumfield(c1));
						}
						
					}
					
				}
				
			}
			
			string tmp2 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) : (null) );
			string tmp3 = this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path"));
			string tmp4 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "module")) ? (this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "module"))) : (null) );
			bool tmp5 = ((global::Xml) (x) ).exists("private");
			bool tmp6 = ((global::Xml) (x) ).exists("extern");
			global::Array<string> tmp7 = this.mkTypeParams(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "params"));
			{
				global::Array<string> __temp_odecl1 = this.defplat();
				return new global::haxe.lang.DynamicObject(new int[]{4997752, 225290809, 310553184, 528773354, 885141049, 1087583404, 1136381564, 1213811397, 1246881189, 1836776262}, new object[]{doc, tmp5, __temp_odecl1, tmp6, cl, tmp4, tmp2, meta, tmp3, tmp7}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual object xenumfield(global::Xml x) {
			unchecked {
				global::Array<object> args = null;
				object docElements = ((global::Xml) (x) ).elementsNamed("haxe_doc");
				global::Xml xdoc = ( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(docElements, "hasNext", 407283053, null))) ? (((global::Xml) (global::haxe.lang.Runtime.callField(docElements, "next", 1224901875, null)) )) : (null) );
				global::Array<object> meta = ( (global::haxe.xml._Access.HasNodeAccess_Impl_.resolve(((global::Xml) (x) ), "meta")) ? (this.xmeta(global::haxe.xml._Access.NodeAccess_Impl_.resolve(((global::Xml) (x) ), "meta"))) : (new global::Array<object>(new object[]{})) );
				if (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "a")) {
					global::Array<string> names = global::haxe.lang.StringExt.split(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "a"), ":");
					object elts = ((object) (((global::Xml) (x) ).elements()) );
					args = new global::Array<object>();
					{
						int _g = 0;
						while (( _g < names.length )) {
							string c = names[_g];
							 ++ _g;
							bool opt = false;
							if (( global::haxe.lang.StringExt.charAt(c, 0) == "?" )) {
								opt = true;
								c = global::haxe.lang.StringExt.substr(c, 1, default(global::haxe.lang.Null<int>));
							}
							
							object __temp_stmt3 = null;
							{
								global::haxe.rtti.CType __temp_odecl1 = this.xtype(((global::Xml) (global::haxe.lang.Runtime.callField(elts, "next", 1224901875, null)) ));
								__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl1, opt, c}, new int[]{}, new double[]{});
							}
							
							args.push(__temp_stmt3);
						}
						
					}
					
				}
				
				string tmp = null;
				if (( ((global::Xml) (x) ).nodeType == global::Xml.Document )) {
					tmp = "Document";
				}
				else {
					if (( ((global::Xml) (x) ).nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (x) ).nodeType)))) );
					}
					
					tmp = ((global::Xml) (x) ).nodeName;
				}
				
				string tmp1 = null;
				if (( xdoc == null )) {
					tmp1 = null;
				}
				else {
					if (( ( xdoc.nodeType != global::Xml.Document ) && ( xdoc.nodeType != global::Xml.Element ) )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(xdoc.nodeType)))) );
					}
					
					global::Xml this1 = xdoc;
					tmp1 = global::haxe.xml._Access.Access_Impl_.get_innerData(((global::Xml) (this1) ));
				}
				
				{
					global::Array<string> __temp_odecl2 = this.defplat();
					return new global::haxe.lang.DynamicObject(new int[]{4997752, 310553184, 1081380189, 1213811397, 1224700491}, new object[]{tmp1, __temp_odecl2, args, meta, tmp}, new int[]{}, new double[]{});
				}
				
			}
		}
		
		
		public virtual object xabstract(global::Xml x) {
			string doc = null;
			object impl = null;
			global::haxe.rtti.CType athis = null;
			global::Array<object> meta = new global::Array<object>(new object[]{});
			global::Array<object> to = new global::Array<object>(new object[]{});
			global::Array<object> @from = new global::Array<object>(new object[]{});
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					{
						string _g = null;
						if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
							_g = "Document";
						}
						else {
							if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
							}
							
							_g = ((global::Xml) (c1) ).nodeName;
						}
						
						switch (_g) {
							case "from":
							{
								object t = ((object) (((global::Xml) (c1) ).elements()) );
								while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(t, "hasNext", 407283053, null))) {
									global::Xml t1 = ((global::Xml) (global::haxe.lang.Runtime.callField(t, "next", 1224901875, null)) );
									global::Xml x1 = ((global::Xml) (t1) ).firstElement();
									if (( ( x1.nodeType != global::Xml.Document ) && ( x1.nodeType != global::Xml.Element ) )) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x1.nodeType)))) );
									}
									
									global::Xml this1 = x1;
									global::haxe.rtti.CType tmp = this.xtype(((global::Xml) (this1) ));
									object __temp_stmt4 = null;
									{
										string __temp_odecl1 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (t1) ), "field")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (t1) ), "field")) : (null) );
										__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{116, 9671866}, new object[]{tmp, __temp_odecl1}, new int[]{}, new double[]{});
									}
									
									@from.push(__temp_stmt4);
								}
								
								break;
							}
							
							
							case "haxe_doc":
							{
								doc = global::haxe.xml._Access.Access_Impl_.get_innerData(c1);
								break;
							}
							
							
							case "impl":
							{
								impl = this.xclass(global::haxe.xml._Access.NodeAccess_Impl_.resolve(((global::Xml) (c1) ), "class"));
								break;
							}
							
							
							case "meta":
							{
								meta = this.xmeta(c1);
								break;
							}
							
							
							case "this":
							{
								global::Xml x2 = ((global::Xml) (c1) ).firstElement();
								if (( ( x2.nodeType != global::Xml.Document ) && ( x2.nodeType != global::Xml.Element ) )) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x2.nodeType)))) );
								}
								
								global::Xml this2 = x2;
								athis = this.xtype(((global::Xml) (this2) ));
								break;
							}
							
							
							case "to":
							{
								object t2 = ((object) (((global::Xml) (c1) ).elements()) );
								while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(t2, "hasNext", 407283053, null))) {
									global::Xml t3 = ((global::Xml) (global::haxe.lang.Runtime.callField(t2, "next", 1224901875, null)) );
									global::Xml x3 = ((global::Xml) (t3) ).firstElement();
									if (( ( x3.nodeType != global::Xml.Document ) && ( x3.nodeType != global::Xml.Element ) )) {
										throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x3.nodeType)))) );
									}
									
									global::Xml this3 = x3;
									global::haxe.rtti.CType tmp1 = this.xtype(((global::Xml) (this3) ));
									object __temp_stmt5 = null;
									{
										string __temp_odecl2 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (t3) ), "field")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (t3) ), "field")) : (null) );
										__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{116, 9671866}, new object[]{tmp1, __temp_odecl2}, new int[]{}, new double[]{});
									}
									
									to.push(__temp_stmt5);
								}
								
								break;
							}
							
							
							default:
							{
								this.xerror(c1);
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			string tmp2 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) : (null) );
			string tmp3 = this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path"));
			string tmp4 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "module")) ? (this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "module"))) : (null) );
			bool tmp5 = ((global::Xml) (x) ).exists("private");
			global::Array<string> tmp6 = this.mkTypeParams(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "params"));
			{
				global::Array<string> __temp_odecl3 = this.defplat();
				return new global::haxe.lang.DynamicObject(new int[]{25979, 4997752, 225290809, 310553184, 651840319, 1087583404, 1136381564, 1136829802, 1169850080, 1213811397, 1246881189, 1836776262}, new object[]{to, doc, tmp5, __temp_odecl3, athis, tmp4, tmp2, @from, impl, meta, tmp3, tmp6}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual object xtypedef(global::Xml x) {
			string doc = null;
			global::haxe.rtti.CType t = null;
			global::Array<object> meta = new global::Array<object>(new object[]{});
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					string tmp = null;
					if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
						tmp = "Document";
					}
					else {
						if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
						}
						
						tmp = ((global::Xml) (c1) ).nodeName;
					}
					
					if (( tmp == "haxe_doc" )) {
						doc = global::haxe.xml._Access.Access_Impl_.get_innerData(c1);
					}
					else {
						string tmp1 = null;
						if (( ((global::Xml) (c1) ).nodeType == global::Xml.Document )) {
							tmp1 = "Document";
						}
						else {
							if (( ((global::Xml) (c1) ).nodeType != global::Xml.Element )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (c1) ).nodeType)))) );
							}
							
							tmp1 = ((global::Xml) (c1) ).nodeName;
						}
						
						if (( tmp1 == "meta" )) {
							meta = this.xmeta(c1);
						}
						else {
							t = this.xtype(c1);
						}
						
					}
					
				}
				
			}
			
			global::haxe.ds.StringMap<object> types = new global::haxe.ds.StringMap<object>();
			if (( this.curplatform != null )) {
				types.@set(this.curplatform, t);
			}
			
			string tmp2 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) ? (global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "file")) : (null) );
			string tmp3 = this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path"));
			string tmp4 = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "module")) ? (this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "module"))) : (null) );
			bool tmp5 = ((global::Xml) (x) ).exists("private");
			global::Array<string> tmp6 = this.mkTypeParams(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "params"));
			{
				global::Array<string> __temp_odecl1 = this.defplat();
				return new global::haxe.lang.DynamicObject(new int[]{4997752, 225290809, 310553184, 449540217, 1087583404, 1136381564, 1213811397, 1246881189, 1292432058, 1836776262}, new object[]{doc, tmp5, __temp_odecl1, ((global::haxe.ds.StringMap<object>) (types) ), tmp4, tmp2, meta, tmp3, t, tmp6}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual global::haxe.rtti.CType xtype(global::Xml x) {
			unchecked {
				string _g = null;
				if (( ((global::Xml) (x) ).nodeType == global::Xml.Document )) {
					_g = "Document";
				}
				else {
					if (( ((global::Xml) (x) ).nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (x) ).nodeType)))) );
					}
					
					_g = ((global::Xml) (x) ).nodeName;
				}
				
				switch (_g) {
					case "a":
					{
						global::Array<object> fields = new global::Array<object>();
						{
							object f = ((object) (((global::Xml) (x) ).elements()) );
							while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(f, "hasNext", 407283053, null))) {
								global::Xml f1 = ((global::Xml) (global::haxe.lang.Runtime.callField(f, "next", 1224901875, null)) );
								object f2 = this.xclassfield(f1, new global::haxe.lang.Null<bool>(true, true));
								global::Array<string> __temp_expr1 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.setField(f2, "platforms", 310553184, new global::Array<string>())) ))) );
								fields.push(f2);
							}
							
						}
						
						return global::haxe.rtti.CType.CAnonymous(fields);
					}
					
					
					case "c":
					{
						return global::haxe.rtti.CType.CClass(this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path")), this.xtypeparams(x));
					}
					
					
					case "d":
					{
						global::haxe.rtti.CType t = null;
						global::Xml tx = ((global::Xml) (x) ).firstElement();
						if (( tx != null )) {
							if (( ( tx.nodeType != global::Xml.Document ) && ( tx.nodeType != global::Xml.Element ) )) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(tx.nodeType)))) );
							}
							
							global::Xml this1 = tx;
							t = this.xtype(((global::Xml) (this1) ));
						}
						
						return global::haxe.rtti.CType.CDynamic(t);
					}
					
					
					case "e":
					{
						return global::haxe.rtti.CType.CEnum(this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path")), this.xtypeparams(x));
					}
					
					
					case "f":
					{
						global::Array<object> args = new global::Array<object>();
						global::Array<string> aname = global::haxe.lang.StringExt.split(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "a"), ":");
						int eargs_current = 0;
						global::Array<string> eargs_array = aname;
						global::haxe.iterators.ArrayIterator<string> evalues = ( (global::haxe.xml._Access.HasAttribAccess_Impl_.resolve(((global::Xml) (x) ), "v")) ? (new global::haxe.iterators.ArrayIterator<string>(((global::Array<string>) (global::haxe.lang.StringExt.split(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "v"), ":")) ))) : (null) );
						{
							object e = ((object) (((global::Xml) (x) ).elements()) );
							while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(e, "hasNext", 407283053, null))) {
								global::Xml e1 = ((global::Xml) (global::haxe.lang.Runtime.callField(e, "next", 1224901875, null)) );
								bool opt = false;
								string a = ( (( eargs_current < eargs_array.length )) ? (eargs_array[eargs_current++]) : (null) );
								if (( a == null )) {
									a = "";
								}
								
								if (( global::haxe.lang.StringExt.charAt(a, 0) == "?" )) {
									opt = true;
									a = global::haxe.lang.StringExt.substr(a, 1, default(global::haxe.lang.Null<int>));
								}
								
								string v = ( (( ( evalues == null ) || ( evalues.current >= evalues.array.length ) )) ? (null) : (evalues.array[evalues.current++]) );
								global::haxe.rtti.CType tmp = this.xtype(e1);
								args.push(new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 834174833, 1224700491}, new object[]{tmp, opt, ( (( v == "" )) ? (null) : (v) ), a}, new int[]{}, new double[]{}));
							}
							
						}
						
						object ret = args[( args.length - 1 )];
						args.@remove(ret);
						return global::haxe.rtti.CType.CFunction(args, ((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(ret, "t", 116, true)) ));
					}
					
					
					case "t":
					{
						return global::haxe.rtti.CType.CTypedef(this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path")), this.xtypeparams(x));
					}
					
					
					case "unknown":
					{
						return global::haxe.rtti.CType.CUnknown;
					}
					
					
					case "x":
					{
						return global::haxe.rtti.CType.CAbstract(this.mkPath(global::haxe.xml._Access.AttribAccess_Impl_.resolve(((global::Xml) (x) ), "path")), this.xtypeparams(x));
					}
					
					
					default:
					{
						return ((global::haxe.rtti.CType) (this.xerror(x)) );
					}
					
				}
				
			}
		}
		
		
		public virtual global::Array<object> xtypeparams(global::Xml x) {
			global::Array<object> p = new global::Array<object>();
			{
				object c = ((object) (((global::Xml) (x) ).elements()) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
					global::Xml c1 = ((global::Xml) (global::haxe.lang.Runtime.callField(c, "next", 1224901875, null)) );
					p.push(this.xtype(c1));
				}
				
			}
			
			return p;
		}
		
		
		public virtual global::Array<string> defplat() {
			global::Array<string> l = new global::Array<string>();
			if (( this.curplatform != null )) {
				l.push(this.curplatform);
			}
			
			return l;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 601741370:
					{
						this.newField = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 260487219:
					{
						this.curplatform = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1269755426:
					{
						this.root = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 631713332:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "defplat", 631713332)) );
					}
					
					
					case 429915128:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xtypeparams", 429915128)) );
					}
					
					
					case 1696501554:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xtype", 1696501554)) );
					}
					
					
					case 1216198099:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xtypedef", 1216198099)) );
					}
					
					
					case 162003290:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xabstract", 162003290)) );
					}
					
					
					case 110941857:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xenumfield", 110941857)) );
					}
					
					
					case 1529612153:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xenum", 1529612153)) );
					}
					
					
					case 415668218:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xclassfield", 415668218)) );
					}
					
					
					case 1126941888:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xclass", 1126941888)) );
					}
					
					
					case 1650950685:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xpath", 1650950685)) );
					}
					
					
					case 1818990145:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xoverloads", 1818990145)) );
					}
					
					
					case 1617880893:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xmeta", 1617880893)) );
					}
					
					
					case 951250957:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processElement", 951250957)) );
					}
					
					
					case 1673824922:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xroot", 1673824922)) );
					}
					
					
					case 1845303376:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xerror", 1845303376)) );
					}
					
					
					case 1051591445:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mkRights", 1051591445)) );
					}
					
					
					case 941338270:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mkTypeParams", 941338270)) );
					}
					
					
					case 1710323747:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mkPath", 1710323747)) );
					}
					
					
					case 96903864:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "merge", 96903864)) );
					}
					
					
					case 1326984057:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeAbstracts", 1326984057)) );
					}
					
					
					case 1002832288:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeTypedefs", 1002832288)) );
					}
					
					
					case 843917434:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeEnums", 843917434)) );
					}
					
					
					case 508959438:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeClasses", 508959438)) );
					}
					
					
					case 601741370:
					{
						return this.newField;
					}
					
					
					case 1274838865:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeFields", 1274838865)) );
					}
					
					
					case 1750981280:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeDoc", 1750981280)) );
					}
					
					
					case 429147631:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mergeRights", 429147631)) );
					}
					
					
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 1567884407:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sortFields", 1567884407)) );
					}
					
					
					case 1280845662:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sort", 1280845662)) );
					}
					
					
					case 260487219:
					{
						return this.curplatform;
					}
					
					
					case 1269755426:
					{
						return this.root;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 631713332:
					{
						return this.defplat();
					}
					
					
					case 429915128:
					{
						return this.xtypeparams(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1696501554:
					{
						return this.xtype(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1216198099:
					{
						return this.xtypedef(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 162003290:
					{
						return this.xabstract(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 110941857:
					{
						return this.xenumfield(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1529612153:
					{
						return this.xenum(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 415668218:
					{
						return this.xclassfield(((global::Xml) (dynargs[0]) ), global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
					}
					
					
					case 1126941888:
					{
						return this.xclass(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1650950685:
					{
						return this.xpath(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1818990145:
					{
						return this.xoverloads(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1617880893:
					{
						return this.xmeta(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 951250957:
					{
						return this.processElement(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1673824922:
					{
						this.xroot(((global::Xml) (dynargs[0]) ));
						break;
					}
					
					
					case 1845303376:
					{
						return this.xerror(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1051591445:
					{
						return this.mkRights(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 941338270:
					{
						return this.mkTypeParams(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1710323747:
					{
						return this.mkPath(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 96903864:
					{
						this.merge(((global::haxe.rtti.TypeTree) (dynargs[0]) ));
						break;
					}
					
					
					case 1326984057:
					{
						return this.mergeAbstracts(dynargs[0], dynargs[1]);
					}
					
					
					case 1002832288:
					{
						return this.mergeTypedefs(dynargs[0], dynargs[1]);
					}
					
					
					case 843917434:
					{
						return this.mergeEnums(dynargs[0], dynargs[1]);
					}
					
					
					case 508959438:
					{
						return this.mergeClasses(dynargs[0], dynargs[1]);
					}
					
					
					case 1274838865:
					{
						return this.mergeFields(dynargs[0], dynargs[1]);
					}
					
					
					case 1750981280:
					{
						return this.mergeDoc(dynargs[0], dynargs[1]);
					}
					
					
					case 429147631:
					{
						return this.mergeRights(dynargs[0], dynargs[1]);
					}
					
					
					case 1900716655:
					{
						this.process(((global::Xml) (dynargs[0]) ), global::haxe.lang.Runtime.toString(dynargs[1]));
						break;
					}
					
					
					case 1567884407:
					{
						this.sortFields(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 1280845662:
					{
						this.sort(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )) ))) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("newField");
			baseArr.push("curplatform");
			baseArr.push("root");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.rtti {
	public class XmlParser_sort_46__Fun : global::haxe.lang.Function {
		
		public XmlParser_sort_46__Fun() : base(2, 1) {
		}
		
		
		public static global::haxe.rtti.XmlParser_sort_46__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				global::haxe.rtti.TypeTree e2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.rtti.TypeTree) (((object) (__fn_float2) )) )) : (((global::haxe.rtti.TypeTree) (__fn_dyn2) )) );
				global::haxe.rtti.TypeTree e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.rtti.TypeTree) (((object) (__fn_float1) )) )) : (((global::haxe.rtti.TypeTree) (__fn_dyn1) )) );
				string n1 = null;
				if (( e1._hx_index == 0 )) {
					string _g = ( e1 as global::haxe.rtti.TypeTree_TPackage ).full;
					global::Array<object> _g1 = ( e1 as global::haxe.rtti.TypeTree_TPackage ).subs;
					string p = ( e1 as global::haxe.rtti.TypeTree_TPackage ).name;
					n1 = global::haxe.lang.Runtime.concat(" ", p);
				}
				else {
					n1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::haxe.rtti.TypeApi.typeInfos(e1), "path", 1246881189, true));
				}
				
				string n2 = null;
				if (( e2._hx_index == 0 )) {
					string _g2 = ( e2 as global::haxe.rtti.TypeTree_TPackage ).full;
					global::Array<object> _g3 = ( e2 as global::haxe.rtti.TypeTree_TPackage ).subs;
					string p1 = ( e2 as global::haxe.rtti.TypeTree_TPackage ).name;
					n2 = global::haxe.lang.Runtime.concat(" ", p1);
				}
				else {
					n2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::haxe.rtti.TypeApi.typeInfos(e2), "path", 1246881189, true));
				}
				
				if (( string.CompareOrdinal(n1, n2) > 0 )) {
					return ((double) (1) );
				}
				
				return ((double) (-1) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.rtti {
	public class XmlParser_sortFields_73__Fun : global::haxe.lang.Function {
		
		public XmlParser_sortFields_73__Fun() : base(2, 1) {
		}
		
		
		public static global::haxe.rtti.XmlParser_sortFields_73__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				object f2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
				object f1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				bool v1 = global::haxe.rtti.TypeApi.isVar(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(f1, "type", 1292432058, true)) ));
				bool v2 = global::haxe.rtti.TypeApi.isVar(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(f2, "type", 1292432058, true)) ));
				if (( v1 &&  ! (v2)  )) {
					return ((double) (-1) );
				}
				
				if (( v2 &&  ! (v1)  )) {
					return ((double) (1) );
				}
				
				if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true)) == "new" )) {
					return ((double) (-1) );
				}
				
				if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "name", 1224700491, true)) == "new" )) {
					return ((double) (1) );
				}
				
				if (( string.CompareOrdinal(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "name", 1224700491, true))) > 0 )) {
					return ((double) (1) );
				}
				
				return ((double) (-1) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.rtti {
	public class XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun : global::haxe.lang.Function {
		
		public XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun() : base(2, 0) {
		}
		
		
		public static global::haxe.rtti.XmlParser___hx_ctor_haxe_rtti_XmlParser_118__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object f = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			object c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return null;
		}
		
		
	}
}


