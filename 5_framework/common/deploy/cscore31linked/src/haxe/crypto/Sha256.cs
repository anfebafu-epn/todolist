// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.crypto {
	public class Sha256 : global::haxe.lang.HxObject {
		
		public Sha256(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Sha256() {
			global::haxe.crypto.Sha256.__hx_ctor_haxe_crypto_Sha256(this);
		}
		
		
		protected static void __hx_ctor_haxe_crypto_Sha256(global::haxe.crypto.Sha256 __hx_this) {
		}
		
		
		public static string encode(string s) {
			unchecked {
				global::haxe.crypto.Sha256 sh = new global::haxe.crypto.Sha256();
				global::Array<int> h = sh.doEncode(global::haxe.crypto.Sha256.str2blks(s), ( s.Length * 8 ));
				return sh.hex(h);
			}
		}
		
		
		public static global::haxe.io.Bytes make(global::haxe.io.Bytes b) {
			unchecked {
				global::Array<int> h = new global::haxe.crypto.Sha256().doEncode(global::haxe.crypto.Sha256.bytes2blks(b), ( b.length * 8 ));
				global::haxe.io.Bytes @out = global::haxe.io.Bytes.alloc(32);
				int p = 0;
				{
					int _g = 0;
					while (( _g < 8 )) {
						int i = _g++;
						@out.b[p++] = ((byte) (((int) (( ((uint) (h[i]) ) >> 24 )) )) );
						@out.b[p++] = ((byte) (( ( h[i] >> 16 ) & 255 )) );
						@out.b[p++] = ((byte) (( ( h[i] >> 8 ) & 255 )) );
						@out.b[p++] = ((byte) (( h[i] & 255 )) );
					}
					
				}
				
				return @out;
			}
		}
		
		
		public static global::Array<int> str2blks(string s) {
			unchecked {
				global::haxe.io.Bytes s1 = global::haxe.io.Bytes.ofString(s, null);
				int nblk = ( (( ( s1.length + 8 ) >> 6 )) + 1 );
				global::Array<int> blks = new global::Array<int>();
				{
					int _g = 0;
					int _g1 = ( nblk * 16 );
					while (( _g < _g1 )) {
						int i = _g++;
						blks[i] = 0;
					}
					
				}
				
				{
					int _g2 = 0;
					int _g3 = s1.length;
					while (( _g2 < _g3 )) {
						int i1 = _g2++;
						int p = ( i1 >> 2 );
						blks[p] |= ( ((int) (s1.b[i1]) ) << ( 24 - (( (( i1 & 3 )) << 3 )) ) );
					}
					
				}
				
				int i2 = s1.length;
				int p1 = ( i2 >> 2 );
				blks[p1] |= ( 128 << ( 24 - (( (( i2 & 3 )) << 3 )) ) );
				blks[( ( nblk * 16 ) - 1 )] = ( s1.length * 8 );
				return blks;
			}
		}
		
		
		public static global::Array<int> bytes2blks(global::haxe.io.Bytes b) {
			unchecked {
				int nblk = ( (( ( b.length + 8 ) >> 6 )) + 1 );
				global::Array<int> blks = new global::Array<int>();
				{
					int _g = 0;
					int _g1 = ( nblk * 16 );
					while (( _g < _g1 )) {
						int i = _g++;
						blks[i] = 0;
					}
					
				}
				
				{
					int _g2 = 0;
					int _g3 = b.length;
					while (( _g2 < _g3 )) {
						int i1 = _g2++;
						int p = ( i1 >> 2 );
						blks[p] |= ( ((int) (b.b[i1]) ) << ( 24 - (( (( i1 & 3 )) << 3 )) ) );
					}
					
				}
				
				int i2 = b.length;
				int p1 = ( i2 >> 2 );
				blks[p1] |= ( 128 << ( 24 - (( (( i2 & 3 )) << 3 )) ) );
				blks[( ( nblk * 16 ) - 1 )] = ( b.length * 8 );
				return blks;
			}
		}
		
		
		public virtual global::Array<int> doEncode(global::Array<int> m, int l) {
			unchecked {
				global::Array<int> K = new global::Array<int>(new int[]{1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998});
				global::Array<int> HASH = new global::Array<int>(new int[]{1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225});
				global::Array<int> W = new global::Array<int>();
				W[64] = 0;
				int a = default(int);
				int b = default(int);
				int c = default(int);
				int d = default(int);
				int e = default(int);
				int f = default(int);
				int g = default(int);
				int h = default(int);
				int T1 = default(int);
				int T2 = default(int);
				m[( l >> 5 )] |= ( 128 << ( 24 - ( l % 32 ) ) );
				m[( (( ( ( l + 64 ) >> 9 ) << 4 )) + 15 )] = l;
				int i = 0;
				while (( i < m.length )) {
					a = HASH[0];
					b = HASH[1];
					c = HASH[2];
					d = HASH[3];
					e = HASH[4];
					f = HASH[5];
					g = HASH[6];
					h = HASH[7];
					{
						int _g = 0;
						while (( _g < 64 )) {
							int j = _g++;
							if (( j < 16 )) {
								W[j] = m[( j + i )];
							}
							else {
								int x = W[( j - 2 )];
								int x1 = ( ( (( ((int) (( ((uint) (x) ) >> 17 )) ) | ( x << 15 ) )) ^ (( ((int) (( ((uint) (x) ) >> 19 )) ) | ( x << 13 ) )) ) ^ ((int) (( ((uint) (x) ) >> 10 )) ) );
								int y = W[( j - 7 )];
								int lsw = ( (( x1 & 65535 )) + (( y & 65535 )) );
								int msw = ( ( (( x1 >> 16 )) + (( y >> 16 )) ) + (( lsw >> 16 )) );
								int x2 = ( ( msw << 16 ) | ( lsw & 65535 ) );
								int x3 = W[( j - 15 )];
								int y1 = ( ( (( ((int) (( ((uint) (x3) ) >> 7 )) ) | ( x3 << 25 ) )) ^ (( ((int) (( ((uint) (x3) ) >> 18 )) ) | ( x3 << 14 ) )) ) ^ ((int) (( ((uint) (x3) ) >> 3 )) ) );
								int lsw1 = ( (( x2 & 65535 )) + (( y1 & 65535 )) );
								int msw1 = ( ( (( x2 >> 16 )) + (( y1 >> 16 )) ) + (( lsw1 >> 16 )) );
								int x4 = ( ( msw1 << 16 ) | ( lsw1 & 65535 ) );
								int y2 = W[( j - 16 )];
								int lsw2 = ( (( x4 & 65535 )) + (( y2 & 65535 )) );
								int msw2 = ( ( (( x4 >> 16 )) + (( y2 >> 16 )) ) + (( lsw2 >> 16 )) );
								W[j] = ( ( msw2 << 16 ) | ( lsw2 & 65535 ) );
							}
							
							int y3 = ( ( (( ((int) (( ((uint) (e) ) >> 6 )) ) | ( e << 26 ) )) ^ (( ((int) (( ((uint) (e) ) >> 11 )) ) | ( e << 21 ) )) ) ^ (( ((int) (( ((uint) (e) ) >> 25 )) ) | ( e << 7 ) )) );
							int lsw3 = ( (( h & 65535 )) + (( y3 & 65535 )) );
							int msw3 = ( ( (( h >> 16 )) + (( y3 >> 16 )) ) + (( lsw3 >> 16 )) );
							int x5 = ( ( msw3 << 16 ) | ( lsw3 & 65535 ) );
							int y4 = ( ( e & f ) ^ (  ~ (e)  & g ) );
							int lsw4 = ( (( x5 & 65535 )) + (( y4 & 65535 )) );
							int msw4 = ( ( (( x5 >> 16 )) + (( y4 >> 16 )) ) + (( lsw4 >> 16 )) );
							int x6 = ( ( msw4 << 16 ) | ( lsw4 & 65535 ) );
							int y5 = K[j];
							int lsw5 = ( (( x6 & 65535 )) + (( y5 & 65535 )) );
							int msw5 = ( ( (( x6 >> 16 )) + (( y5 >> 16 )) ) + (( lsw5 >> 16 )) );
							int x7 = ( ( msw5 << 16 ) | ( lsw5 & 65535 ) );
							int y6 = W[j];
							int lsw6 = ( (( x7 & 65535 )) + (( y6 & 65535 )) );
							int msw6 = ( ( (( x7 >> 16 )) + (( y6 >> 16 )) ) + (( lsw6 >> 16 )) );
							T1 = ( ( msw6 << 16 ) | ( lsw6 & 65535 ) );
							int x8 = ( ( (( ((int) (( ((uint) (a) ) >> 2 )) ) | ( a << 30 ) )) ^ (( ((int) (( ((uint) (a) ) >> 13 )) ) | ( a << 19 ) )) ) ^ (( ((int) (( ((uint) (a) ) >> 22 )) ) | ( a << 10 ) )) );
							int y7 = ( ( ( a & b ) ^ ( a & c ) ) ^ ( b & c ) );
							int lsw7 = ( (( x8 & 65535 )) + (( y7 & 65535 )) );
							int msw7 = ( ( (( x8 >> 16 )) + (( y7 >> 16 )) ) + (( lsw7 >> 16 )) );
							T2 = ( ( msw7 << 16 ) | ( lsw7 & 65535 ) );
							h = g;
							g = f;
							f = e;
							int lsw8 = ( (( d & 65535 )) + (( T1 & 65535 )) );
							int msw8 = ( ( (( d >> 16 )) + (( T1 >> 16 )) ) + (( lsw8 >> 16 )) );
							e = ( ( msw8 << 16 ) | ( lsw8 & 65535 ) );
							d = c;
							c = b;
							b = a;
							int lsw9 = ( (( T1 & 65535 )) + (( T2 & 65535 )) );
							int msw9 = ( ( (( T1 >> 16 )) + (( T2 >> 16 )) ) + (( lsw9 >> 16 )) );
							a = ( ( msw9 << 16 ) | ( lsw9 & 65535 ) );
						}
						
					}
					
					int y8 = HASH[0];
					int lsw10 = ( (( a & 65535 )) + (( y8 & 65535 )) );
					int msw10 = ( ( (( a >> 16 )) + (( y8 >> 16 )) ) + (( lsw10 >> 16 )) );
					HASH[0] = ( ( msw10 << 16 ) | ( lsw10 & 65535 ) );
					int y9 = HASH[1];
					int lsw11 = ( (( b & 65535 )) + (( y9 & 65535 )) );
					int msw11 = ( ( (( b >> 16 )) + (( y9 >> 16 )) ) + (( lsw11 >> 16 )) );
					HASH[1] = ( ( msw11 << 16 ) | ( lsw11 & 65535 ) );
					int y10 = HASH[2];
					int lsw12 = ( (( c & 65535 )) + (( y10 & 65535 )) );
					int msw12 = ( ( (( c >> 16 )) + (( y10 >> 16 )) ) + (( lsw12 >> 16 )) );
					HASH[2] = ( ( msw12 << 16 ) | ( lsw12 & 65535 ) );
					int y11 = HASH[3];
					int lsw13 = ( (( d & 65535 )) + (( y11 & 65535 )) );
					int msw13 = ( ( (( d >> 16 )) + (( y11 >> 16 )) ) + (( lsw13 >> 16 )) );
					HASH[3] = ( ( msw13 << 16 ) | ( lsw13 & 65535 ) );
					int y12 = HASH[4];
					int lsw14 = ( (( e & 65535 )) + (( y12 & 65535 )) );
					int msw14 = ( ( (( e >> 16 )) + (( y12 >> 16 )) ) + (( lsw14 >> 16 )) );
					HASH[4] = ( ( msw14 << 16 ) | ( lsw14 & 65535 ) );
					int y13 = HASH[5];
					int lsw15 = ( (( f & 65535 )) + (( y13 & 65535 )) );
					int msw15 = ( ( (( f >> 16 )) + (( y13 >> 16 )) ) + (( lsw15 >> 16 )) );
					HASH[5] = ( ( msw15 << 16 ) | ( lsw15 & 65535 ) );
					int y14 = HASH[6];
					int lsw16 = ( (( g & 65535 )) + (( y14 & 65535 )) );
					int msw16 = ( ( (( g >> 16 )) + (( y14 >> 16 )) ) + (( lsw16 >> 16 )) );
					HASH[6] = ( ( msw16 << 16 ) | ( lsw16 & 65535 ) );
					int y15 = HASH[7];
					int lsw17 = ( (( h & 65535 )) + (( y15 & 65535 )) );
					int msw17 = ( ( (( h >> 16 )) + (( y15 >> 16 )) ) + (( lsw17 >> 16 )) );
					HASH[7] = ( ( msw17 << 16 ) | ( lsw17 & 65535 ) );
					i += 16;
				}
				
				return HASH;
			}
		}
		
		
		public virtual string hex(global::Array<int> a) {
			unchecked {
				string str = "";
				{
					int _g = 0;
					while (( _g < a.length )) {
						int num = a[_g];
						 ++ _g;
						str = global::haxe.lang.Runtime.concat(str, global::StringTools.hex(num, new global::haxe.lang.Null<int>(8, true)));
					}
					
				}
				
				return str.ToLowerInvariant();
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5194459:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hex", 5194459)) );
					}
					
					
					case 234584065:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doEncode", 234584065)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 5194459:
					{
						return this.hex(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[0]) ))) ));
					}
					
					
					case 234584065:
					{
						return this.doEncode(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[0]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
	}
}


