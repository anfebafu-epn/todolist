// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class NodeAccess_Impl_ {
		
		public static global::Xml resolve(global::Xml this1, string name) {
			global::Xml x = ((global::Xml) (global::haxe.lang.Runtime.callField(this1.elementsNamed(name), "next", 1224901875, null)) );
			if (( x == null )) {
				string xname = null;
				if (( this1.nodeType == global::Xml.Document )) {
					xname = "Document";
				}
				else {
					if (( this1.nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this1.nodeType)))) );
					}
					
					xname = this1.nodeName;
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(xname, " is missing element "), name))) );
			}
			
			if (( ( x.nodeType != global::Xml.Document ) && ( x.nodeType != global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x.nodeType)))) );
			}
			
			global::Xml this2 = x;
			return ((global::Xml) (this2) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class AttribAccess_Impl_ {
		
		public static string resolve(global::Xml this1, string name) {
			if (( this1.nodeType == global::Xml.Document )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Cannot access document attribute ", name))) );
			}
			
			string v = this1.@get(name);
			if (( v == null )) {
				if (( this1.nodeType != global::Xml.Element )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this1.nodeType)))) );
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(this1.nodeName, " is missing attribute "), name))) );
			}
			
			return v;
		}
		
		
		public static string _hx_set(global::Xml this1, string name, string @value) {
			if (( this1.nodeType == global::Xml.Document )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Cannot access document attribute ", name))) );
			}
			
			this1.@set(name, @value);
			return @value;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class HasAttribAccess_Impl_ {
		
		public static bool resolve(global::Xml this1, string name) {
			if (( this1.nodeType == global::Xml.Document )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Cannot access document attribute ", name))) );
			}
			
			return this1.exists(name);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class HasNodeAccess_Impl_ {
		
		public static bool resolve(global::Xml this1, string name) {
			return global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this1.elementsNamed(name), "hasNext", 407283053, null));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class NodeListAccess_Impl_ {
		
		public static global::Array<object> resolve(global::Xml this1, string name) {
			global::Array<object> l = new global::Array<object>(new object[]{});
			{
				object x = this1.elementsNamed(name);
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(x, "hasNext", 407283053, null))) {
					global::Xml x1 = ((global::Xml) (global::haxe.lang.Runtime.callField(x, "next", 1224901875, null)) );
					if (( ( x1.nodeType != global::Xml.Document ) && ( x1.nodeType != global::Xml.Element ) )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x1.nodeType)))) );
					}
					
					global::Xml this2 = x1;
					l.push(((global::Xml) (this2) ));
				}
				
			}
			
			return l;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml._Access {
	public sealed class Access_Impl_ {
		
		
		
		public static global::Xml get_x(global::Xml this1) {
			return this1;
		}
		
		
		
		
		public static string get_name(global::Xml this1) {
			if (( this1.nodeType == global::Xml.Document )) {
				return "Document";
			}
			else {
				if (( this1.nodeType != global::Xml.Element )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this1.nodeType)))) );
				}
				
				return this1.nodeName;
			}
			
		}
		
		
		
		
		
		
		
		
		public static global::Xml get_node(global::Xml this1) {
			return ((global::Xml) (this1) );
		}
		
		
		
		
		public static global::Xml get_nodes(global::Xml this1) {
			return this1;
		}
		
		
		
		
		public static global::Xml get_att(global::Xml this1) {
			return this1;
		}
		
		
		
		
		public static global::Xml get_has(global::Xml this1) {
			return this1;
		}
		
		
		
		
		public static global::Xml get_hasNode(global::Xml this1) {
			return ((global::Xml) (this1) );
		}
		
		
		
		
		public static object get_elements(global::Xml this1) {
			return ((object) (this1.elements()) );
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::Xml _new(global::Xml x) {
			if (( ( x.nodeType != global::Xml.Document ) && ( x.nodeType != global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Invalid nodeType ", global::_Xml.XmlType_Impl_.toString(x.nodeType)))) );
			}
			
			global::Xml this1 = x;
			return ((global::Xml) (this1) );
		}
		
		
		public static string get_innerData(global::Xml this1) {
			if (( ( this1.nodeType != global::Xml.Document ) && ( this1.nodeType != global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this1.nodeType)))) );
			}
			
			int it_current = 0;
			global::Array<object> it_array = this1.children;
			if (( it_current >= it_array.length )) {
				string tmp = null;
				if (( ((global::Xml) (this1) ).nodeType == global::Xml.Document )) {
					tmp = "Document";
				}
				else {
					if (( ((global::Xml) (this1) ).nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (this1) ).nodeType)))) );
					}
					
					tmp = ((global::Xml) (this1) ).nodeName;
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(tmp, " does not have data"))) );
			}
			
			global::Xml v = ((global::Xml) (it_array[it_current++]) );
			if (( it_current < it_array.length )) {
				global::Xml n = ((global::Xml) (it_array[it_current++]) );
				bool tmp1 = default(bool);
				if (( ( v.nodeType == global::Xml.PCData ) && ( n.nodeType == global::Xml.CData ) )) {
					if (( ( v.nodeType == global::Xml.Document ) || ( v.nodeType == global::Xml.Element ) )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(v.nodeType)))) );
					}
					
					tmp1 = ( v.nodeValue.Trim() == "" );
				}
				else {
					tmp1 = false;
				}
				
				if (tmp1) {
					if (( it_current >= it_array.length )) {
						if (( ( n.nodeType == global::Xml.Document ) || ( n.nodeType == global::Xml.Element ) )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(n.nodeType)))) );
						}
						
						return n.nodeValue;
					}
					
					global::Xml n2 = ((global::Xml) (it_array[it_current++]) );
					bool tmp2 = default(bool);
					if (( n2.nodeType == global::Xml.PCData )) {
						if (( ( n2.nodeType == global::Xml.Document ) || ( n2.nodeType == global::Xml.Element ) )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(n2.nodeType)))) );
						}
						
						tmp2 = ( n2.nodeValue.Trim() == "" );
					}
					else {
						tmp2 = false;
					}
					
					if (( tmp2 && ( it_current >= it_array.length ) )) {
						if (( ( n.nodeType == global::Xml.Document ) || ( n.nodeType == global::Xml.Element ) )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(n.nodeType)))) );
						}
						
						return n.nodeValue;
					}
					
				}
				
				string tmp3 = null;
				if (( ((global::Xml) (this1) ).nodeType == global::Xml.Document )) {
					tmp3 = "Document";
				}
				else {
					if (( ((global::Xml) (this1) ).nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (this1) ).nodeType)))) );
					}
					
					tmp3 = ((global::Xml) (this1) ).nodeName;
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(tmp3, " does not only have data"))) );
			}
			
			if (( ( v.nodeType != global::Xml.PCData ) && ( v.nodeType != global::Xml.CData ) )) {
				string tmp4 = null;
				if (( ((global::Xml) (this1) ).nodeType == global::Xml.Document )) {
					tmp4 = "Document";
				}
				else {
					if (( ((global::Xml) (this1) ).nodeType != global::Xml.Element )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(((global::Xml) (this1) ).nodeType)))) );
					}
					
					tmp4 = ((global::Xml) (this1) ).nodeName;
				}
				
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(tmp4, " does not have data"))) );
			}
			
			if (( ( v.nodeType == global::Xml.Document ) || ( v.nodeType == global::Xml.Element ) )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(v.nodeType)))) );
			}
			
			return v.nodeValue;
		}
		
		
		public static string get_innerHTML(global::Xml this1) {
			global::System.Text.StringBuilder s_b = new global::System.Text.StringBuilder();
			{
				if (( ( this1.nodeType != global::Xml.Document ) && ( this1.nodeType != global::Xml.Element ) )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this1.nodeType)))) );
				}
				
				int _g_current = 0;
				global::Array<object> _g_array = this1.children;
				while (( _g_current < _g_array.length )) {
					global::Xml x = ((global::Xml) (_g_array[_g_current++]) );
					s_b.Append(((string) (global::Std.@string(global::haxe.xml.Printer.print(x, default(global::haxe.lang.Null<bool>)))) ));
				}
				
			}
			
			return s_b.ToString();
		}
		
		
	}
}


