// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class TType : global::haxe.lang.Enum {
		public TType() : base(0) { }

		
		protected TType(int index) : base(index) {
		}
		
		
		public static global::hscript.TType TMono(object r) {
			return new global::hscript.TType_TMono(r);
		}
		
		
		public static readonly global::hscript.TType TVoid = new global::hscript.TType_TVoid();
		
		public static readonly global::hscript.TType TInt = new global::hscript.TType_TInt();
		
		public static readonly global::hscript.TType TFloat = new global::hscript.TType_TFloat();
		
		public static readonly global::hscript.TType TBool = new global::hscript.TType_TBool();
		
		public static readonly global::hscript.TType TDynamic = new global::hscript.TType_TDynamic();
		
		public static global::hscript.TType TParam(string name) {
			return new global::hscript.TType_TParam(name);
		}
		
		
		public static global::hscript.TType TUnresolved(string name) {
			return new global::hscript.TType_TUnresolved(name);
		}
		
		
		public static global::hscript.TType TNull(global::hscript.TType t) {
			return new global::hscript.TType_TNull(t);
		}
		
		
		public static global::hscript.TType TInst(object c, global::Array<object> args) {
			return new global::hscript.TType_TInst(c, args);
		}
		
		
		public static global::hscript.TType TEnum(object e, global::Array<object> args) {
			return new global::hscript.TType_TEnum(e, args);
		}
		
		
		public static global::hscript.TType TType_TType(object t, global::Array<object> args) {
			return new global::hscript.TType_TType(t, args);
		}
		
		
		public static global::hscript.TType TAbstract(object a, global::Array<object> args) {
			return new global::hscript.TType_TAbstract(a, args);
		}
		
		
		public static global::hscript.TType TFun(global::Array<object> args, global::hscript.TType ret) {
			return new global::hscript.TType_TFun(args, ret);
		}
		
		
		public static global::hscript.TType TAnon(global::Array<object> fields) {
			return new global::hscript.TType_TAnon(fields);
		}
		
		
		public static global::hscript.TType TLazy(global::haxe.lang.Function f) {
			return new global::hscript.TType_TLazy(f);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"TMono", "TVoid", "TInt", "TFloat", "TBool", "TDynamic", "TParam", "TUnresolved", "TNull", "TInst", "TEnum", "TType", "TAbstract", "TFun", "TAnon", "TLazy"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TMono : global::hscript.TType {
		
		public TType_TMono(object r) : base(0) {
			this.r = r;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.r});
		}
		
		
		public override string getTag() {
			return "TMono";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.r});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TMono en = ( other as global::hscript.TType_TMono );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.r) ), ((object) (en.r) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TMono", new object[]{this.r});
		}
		
		
		public readonly object r;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TVoid : global::hscript.TType {
		
		public TType_TVoid() : base(1) {
		}
		
		
		public override string getTag() {
			return "TVoid";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TInt : global::hscript.TType {
		
		public TType_TInt() : base(2) {
		}
		
		
		public override string getTag() {
			return "TInt";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TFloat : global::hscript.TType {
		
		public TType_TFloat() : base(3) {
		}
		
		
		public override string getTag() {
			return "TFloat";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TBool : global::hscript.TType {
		
		public TType_TBool() : base(4) {
		}
		
		
		public override string getTag() {
			return "TBool";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TDynamic : global::hscript.TType {
		
		public TType_TDynamic() : base(5) {
		}
		
		
		public override string getTag() {
			return "TDynamic";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TParam : global::hscript.TType {
		
		public TType_TParam(string name) : base(6) {
			this.name = name;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.name});
		}
		
		
		public override string getTag() {
			return "TParam";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.name});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TParam en = ( other as global::hscript.TType_TParam );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.name) ), ((object) (en.name) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TParam", new object[]{this.name});
		}
		
		
		public readonly string name;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TUnresolved : global::hscript.TType {
		
		public TType_TUnresolved(string name) : base(7) {
			this.name = name;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.name});
		}
		
		
		public override string getTag() {
			return "TUnresolved";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.name});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TUnresolved en = ( other as global::hscript.TType_TUnresolved );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.name) ), ((object) (en.name) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TUnresolved", new object[]{this.name});
		}
		
		
		public readonly string name;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TNull : global::hscript.TType {
		
		public TType_TNull(global::hscript.TType t) : base(8) {
			this.t = t;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.t});
		}
		
		
		public override string getTag() {
			return "TNull";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(8, new object[]{this.t});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TNull en = ( other as global::hscript.TType_TNull );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.t) ), ((object) (en.t) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TNull", new object[]{this.t});
		}
		
		
		public readonly global::hscript.TType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TInst : global::hscript.TType {
		
		public TType_TInst(object c, global::Array<object> args) : base(9) {
			this.c = c;
			this.args = args;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.c, this.args});
		}
		
		
		public override string getTag() {
			return "TInst";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(9, new object[]{this.c, this.args});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TInst en = ( other as global::hscript.TType_TInst );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.c) ), ((object) (en.c) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.args) ), ((object) (en.args) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TInst", new object[]{this.c, this.args});
		}
		
		
		public readonly object c;
		
		public readonly global::Array<object> args;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TEnum : global::hscript.TType {
		
		public TType_TEnum(object e, global::Array<object> args) : base(10) {
			this.e = e;
			this.args = args;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e, this.args});
		}
		
		
		public override string getTag() {
			return "TEnum";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(10, new object[]{this.e, this.args});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TEnum en = ( other as global::hscript.TType_TEnum );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.args) ), ((object) (en.args) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TEnum", new object[]{this.e, this.args});
		}
		
		
		public readonly object e;
		
		public readonly global::Array<object> args;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TType : global::hscript.TType {
		
		public TType_TType(object t, global::Array<object> args) : base(11) {
			this.t = t;
			this.args = args;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.t, this.args});
		}
		
		
		public override string getTag() {
			return "TType";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(11, new object[]{this.t, this.args});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TType en = ( other as global::hscript.TType_TType );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.t) ), ((object) (en.t) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.args) ), ((object) (en.args) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TType", new object[]{this.t, this.args});
		}
		
		
		public readonly object t;
		
		public readonly global::Array<object> args;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TAbstract : global::hscript.TType {
		
		public TType_TAbstract(object a, global::Array<object> args) : base(12) {
			this.a = a;
			this.args = args;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.a, this.args});
		}
		
		
		public override string getTag() {
			return "TAbstract";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(12, new object[]{this.a, this.args});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TAbstract en = ( other as global::hscript.TType_TAbstract );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.a) ), ((object) (en.a) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.args) ), ((object) (en.args) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TAbstract", new object[]{this.a, this.args});
		}
		
		
		public readonly object a;
		
		public readonly global::Array<object> args;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TFun : global::hscript.TType {
		
		public TType_TFun(global::Array<object> args, global::hscript.TType ret) : base(13) {
			this.args = args;
			this.ret = ret;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.args, this.ret});
		}
		
		
		public override string getTag() {
			return "TFun";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(13, new object[]{this.args, this.ret});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TFun en = ( other as global::hscript.TType_TFun );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.args) ), ((object) (en.args) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.ret) ), ((object) (en.ret) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TFun", new object[]{this.args, this.ret});
		}
		
		
		public readonly global::Array<object> args;
		
		public readonly global::hscript.TType ret;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TAnon : global::hscript.TType {
		
		public TType_TAnon(global::Array<object> fields) : base(14) {
			this.fields = fields;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.fields});
		}
		
		
		public override string getTag() {
			return "TAnon";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(14, new object[]{this.fields});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TAnon en = ( other as global::hscript.TType_TAnon );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.fields) ), ((object) (en.fields) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TAnon", new object[]{this.fields});
		}
		
		
		public readonly global::Array<object> fields;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class TType_TLazy : global::hscript.TType {
		
		public TType_TLazy(global::haxe.lang.Function f) : base(15) {
			this.f = f;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.f});
		}
		
		
		public override string getTag() {
			return "TLazy";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(15, new object[]{this.f});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.TType_TLazy en = ( other as global::hscript.TType_TLazy );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.f) ), ((object) (en.f) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TLazy", new object[]{this.f});
		}
		
		
		public readonly global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript._Checker {
	public class WithType : global::haxe.lang.Enum {
		
		protected WithType(int index) : base(index) {
		}
		
		
		public static readonly global::hscript._Checker.WithType NoValue = new global::hscript._Checker.WithType_NoValue();
		
		public static readonly global::hscript._Checker.WithType Value = new global::hscript._Checker.WithType_Value();
		
		public static global::hscript._Checker.WithType WithType_WithType(global::hscript.TType t) {
			return new global::hscript._Checker.WithType_WithType(t);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"NoValue", "Value", "WithType"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript._Checker {
	public sealed class WithType_NoValue : global::hscript._Checker.WithType {
		
		public WithType_NoValue() : base(0) {
		}
		
		
		public override string getTag() {
			return "NoValue";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript._Checker {
	public sealed class WithType_Value : global::hscript._Checker.WithType {
		
		public WithType_Value() : base(1) {
		}
		
		
		public override string getTag() {
			return "Value";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript._Checker {
	public sealed class WithType_WithType : global::hscript._Checker.WithType {
		
		public WithType_WithType(global::hscript.TType t) : base(2) {
			this.t = t;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.t});
		}
		
		
		public override string getTag() {
			return "WithType";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.t});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript._Checker.WithType_WithType en = ( other as global::hscript._Checker.WithType_WithType );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.t) ), ((object) (en.t) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("WithType", new object[]{this.t});
		}
		
		
		public readonly global::hscript.TType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CTypedecl : global::haxe.lang.Enum {
		
		protected CTypedecl(int index) : base(index) {
		}
		
		
		public static global::hscript.CTypedecl CTClass(object c) {
			return new global::hscript.CTypedecl_CTClass(c);
		}
		
		
		public static global::hscript.CTypedecl CTEnum(object e) {
			return new global::hscript.CTypedecl_CTEnum(e);
		}
		
		
		public static global::hscript.CTypedecl CTTypedef(object t) {
			return new global::hscript.CTypedecl_CTTypedef(t);
		}
		
		
		public static global::hscript.CTypedecl CTAlias(global::hscript.TType t) {
			return new global::hscript.CTypedecl_CTAlias(t);
		}
		
		
		public static global::hscript.CTypedecl CTAbstract(object a) {
			return new global::hscript.CTypedecl_CTAbstract(a);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"CTClass", "CTEnum", "CTTypedef", "CTAlias", "CTAbstract"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class CTypedecl_CTClass : global::hscript.CTypedecl {
		
		public CTypedecl_CTClass(object c) : base(0) {
			this.c = c;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.c});
		}
		
		
		public override string getTag() {
			return "CTClass";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.c});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.CTypedecl_CTClass en = ( other as global::hscript.CTypedecl_CTClass );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.c) ), ((object) (en.c) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CTClass", new object[]{this.c});
		}
		
		
		public readonly object c;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class CTypedecl_CTEnum : global::hscript.CTypedecl {
		
		public CTypedecl_CTEnum(object e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "CTEnum";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.CTypedecl_CTEnum en = ( other as global::hscript.CTypedecl_CTEnum );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CTEnum", new object[]{this.e});
		}
		
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class CTypedecl_CTTypedef : global::hscript.CTypedecl {
		
		public CTypedecl_CTTypedef(object t) : base(2) {
			this.t = t;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.t});
		}
		
		
		public override string getTag() {
			return "CTTypedef";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.t});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.CTypedecl_CTTypedef en = ( other as global::hscript.CTypedecl_CTTypedef );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.t) ), ((object) (en.t) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CTTypedef", new object[]{this.t});
		}
		
		
		public readonly object t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class CTypedecl_CTAlias : global::hscript.CTypedecl {
		
		public CTypedecl_CTAlias(global::hscript.TType t) : base(3) {
			this.t = t;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.t});
		}
		
		
		public override string getTag() {
			return "CTAlias";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.t});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.CTypedecl_CTAlias en = ( other as global::hscript.CTypedecl_CTAlias );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.t) ), ((object) (en.t) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CTAlias", new object[]{this.t});
		}
		
		
		public readonly global::hscript.TType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public sealed class CTypedecl_CTAbstract : global::hscript.CTypedecl {
		
		public CTypedecl_CTAbstract(object a) : base(4) {
			this.a = a;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.a});
		}
		
		
		public override string getTag() {
			return "CTAbstract";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.a});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::hscript.CTypedecl_CTAbstract en = ( other as global::hscript.CTypedecl_CTAbstract );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.a) ), ((object) (en.a) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CTAbstract", new object[]{this.a});
		}
		
		
		public readonly object a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Completion : global::haxe.lang.HxObject {
		
		public Completion(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Completion(object expr, global::hscript.TType t) {
			global::hscript.Completion.__hx_ctor_hscript_Completion(this, expr, t);
		}
		
		
		protected static void __hx_ctor_hscript_Completion(global::hscript.Completion __hx_this, object expr, global::hscript.TType t) {
			__hx_this.expr = expr;
			__hx_this.t = t;
		}
		
		
		public object expr;
		
		public global::hscript.TType t;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1126038837:
					{
						this.expr = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116:
					{
						this.t = ((global::hscript.TType) (@value) );
						return @value;
					}
					
					
					case 1126038837:
					{
						this.expr = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116:
					{
						return this.t;
					}
					
					
					case 1126038837:
					{
						return this.expr;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1126038837:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.expr)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("t");
			baseArr.push("expr");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CheckerTypes : global::haxe.lang.HxObject {
		
		public CheckerTypes(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CheckerTypes() {
			global::hscript.CheckerTypes.__hx_ctor_hscript_CheckerTypes(this);
		}
		
		
		protected static void __hx_ctor_hscript_CheckerTypes(global::hscript.CheckerTypes __hx_this) {
			__hx_this.types = new global::haxe.ds.StringMap<object>();
			{
				__hx_this.types = new global::haxe.ds.StringMap<object>();
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (__hx_this.types) )) ))) ).@set("Void", global::hscript.CTypedecl.CTAlias(global::hscript.TType.TVoid));
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (__hx_this.types) )) ))) ).@set("Int", global::hscript.CTypedecl.CTAlias(global::hscript.TType.TInt));
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (__hx_this.types) )) ))) ).@set("Float", global::hscript.CTypedecl.CTAlias(global::hscript.TType.TFloat));
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (__hx_this.types) )) ))) ).@set("Bool", global::hscript.CTypedecl.CTAlias(global::hscript.TType.TBool));
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (__hx_this.types) )) ))) ).@set("Dynamic", global::hscript.CTypedecl.CTAlias(global::hscript.TType.TDynamic));
			}
			
		}
		
		
		public global::haxe.ds.StringMap<object> types;
		
		public global::hscript.TType t_string;
		
		public global::haxe.ds.StringMap<object> localParams;
		
		public virtual void addXmlApi(global::Xml api) {
			global::haxe.rtti.XmlParser types = new global::haxe.rtti.XmlParser();
			types.process(api, "");
			global::Array<object> todo = new global::Array<object>(new object[]{});
			{
				int _g = 0;
				global::Array<object> _g1 = types.root;
				while (( _g < _g1.length )) {
					global::haxe.rtti.TypeTree v = ((global::haxe.rtti.TypeTree) (_g1[_g]) );
					 ++ _g;
					this.addXmlType(v, todo);
				}
				
			}
			
			{
				int _g2 = 0;
				while (( _g2 < todo.length )) {
					global::haxe.lang.Function f = ((global::haxe.lang.Function) (todo[_g2]) );
					 ++ _g2;
					f.__hx_invoke0_o();
				}
				
			}
			
			this.t_string = this.getType("String", null);
		}
		
		
		public virtual void addXmlType(global::haxe.rtti.TypeTree x, global::Array<object> todo) {
			unchecked {
				global::hscript.CheckerTypes _gthis = this;
				switch (x._hx_index) {
					case 0:
					{
						string name = ( x as global::haxe.rtti.TypeTree_TPackage ).name;
						string full = ( x as global::haxe.rtti.TypeTree_TPackage ).full;
						global::Array<object> subs = ( x as global::haxe.rtti.TypeTree_TPackage ).subs;
						{
							int _g = 0;
							while (( _g < subs.length )) {
								global::haxe.rtti.TypeTree s = ((global::haxe.rtti.TypeTree) (subs[_g]) );
								 ++ _g;
								this.addXmlType(s, todo);
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						object c = ( x as global::haxe.rtti.TypeTree_TClassdecl ).c;
						{
							if (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).exists(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "path", 1246881189, true)))) {
								return;
							}
							
							string c1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "path", 1246881189, true));
							global::haxe.ds.StringMap<object> cl = new global::haxe.ds.StringMap<object>();
							object cl1 = null;
							{
								global::haxe.ds.StringMap<object> __temp_odecl1 = new global::haxe.ds.StringMap<object>();
								cl1 = new global::haxe.lang.DynamicObject(new int[]{9342585, 912604165, 1224700491, 1836776262}, new object[]{cl, __temp_odecl1, c1, new global::Array<object>(new object[]{})}, new int[]{}, new double[]{});
							}
							
							if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c, "isInterface", 408610927, true))) {
								global::haxe.lang.Null<bool> __temp_expr5 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.setField(cl1, "isInterface", 408610927, true));
							}
							
							{
								int _g1 = 0;
								global::Array<string> _g2 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(c, "params", 1836776262, true)) ))) );
								while (( _g1 < _g2.length )) {
									string p = _g2[_g1];
									 ++ _g1;
									((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cl1, "params", 1836776262, true)) ))) ).push(global::hscript.TType.TParam(p));
								}
								
							}
							
							todo.push(new global::hscript.CheckerTypes_addXmlType_130__Fun(cl1, c, _gthis));
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(cl1, "name", 1224700491, true)), global::hscript.CTypedecl.CTClass(cl1));
						}
						
						break;
					}
					
					
					case 2:
					{
						object e = ( x as global::haxe.rtti.TypeTree_TEnumdecl ).e;
						{
							if (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).exists(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "path", 1246881189, true)))) {
								return;
							}
							
							object en = null;
							{
								string __temp_odecl2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "path", 1246881189, true));
								en = new global::haxe.lang.DynamicObject(new int[]{885141049, 1224700491, 1836776262}, new object[]{new global::Array<object>(new object[]{}), __temp_odecl2, new global::Array<object>(new object[]{})}, new int[]{}, new double[]{});
							}
							
							{
								int _g3 = 0;
								global::Array<string> _g4 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(e, "params", 1836776262, true)) ))) );
								while (( _g3 < _g4.length )) {
									string p1 = _g4[_g3];
									 ++ _g3;
									((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(en, "params", 1836776262, true)) ))) ).push(global::hscript.TType.TParam(p1));
								}
								
							}
							
							todo.push(new global::hscript.CheckerTypes_addXmlType_181__Fun(en, e, _gthis));
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(en, "name", 1224700491, true)), global::hscript.CTypedecl.CTEnum(en));
						}
						
						break;
					}
					
					
					case 3:
					{
						object t = ( x as global::haxe.rtti.TypeTree_TTypedecl ).t;
						{
							if (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).exists(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "path", 1246881189, true)))) {
								return;
							}
							
							object td = null;
							{
								string __temp_odecl3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "path", 1246881189, true));
								td = new global::haxe.lang.DynamicObject(new int[]{116, 1224700491, 1836776262}, new object[]{null, __temp_odecl3, new global::Array<object>(new object[]{})}, new int[]{}, new double[]{});
							}
							
							{
								int _g5 = 0;
								global::Array<string> _g6 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(t, "params", 1836776262, true)) ))) );
								while (( _g5 < _g6.length )) {
									string p2 = _g6[_g5];
									 ++ _g5;
									((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(td, "params", 1836776262, true)) ))) ).push(global::hscript.TType.TParam(p2));
								}
								
							}
							
							if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "path", 1246881189, true)) == "hscript.TypeCheck" )) {
								((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(td, "params", 1836776262, true)) ))) ).reverse();
							}
							
							todo.push(new global::hscript.CheckerTypes_addXmlType_199__Fun(td, t, _gthis));
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "path", 1246881189, true)), global::hscript.CTypedecl.CTTypedef(td));
						}
						
						break;
					}
					
					
					case 4:
					{
						object a = ( x as global::haxe.rtti.TypeTree_TAbstractdecl ).a;
						{
							if (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).exists(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "path", 1246881189, true)))) {
								return;
							}
							
							object ta = null;
							{
								string __temp_odecl4 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "path", 1246881189, true));
								ta = new global::haxe.lang.DynamicObject(new int[]{116, 1224700491, 1836776262}, new object[]{null, __temp_odecl4, new global::Array<object>(new object[]{})}, new int[]{}, new double[]{});
							}
							
							{
								int _g7 = 0;
								global::Array<string> _g8 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(a, "params", 1836776262, true)) ))) );
								while (( _g7 < _g8.length )) {
									string p3 = _g8[_g7];
									 ++ _g7;
									((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(ta, "params", 1836776262, true)) ))) ).push(global::hscript.TType.TParam(p3));
								}
								
							}
							
							todo.push(new global::hscript.CheckerTypes_addXmlType_214__Fun(ta, a, _gthis));
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "path", 1246881189, true)), global::hscript.CTypedecl.CTAbstract(ta));
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual global::hscript.TType makeXmlType(global::haxe.rtti.CType t) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						return global::hscript.TType.TUnresolved("Unknown");
					}
					
					
					case 1:
					{
						string name = ( t as global::haxe.rtti.CType_CEnum ).name;
						global::Array<object> @params = ( t as global::haxe.rtti.CType_CEnum ).@params;
						global::Array<object> _g = new global::Array<object>(new object[]{});
						{
							int _g1 = 0;
							while (( _g1 < @params.length )) {
								global::haxe.rtti.CType t1 = ((global::haxe.rtti.CType) (@params[_g1]) );
								 ++ _g1;
								_g.push(this.makeXmlType(t1));
							}
							
						}
						
						return this.getType(name, _g);
					}
					
					
					case 2:
					{
						string name1 = ( t as global::haxe.rtti.CType_CClass ).name;
						global::Array<object> params1 = ( t as global::haxe.rtti.CType_CClass ).@params;
						global::Array<object> _g2 = new global::Array<object>(new object[]{});
						{
							int _g3 = 0;
							while (( _g3 < params1.length )) {
								global::haxe.rtti.CType t2 = ((global::haxe.rtti.CType) (params1[_g3]) );
								 ++ _g3;
								_g2.push(this.makeXmlType(t2));
							}
							
						}
						
						return this.getType(name1, _g2);
					}
					
					
					case 3:
					{
						string name2 = ( t as global::haxe.rtti.CType_CTypedef ).name;
						global::Array<object> params2 = ( t as global::haxe.rtti.CType_CTypedef ).@params;
						global::Array<object> _g4 = new global::Array<object>(new object[]{});
						{
							int _g5 = 0;
							while (( _g5 < params2.length )) {
								global::haxe.rtti.CType t3 = ((global::haxe.rtti.CType) (params2[_g5]) );
								 ++ _g5;
								_g4.push(this.makeXmlType(t3));
							}
							
						}
						
						return this.getType(name2, _g4);
					}
					
					
					case 4:
					{
						global::Array<object> args = ( t as global::haxe.rtti.CType_CFunction ).args;
						global::haxe.rtti.CType ret = ( t as global::haxe.rtti.CType_CFunction ).ret;
						global::Array<object> _g6 = new global::Array<object>(new object[]{});
						{
							int _g7 = 0;
							while (( _g7 < args.length )) {
								object a = args[_g7];
								 ++ _g7;
								string a1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "name", 1224700491, true));
								bool a2 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a, "opt", 5545011, true));
								object __temp_stmt2 = null;
								{
									global::hscript.TType __temp_odecl1 = this.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ));
									__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl1, a2, a1}, new int[]{}, new double[]{});
								}
								
								_g6.push(__temp_stmt2);
							}
							
						}
						
						return global::hscript.TType.TFun(_g6, this.makeXmlType(ret));
					}
					
					
					case 5:
					{
						global::Array<object> fields = ( t as global::haxe.rtti.CType_CAnonymous ).fields;
						global::Array<object> _g8 = new global::Array<object>(new object[]{});
						{
							int _g9 = 0;
							while (( _g9 < fields.length )) {
								object f = fields[_g9];
								 ++ _g9;
								string f1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true));
								global::hscript.TType tmp = this.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(f, "type", 1292432058, true)) ));
								global::Array<object> m = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(f, "meta", 1213811397, true)) ))) );
								bool tmp1 = default(bool);
								if (( m == null )) {
									tmp1 = false;
								}
								else {
									bool b = false;
									{
										int _g10 = 0;
										while (( _g10 < m.length )) {
											object m1 = m[_g10];
											 ++ _g10;
											if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(m1, "name", 1224700491, true)) == ":optional" )) {
												b = true;
												break;
											}
											
										}
										
									}
									
									tmp1 = b;
								}
								
								_g8.push(new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{tmp, tmp1, f1}, new int[]{}, new double[]{}));
							}
							
						}
						
						return global::hscript.TType.TAnon(_g8);
					}
					
					
					case 6:
					{
						global::haxe.rtti.CType t4 = ( t as global::haxe.rtti.CType_CDynamic ).t;
						return global::hscript.TType.TDynamic;
					}
					
					
					case 7:
					{
						string name3 = ( t as global::haxe.rtti.CType_CAbstract ).name;
						global::Array<object> params3 = ( t as global::haxe.rtti.CType_CAbstract ).@params;
						global::Array<object> _g11 = new global::Array<object>(new object[]{});
						{
							int _g12 = 0;
							while (( _g12 < params3.length )) {
								global::haxe.rtti.CType t5 = ((global::haxe.rtti.CType) (params3[_g12]) );
								 ++ _g12;
								_g11.push(this.makeXmlType(t5));
							}
							
						}
						
						return this.getType(name3, _g11);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public virtual global::hscript.TType getType(string name, global::Array<object> args) {
			unchecked {
				if (( this.localParams != null )) {
					global::hscript.TType t = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.localParams) )) ))) ).@get(name)).@value) );
					if (( t != null )) {
						return t;
					}
					
				}
				
				global::hscript.TType t1 = this.resolve(name, args);
				if (( t1 == null )) {
					global::Array<string> pack = global::haxe.lang.StringExt.split(name, ".");
					if (( pack.length > 1 )) {
						string priv = pack[( pack.length - 2 )];
						if (global::haxe.lang.Runtime.eq((global::haxe.lang.StringExt.charCodeAt(priv, 0)).toDynamic(), 95)) {
							pack.@remove(priv);
							return this.getType(pack.@join("."), args);
						}
						
					}
					
					return global::hscript.TType.TUnresolved(name);
				}
				
				return t1;
			}
		}
		
		
		public virtual global::hscript.TType resolve(string name, global::Array<object> args) {
			unchecked {
				if (( name == "Null" )) {
					if (( ( args == null ) || ( args.length != 1 ) )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown("Missing Null<T> parameter")) );
					}
					
					return global::hscript.TType.TNull(((global::hscript.TType) (args[0]) ));
				}
				
				global::hscript.CTypedecl t = ((global::hscript.CTypedecl) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.types) )) ))) ).@get(name)).@value) );
				if (( t == null )) {
					return null;
				}
				
				if (( args == null )) {
					args = new global::Array<object>(new object[]{});
				}
				
				switch (t._hx_index) {
					case 0:
					{
						object c = ( t as global::hscript.CTypedecl_CTClass ).c;
						return global::hscript.TType.TInst(c, args);
					}
					
					
					case 1:
					{
						object e = ( t as global::hscript.CTypedecl_CTEnum ).e;
						return global::hscript.TType.TEnum(e, args);
					}
					
					
					case 2:
					{
						object t1 = ( t as global::hscript.CTypedecl_CTTypedef ).t;
						return global::hscript.TType.TType_TType(t1, args);
					}
					
					
					case 3:
					{
						global::hscript.TType t2 = ( t as global::hscript.CTypedecl_CTAlias ).t;
						return t2;
					}
					
					
					case 4:
					{
						object a = ( t as global::hscript.CTypedecl_CTAbstract ).a;
						return global::hscript.TType.TAbstract(a, args);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 716544785:
					{
						this.localParams = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 1786966140:
					{
						this.t_string = ((global::hscript.TType) (@value) );
						return @value;
					}
					
					
					case 449540217:
					{
						this.types = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1734349548:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "resolve", 1734349548)) );
					}
					
					
					case 529244784:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getType", 529244784)) );
					}
					
					
					case 1042869219:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "makeXmlType", 1042869219)) );
					}
					
					
					case 1638461456:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addXmlType", 1638461456)) );
					}
					
					
					case 1027177476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addXmlApi", 1027177476)) );
					}
					
					
					case 716544785:
					{
						return this.localParams;
					}
					
					
					case 1786966140:
					{
						return this.t_string;
					}
					
					
					case 449540217:
					{
						return this.types;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1734349548:
					{
						return this.resolve(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ))) ));
					}
					
					
					case 529244784:
					{
						return this.getType(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ))) ));
					}
					
					
					case 1042869219:
					{
						return this.makeXmlType(((global::haxe.rtti.CType) (dynargs[0]) ));
					}
					
					
					case 1638461456:
					{
						this.addXmlType(((global::haxe.rtti.TypeTree) (dynargs[0]) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 1027177476:
					{
						this.addXmlApi(((global::Xml) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("localParams");
			baseArr.push("t_string");
			baseArr.push("types");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CheckerTypes_addXmlType_130__Fun : global::haxe.lang.Function {
		
		public CheckerTypes_addXmlType_130__Fun(object cl1, object c, global::hscript.CheckerTypes _gthis) : base(0, 0) {
			this.cl1 = cl1;
			this.c = c;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			unchecked {
				global::haxe.ds.StringMap<object> _g = new global::haxe.ds.StringMap<object>();
				{
					int _g1 = 0;
					global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.cl1, "params", 1836776262, true)) ))) );
					while (( _g1 < _g2.length )) {
						global::hscript.TType t = ((global::hscript.TType) (_g2[_g1]) );
						 ++ _g1;
						_g.@set(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.c, "path", 1246881189, true)), "."), global::hscript.Checker.typeStr(t)), t);
					}
					
				}
				
				this._gthis.localParams = _g;
				if (( global::haxe.lang.Runtime.getField(this.c, "superClass", 671590589, true) != null )) {
					global::hscript.CheckerTypes _gthis1 = this._gthis;
					string c1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::haxe.lang.Runtime.getField(this.c, "superClass", 671590589, true), "path", 1246881189, true));
					global::Array<object> _g3 = new global::Array<object>(new object[]{});
					{
						int _g4 = 0;
						global::Array<object> _g5 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(global::haxe.lang.Runtime.getField(this.c, "superClass", 671590589, true), "params", 1836776262, true)) ))) );
						while (( _g4 < _g5.length )) {
							global::haxe.rtti.CType t1 = ((global::haxe.rtti.CType) (_g5[_g4]) );
							 ++ _g4;
							_g3.push(this._gthis.makeXmlType(t1));
						}
						
					}
					
					global::hscript.TType __temp_expr3 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(this.cl1, "superClass", 671590589, _gthis1.getType(c1, _g3))) );
				}
				
				if (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.c, "interfaces", 1695633562, true)) ))) ) != null )) {
					global::Array<object> __temp_expr4 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.setField(this.cl1, "interfaces", 1695633562, new global::Array<object>(new object[]{}))) ))) );
					{
						int _g6 = 0;
						global::Array<object> _g7 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.c, "interfaces", 1695633562, true)) ))) );
						while (( _g6 < _g7.length )) {
							object i = _g7[_g6];
							 ++ _g6;
							global::Array<object> cl = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.cl1, "interfaces", 1695633562, true)) ))) );
							global::hscript.CheckerTypes _gthis2 = this._gthis;
							string i1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(i, "path", 1246881189, true));
							global::Array<object> _g8 = new global::Array<object>(new object[]{});
							{
								int _g9 = 0;
								global::Array<object> _g10 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(i, "params", 1836776262, true)) ))) );
								while (( _g9 < _g10.length )) {
									global::haxe.rtti.CType t2 = ((global::haxe.rtti.CType) (_g10[_g9]) );
									 ++ _g9;
									_g8.push(this._gthis.makeXmlType(t2));
								}
								
							}
							
							cl.push(_gthis2.getType(i1, _g8));
						}
						
					}
					
				}
				
				global::Array<string> pkeys = new global::Array<string>(new string[]{});
				{
					int _g11 = 0;
					global::Array<object> _g12 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.c, "fields", 9342585, true)) ))) );
					while (( _g11 < _g12.length )) {
						object f = _g12[_g11];
						 ++ _g11;
						if (( ( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f, "isOverride", 1138177110, true)) || ((bool) (( global::haxe.lang.StringExt.substr(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), 0, new global::haxe.lang.Null<int>(4, true)) == "get_" )) ) ) || ( global::haxe.lang.StringExt.substr(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), 0, new global::haxe.lang.Null<int>(4, true)) == "set_" ) )) {
							continue;
						}
						
						bool skip = false;
						bool complete =  ! (global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)).StartsWith("__")) ;
						{
							int _g13 = 0;
							global::Array<object> _g14 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(f, "meta", 1213811397, true)) ))) );
							while (( _g13 < _g14.length )) {
								object m = _g14[_g13];
								 ++ _g13;
								if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(m, "name", 1224700491, true)) == ":noScript" )) {
									skip = true;
									break;
								}
								
								if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(m, "name", 1224700491, true)) == ":noCompletion" )) {
									complete = false;
								}
								
							}
							
						}
						
						if (skip) {
							continue;
						}
						
						global::haxe.rtti.Rights _g15 = ((global::haxe.rtti.Rights) (global::haxe.lang.Runtime.getField(f, "set", 5741474, true)) );
						bool fl = default(bool);
						switch (_g15._hx_index) {
							case 0:
							case 4:
							{
								fl = true;
								break;
							}
							
							
							case 2:
							{
								string _g16 = ( _g15 as global::haxe.rtti.Rights_RCall ).m;
								fl = true;
								break;
							}
							
							
							default:
							{
								fl = false;
								break;
							}
							
						}
						
						object fl1 = null;
						{
							bool __temp_odecl1 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f, "isPublic", 1063066675, true));
							string __temp_odecl2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true));
							fl1 = new global::haxe.lang.DynamicObject(new int[]{116, 1055698607, 1063066675, 1224700491, 1836776262, 2143813817}, new object[]{null, fl, __temp_odecl1, __temp_odecl2, new global::Array<object>(new object[]{}), complete}, new int[]{}, new double[]{});
						}
						
						{
							int _g17 = 0;
							global::Array<string> _g18 = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (global::haxe.lang.Runtime.getField(f, "params", 1836776262, true)) ))) );
							while (( _g17 < _g18.length )) {
								string p = _g18[_g17];
								 ++ _g17;
								global::hscript.TType pt = global::hscript.TType.TParam(p);
								string key = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), "."), p);
								pkeys.push(key);
								((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(fl1, "params", 1836776262, true)) ))) ).push(pt);
								((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this._gthis.localParams) )) ))) ).@set(key, pt);
							}
							
						}
						
						global::hscript.TType __temp_expr5 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(fl1, "t", 116, this._gthis.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(f, "type", 1292432058, true)) )))) );
						while (( pkeys.length > 0 )) {
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this._gthis.localParams) )) ))) ).@remove(global::haxe.lang.Runtime.toString((pkeys.pop()).toDynamic()));
						}
						
						if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(fl1, "name", 1224700491, true)) == "new" )) {
							global::haxe.lang.Runtime.setField(this.cl1, "constructor", 398798074, fl1);
						}
						else {
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(this.cl1, "fields", 9342585, true)) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), fl1);
						}
						
					}
					
				}
				
				this._gthis.localParams = null;
				return null;
			}
		}
		
		
		public object cl1;
		
		public object c;
		
		public global::hscript.CheckerTypes _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CheckerTypes_addXmlType_181__Fun : global::haxe.lang.Function {
		
		public CheckerTypes_addXmlType_181__Fun(object en, object e, global::hscript.CheckerTypes _gthis) : base(0, 0) {
			this.en = en;
			this.e = e;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			global::haxe.ds.StringMap<object> _g = new global::haxe.ds.StringMap<object>();
			{
				int _g1 = 0;
				global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.en, "params", 1836776262, true)) ))) );
				while (( _g1 < _g2.length )) {
					global::hscript.TType t = ((global::hscript.TType) (_g2[_g1]) );
					 ++ _g1;
					_g.@set(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.e, "path", 1246881189, true)), "."), global::hscript.Checker.typeStr(t)), t);
				}
				
			}
			
			this._gthis.localParams = _g;
			{
				int _g3 = 0;
				global::Array<object> _g4 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.e, "constructors", 885141049, true)) ))) );
				while (( _g3 < _g4.length )) {
					object c = _g4[_g3];
					 ++ _g3;
					global::Array<object> en1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.en, "constructors", 885141049, true)) ))) );
					string c1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "name", 1224700491, true));
					global::Array<object> tmp = null;
					if (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "args", 1081380189, true)) ))) ) == null )) {
						tmp = null;
					}
					else {
						global::Array<object> _g5 = new global::Array<object>(new object[]{});
						{
							int _g6 = 0;
							global::Array<object> _g7 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "args", 1081380189, true)) ))) );
							while (( _g6 < _g7.length )) {
								object a = _g7[_g6];
								 ++ _g6;
								string a1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "name", 1224700491, true));
								bool a2 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a, "opt", 5545011, true));
								object __temp_stmt2 = null;
								{
									global::hscript.TType __temp_odecl1 = this._gthis.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ));
									__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl1, a2, a1}, new int[]{}, new double[]{});
								}
								
								_g5.push(__temp_stmt2);
							}
							
						}
						
						tmp = _g5;
					}
					
					en1.push(new global::haxe.lang.DynamicObject(new int[]{1081380189, 1224700491}, new object[]{tmp, c1}, new int[]{}, new double[]{}));
				}
				
			}
			
			this._gthis.localParams = null;
			return null;
		}
		
		
		public object en;
		
		public object e;
		
		public global::hscript.CheckerTypes _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CheckerTypes_addXmlType_199__Fun : global::haxe.lang.Function {
		
		public CheckerTypes_addXmlType_199__Fun(object td, object t, global::hscript.CheckerTypes _gthis) : base(0, 0) {
			this.td = td;
			this.t = t;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			global::haxe.ds.StringMap<object> _g = new global::haxe.ds.StringMap<object>();
			{
				int _g1 = 0;
				global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.td, "params", 1836776262, true)) ))) );
				while (( _g1 < _g2.length )) {
					global::hscript.TType pt = ((global::hscript.TType) (_g2[_g1]) );
					 ++ _g1;
					_g.@set(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.t, "path", 1246881189, true)), "."), global::hscript.Checker.typeStr(pt)), pt);
				}
				
			}
			
			this._gthis.localParams = _g;
			global::hscript.TType __temp_expr1 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(this.td, "t", 116, this._gthis.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(this.t, "type", 1292432058, true)) )))) );
			this._gthis.localParams = null;
			return null;
		}
		
		
		public object td;
		
		public object t;
		
		public global::hscript.CheckerTypes _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class CheckerTypes_addXmlType_214__Fun : global::haxe.lang.Function {
		
		public CheckerTypes_addXmlType_214__Fun(object ta, object a, global::hscript.CheckerTypes _gthis) : base(0, 0) {
			this.ta = ta;
			this.a = a;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			global::haxe.ds.StringMap<object> _g = new global::haxe.ds.StringMap<object>();
			{
				int _g1 = 0;
				global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.ta, "params", 1836776262, true)) ))) );
				while (( _g1 < _g2.length )) {
					global::hscript.TType t = ((global::hscript.TType) (_g2[_g1]) );
					 ++ _g1;
					_g.@set(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.a, "path", 1246881189, true)), "."), global::hscript.Checker.typeStr(t)), t);
				}
				
			}
			
			this._gthis.localParams = _g;
			global::hscript.TType __temp_expr1 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(this.ta, "t", 116, this._gthis.makeXmlType(((global::haxe.rtti.CType) (global::haxe.lang.Runtime.getField(this.a, "athis", 651840319, true)) )))) );
			this._gthis.localParams = null;
			return null;
		}
		
		
		public object ta;
		
		public object a;
		
		public global::hscript.CheckerTypes _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker : global::haxe.lang.HxObject {
		
		public Checker(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Checker(global::hscript.CheckerTypes types) {
			global::hscript.Checker.__hx_ctor_hscript_Checker(this, types);
		}
		
		
		protected static void __hx_ctor_hscript_Checker(global::hscript.Checker __hx_this, global::hscript.CheckerTypes types) {
			__hx_this.events = new global::haxe.ds.StringMap<object>();
			__hx_this.globals = new global::haxe.ds.StringMap<object>();
			{
				if (( types == null )) {
					types = new global::hscript.CheckerTypes();
				}
				
				__hx_this.types = types;
			}
			
		}
		
		
		public static string typeStr(global::hscript.TType t) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						object r = ( t as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) == null )) {
							return "Unknown";
						}
						else {
							return global::hscript.Checker.typeStr(((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ));
						}
						
					}
					
					
					case 6:
					{
						string name = ( t as global::hscript.TType_TParam ).name;
						return name;
					}
					
					
					case 7:
					{
						string name1 = ( t as global::hscript.TType_TUnresolved ).name;
						return global::haxe.lang.Runtime.concat("?", name1);
					}
					
					
					case 8:
					{
						global::hscript.TType t1 = ( t as global::hscript.TType_TNull ).t;
						return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Null<", global::hscript.Checker.typeStr(t1)), ">");
					}
					
					
					case 9:
					{
						object c = ( t as global::hscript.TType_TInst ).c;
						global::Array<object> args = ( t as global::hscript.TType_TInst ).args;
						string c1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "name", 1224700491, true));
						string tmp = null;
						if (( args.length == 0 )) {
							tmp = "";
						}
						else {
							global::Array<string> _g = new global::Array<string>(new string[]{});
							{
								int _g1 = 0;
								while (( _g1 < args.length )) {
									global::hscript.TType t2 = ((global::hscript.TType) (args[_g1]) );
									 ++ _g1;
									_g.push(global::hscript.Checker.typeStr(t2));
								}
								
							}
							
							tmp = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<", _g.@join(",")), ">");
						}
						
						return global::haxe.lang.Runtime.concat(c1, tmp);
					}
					
					
					case 10:
					{
						object e = ( t as global::hscript.TType_TEnum ).e;
						global::Array<object> args1 = ( t as global::hscript.TType_TEnum ).args;
						string e1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "name", 1224700491, true));
						string tmp1 = null;
						if (( args1.length == 0 )) {
							tmp1 = "";
						}
						else {
							global::Array<string> _g2 = new global::Array<string>(new string[]{});
							{
								int _g3 = 0;
								while (( _g3 < args1.length )) {
									global::hscript.TType t3 = ((global::hscript.TType) (args1[_g3]) );
									 ++ _g3;
									_g2.push(global::hscript.Checker.typeStr(t3));
								}
								
							}
							
							tmp1 = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<", _g2.@join(",")), ">");
						}
						
						return global::haxe.lang.Runtime.concat(e1, tmp1);
					}
					
					
					case 11:
					{
						object t4 = ( t as global::hscript.TType_TType ).t;
						global::Array<object> args2 = ( t as global::hscript.TType_TType ).args;
						if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t4, "name", 1224700491, true)) == "hscript.TypeCheck" )) {
							return global::hscript.Checker.typeStr(((global::hscript.TType) (args2[1]) ));
						}
						else {
							string t5 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t4, "name", 1224700491, true));
							string tmp2 = null;
							if (( args2.length == 0 )) {
								tmp2 = "";
							}
							else {
								global::Array<string> _g4 = new global::Array<string>(new string[]{});
								{
									int _g5 = 0;
									while (( _g5 < args2.length )) {
										global::hscript.TType t6 = ((global::hscript.TType) (args2[_g5]) );
										 ++ _g5;
										_g4.push(global::hscript.Checker.typeStr(t6));
									}
									
								}
								
								tmp2 = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<", _g4.@join(",")), ">");
							}
							
							return global::haxe.lang.Runtime.concat(t5, tmp2);
						}
						
					}
					
					
					case 12:
					{
						object a = ( t as global::hscript.TType_TAbstract ).a;
						global::Array<object> args3 = ( t as global::hscript.TType_TAbstract ).args;
						string a1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "name", 1224700491, true));
						string tmp3 = null;
						if (( args3.length == 0 )) {
							tmp3 = "";
						}
						else {
							global::Array<string> _g6 = new global::Array<string>(new string[]{});
							{
								int _g7 = 0;
								while (( _g7 < args3.length )) {
									global::hscript.TType t7 = ((global::hscript.TType) (args3[_g7]) );
									 ++ _g7;
									_g6.push(global::hscript.Checker.typeStr(t7));
								}
								
							}
							
							tmp3 = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<", _g6.@join(",")), ">");
						}
						
						return global::haxe.lang.Runtime.concat(a1, tmp3);
					}
					
					
					case 13:
					{
						global::Array<object> args4 = ( t as global::hscript.TType_TFun ).args;
						global::hscript.TType ret = ( t as global::hscript.TType_TFun ).ret;
						global::Array<string> _g8 = new global::Array<string>(new string[]{});
						{
							int _g9 = 0;
							while (( _g9 < args4.length )) {
								object a2 = args4[_g9];
								 ++ _g9;
								_g8.push(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a2, "opt", 5545011, true))) ? ("?") : ("") )), (( (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a2, "name", 1224700491, true)) == "" )) ? ("") : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a2, "name", 1224700491, true)), ":")) ))), global::hscript.Checker.typeStr(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a2, "t", 116, true)) ))));
							}
							
						}
						
						return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("(", _g8.@join(", ")), ") -> "), global::hscript.Checker.typeStr(ret));
					}
					
					
					case 14:
					{
						global::Array<object> fields = ( t as global::hscript.TType_TAnon ).fields;
						global::Array<string> _g10 = new global::Array<string>(new string[]{});
						{
							int _g11 = 0;
							while (( _g11 < fields.length )) {
								object f = fields[_g11];
								 ++ _g11;
								_g10.push(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f, "opt", 5545011, true))) ? ("?") : ("") )), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true))), ":"), global::hscript.Checker.typeStr(((global::hscript.TType) (global::haxe.lang.Runtime.getField(f, "t", 116, true)) ))));
							}
							
						}
						
						return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("{", _g10.@join(", ")), "}");
					}
					
					
					default:
					{
						return global::haxe.lang.StringExt.substr(global::Type.enumConstructor(t), 1, default(global::haxe.lang.Null<int>));
					}
					
				}
				
			}
		}
		
		
		public global::hscript.CheckerTypes types;
		
		public global::haxe.ds.StringMap<object> locals;
		
		public global::haxe.ds.StringMap<object> globals;
		
		public global::haxe.ds.StringMap<object> events;
		
		public global::hscript.TType currentFunType;
		
		public bool isCompletion;
		
		public bool allowDefine;
		
		public bool allowAsync;
		
		public global::hscript.TType allowReturn;
		
		public bool allowGlobalsDefine;
		
		public bool allowUntypedMeta;
		
		public virtual void setGlobals(object cl) {
			unchecked {
				global::hscript.Checker _gthis = this;
				while (true) {
					{
						object f = ((object) (new global::haxe.ds._StringMap.StringMapValueIterator<object>(((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(cl, "fields", 9342585, true)) )) ))) ))) );
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(f, "hasNext", 407283053, null))) {
							object f1 = ((object) (global::haxe.lang.Runtime.callField(f, "next", 1224901875, null)) );
							if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f1, "isPublic", 1063066675, true))) {
								global::hscript.TType tmp = ( (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(f1, "params", 1836776262, true)) ))) ).length == 0 )) ? (((global::hscript.TType) (global::haxe.lang.Runtime.getField(f1, "t", 116, true)) )) : (global::hscript.TType.TLazy(new global::hscript.Checker_setGlobals_310__Fun(f1, _gthis))) );
								this.setGlobal(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true)), tmp);
							}
							
						}
						
					}
					
					if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cl, "superClass", 671590589, true)) ) == null )) {
						break;
					}
					
					global::hscript.TType _g = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cl, "superClass", 671590589, true)) );
					if (( _g == null )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
					}
					else if (( _g._hx_index == 9 )) {
						global::Array<object> _g1 = ( _g as global::hscript.TType_TInst ).args;
						object c = ( _g as global::hscript.TType_TInst ).c;
						cl = c;
					}
					else {
						throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
					}
					
				}
				
			}
		}
		
		
		public virtual void removeGlobal(string name) {
			((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.globals) )) ))) ).@remove(name);
		}
		
		
		public virtual void setGlobal(string name, global::hscript.TType type) {
			((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.globals) )) ))) ).@set(name, type);
		}
		
		
		public virtual void setEvent(string name, global::hscript.TType type) {
			((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.events) )) ))) ).@set(name, type);
		}
		
		
		public virtual global::haxe.ds.StringMap<object> getGlobals() {
			return this.globals;
		}
		
		
		public virtual global::Array<object> typeArgs(global::Array<object> args, object pos) {
			global::Array<object> _g = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g2 = args.length;
				while (( _g1 < _g2 )) {
					int i = _g1++;
					object a = args[i];
					global::hscript.TType at = ( (( ((global::hscript.CType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ) == null )) ? (this.makeMono()) : (this.makeType(((global::hscript.CType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ), pos)) );
					object __temp_stmt3 = null;
					{
						string __temp_odecl1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "name", 1224700491, true));
						global::haxe.lang.Null<bool> __temp_odecl2 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(a, "opt", 5545011, true));
						__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{at, (__temp_odecl2).toDynamic(), __temp_odecl1}, new int[]{}, new double[]{});
					}
					
					_g.push(__temp_stmt3);
				}
				
			}
			
			return _g;
		}
		
		
		public virtual global::hscript.TType check(object expr, global::hscript._Checker.WithType withType, global::haxe.lang.Null<bool> isCompletion) {
			unchecked {
				global::haxe.lang.Null<bool> isCompletion1 = ( ( ! (isCompletion.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (isCompletion) );
				if (( withType == null )) {
					withType = global::hscript._Checker.WithType.NoValue;
				}
				
				this.locals = new global::haxe.ds.StringMap<object>();
				this.allowDefine = this.allowGlobalsDefine;
				this.isCompletion = (isCompletion1).@value;
				global::hscript.Checker _gthis = this;
				{
					global::hscript.ExprDef _g = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(expr, "e", 101, true)) );
					if (( _g._hx_index == 4 )) {
						global::Array<object> el = ( _g as global::hscript.ExprDef_EBlock ).e;
						global::Array<object> delayed = new global::Array<object>(new object[]{});
						global::hscript.TType last = global::hscript.TType.TVoid;
						{
							int _g1 = 0;
							while (( _g1 < el.length )) {
								object[] e = new object[]{el[_g1]};
								 ++ _g1;
								while (true) {
									global::hscript.ExprDef _g2 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e[0], "e", 101, true)) );
									if (( _g2._hx_index == 25 )) {
										string _g3 = ( _g2 as global::hscript.ExprDef_EMeta ).name;
										global::Array<object> _g4 = ( _g2 as global::hscript.ExprDef_EMeta ).args;
										{
											object e2 = ( _g2 as global::hscript.ExprDef_EMeta ).e;
											e[0] = e2;
										}
										
									}
									else {
										break;
									}
									
								}
								
								{
									global::hscript.ExprDef _g5 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e[0], "e", 101, true)) );
									if (( _g5._hx_index == 14 )) {
										object _g6 = ( _g5 as global::hscript.ExprDef_EFunction ).e;
										{
											global::Array<object> args = ( _g5 as global::hscript.ExprDef_EFunction ).args;
											string name = ( _g5 as global::hscript.ExprDef_EFunction ).name;
											global::hscript.CType ret = ( _g5 as global::hscript.ExprDef_EFunction ).ret;
											if (( name != null )) {
												global::hscript.TType tret = ( (( ret == null )) ? (this.makeMono()) : (this.makeType(ret, e[0])) );
												global::hscript.TType ft = global::hscript.TType.TFun(this.typeArgs(args, e[0]), tret);
												((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(name, ft);
												delayed.push(new global::hscript.Checker_check_365__Fun(ft, e, _gthis));
											}
											else {
												{
													int _g7 = 0;
													while (( _g7 < delayed.length )) {
														global::haxe.lang.Function f = ((global::haxe.lang.Function) (delayed[_g7]) );
														 ++ _g7;
														global::hscript.TType __temp_expr2 = ((global::hscript.TType) (f.__hx_invoke0_o()) );
													}
													
												}
												
												delayed = new global::Array<object>(new object[]{});
												if (global::haxe.lang.Runtime.refEq(el[( el.length - 1 )], e[0])) {
													last = this.typeExpr(e[0], withType);
												}
												else {
													this.typeExpr(e[0], global::hscript._Checker.WithType.NoValue);
												}
												
											}
											
										}
										
									}
									else {
										{
											int _g8 = 0;
											while (( _g8 < delayed.length )) {
												global::haxe.lang.Function f1 = ((global::haxe.lang.Function) (delayed[_g8]) );
												 ++ _g8;
												global::hscript.TType __temp_expr1 = ((global::hscript.TType) (f1.__hx_invoke0_o()) );
											}
											
										}
										
										delayed = new global::Array<object>(new object[]{});
										if (global::haxe.lang.Runtime.refEq(el[( el.length - 1 )], e[0])) {
											last = this.typeExpr(e[0], withType);
										}
										else {
											this.typeExpr(e[0], global::hscript._Checker.WithType.NoValue);
										}
										
									}
									
								}
								
							}
							
						}
						
						{
							int _g9 = 0;
							while (( _g9 < delayed.length )) {
								global::haxe.lang.Function f2 = ((global::haxe.lang.Function) (delayed[_g9]) );
								 ++ _g9;
								last = ((global::hscript.TType) (f2.__hx_invoke0_o()) );
							}
							
						}
						
						return last;
					}
					
				}
				
				return this.typeExpr(expr, withType);
			}
		}
		
		
		public global::hscript.ExprDef edef(object e) {
			return ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e, "e", 101, true)) );
		}
		
		
		public void error(string msg, object curExpr) {
			global::hscript.ErrorDef e = global::hscript.ErrorDef.ECustom(msg);
			global::hscript.Error e1 = new global::hscript.Error(((global::hscript.ErrorDef) (e) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(curExpr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "line", 1202919412, true)) ));
			if ( ! (this.isCompletion) ) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(e1)) );
			}
			
		}
		
		
		public virtual global::haxe.ds.StringMap<object> saveLocals() {
			global::haxe.ds.StringMap<object> _g = new global::haxe.ds.StringMap<object>();
			{
				object k = ((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<object>(((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(k, "hasNext", 407283053, null))) {
					string k1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(k, "next", 1224901875, null));
					_g.@set(k1, ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@get(k1)).@value) ));
				}
				
			}
			
			return _g;
		}
		
		
		public virtual global::hscript.TType makeType(global::hscript.CType t, object e) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						global::Array<string> path = ( t as global::hscript.CType_CTPath ).path;
						global::Array<object> @params = ( t as global::hscript.CType_CTPath ).@params;
						global::hscript.CheckerTypes ct = this.types;
						string ct1 = path.@join(".");
						global::Array<object> ct2 = null;
						if (( @params == null )) {
							ct2 = new global::Array<object>(new object[]{});
						}
						else {
							global::Array<object> _g = new global::Array<object>(new object[]{});
							{
								int _g1 = 0;
								while (( _g1 < @params.length )) {
									global::hscript.CType p = ((global::hscript.CType) (@params[_g1]) );
									 ++ _g1;
									_g.push(this.makeType(p, e));
								}
								
							}
							
							ct2 = _g;
						}
						
						global::hscript.TType ct3 = ct.resolve(ct1, ct2);
						if (( ct3 == null )) {
							{
								global::hscript.ErrorDef e1 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Unknown type ", global::Std.@string(path)));
								global::hscript.Error e2 = new global::hscript.Error(((global::hscript.ErrorDef) (e1) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(e, "line", 1202919412, true)) ));
								if ( ! (this.isCompletion) ) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(e2)) );
								}
								
							}
							
							ct3 = global::hscript.TType.TDynamic;
						}
						
						return ct3;
					}
					
					
					case 1:
					{
						global::Array<object> args = ( t as global::hscript.CType_CTFun ).args;
						global::hscript.CType ret = ( t as global::hscript.CType_CTFun ).ret;
						int i = 0;
						global::Array<object> _g2 = new global::Array<object>(new object[]{});
						{
							int _g3 = 0;
							while (( _g3 < args.length )) {
								global::hscript.CType a = ((global::hscript.CType) (args[_g3]) );
								 ++ _g3;
								object __temp_stmt4 = null;
								{
									string __temp_odecl1 = global::haxe.lang.Runtime.concat("p", global::haxe.lang.Runtime.toString(i++));
									global::hscript.TType __temp_odecl2 = this.makeType(a, e);
									__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl2, false, __temp_odecl1}, new int[]{}, new double[]{});
								}
								
								_g2.push(__temp_stmt4);
							}
							
						}
						
						return global::hscript.TType.TFun(_g2, this.makeType(ret, e));
					}
					
					
					case 2:
					{
						global::Array<object> fields = ( t as global::hscript.CType_CTAnon ).fields;
						global::Array<object> _g4 = new global::Array<object>(new object[]{});
						{
							int _g5 = 0;
							while (( _g5 < fields.length )) {
								object f = fields[_g5];
								 ++ _g5;
								string f1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true));
								object __temp_stmt5 = null;
								{
									global::hscript.TType __temp_odecl3 = this.makeType(((global::hscript.CType) (global::haxe.lang.Runtime.getField(f, "t", 116, true)) ), e);
									__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl3, false, f1}, new int[]{}, new double[]{});
								}
								
								_g4.push(__temp_stmt5);
							}
							
						}
						
						return global::hscript.TType.TAnon(_g4);
					}
					
					
					case 3:
					{
						global::hscript.CType t1 = ( t as global::hscript.CType_CTParent ).t;
						return this.makeType(t1, e);
					}
					
					
					case 4:
					{
						global::hscript.CType t2 = ( t as global::hscript.CType_CTOpt ).t;
						return this.makeType(t2, e);
					}
					
					
					case 5:
					{
						string n = ( t as global::hscript.CType_CTNamed ).n;
						global::hscript.CType t3 = ( t as global::hscript.CType_CTNamed ).t;
						return this.makeType(t3, e);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public virtual bool linkLoop(global::hscript.TType a, global::hscript.TType t) {
			unchecked {
				if (( t == a )) {
					return true;
				}
				
				switch (t._hx_index) {
					case 0:
					{
						object r = ( t as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) == null )) {
							return false;
						}
						
						return this.linkLoop(a, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ));
					}
					
					
					case 5:
					{
						if (( t == global::hscript.TType.TDynamic )) {
							return false;
						}
						
						return this.linkLoop(a, global::hscript.TType.TDynamic);
					}
					
					
					case 9:
					{
						object _g = ( t as global::hscript.TType_TInst ).c;
						global::Array<object> tl = ( t as global::hscript.TType_TInst ).args;
						{
							int _g1 = 0;
							while (( _g1 < tl.length )) {
								global::hscript.TType t1 = ((global::hscript.TType) (tl[_g1]) );
								 ++ _g1;
								if (this.linkLoop(a, t1)) {
									return true;
								}
								
							}
							
						}
						
						return false;
					}
					
					
					case 10:
					{
						object _g2 = ( t as global::hscript.TType_TEnum ).e;
						global::Array<object> tl1 = ( t as global::hscript.TType_TEnum ).args;
						{
							int _g3 = 0;
							while (( _g3 < tl1.length )) {
								global::hscript.TType t2 = ((global::hscript.TType) (tl1[_g3]) );
								 ++ _g3;
								if (this.linkLoop(a, t2)) {
									return true;
								}
								
							}
							
						}
						
						return false;
					}
					
					
					case 11:
					{
						object _g4 = ( t as global::hscript.TType_TType ).t;
						global::Array<object> tl2 = ( t as global::hscript.TType_TType ).args;
						{
							int _g5 = 0;
							while (( _g5 < tl2.length )) {
								global::hscript.TType t3 = ((global::hscript.TType) (tl2[_g5]) );
								 ++ _g5;
								if (this.linkLoop(a, t3)) {
									return true;
								}
								
							}
							
						}
						
						return false;
					}
					
					
					case 12:
					{
						object _g6 = ( t as global::hscript.TType_TAbstract ).a;
						global::Array<object> tl3 = ( t as global::hscript.TType_TAbstract ).args;
						{
							int _g7 = 0;
							while (( _g7 < tl3.length )) {
								global::hscript.TType t4 = ((global::hscript.TType) (tl3[_g7]) );
								 ++ _g7;
								if (this.linkLoop(a, t4)) {
									return true;
								}
								
							}
							
						}
						
						return false;
					}
					
					
					case 13:
					{
						global::Array<object> args = ( t as global::hscript.TType_TFun ).args;
						global::hscript.TType ret = ( t as global::hscript.TType_TFun ).ret;
						{
							int _g8 = 0;
							while (( _g8 < args.length )) {
								object arg = args[_g8];
								 ++ _g8;
								if (this.linkLoop(a, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(arg, "t", 116, true)) ))) {
									return true;
								}
								
							}
							
						}
						
						return this.linkLoop(a, ret);
					}
					
					
					case 14:
					{
						global::Array<object> fl = ( t as global::hscript.TType_TAnon ).fields;
						{
							int _g9 = 0;
							while (( _g9 < fl.length )) {
								object f = fl[_g9];
								 ++ _g9;
								if (this.linkLoop(a, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f, "t", 116, true)) ))) {
									return true;
								}
								
							}
							
						}
						
						return false;
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public virtual bool link(global::hscript.TType a, global::hscript.TType b, object r) {
			if (this.linkLoop(a, b)) {
				return ( this.follow(b) == a );
			}
			
			if (( b == global::hscript.TType.TDynamic )) {
				return true;
			}
			
			global::hscript.TType __temp_expr1 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r, "r", 114, b)) );
			return true;
		}
		
		
		public virtual bool typeEq(global::hscript.TType t1, global::hscript.TType t2) {
			unchecked {
				if (( t1 == t2 )) {
					return true;
				}
				
				switch (t1._hx_index) {
					case 0:
					{
						object r = ( t1 as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) == null )) {
							if ( ! (this.link(t1, t2, r)) ) {
								return false;
							}
							
							global::hscript.TType __temp_expr2 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r, "r", 114, t2)) );
							return true;
						}
						
						return this.typeEq(((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ), t2);
					}
					
					
					case 8:
					{
						global::hscript.TType _g = ( t1 as global::hscript.TType_TNull ).t;
						switch (t2._hx_index) {
							case 0:
							{
								object r1 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r1, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r1)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr3 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r1, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r1, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t21 = ( t2 as global::hscript.TType_TNull ).t;
								global::hscript.TType t11 = _g;
								return this.typeEq(t11, t21);
							}
							
							
							case 11:
							{
								object t22 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl2 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t22, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t22, "params", 1836776262, true)) ))) ), pl2));
							}
							
							
							default:
							{
								global::hscript.TType t12 = _g;
								return this.typeEq(t12, t2);
							}
							
						}
						
					}
					
					
					case 9:
					{
						object _g1 = ( t1 as global::hscript.TType_TInst ).c;
						global::Array<object> _g2 = ( t1 as global::hscript.TType_TInst ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r2 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r2, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r2)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr4 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r2, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r2, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t23 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t23);
							}
							
							
							case 9:
							{
								object cl2 = ( t2 as global::hscript.TType_TInst ).c;
								global::Array<object> pl21 = ( t2 as global::hscript.TType_TInst ).args;
								global::Array<object> pl1 = _g2;
								object cl1 = _g1;
								if (global::haxe.lang.Runtime.refEq(cl1, cl2)) {
									{
										int _g3 = 0;
										int _g4 = pl1.length;
										while (( _g3 < _g4 )) {
											int i = _g3++;
											if ( ! (this.typeEq(((global::hscript.TType) (pl1[i]) ), ((global::hscript.TType) (pl21[i]) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return true;
								}
								
								break;
							}
							
							
							case 11:
							{
								object t24 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl22 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t24, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t24, "params", 1836776262, true)) ))) ), pl22));
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 10:
					{
						object _g5 = ( t1 as global::hscript.TType_TEnum ).e;
						global::Array<object> _g6 = ( t1 as global::hscript.TType_TEnum ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r3 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r3, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r3)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr5 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r3, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r3, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t25 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t25);
							}
							
							
							case 10:
							{
								object e2 = ( t2 as global::hscript.TType_TEnum ).e;
								global::Array<object> pl23 = ( t2 as global::hscript.TType_TEnum ).args;
								global::Array<object> pl11 = _g6;
								object e1 = _g5;
								if (global::haxe.lang.Runtime.refEq(e1, e2)) {
									{
										int _g7 = 0;
										int _g8 = pl11.length;
										while (( _g7 < _g8 )) {
											int i1 = _g7++;
											if ( ! (this.typeEq(((global::hscript.TType) (pl11[i1]) ), ((global::hscript.TType) (pl23[i1]) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return true;
								}
								
								break;
							}
							
							
							case 11:
							{
								object t26 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl24 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t26, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t26, "params", 1836776262, true)) ))) ), pl24));
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 11:
					{
						object _g9 = ( t1 as global::hscript.TType_TType ).t;
						global::Array<object> _g10 = ( t1 as global::hscript.TType_TType ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r4 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r4, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r4)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr6 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r4, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r4, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType _g11 = ( t2 as global::hscript.TType_TNull ).t;
								global::Array<object> pl12 = _g10;
								object t13 = _g9;
								return this.typeEq(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t13, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t13, "params", 1836776262, true)) ))) ), pl12), t2);
							}
							
							
							case 11:
							{
								object t27 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl25 = ( t2 as global::hscript.TType_TType ).args;
								global::Array<object> pl13 = _g10;
								object t14 = _g9;
								if (global::haxe.lang.Runtime.refEq(t14, t27)) {
									{
										int _g12 = 0;
										int _g13 = pl13.length;
										while (( _g12 < _g13 )) {
											int i2 = _g12++;
											if ( ! (this.typeEq(((global::hscript.TType) (pl13[i2]) ), ((global::hscript.TType) (pl25[i2]) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return true;
								}
								else {
									global::Array<object> pl14 = _g10;
									object t15 = _g9;
									return this.typeEq(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t15, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t15, "params", 1836776262, true)) ))) ), pl14), t2);
								}
								
							}
							
							
							default:
							{
								global::Array<object> pl15 = _g10;
								object t16 = _g9;
								return this.typeEq(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t16, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t16, "params", 1836776262, true)) ))) ), pl15), t2);
							}
							
						}
						
					}
					
					
					case 12:
					{
						object _g14 = ( t1 as global::hscript.TType_TAbstract ).a;
						global::Array<object> _g15 = ( t1 as global::hscript.TType_TAbstract ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r5 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r5, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r5)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr7 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r5, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r5, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t28 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t28);
							}
							
							
							case 11:
							{
								object t29 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl26 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t29, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t29, "params", 1836776262, true)) ))) ), pl26));
							}
							
							
							case 12:
							{
								object a2 = ( t2 as global::hscript.TType_TAbstract ).a;
								global::Array<object> pl27 = ( t2 as global::hscript.TType_TAbstract ).args;
								global::Array<object> pl16 = _g15;
								object a1 = _g14;
								if (global::haxe.lang.Runtime.refEq(a1, a2)) {
									{
										int _g16 = 0;
										int _g17 = pl16.length;
										while (( _g16 < _g17 )) {
											int i3 = _g16++;
											if ( ! (this.typeEq(((global::hscript.TType) (pl16[i3]) ), ((global::hscript.TType) (pl27[i3]) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return true;
								}
								
								break;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 13:
					{
						global::Array<object> _g18 = ( t1 as global::hscript.TType_TFun ).args;
						global::hscript.TType _g19 = ( t1 as global::hscript.TType_TFun ).ret;
						switch (t2._hx_index) {
							case 0:
							{
								object r6 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r6, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r6)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr8 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r6, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r6, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t210 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t210);
							}
							
							
							case 11:
							{
								object t211 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl28 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t211, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t211, "params", 1836776262, true)) ))) ), pl28));
							}
							
							
							case 13:
							{
								global::Array<object> args2 = ( t2 as global::hscript.TType_TFun ).args;
								global::hscript.TType r21 = ( t2 as global::hscript.TType_TFun ).ret;
								global::hscript.TType r11 = _g19;
								global::Array<object> args1 = _g18;
								if (( args1.length == args2.length )) {
									{
										int _g20 = 0;
										int _g21 = args1.length;
										while (( _g20 < _g21 )) {
											int i4 = _g20++;
											if ( ! (this.typeEq(((global::hscript.TType) (global::haxe.lang.Runtime.getField(args1[i4], "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(args2[i4], "t", 116, true)) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return this.typeEq(r11, r21);
								}
								
								break;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 14:
					{
						global::Array<object> _g22 = ( t1 as global::hscript.TType_TAnon ).fields;
						switch (t2._hx_index) {
							case 0:
							{
								object r7 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r7, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r7)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr9 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r7, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r7, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t212 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t212);
							}
							
							
							case 11:
							{
								object t213 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl29 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t213, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t213, "params", 1836776262, true)) ))) ), pl29));
							}
							
							
							case 14:
							{
								global::Array<object> a21 = ( t2 as global::hscript.TType_TAnon ).fields;
								global::Array<object> a11 = _g22;
								if (( a11.length == a21.length )) {
									global::haxe.ds.StringMap<object> m = new global::haxe.ds.StringMap<object>();
									{
										int _g23 = 0;
										while (( _g23 < a21.length )) {
											object f = a21[_g23];
											 ++ _g23;
											m.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), f);
										}
										
									}
									
									{
										int _g24 = 0;
										while (( _g24 < a11.length )) {
											object f1 = a11[_g24];
											 ++ _g24;
											object f2 = (m.@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true)))).@value;
											if (( f2 == null )) {
												return false;
											}
											
											if ( ! (this.typeEq(((global::hscript.TType) (global::haxe.lang.Runtime.getField(f1, "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f2, "t", 116, true)) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return true;
								}
								
								break;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					default:
					{
						switch (t2._hx_index) {
							case 0:
							{
								object r8 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r8, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r8)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr1 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r8, "r", 114, t1)) );
									return true;
								}
								
								return this.typeEq(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r8, "r", 114, true)) ));
							}
							
							
							case 8:
							{
								global::hscript.TType t214 = ( t2 as global::hscript.TType_TNull ).t;
								return this.typeEq(t1, t214);
							}
							
							
							case 11:
							{
								object t215 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl210 = ( t2 as global::hscript.TType_TType ).args;
								return this.typeEq(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t215, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t215, "params", 1836776262, true)) ))) ), pl210));
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
				}
				
				return false;
			}
		}
		
		
		public virtual bool tryUnify(global::hscript.TType t1, global::hscript.TType t2) {
			unchecked {
				if (( t1 == t2 )) {
					return true;
				}
				
				switch (t1._hx_index) {
					case 0:
					{
						object r = ( t1 as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) == null )) {
							if ( ! (this.link(t1, t2, r)) ) {
								return false;
							}
							
							global::hscript.TType __temp_expr2 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r, "r", 114, t2)) );
							return true;
						}
						
						return this.tryUnify(((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ), t2);
					}
					
					
					case 2:
					{
						switch (t2._hx_index) {
							case 0:
							{
								object r1 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r1, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r1)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr3 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r1, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r1, "r", 114, true)) ));
							}
							
							
							case 3:
							{
								return true;
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t21 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t21);
							}
							
							
							case 11:
							{
								object t22 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl2 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t22, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t22, "params", 1836776262, true)) ))) ), pl2));
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 5:
					{
						switch (t2._hx_index) {
							case 0:
							{
								object r2 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r2, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r2)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr4 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r2, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r2, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t23 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t23);
							}
							
							
							case 11:
							{
								object t24 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl21 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t24, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t24, "params", 1836776262, true)) ))) ), pl21));
							}
							
							
							default:
							{
								return true;
							}
							
						}
						
					}
					
					
					case 8:
					{
						global::hscript.TType _g = ( t1 as global::hscript.TType_TNull ).t;
						switch (t2._hx_index) {
							case 0:
							{
								object r3 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r3, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r3)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr5 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r3, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r3, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								global::hscript.TType t11 = _g;
								return this.tryUnify(t11, t2);
							}
							
							
							case 8:
							{
								global::hscript.TType _g1 = ( t2 as global::hscript.TType_TNull ).t;
								global::hscript.TType t12 = _g;
								return this.tryUnify(t12, t2);
							}
							
							
							case 11:
							{
								object t25 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl22 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t25, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t25, "params", 1836776262, true)) ))) ), pl22));
							}
							
							
							default:
							{
								global::hscript.TType t13 = _g;
								return this.tryUnify(t13, t2);
							}
							
						}
						
					}
					
					
					case 9:
					{
						object _g2 = ( t1 as global::hscript.TType_TInst ).c;
						global::Array<object> _g3 = ( t1 as global::hscript.TType_TInst ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r4 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r4, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r4)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr6 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r4, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r4, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t26 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t26);
							}
							
							
							case 9:
							{
								object cl2 = ( t2 as global::hscript.TType_TInst ).c;
								global::Array<object> pl23 = ( t2 as global::hscript.TType_TInst ).args;
								global::Array<object> pl1 = _g3;
								object cl1 = _g2;
								while (( ! (global::haxe.lang.Runtime.refEq(cl1, cl2)) )) {
									if (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cl1, "interfaces", 1695633562, true)) ))) ) != null )) {
										int _g4 = 0;
										global::Array<object> _g5 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cl1, "interfaces", 1695633562, true)) ))) );
										while (( _g4 < _g5.length )) {
											global::hscript.TType i = ((global::hscript.TType) (_g5[_g4]) );
											 ++ _g4;
											if (( i._hx_index == 9 )) {
												object cli = ( i as global::hscript.TType_TInst ).c;
												global::Array<object> args = ( i as global::hscript.TType_TInst ).args;
												{
													global::Array<object> _g6 = new global::Array<object>(new object[]{});
													{
														int _g7 = 0;
														while (( _g7 < args.length )) {
															global::hscript.TType a = ((global::hscript.TType) (args[_g7]) );
															 ++ _g7;
															_g6.push(this.apply(a, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cl1, "params", 1836776262, true)) ))) ), pl1));
														}
														
													}
													
													global::hscript.TType i1 = global::hscript.TType.TInst(cli, _g6);
													if (this.tryUnify(i1, t2)) {
														return true;
													}
													
												}
												
											}
											else {
												throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
											}
											
										}
										
									}
									
									{
										global::hscript.TType _g8 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cl1, "superClass", 671590589, true)) );
										if (( _g8 == null )) {
											return false;
										}
										else if (( _g8._hx_index == 9 )) {
											object c = ( _g8 as global::hscript.TType_TInst ).c;
											global::Array<object> args1 = ( _g8 as global::hscript.TType_TInst ).args;
											{
												global::Array<object> _g9 = new global::Array<object>(new object[]{});
												{
													int _g10 = 0;
													while (( _g10 < args1.length )) {
														global::hscript.TType a1 = ((global::hscript.TType) (args1[_g10]) );
														 ++ _g10;
														_g9.push(this.apply(a1, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cl1, "params", 1836776262, true)) ))) ), pl1));
													}
													
												}
												
												pl1 = _g9;
												cl1 = c;
											}
											
										}
										else {
											throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
										}
										
									}
									
								}
								
								{
									int _g11 = 0;
									int _g12 = pl1.length;
									while (( _g11 < _g12 )) {
										int i2 = _g11++;
										if ( ! (this.typeEq(((global::hscript.TType) (pl1[i2]) ), ((global::hscript.TType) (pl23[i2]) ))) ) {
											return false;
										}
										
									}
									
								}
								
								return true;
							}
							
							
							case 11:
							{
								object t27 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl24 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t27, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t27, "params", 1836776262, true)) ))) ), pl24));
							}
							
							
							case 14:
							{
								global::Array<object> fl = ( t2 as global::hscript.TType_TAnon ).fields;
								global::Array<object> pl11 = _g3;
								object cl11 = _g2;
								{
									int _g13 = 0;
									int _g14 = fl.length;
									while (( _g13 < _g14 )) {
										int i3 = _g13++;
										object f2 = fl[i3];
										object f1 = null;
										object cl = cl11;
										while (true) {
											f1 = (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(cl, "fields", 9342585, true)) )) ))) ).@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "name", 1224700491, true)))).toDynamic();
											if (( f1 != null )) {
												break;
											}
											
											if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cl, "superClass", 671590589, true)) ) == null )) {
												return false;
											}
											
											global::hscript.TType _g15 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cl, "superClass", 671590589, true)) );
											if (( _g15 == null )) {
												throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
											}
											else if (( _g15._hx_index == 9 )) {
												global::Array<object> _g16 = ( _g15 as global::hscript.TType_TInst ).args;
												object c1 = ( _g15 as global::hscript.TType_TInst ).c;
												cl = c1;
											}
											else {
												throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
											}
											
										}
										
										if ( ! (this.typeEq(((global::hscript.TType) (global::haxe.lang.Runtime.getField(f1, "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f2, "t", 116, true)) ))) ) {
											return false;
										}
										
									}
									
								}
								
								return true;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 11:
					{
						object _g17 = ( t1 as global::hscript.TType_TType ).t;
						global::Array<object> _g18 = ( t1 as global::hscript.TType_TType ).args;
						switch (t2._hx_index) {
							case 0:
							{
								object r5 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r5, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r5)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr7 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r5, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r5, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								global::Array<object> pl12 = _g18;
								object t14 = _g17;
								return this.tryUnify(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t14, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t14, "params", 1836776262, true)) ))) ), pl12), t2);
							}
							
							
							case 8:
							{
								global::hscript.TType _g19 = ( t2 as global::hscript.TType_TNull ).t;
								global::Array<object> pl13 = _g18;
								object t15 = _g17;
								return this.tryUnify(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t15, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t15, "params", 1836776262, true)) ))) ), pl13), t2);
							}
							
							
							case 11:
							{
								object _g20 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> _g21 = ( t2 as global::hscript.TType_TType ).args;
								global::Array<object> pl14 = _g18;
								object t16 = _g17;
								return this.tryUnify(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t16, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t16, "params", 1836776262, true)) ))) ), pl14), t2);
							}
							
							
							default:
							{
								global::Array<object> pl15 = _g18;
								object t17 = _g17;
								return this.tryUnify(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t17, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t17, "params", 1836776262, true)) ))) ), pl15), t2);
							}
							
						}
						
					}
					
					
					case 13:
					{
						global::Array<object> _g22 = ( t1 as global::hscript.TType_TFun ).args;
						global::hscript.TType _g23 = ( t1 as global::hscript.TType_TFun ).ret;
						switch (t2._hx_index) {
							case 0:
							{
								object r6 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r6, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r6)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr8 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r6, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r6, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t28 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t28);
							}
							
							
							case 11:
							{
								object t29 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl25 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t29, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t29, "params", 1836776262, true)) ))) ), pl25));
							}
							
							
							case 12:
							{
								object _g24 = ( t2 as global::hscript.TType_TAbstract ).a;
								global::Array<object> _g25 = ( t2 as global::hscript.TType_TAbstract ).args;
								{
									global::Array<object> _g26 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g24, "params", 1836776262, true)) ))) );
									global::hscript.TType _g27 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(_g24, "t", 116, true)) );
									if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g24, "name", 1224700491, true)) == "haxe.Function" )) {
										return true;
									}
									
								}
								
								break;
							}
							
							
							case 13:
							{
								global::Array<object> args2 = ( t2 as global::hscript.TType_TFun ).args;
								global::hscript.TType r21 = ( t2 as global::hscript.TType_TFun ).ret;
								global::hscript.TType r11 = _g23;
								global::Array<object> args11 = _g22;
								if (( args11.length == args2.length )) {
									{
										int _g28 = 0;
										int _g29 = args11.length;
										while (( _g28 < _g29 )) {
											int i4 = _g28++;
											object a11 = args11[i4];
											object a2 = args2[i4];
											if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a2, "opt", 5545011, true)) && ((bool) (( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a11, "opt", 5545011, true))) )) ) )) {
												return false;
											}
											
											if ( ! (this.tryUnify(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a2, "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(a11, "t", 116, true)) ))) ) {
												return false;
											}
											
										}
										
									}
									
									return this.tryUnify(r11, r21);
								}
								
								break;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					case 14:
					{
						global::Array<object> _g30 = ( t1 as global::hscript.TType_TAnon ).fields;
						switch (t2._hx_index) {
							case 0:
							{
								object r7 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r7, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r7)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr9 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r7, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r7, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t210 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t210);
							}
							
							
							case 11:
							{
								object t211 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl26 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t211, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t211, "params", 1836776262, true)) ))) ), pl26));
							}
							
							
							case 14:
							{
								global::Array<object> a21 = ( t2 as global::hscript.TType_TAnon ).fields;
								global::Array<object> a12 = _g30;
								if (( a21.length == 0 )) {
									return true;
								}
								
								global::haxe.ds.StringMap<object> m = new global::haxe.ds.StringMap<object>();
								{
									int _g31 = 0;
									while (( _g31 < a12.length )) {
										object f = a12[_g31];
										 ++ _g31;
										m.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), f);
									}
									
								}
								
								{
									int _g32 = 0;
									while (( _g32 < a21.length )) {
										object f21 = a21[_g32];
										 ++ _g32;
										object f11 = (m.@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f21, "name", 1224700491, true)))).@value;
										if (( f11 == null )) {
											if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f21, "opt", 5545011, true))) {
												continue;
											}
											
											return false;
										}
										
										if ( ! (this.typeEq(((global::hscript.TType) (global::haxe.lang.Runtime.getField(f11, "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f21, "t", 116, true)) ))) ) {
											return false;
										}
										
									}
									
								}
								
								return true;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
					
					default:
					{
						switch (t2._hx_index) {
							case 0:
							{
								object r8 = ( t2 as global::hscript.TType_TMono ).r;
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r8, "r", 114, true)) ) == null )) {
									if ( ! (this.link(t2, t1, r8)) ) {
										return false;
									}
									
									global::hscript.TType __temp_expr1 = ((global::hscript.TType) (global::haxe.lang.Runtime.setField(r8, "r", 114, t1)) );
									return true;
								}
								
								return this.tryUnify(t1, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r8, "r", 114, true)) ));
							}
							
							
							case 5:
							{
								return true;
							}
							
							
							case 8:
							{
								global::hscript.TType t212 = ( t2 as global::hscript.TType_TNull ).t;
								return this.tryUnify(t1, t212);
							}
							
							
							case 11:
							{
								object t213 = ( t2 as global::hscript.TType_TType ).t;
								global::Array<object> pl27 = ( t2 as global::hscript.TType_TType ).args;
								return this.tryUnify(t1, this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t213, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t213, "params", 1836776262, true)) ))) ), pl27));
							}
							
							
							default:
							{
								break;
							}
							
						}
						
						break;
					}
					
				}
				
				return this.typeEq(t1, t2);
			}
		}
		
		
		public virtual void unify(global::hscript.TType t1, global::hscript.TType t2, object e) {
			if ( ! (this.tryUnify(t1, t2)) ) {
				global::hscript.ErrorDef e1 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(t1), " should be "), global::hscript.Checker.typeStr(t2)));
				global::hscript.Error e2 = new global::hscript.Error(((global::hscript.ErrorDef) (e1) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(e, "line", 1202919412, true)) ));
				if ( ! (this.isCompletion) ) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown(e2)) );
				}
				
			}
			
		}
		
		
		public virtual global::hscript.TType apply(global::hscript.TType t, global::Array<object> @params, global::Array<object> args) {
			if (( args.length != @params.length )) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown("Invalid number of type parameters")) );
			}
			
			if (( args.length == 0 )) {
				return t;
			}
			
			global::haxe.ds.EnumValueMap<object, object> subst = new global::haxe.ds.EnumValueMap<object, object>();
			{
				int _g = 0;
				int _g1 = @params.length;
				while (( _g < _g1 )) {
					int i = _g++;
					subst.@set(((global::hscript.TType) (@params[i]) ), ((global::hscript.TType) (args[i]) ));
				}
				
			}
			
			global::haxe.lang.Function[] map = new global::haxe.lang.Function[]{null};
			global::hscript.Checker _gthis = this;
			map[0] = new global::hscript.Checker_apply_681__Fun(subst, map, _gthis);
			return ((global::hscript.TType) (((global::haxe.lang.Function) (map[0]) ).__hx_invoke1_o(default(double), t)) );
		}
		
		
		public virtual global::hscript.TType mapType(global::hscript.TType t, global::haxe.lang.Function f) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						object r = ( t as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) == null )) {
							return t;
						}
						
						return ((global::hscript.TType) (f.__hx_invoke1_o(default(double), t)) );
					}
					
					
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					{
						return t;
					}
					
					
					case 6:
					{
						string _g = ( t as global::hscript.TType_TParam ).name;
						return t;
					}
					
					
					case 7:
					{
						string _g1 = ( t as global::hscript.TType_TUnresolved ).name;
						return t;
					}
					
					
					case 8:
					{
						global::hscript.TType t1 = ( t as global::hscript.TType_TNull ).t;
						return global::hscript.TType.TNull(((global::hscript.TType) (f.__hx_invoke1_o(default(double), t1)) ));
					}
					
					
					case 9:
					{
						global::Array<object> _g2 = ( t as global::hscript.TType_TInst ).args;
						if (( _g2.length == 0 )) {
							return t;
						}
						else {
							global::Array<object> args = _g2;
							object c = ( t as global::hscript.TType_TInst ).c;
							global::Array<object> _g3 = new global::Array<object>(new object[]{});
							{
								int _g4 = 0;
								while (( _g4 < args.length )) {
									global::hscript.TType t2 = ((global::hscript.TType) (args[_g4]) );
									 ++ _g4;
									_g3.push(((global::hscript.TType) (f.__hx_invoke1_o(default(double), t2)) ));
								}
								
							}
							
							return global::hscript.TType.TInst(c, _g3);
						}
						
					}
					
					
					case 10:
					{
						global::Array<object> _g5 = ( t as global::hscript.TType_TEnum ).args;
						if (( _g5.length == 0 )) {
							return t;
						}
						else {
							global::Array<object> args1 = _g5;
							object e = ( t as global::hscript.TType_TEnum ).e;
							global::Array<object> _g6 = new global::Array<object>(new object[]{});
							{
								int _g7 = 0;
								while (( _g7 < args1.length )) {
									global::hscript.TType t3 = ((global::hscript.TType) (args1[_g7]) );
									 ++ _g7;
									_g6.push(((global::hscript.TType) (f.__hx_invoke1_o(default(double), t3)) ));
								}
								
							}
							
							return global::hscript.TType.TEnum(e, _g6);
						}
						
					}
					
					
					case 11:
					{
						global::Array<object> _g8 = ( t as global::hscript.TType_TType ).args;
						if (( _g8.length == 0 )) {
							return t;
						}
						else {
							global::Array<object> args2 = _g8;
							object t4 = ( t as global::hscript.TType_TType ).t;
							global::Array<object> _g9 = new global::Array<object>(new object[]{});
							{
								int _g10 = 0;
								while (( _g10 < args2.length )) {
									global::hscript.TType t5 = ((global::hscript.TType) (args2[_g10]) );
									 ++ _g10;
									_g9.push(((global::hscript.TType) (f.__hx_invoke1_o(default(double), t5)) ));
								}
								
							}
							
							return global::hscript.TType.TType_TType(t4, _g9);
						}
						
					}
					
					
					case 12:
					{
						global::Array<object> _g11 = ( t as global::hscript.TType_TAbstract ).args;
						if (( _g11.length == 0 )) {
							return t;
						}
						else {
							global::Array<object> args3 = _g11;
							object a = ( t as global::hscript.TType_TAbstract ).a;
							global::Array<object> _g12 = new global::Array<object>(new object[]{});
							{
								int _g13 = 0;
								while (( _g13 < args3.length )) {
									global::hscript.TType t6 = ((global::hscript.TType) (args3[_g13]) );
									 ++ _g13;
									_g12.push(((global::hscript.TType) (f.__hx_invoke1_o(default(double), t6)) ));
								}
								
							}
							
							return global::hscript.TType.TAbstract(a, _g12);
						}
						
					}
					
					
					case 13:
					{
						global::Array<object> args4 = ( t as global::hscript.TType_TFun ).args;
						global::hscript.TType ret = ( t as global::hscript.TType_TFun ).ret;
						global::Array<object> _g14 = new global::Array<object>(new object[]{});
						{
							int _g15 = 0;
							while (( _g15 < args4.length )) {
								object a1 = args4[_g15];
								 ++ _g15;
								string a2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a1, "name", 1224700491, true));
								bool a3 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(a1, "opt", 5545011, true));
								object __temp_stmt3 = null;
								{
									global::hscript.TType __temp_odecl1 = ((global::hscript.TType) (f.__hx_invoke1_o(default(double), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(a1, "t", 116, true)) ))) );
									__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl1, a3, a2}, new int[]{}, new double[]{});
								}
								
								_g14.push(__temp_stmt3);
							}
							
						}
						
						return global::hscript.TType.TFun(_g14, ((global::hscript.TType) (f.__hx_invoke1_o(default(double), ret)) ));
					}
					
					
					case 14:
					{
						global::Array<object> fields = ( t as global::hscript.TType_TAnon ).fields;
						global::Array<object> _g16 = new global::Array<object>(new object[]{});
						{
							int _g17 = 0;
							while (( _g17 < fields.length )) {
								object af = fields[_g17];
								 ++ _g17;
								string af1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(af, "name", 1224700491, true));
								bool af2 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(af, "opt", 5545011, true));
								object __temp_stmt4 = null;
								{
									global::hscript.TType __temp_odecl2 = ((global::hscript.TType) (f.__hx_invoke1_o(default(double), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(af, "t", 116, true)) ))) );
									__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl2, af2, af1}, new int[]{}, new double[]{});
								}
								
								_g16.push(__temp_stmt4);
							}
							
						}
						
						return global::hscript.TType.TAnon(_g16);
					}
					
					
					case 15:
					{
						global::haxe.lang.Function l = ( t as global::hscript.TType_TLazy ).f;
						return ((global::hscript.TType) (f.__hx_invoke1_o(default(double), ((global::hscript.TType) (l.__hx_invoke0_o()) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public virtual global::hscript.TType follow(global::hscript.TType t) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						object r = ( t as global::hscript.TType_TMono ).r;
						if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ) != null )) {
							return this.follow(((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "r", 114, true)) ));
						}
						else {
							return t;
						}
						
					}
					
					
					case 8:
					{
						global::hscript.TType t1 = ( t as global::hscript.TType_TNull ).t;
						return this.follow(t1);
					}
					
					
					case 11:
					{
						object t2 = ( t as global::hscript.TType_TType ).t;
						global::Array<object> args = ( t as global::hscript.TType_TType ).args;
						return this.follow(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(t2, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(t2, "params", 1836776262, true)) ))) ), args));
					}
					
					
					case 15:
					{
						global::haxe.lang.Function f = ( t as global::hscript.TType_TLazy ).f;
						return this.follow(((global::hscript.TType) (f.__hx_invoke0_o()) ));
					}
					
					
					default:
					{
						return t;
					}
					
				}
				
			}
		}
		
		
		public virtual global::Array<object> getFields(global::hscript.TType t) {
			unchecked {
				global::Array<object> fields = new global::Array<object>(new object[]{});
				global::hscript.Checker _gthis = this;
				{
					global::hscript.TType _g = this.follow(t);
					switch (_g._hx_index) {
						case 9:
						{
							object _g1 = ( _g as global::hscript.TType_TInst ).c;
							{
								object[] c = new object[]{_g1};
								global::Array<object> args = ( _g as global::hscript.TType_TInst ).args;
								{
									global::haxe.lang.Function map = new global::hscript.Checker_getFields_731__Fun(c, args, _gthis);
									while (( c[0] != null )) {
										{
											object fname = ((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<object>(((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(c[0], "fields", 9342585, true)) )) ))) ))) );
											while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(fname, "hasNext", 407283053, null))) {
												string fname1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(fname, "next", 1224901875, null));
												object f = (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(c[0], "fields", 9342585, true)) )) ))) ).@get(fname1)).toDynamic();
												if (( ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f, "isPublic", 1063066675, true))) ) || ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(f, "complete", 2143813817, true))) ) )) {
													continue;
												}
												
												string name = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true));
												global::hscript.TType t1 = ((global::hscript.TType) (map.__hx_invoke1_o(default(double), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f, "t", 116, true)) ))) );
												if (( this.allowAsync && name.StartsWith("a_") )) {
													t1 = this.unasync(t1);
													name = global::haxe.lang.StringExt.substr(name, 2, default(global::haxe.lang.Null<int>));
												}
												
												fields.push(new global::haxe.lang.DynamicObject(new int[]{116, 1224700491}, new object[]{t1, name}, new int[]{}, new double[]{}));
											}
											
										}
										
										if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c[0], "isInterface", 408610927, true)) && ((bool) (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c[0], "interfaces", 1695633562, true)) ))) ) != null )) ) )) {
											int _g2 = 0;
											global::Array<object> _g3 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c[0], "interfaces", 1695633562, true)) ))) );
											while (( _g2 < _g3.length )) {
												global::hscript.TType i = ((global::hscript.TType) (_g3[_g2]) );
												 ++ _g2;
												{
													int _g4 = 0;
													global::Array<object> _g5 = this.getFields(i);
													while (( _g4 < _g5.length )) {
														object f1 = _g5[_g4];
														 ++ _g4;
														string f2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f1, "name", 1224700491, true));
														object __temp_stmt4 = null;
														{
															global::hscript.TType __temp_odecl1 = ((global::hscript.TType) (map.__hx_invoke1_o(default(double), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f1, "t", 116, true)) ))) );
															__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{116, 1224700491}, new object[]{__temp_odecl1, f2}, new int[]{}, new double[]{});
														}
														
														fields.push(__temp_stmt4);
													}
													
												}
												
											}
											
										}
										
										if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(c[0], "superClass", 671590589, true)) ) == null )) {
											break;
										}
										
										{
											global::hscript.TType _g6 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(c[0], "superClass", 671590589, true)) );
											if (( _g6 == null )) {
												break;
											}
											else if (( _g6._hx_index == 9 )) {
												object csup = ( _g6 as global::hscript.TType_TInst ).c;
												global::Array<object> args1 = ( _g6 as global::hscript.TType_TInst ).args;
												{
													global::haxe.lang.Function curMap = map;
													map = new global::hscript.Checker_getFields_753__Fun(curMap, csup, args1, _gthis);
													c[0] = csup;
												}
												
											}
											else {
												break;
											}
											
										}
										
									}
									
								}
								
							}
							
							break;
						}
						
						
						case 14:
						{
							global::Array<object> fl = ( _g as global::hscript.TType_TAnon ).fields;
							{
								int _g7 = 0;
								while (( _g7 < fl.length )) {
									object f3 = fl[_g7];
									 ++ _g7;
									object __temp_stmt5 = null;
									{
										string __temp_odecl2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f3, "name", 1224700491, true));
										global::hscript.TType __temp_odecl3 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(f3, "t", 116, true)) );
										__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{116, 1224700491}, new object[]{__temp_odecl3, __temp_odecl2}, new int[]{}, new double[]{});
									}
									
									fields.push(__temp_stmt5);
								}
								
							}
							
							break;
						}
						
						
						default:
						{
							break;
						}
						
					}
					
				}
				
				return fields;
			}
		}
		
		
		public virtual global::hscript.TType getField(global::hscript.TType t, string f, object e, global::haxe.lang.Null<bool> forWrite) {
			unchecked {
				bool forWrite1 = ( ( ! (forWrite.hasValue) ) ? (false) : ((forWrite).@value) );
				global::hscript.TType _g = this.follow(t);
				switch (_g._hx_index) {
					case 5:
					{
						return this.makeMono();
					}
					
					
					case 9:
					{
						object c = ( _g as global::hscript.TType_TInst ).c;
						global::Array<object> args = ( _g as global::hscript.TType_TInst ).args;
						object cf = (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(c, "fields", 9342585, true)) )) ))) ).@get(f)).toDynamic();
						if (( ( cf == null ) && this.allowAsync )) {
							cf = (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::haxe.lang.Runtime.getField(c, "fields", 9342585, true)) )) ))) ).@get(global::haxe.lang.Runtime.concat("a_", f))).toDynamic();
							if (( cf != null )) {
								bool isPublic = true;
								global::Array<object> cf1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cf, "params", 1836776262, true)) ))) );
								string cf2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(cf, "name", 1224700491, true));
								global::hscript.TType cf3 = this.unasync(((global::hscript.TType) (global::haxe.lang.Runtime.getField(cf, "t", 116, true)) ));
								{
									bool __temp_odecl1 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(cf, "complete", 2143813817, true));
									cf = new global::haxe.lang.DynamicObject(new int[]{116, 1055698607, 1063066675, 1224700491, 1836776262, 2143813817}, new object[]{cf3, false, isPublic, cf2, cf1, __temp_odecl1}, new int[]{}, new double[]{});
								}
								
								if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cf, "t", 116, true)) ) == null )) {
									cf = null;
								}
								
							}
							
						}
						
						if (( ( ((bool) (( cf == null )) ) && global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c, "isInterface", 408610927, true)) ) && ( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "interfaces", 1695633562, true)) ))) ) != null ) )) {
							int _g1 = 0;
							global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "interfaces", 1695633562, true)) ))) );
							while (( _g1 < _g2.length )) {
								global::hscript.TType i = ((global::hscript.TType) (_g2[_g1]) );
								 ++ _g1;
								global::hscript.TType ft = this.getField(i, f, e, new global::haxe.lang.Null<bool>(forWrite1, true));
								if (( ft != null )) {
									return this.apply(ft, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "params", 1836776262, true)) ))) ), args);
								}
								
							}
							
						}
						
						if (( cf == null )) {
							if (( ((global::hscript.TType) (global::haxe.lang.Runtime.getField(c, "superClass", 671590589, true)) ) == null )) {
								return null;
							}
							
							global::hscript.TType ft1 = this.getField(((global::hscript.TType) (global::haxe.lang.Runtime.getField(c, "superClass", 671590589, true)) ), f, e, new global::haxe.lang.Null<bool>(forWrite1, true));
							if (( ft1 != null )) {
								ft1 = this.apply(ft1, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "params", 1836776262, true)) ))) ), args);
							}
							
							return ft1;
						}
						
						if (( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(cf, "isPublic", 1063066675, true))) )) {
							global::hscript.ErrorDef e1 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Can\'t access private field ", f), " on "), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "name", 1224700491, true))));
							global::hscript.Error e2 = new global::hscript.Error(((global::hscript.ErrorDef) (e1) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(e, "line", 1202919412, true)) ));
							if ( ! (this.isCompletion) ) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(e2)) );
							}
							
						}
						
						if (( forWrite1 && ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(cf, "canWrite", 1055698607, true))) ) )) {
							global::hscript.ErrorDef e3 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Can\'t write readonly field ", f), " on "), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(c, "name", 1224700491, true))));
							global::hscript.Error e4 = new global::hscript.Error(((global::hscript.ErrorDef) (e3) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(e, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(e, "line", 1202919412, true)) ));
							if ( ! (this.isCompletion) ) {
								throw ((global::System.Exception) (global::haxe.Exception.thrown(e4)) );
							}
							
						}
						
						global::hscript.TType t1 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(cf, "t", 116, true)) );
						if (( ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cf, "params", 1836776262, true)) ))) ) != null )) {
							global::Array<object> cf4 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cf, "params", 1836776262, true)) ))) );
							global::Array<object> _g3 = new global::Array<object>(new object[]{});
							{
								int _g4 = 0;
								int _g5 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(cf, "params", 1836776262, true)) ))) ).length;
								while (( _g4 < _g5 )) {
									int i1 = _g4++;
									_g3.push(this.makeMono());
								}
								
							}
							
							t1 = this.apply(t1, cf4, _g3);
						}
						
						return this.apply(t1, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c, "params", 1836776262, true)) ))) ), args);
					}
					
					
					case 14:
					{
						global::Array<object> fields = ( _g as global::hscript.TType_TAnon ).fields;
						{
							int _g6 = 0;
							while (( _g6 < fields.length )) {
								object af = fields[_g6];
								 ++ _g6;
								if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(af, "name", 1224700491, true)) == f )) {
									return ((global::hscript.TType) (global::haxe.lang.Runtime.getField(af, "t", 116, true)) );
								}
								
							}
							
						}
						
						return null;
					}
					
					
					default:
					{
						return null;
					}
					
				}
				
			}
		}
		
		
		public virtual global::hscript.TType unasync(global::hscript.TType t) {
			unchecked {
				{
					global::hscript.TType _g = this.follow(t);
					if (( _g._hx_index == 13 )) {
						global::Array<object> args = ( _g as global::hscript.TType_TFun ).args;
						global::hscript.TType ret = ( _g as global::hscript.TType_TFun ).ret;
						if (( args.length > 0 )) {
							global::Array<object> rargs = args.copy();
							{
								global::hscript.TType _g1 = this.follow(((global::hscript.TType) (global::haxe.lang.Runtime.getField((rargs.shift()).@value, "t", 116, true)) ));
								if (( _g1._hx_index == 13 )) {
									global::Array<object> _g2 = ( _g1 as global::hscript.TType_TFun ).args;
									global::hscript.TType _g3 = ( _g1 as global::hscript.TType_TFun ).ret;
									if (( _g2.length == 1 )) {
										object r = _g2[0];
										return global::hscript.TType.TFun(rargs, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(r, "t", 116, true)) ));
									}
									
								}
								
							}
							
						}
						
					}
					
				}
				
				return null;
			}
		}
		
		
		public virtual global::hscript.TType typeExprWith(object expr, global::hscript.TType t) {
			global::hscript.TType et = this.typeExpr(expr, global::hscript._Checker.WithType.WithType_WithType(t));
			this.unify(et, t, expr);
			return t;
		}
		
		
		public virtual global::hscript.TType makeMono() {
			return global::hscript.TType.TMono(new global::haxe.lang.DynamicObject(new int[]{114}, new object[]{null}, new int[]{}, new double[]{}));
		}
		
		
		public virtual global::hscript.TType makeIterator(global::hscript.TType t) {
			object __temp_stmt3 = null;
			{
				global::hscript.TType __temp_odecl1 = global::hscript.TType.TFun(new global::Array<object>(new object[]{}), t);
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl1, false, "next"}, new int[]{}, new double[]{});
			}
			
			object __temp_stmt4 = null;
			{
				global::hscript.TType __temp_odecl2 = global::hscript.TType.TFun(new global::Array<object>(new object[]{}), global::hscript.TType.TBool);
				__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{__temp_odecl2, false, "hasNext"}, new int[]{}, new double[]{});
			}
			
			return global::hscript.TType.TAnon(new global::Array<object>(new object[]{__temp_stmt3, __temp_stmt4}));
		}
		
		
		public virtual object mk(global::hscript.ExprDef e, object p) {
			{
				int __temp_odecl1 = ((int) (global::haxe.lang.Runtime.getField_f(p, "pmin", 1247475490, true)) );
				int __temp_odecl2 = ((int) (global::haxe.lang.Runtime.getField_f(p, "pmax", 1247473716, true)) );
				string __temp_odecl3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p, "origin", 1258363366, true));
				int __temp_odecl4 = ((int) (global::haxe.lang.Runtime.getField_f(p, "line", 1202919412, true)) );
				return new global::haxe.lang.DynamicObject(new int[]{101, 1258363366}, new object[]{e, __temp_odecl3}, new int[]{1202919412, 1247473716, 1247475490}, new double[]{((double) (__temp_odecl4) ), ((double) (__temp_odecl2) ), ((double) (__temp_odecl1) )});
			}
			
		}
		
		
		public virtual bool isString(global::hscript.TType t) {
			unchecked {
				t = this.follow(t);
				if (( t._hx_index == 9 )) {
					object _g = ( t as global::hscript.TType_TInst ).c;
					global::Array<object> _g1 = ( t as global::hscript.TType_TInst ).args;
					object _g2 = global::haxe.lang.Runtime.getField(_g, "constructor", 398798074, true);
					global::haxe.ds.StringMap<object> _g3 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g, "fields", 9342585, true)) ))) );
					global::Array<object> _g4 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g, "interfaces", 1695633562, true)) ))) );
					global::haxe.lang.Null<bool> _g5 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(_g, "isInterface", 408610927, true));
					global::Array<object> _g6 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g, "params", 1836776262, true)) ))) );
					global::haxe.ds.StringMap<object> _g7 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g, "statics", 912604165, true)) ))) );
					global::hscript.TType _g8 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(_g, "superClass", 671590589, true)) );
					if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g, "name", 1224700491, true)) == "String" )) {
						return true;
					}
					else {
						return false;
					}
					
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public virtual void onCompletion(object expr, global::hscript.TType t) {
			if (this.isCompletion) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(new global::hscript.Completion(((object) (expr) ), ((global::hscript.TType) (t) )))) );
			}
			
		}
		
		
		public virtual global::hscript.TType typeField(object o, string f, object expr, bool forWrite) {
			global::hscript.TType ot = this.typeExpr(o, global::hscript._Checker.WithType.Value);
			if (( f == null )) {
				this.onCompletion(expr, ot);
			}
			
			global::hscript.TType ft = this.getField(ot, f, expr, new global::haxe.lang.Null<bool>(forWrite, true));
			if (( ft == null )) {
				{
					global::hscript.ErrorDef e = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(ot), " has no field "), f));
					global::hscript.Error e1 = new global::hscript.Error(((global::hscript.ErrorDef) (e) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
					if ( ! (this.isCompletion) ) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(e1)) );
					}
					
				}
				
				ft = global::hscript.TType.TDynamic;
			}
			
			return ft;
		}
		
		
		public virtual global::hscript.TType typeExpr(object expr, global::hscript._Checker.WithType withType) {
			unchecked {
				if (( ( expr == null ) && this.isCompletion )) {
					if (( withType._hx_index == 2 )) {
						global::hscript.TType t = ( withType as global::hscript._Checker.WithType_WithType ).t;
						return t;
					}
					else {
						return global::hscript.TType.TDynamic;
					}
					
				}
				
				global::hscript.Checker _gthis = this;
				{
					global::hscript.ExprDef _g = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(expr, "e", 101, true)) );
					switch (_g._hx_index) {
						case 0:
						{
							global::hscript.Const c = ( _g as global::hscript.ExprDef_EConst ).c;
							switch (c._hx_index) {
								case 0:
								{
									int _g1 = ( c as global::hscript.Const_CInt ).v;
									return global::hscript.TType.TInt;
								}
								
								
								case 1:
								{
									double _g2 = ( c as global::hscript.Const_CFloat ).f;
									return global::hscript.TType.TFloat;
								}
								
								
								case 2:
								{
									string _g3 = ( c as global::hscript.Const_CString ).s;
									return this.types.t_string;
								}
								
								
							}
							
							break;
						}
						
						
						case 1:
						{
							string v = ( _g as global::hscript.ExprDef_EIdent ).v;
							{
								global::hscript.TType l = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@get(v)).@value) );
								if (( l != null )) {
									return l;
								}
								
								global::hscript.TType g = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.globals) )) ))) ).@get(v)).@value) );
								if (( g != null )) {
									if (( g == null )) {
										return g;
									}
									else if (( g._hx_index == 15 )) {
										global::haxe.lang.Function f = ( g as global::hscript.TType_TLazy ).f;
										return ((global::hscript.TType) (f.__hx_invoke0_o()) );
									}
									else {
										return g;
									}
									
								}
								
								if (this.allowAsync) {
									g = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.globals) )) ))) ).@get(global::haxe.lang.Runtime.concat("a_", v))).@value) );
									if (( g != null )) {
										g = this.unasync(g);
									}
									
									if (( g != null )) {
										return g;
									}
									
								}
								
								switch (v) {
									case "null":
									{
										return this.makeMono();
									}
									
									
									case "trace":
									{
										return global::hscript.TType.TDynamic;
									}
									
									
									case "false":
									case "true":
									{
										return global::hscript.TType.TBool;
									}
									
									
									default:
									{
										if (this.isCompletion) {
											return global::hscript.TType.TDynamic;
										}
										
										{
											global::hscript.ErrorDef e = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Unknown identifier ", v));
											global::hscript.Error e1 = new global::hscript.Error(((global::hscript.ErrorDef) (e) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
											if ( ! (this.isCompletion) ) {
												throw ((global::System.Exception) (global::haxe.Exception.thrown(e1)) );
											}
											
										}
										
										break;
									}
									
								}
								
							}
							
							break;
						}
						
						
						case 2:
						{
							string n = ( _g as global::hscript.ExprDef_EVar ).n;
							global::hscript.CType t1 = ( _g as global::hscript.ExprDef_EVar ).t;
							object init = ( _g as global::hscript.ExprDef_EVar ).e;
							global::hscript.TType vt = ( (( t1 == null )) ? (this.makeMono()) : (this.makeType(t1, expr)) );
							if (( init != null )) {
								global::hscript.TType et = this.typeExpr(init, ( (( t1 == null )) ? (global::hscript._Checker.WithType.Value) : (global::hscript._Checker.WithType.WithType_WithType(vt)) ));
								if (( t1 == null )) {
									vt = et;
								}
								else {
									this.unify(et, vt, init);
								}
								
							}
							
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(n, vt);
							return global::hscript.TType.TVoid;
						}
						
						
						case 3:
						{
							object e2 = ( _g as global::hscript.ExprDef_EParent ).e;
							return this.typeExpr(e2, withType);
						}
						
						
						case 4:
						{
							global::Array<object> el = ( _g as global::hscript.ExprDef_EBlock ).e;
							global::hscript.TType t2 = global::hscript.TType.TVoid;
							global::haxe.ds.StringMap<object> locals = this.saveLocals();
							{
								int _g4 = 0;
								while (( _g4 < el.length )) {
									object e3 = el[_g4];
									 ++ _g4;
									t2 = this.typeExpr(e3, ( (global::haxe.lang.Runtime.refEq(e3, el[( el.length - 1 )])) ? (withType) : (global::hscript._Checker.WithType.NoValue) ));
								}
								
							}
							
							this.locals = locals;
							return t2;
						}
						
						
						case 5:
						{
							object o = ( _g as global::hscript.ExprDef_EField ).e;
							string f1 = ( _g as global::hscript.ExprDef_EField ).f;
							return this.typeField(o, f1, expr, false);
						}
						
						
						case 6:
						{
							string op = ( _g as global::hscript.ExprDef_EBinop ).op;
							object e11 = ( _g as global::hscript.ExprDef_EBinop ).e1;
							object e21 = ( _g as global::hscript.ExprDef_EBinop ).e2;
							switch (op) {
								case "%":
								case "*":
								case "-":
								case "/":
								{
									global::hscript.TType t11 = this.typeExpr(e11, global::hscript._Checker.WithType.WithType_WithType(global::hscript.TType.TInt));
									global::hscript.TType t21 = this.typeExpr(e21, global::hscript._Checker.WithType.WithType_WithType(t11));
									if ( ! (this.tryUnify(t11, t21)) ) {
										this.unify(t21, t11, e21);
									}
									
									{
										global::hscript.TType _g5 = this.follow(t11);
										global::hscript.TType _g6 = this.follow(t21);
										switch (_g5._hx_index) {
											case 2:
											{
												switch (_g6._hx_index) {
													case 2:
													{
														if (( op == "/" )) {
															return global::hscript.TType.TFloat;
														}
														
														return global::hscript.TType.TInt;
													}
													
													
													case 3:
													case 5:
													{
														return global::hscript.TType.TFloat;
													}
													
													
													default:
													{
														this.unify(t11, global::hscript.TType.TFloat, e11);
														this.unify(t21, global::hscript.TType.TFloat, e21);
														break;
													}
													
												}
												
												break;
											}
											
											
											case 3:
											case 5:
											{
												switch (_g6._hx_index) {
													case 2:
													case 3:
													case 5:
													{
														return global::hscript.TType.TFloat;
													}
													
													
													default:
													{
														this.unify(t11, global::hscript.TType.TFloat, e11);
														this.unify(t21, global::hscript.TType.TFloat, e21);
														break;
													}
													
												}
												
												break;
											}
											
											
											default:
											{
												this.unify(t11, global::hscript.TType.TFloat, e11);
												this.unify(t21, global::hscript.TType.TFloat, e21);
												break;
											}
											
										}
										
									}
									
									break;
								}
								
								
								case "+":
								{
									global::hscript.TType t12 = this.typeExpr(e11, global::hscript._Checker.WithType.WithType_WithType(global::hscript.TType.TInt));
									global::hscript.TType t22 = this.typeExpr(e21, global::hscript._Checker.WithType.WithType_WithType(t12));
									this.tryUnify(t12, t22);
									{
										global::hscript.TType _g7 = this.follow(t12);
										global::hscript.TType _g8 = this.follow(t22);
										switch (_g7._hx_index) {
											case 2:
											{
												switch (_g8._hx_index) {
													case 2:
													{
														return global::hscript.TType.TInt;
													}
													
													
													case 3:
													{
														return global::hscript.TType.TFloat;
													}
													
													
													case 5:
													{
														return global::hscript.TType.TDynamic;
													}
													
													
													default:
													{
														global::hscript.TType t13 = _g7;
														global::hscript.TType t23 = _g8;
														{
															if (( this.isString(t13) || this.isString(t23) )) {
																return this.types.t_string;
															}
															
															this.unify(t13, global::hscript.TType.TFloat, e11);
															this.unify(t23, global::hscript.TType.TFloat, e21);
														}
														
														break;
													}
													
												}
												
												break;
											}
											
											
											case 3:
											{
												switch (_g8._hx_index) {
													case 2:
													case 3:
													{
														return global::hscript.TType.TFloat;
													}
													
													
													case 5:
													{
														return global::hscript.TType.TDynamic;
													}
													
													
													default:
													{
														global::hscript.TType t14 = _g7;
														global::hscript.TType t24 = _g8;
														{
															if (( this.isString(t14) || this.isString(t24) )) {
																return this.types.t_string;
															}
															
															this.unify(t14, global::hscript.TType.TFloat, e11);
															this.unify(t24, global::hscript.TType.TFloat, e21);
														}
														
														break;
													}
													
												}
												
												break;
											}
											
											
											case 5:
											{
												return global::hscript.TType.TDynamic;
											}
											
											
											default:
											{
												if (( _g8._hx_index == 5 )) {
													return global::hscript.TType.TDynamic;
												}
												else {
													global::hscript.TType t15 = _g7;
													global::hscript.TType t25 = _g8;
													{
														if (( this.isString(t15) || this.isString(t25) )) {
															return this.types.t_string;
														}
														
														this.unify(t15, global::hscript.TType.TFloat, e11);
														this.unify(t25, global::hscript.TType.TFloat, e21);
													}
													
												}
												
												break;
											}
											
										}
										
									}
									
									break;
								}
								
								
								case "...":
								{
									this.typeExprWith(e11, global::hscript.TType.TInt);
									this.typeExprWith(e21, global::hscript.TType.TInt);
									return this.makeIterator(global::hscript.TType.TInt);
								}
								
								
								case "&":
								case "<<":
								case ">>":
								case ">>>":
								case "^":
								case "|":
								{
									this.typeExprWith(e11, global::hscript.TType.TInt);
									this.typeExprWith(e21, global::hscript.TType.TInt);
									return global::hscript.TType.TInt;
								}
								
								
								case "=":
								{
									if (this.allowDefine) {
										global::hscript.ExprDef _g9 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e11, "e", 101, true)) );
										if (( _g9._hx_index == 1 )) {
											string i = ( _g9 as global::hscript.ExprDef_EIdent ).v;
											if ((  ! (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).exists(i))  &&  ! (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.globals) )) ))) ).exists(i))  )) {
												global::hscript.TType vt1 = this.typeExpr(e21, global::hscript._Checker.WithType.Value);
												((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(i, vt1);
												return vt1;
											}
											
										}
										
									}
									
									global::hscript.TType vt2 = null;
									global::hscript.ExprDef _g10 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e11, "e", 101, true)) );
									if (( _g10._hx_index == 5 )) {
										object o1 = ( _g10 as global::hscript.ExprDef_EField ).e;
										string f2 = ( _g10 as global::hscript.ExprDef_EField ).f;
										vt2 = this.typeField(o1, f2, e11, true);
									}
									else {
										vt2 = this.typeExpr(e11, global::hscript._Checker.WithType.Value);
									}
									
									this.typeExprWith(e21, vt2);
									return vt2;
								}
								
								
								case "!=":
								case "==":
								{
									global::hscript.TType t16 = this.typeExpr(e11, global::hscript._Checker.WithType.Value);
									global::hscript.TType t26 = this.typeExpr(e21, global::hscript._Checker.WithType.WithType_WithType(t16));
									if ( ! (this.tryUnify(t16, t26)) ) {
										this.unify(t26, t16, e21);
									}
									
									return global::hscript.TType.TBool;
								}
								
								
								case "<":
								case "<=":
								case ">":
								case ">=":
								{
									global::hscript.TType t17 = this.typeExpr(e11, global::hscript._Checker.WithType.Value);
									global::hscript.TType t27 = this.typeExpr(e21, global::hscript._Checker.WithType.WithType_WithType(t17));
									if ( ! (this.tryUnify(t17, t27)) ) {
										this.unify(t27, t17, e21);
									}
									
									{
										global::hscript.TType _g11 = this.follow(t17);
										switch (_g11._hx_index) {
											case 2:
											case 3:
											case 4:
											{
												break;
											}
											
											
											case 9:
											{
												object _g12 = ( _g11 as global::hscript.TType_TInst ).c;
												global::Array<object> _g13 = ( _g11 as global::hscript.TType_TInst ).args;
												{
													object _g14 = global::haxe.lang.Runtime.getField(_g12, "constructor", 398798074, true);
													global::haxe.ds.StringMap<object> _g15 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g12, "fields", 9342585, true)) ))) );
													global::Array<object> _g16 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g12, "interfaces", 1695633562, true)) ))) );
													global::haxe.lang.Null<bool> _g17 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(_g12, "isInterface", 408610927, true));
													global::Array<object> _g18 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g12, "params", 1836776262, true)) ))) );
													global::haxe.ds.StringMap<object> _g19 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g12, "statics", 912604165, true)) ))) );
													global::hscript.TType _g20 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(_g12, "superClass", 671590589, true)) );
													if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g12, "name", 1224700491, true)) == "String" )) {
													}
													else {
														global::hscript.ErrorDef e4 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Cannot compare ", global::hscript.Checker.typeStr(t17)));
														global::hscript.Error e5 = new global::hscript.Error(((global::hscript.ErrorDef) (e4) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
														if ( ! (this.isCompletion) ) {
															throw ((global::System.Exception) (global::haxe.Exception.thrown(e5)) );
														}
														
													}
													
												}
												
												break;
											}
											
											
											default:
											{
												global::hscript.ErrorDef e6 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Cannot compare ", global::hscript.Checker.typeStr(t17)));
												global::hscript.Error e7 = new global::hscript.Error(((global::hscript.ErrorDef) (e6) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
												if ( ! (this.isCompletion) ) {
													throw ((global::System.Exception) (global::haxe.Exception.thrown(e7)) );
												}
												
												break;
											}
											
										}
										
									}
									
									return global::hscript.TType.TBool;
								}
								
								
								case "&&":
								case "||":
								{
									this.typeExprWith(e11, global::hscript.TType.TBool);
									this.typeExprWith(e21, global::hscript.TType.TBool);
									return global::hscript.TType.TBool;
								}
								
								
								default:
								{
									if (global::haxe.lang.Runtime.eq((global::haxe.lang.StringExt.charCodeAt(op, ( op.Length - 1 ))).toDynamic(), 61)) {
										global::hscript.TType t3 = this.typeExpr(this.mk(global::hscript.ExprDef.EBinop(global::haxe.lang.StringExt.substr(op, 0, new global::haxe.lang.Null<int>(( op.Length - 1 ), true)), e11, e21), expr), withType);
										return this.typeExpr(this.mk(global::hscript.ExprDef.EBinop("=", e11, e21), expr), withType);
									}
									
									{
										global::hscript.ErrorDef e8 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Unsupported operation ", op));
										global::hscript.Error e9 = new global::hscript.Error(((global::hscript.ErrorDef) (e8) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
										if ( ! (this.isCompletion) ) {
											throw ((global::System.Exception) (global::haxe.Exception.thrown(e9)) );
										}
										
									}
									
									break;
								}
								
							}
							
							break;
						}
						
						
						case 7:
						{
							bool _g21 = ( _g as global::hscript.ExprDef_EUnop ).prefix;
							{
								string op1 = ( _g as global::hscript.ExprDef_EUnop ).op;
								object e10 = ( _g as global::hscript.ExprDef_EUnop ).e;
								{
									global::hscript.TType et1 = this.typeExpr(e10, global::hscript._Checker.WithType.Value);
									switch (op1) {
										case "!":
										{
											this.unify(et1, global::hscript.TType.TBool, e10);
											return et1;
										}
										
										
										case "++":
										case "-":
										case "--":
										{
											this.unify(et1, global::hscript.TType.TInt, e10);
											return et1;
										}
										
										
										default:
										{
											break;
										}
										
									}
									
								}
								
							}
							
							break;
						}
						
						
						case 8:
						{
							object e12 = ( _g as global::hscript.ExprDef_ECall ).e;
							global::Array<object> @params = ( _g as global::hscript.ExprDef_ECall ).@params;
							global::hscript.TType ft = this.typeExpr(e12, global::hscript._Checker.WithType.Value);
							global::hscript.TType _g22 = this.follow(ft);
							switch (_g22._hx_index) {
								case 5:
								{
									{
										int _g23 = 0;
										while (( _g23 < @params.length )) {
											object p = @params[_g23];
											 ++ _g23;
											this.typeExpr(p, global::hscript._Checker.WithType.Value);
										}
										
									}
									
									return this.makeMono();
								}
								
								
								case 13:
								{
									global::Array<object> args = ( _g22 as global::hscript.TType_TFun ).args;
									global::hscript.TType ret = ( _g22 as global::hscript.TType_TFun ).ret;
									{
										int _g24 = 0;
										int _g25 = @params.length;
										while (( _g24 < _g25 )) {
											int i1 = _g24++;
											object a = args[i1];
											if (( a == null )) {
												{
													object curExpr = @params[i1];
													global::hscript.ErrorDef e13 = global::hscript.ErrorDef.ECustom("Too many arguments");
													global::hscript.Error e14 = new global::hscript.Error(((global::hscript.ErrorDef) (e13) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(curExpr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(curExpr, "line", 1202919412, true)) ));
													if ( ! (this.isCompletion) ) {
														throw ((global::System.Exception) (global::haxe.Exception.thrown(e14)) );
													}
													
												}
												
												break;
											}
											
											global::hscript.TType t4 = this.typeExpr(@params[i1], ( (( a == null )) ? (global::hscript._Checker.WithType.Value) : (global::hscript._Checker.WithType.WithType_WithType(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ))) ));
											this.unify(t4, ((global::hscript.TType) (global::haxe.lang.Runtime.getField(a, "t", 116, true)) ), @params[i1]);
										}
										
									}
									
									{
										int _g26 = @params.length;
										int _g27 = args.length;
										while (( _g26 < _g27 )) {
											int i2 = _g26++;
											if (( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(args[i2], "opt", 5545011, true))) )) {
												global::hscript.ErrorDef e15 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Missing argument ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(args[i2], "name", 1224700491, true))), ":"), global::hscript.Checker.typeStr(((global::hscript.TType) (global::haxe.lang.Runtime.getField(args[i2], "t", 116, true)) ))));
												global::hscript.Error e16 = new global::hscript.Error(((global::hscript.ErrorDef) (e15) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
												if ( ! (this.isCompletion) ) {
													throw ((global::System.Exception) (global::haxe.Exception.thrown(e16)) );
												}
												
											}
											
										}
										
									}
									
									return ret;
								}
								
								
								default:
								{
									{
										global::hscript.ErrorDef e17 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(ft), " cannot be called"));
										global::hscript.Error e18 = new global::hscript.Error(((global::hscript.ErrorDef) (e17) ), ((int) (global::haxe.lang.Runtime.getField_f(e12, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(e12, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(e12, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(e12, "line", 1202919412, true)) ));
										if ( ! (this.isCompletion) ) {
											throw ((global::System.Exception) (global::haxe.Exception.thrown(e18)) );
										}
										
									}
									
									return this.makeMono();
								}
								
							}
							
						}
						
						
						case 9:
						{
							object cond = ( _g as global::hscript.ExprDef_EIf ).cond;
							object e19 = ( _g as global::hscript.ExprDef_EIf ).e1;
							object e22 = ( _g as global::hscript.ExprDef_EIf ).e2;
							{
								this.typeExprWith(cond, global::hscript.TType.TBool);
								global::hscript.TType t18 = this.typeExpr(e19, withType);
								if (( e22 == null )) {
									return t18;
								}
								
								global::hscript.TType t28 = this.typeExpr(e22, withType);
								if (( withType == global::hscript._Checker.WithType.NoValue )) {
									return global::hscript.TType.TVoid;
								}
								
								if (this.tryUnify(t28, t18)) {
									return t18;
								}
								
								if (this.tryUnify(t18, t28)) {
									return t28;
								}
								
								this.unify(t28, t18, e22);
							}
							
							break;
						}
						
						
						case 10:
						{
							object cond1 = ( _g as global::hscript.ExprDef_EWhile ).cond;
							object e20 = ( _g as global::hscript.ExprDef_EWhile ).e;
							this.typeExprWith(cond1, global::hscript.TType.TBool);
							this.typeExpr(e20, global::hscript._Checker.WithType.NoValue);
							return global::hscript.TType.TVoid;
						}
						
						
						case 11:
						{
							string v1 = ( _g as global::hscript.ExprDef_EFor ).v;
							object it = ( _g as global::hscript.ExprDef_EFor ).it;
							object e23 = ( _g as global::hscript.ExprDef_EFor ).e;
							global::haxe.ds.StringMap<object> locals1 = this.saveLocals();
							global::hscript.TType itt = this.typeExpr(it, global::hscript._Checker.WithType.Value);
							global::hscript.TType vt3 = null;
							global::hscript.TType _g28 = this.follow(itt);
							if (( _g28._hx_index == 9 )) {
								object _g29 = ( _g28 as global::hscript.TType_TInst ).c;
								global::Array<object> _g30 = ( _g28 as global::hscript.TType_TInst ).args;
								object _g31 = global::haxe.lang.Runtime.getField(_g29, "constructor", 398798074, true);
								global::haxe.ds.StringMap<object> _g32 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g29, "fields", 9342585, true)) ))) );
								global::Array<object> _g33 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g29, "interfaces", 1695633562, true)) ))) );
								global::haxe.lang.Null<bool> _g34 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(_g29, "isInterface", 408610927, true));
								global::Array<object> _g35 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g29, "params", 1836776262, true)) ))) );
								global::haxe.ds.StringMap<object> _g36 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g29, "statics", 912604165, true)) ))) );
								global::hscript.TType _g37 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(_g29, "superClass", 671590589, true)) );
								if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g29, "name", 1224700491, true)) == "Array" )) {
									if (( _g30.length == 1 )) {
										global::hscript.TType t5 = ((global::hscript.TType) (_g30[0]) );
										vt3 = t5;
									}
									else {
										global::hscript.TType ft1 = this.getField(itt, "iterator", it, default(global::haxe.lang.Null<bool>));
										if (( ft1 == null )) {
											if (( itt._hx_index == 12 )) {
												object a1 = ( itt as global::hscript.TType_TAbstract ).a;
												global::Array<object> args1 = ( itt as global::hscript.TType_TAbstract ).args;
												ft1 = this.getField(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a1, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a1, "params", 1836776262, true)) ))) ), args1), "iterator", it, default(global::haxe.lang.Null<bool>));
											}
											
										}
										
										if (( ft1 != null )) {
											if (( ft1._hx_index == 13 )) {
												if (( ( ft1 as global::hscript.TType_TFun ).args.length == 0 )) {
													global::hscript.TType ret1 = ( ft1 as global::hscript.TType_TFun ).ret;
													ft1 = ret1;
												}
												else {
													ft1 = null;
												}
												
											}
											else {
												ft1 = null;
											}
											
										}
										
										global::hscript.TType t6 = this.makeMono();
										global::hscript.TType iter = this.makeIterator(t6);
										this.unify(( (( ft1 != null )) ? (ft1) : (itt) ), iter, it);
										vt3 = t6;
									}
									
								}
								else {
									global::hscript.TType ft2 = this.getField(itt, "iterator", it, default(global::haxe.lang.Null<bool>));
									if (( ft2 == null )) {
										if (( itt._hx_index == 12 )) {
											object a2 = ( itt as global::hscript.TType_TAbstract ).a;
											global::Array<object> args2 = ( itt as global::hscript.TType_TAbstract ).args;
											ft2 = this.getField(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a2, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a2, "params", 1836776262, true)) ))) ), args2), "iterator", it, default(global::haxe.lang.Null<bool>));
										}
										
									}
									
									if (( ft2 != null )) {
										if (( ft2._hx_index == 13 )) {
											if (( ( ft2 as global::hscript.TType_TFun ).args.length == 0 )) {
												global::hscript.TType ret2 = ( ft2 as global::hscript.TType_TFun ).ret;
												ft2 = ret2;
											}
											else {
												ft2 = null;
											}
											
										}
										else {
											ft2 = null;
										}
										
									}
									
									global::hscript.TType t7 = this.makeMono();
									global::hscript.TType iter1 = this.makeIterator(t7);
									this.unify(( (( ft2 != null )) ? (ft2) : (itt) ), iter1, it);
									vt3 = t7;
								}
								
							}
							else {
								global::hscript.TType ft3 = this.getField(itt, "iterator", it, default(global::haxe.lang.Null<bool>));
								if (( ft3 == null )) {
									if (( itt._hx_index == 12 )) {
										object a3 = ( itt as global::hscript.TType_TAbstract ).a;
										global::Array<object> args3 = ( itt as global::hscript.TType_TAbstract ).args;
										ft3 = this.getField(this.apply(((global::hscript.TType) (global::haxe.lang.Runtime.getField(a3, "t", 116, true)) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(a3, "params", 1836776262, true)) ))) ), args3), "iterator", it, default(global::haxe.lang.Null<bool>));
									}
									
								}
								
								if (( ft3 != null )) {
									if (( ft3._hx_index == 13 )) {
										if (( ( ft3 as global::hscript.TType_TFun ).args.length == 0 )) {
											global::hscript.TType ret3 = ( ft3 as global::hscript.TType_TFun ).ret;
											ft3 = ret3;
										}
										else {
											ft3 = null;
										}
										
									}
									else {
										ft3 = null;
									}
									
								}
								
								global::hscript.TType t8 = this.makeMono();
								global::hscript.TType iter2 = this.makeIterator(t8);
								this.unify(( (( ft3 != null )) ? (ft3) : (itt) ), iter2, it);
								vt3 = t8;
							}
							
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(v1, vt3);
							this.typeExpr(e23, global::hscript._Checker.WithType.NoValue);
							this.locals = locals1;
							return global::hscript.TType.TVoid;
						}
						
						
						case 12:
						case 13:
						{
							return global::hscript.TType.TVoid;
						}
						
						
						case 14:
						{
							global::Array<object> args4 = ( _g as global::hscript.ExprDef_EFunction ).args;
							object body = ( _g as global::hscript.ExprDef_EFunction ).e;
							string name = ( _g as global::hscript.ExprDef_EFunction ).name;
							global::hscript.CType ret4 = ( _g as global::hscript.ExprDef_EFunction ).ret;
							global::hscript.TType ft4 = null;
							global::hscript.TType tret = null;
							global::Array<object> targs = null;
							if (( this.currentFunType != null )) {
								{
									global::hscript.TType _g38 = this.currentFunType;
									if (( _g38._hx_index == 13 )) {
										global::Array<object> args5 = ( _g38 as global::hscript.TType_TFun ).args;
										global::hscript.TType ret5 = ( _g38 as global::hscript.TType_TFun ).ret;
										{
											ft4 = this.currentFunType;
											tret = ret5;
											targs = args5;
										}
										
									}
									else {
										throw ((global::System.Exception) (global::haxe.Exception.thrown("assert")) );
									}
									
								}
								
								this.currentFunType = null;
							}
							else {
								tret = ( (( ret4 == null )) ? (this.makeMono()) : (this.makeType(ret4, expr)) );
							}
							
							global::haxe.ds.StringMap<object> locals2 = this.saveLocals();
							global::hscript.TType oldRet = this.allowReturn;
							bool oldGDef = this.allowDefine;
							this.allowReturn = tret;
							this.allowDefine = false;
							global::Array<object> withArgs = null;
							bool tmp = default(bool);
							if (( name != null )) {
								bool tmp1 = default(bool);
								if (( withType._hx_index == 2 )) {
									global::hscript.TType _hx_tmp = this.follow(( withType as global::hscript._Checker.WithType_WithType ).t);
									if (( _hx_tmp._hx_index == 13 )) {
										global::Array<object> _g39 = ( _hx_tmp as global::hscript.TType_TFun ).args;
										global::hscript.TType _g40 = ( _hx_tmp as global::hscript.TType_TFun ).ret;
										tmp1 = true;
									}
									else {
										tmp1 = false;
									}
									
								}
								else {
									tmp1 = false;
								}
								
								tmp =  ! (tmp1) ;
							}
							else {
								tmp = false;
							}
							
							if (tmp) {
								global::hscript.TType ev = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.events) )) ))) ).@get(name)).@value) );
								if (( ev != null )) {
									withType = global::hscript._Checker.WithType.WithType_WithType(ev);
								}
								
							}
							
							if (( withType._hx_index == 2 )) {
								global::hscript.TType _hx_tmp1 = this.follow(( withType as global::hscript._Checker.WithType_WithType ).t);
								if (( _hx_tmp1._hx_index == 13 )) {
									global::Array<object> args6 = ( _hx_tmp1 as global::hscript.TType_TFun ).args;
									global::hscript.TType ret6 = ( _hx_tmp1 as global::hscript.TType_TFun ).ret;
									{
										withArgs = args6;
										this.unify(tret, ret6, expr);
									}
									
								}
								
							}
							
							if (( targs == null )) {
								targs = this.typeArgs(args4, expr);
							}
							
							{
								int _g41 = 0;
								int _g42 = targs.length;
								while (( _g41 < _g42 )) {
									int i3 = _g41++;
									object a4 = targs[i3];
									if (( withArgs != null )) {
										if (( i3 < withArgs.length )) {
											this.unify(((global::hscript.TType) (global::haxe.lang.Runtime.getField(withArgs[i3], "t", 116, true)) ), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(a4, "t", 116, true)) ), expr);
										}
										else {
											global::hscript.ErrorDef e24 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Extra argument ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a4, "name", 1224700491, true))));
											global::hscript.Error e25 = new global::hscript.Error(((global::hscript.ErrorDef) (e24) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
											if ( ! (this.isCompletion) ) {
												throw ((global::System.Exception) (global::haxe.Exception.thrown(e25)) );
											}
											
										}
										
									}
									
									((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a4, "name", 1224700491, true)), ((global::hscript.TType) (global::haxe.lang.Runtime.getField(a4, "t", 116, true)) ));
								}
								
							}
							
							if (( ( withArgs != null ) && ( targs.length < withArgs.length ) )) {
								string msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Missing ", global::haxe.lang.Runtime.toString((( withArgs.length - targs.length )))), " arguments (");
								global::Array<string> _g43 = new global::Array<string>(new string[]{});
								{
									int _g44 = targs.length;
									int _g45 = withArgs.length;
									while (( _g44 < _g45 )) {
										int i4 = _g44++;
										_g43.push(global::hscript.Checker.typeStr(((global::hscript.TType) (global::haxe.lang.Runtime.getField(withArgs[i4], "t", 116, true)) )));
									}
									
								}
								
								global::hscript.ErrorDef e26 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(msg, _g43.@join(",")), ")"));
								global::hscript.Error e27 = new global::hscript.Error(((global::hscript.ErrorDef) (e26) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
								if ( ! (this.isCompletion) ) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(e27)) );
								}
								
							}
							
							this.typeExpr(body, global::hscript._Checker.WithType.NoValue);
							this.allowDefine = oldGDef;
							this.allowReturn = oldRet;
							this.locals = locals2;
							if (( ft4 == null )) {
								ft4 = global::hscript.TType.TFun(targs, tret);
								locals2.@set(name, ft4);
							}
							
							return ft4;
						}
						
						
						case 15:
						{
							object v2 = ( _g as global::hscript.ExprDef_EReturn ).e;
							global::hscript.TType et2 = ( (( v2 == null )) ? (global::hscript.TType.TVoid) : (this.typeExpr(v2, ( (( this.allowReturn == null )) ? (global::hscript._Checker.WithType.Value) : (global::hscript._Checker.WithType.WithType_WithType(this.allowReturn)) ))) );
							if (( this.allowReturn == null )) {
								global::hscript.ErrorDef e28 = global::hscript.ErrorDef.ECustom("Return not allowed here");
								global::hscript.Error e29 = new global::hscript.Error(((global::hscript.ErrorDef) (e28) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
								if ( ! (this.isCompletion) ) {
									throw ((global::System.Exception) (global::haxe.Exception.thrown(e29)) );
								}
								
							}
							else {
								this.unify(et2, this.allowReturn, ( (( v2 == null )) ? (expr) : (v2) ));
							}
							
							return this.makeMono();
						}
						
						
						case 16:
						{
							object a5 = ( _g as global::hscript.ExprDef_EArray ).e;
							object index = ( _g as global::hscript.ExprDef_EArray ).index;
							{
								this.typeExprWith(index, global::hscript.TType.TInt);
								global::hscript.TType at = this.typeExpr(a5, global::hscript._Checker.WithType.Value);
								{
									global::hscript.TType _g46 = this.follow(at);
									if (( _g46._hx_index == 9 )) {
										object _g47 = ( _g46 as global::hscript.TType_TInst ).c;
										global::Array<object> _g48 = ( _g46 as global::hscript.TType_TInst ).args;
										{
											object _g49 = global::haxe.lang.Runtime.getField(_g47, "constructor", 398798074, true);
											global::haxe.ds.StringMap<object> _g50 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g47, "fields", 9342585, true)) ))) );
											global::Array<object> _g51 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g47, "interfaces", 1695633562, true)) ))) );
											global::haxe.lang.Null<bool> _g52 = global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(_g47, "isInterface", 408610927, true));
											global::Array<object> _g53 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(_g47, "params", 1836776262, true)) ))) );
											global::haxe.ds.StringMap<object> _g54 = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (global::haxe.lang.Runtime.getField(_g47, "statics", 912604165, true)) ))) );
											global::hscript.TType _g55 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(_g47, "superClass", 671590589, true)) );
											if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_g47, "name", 1224700491, true)) == "Array" )) {
												if (( _g48.length == 1 )) {
													global::hscript.TType et3 = ((global::hscript.TType) (_g48[0]) );
													return et3;
												}
												else {
													global::hscript.ErrorDef e30 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(at), " is not an Array"));
													global::hscript.Error e31 = new global::hscript.Error(((global::hscript.ErrorDef) (e30) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a5, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(a5, "line", 1202919412, true)) ));
													if ( ! (this.isCompletion) ) {
														throw ((global::System.Exception) (global::haxe.Exception.thrown(e31)) );
													}
													
												}
												
											}
											else {
												global::hscript.ErrorDef e32 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(at), " is not an Array"));
												global::hscript.Error e33 = new global::hscript.Error(((global::hscript.ErrorDef) (e32) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a5, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(a5, "line", 1202919412, true)) ));
												if ( ! (this.isCompletion) ) {
													throw ((global::System.Exception) (global::haxe.Exception.thrown(e33)) );
												}
												
											}
											
										}
										
									}
									else {
										global::hscript.ErrorDef e34 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat(global::hscript.Checker.typeStr(at), " is not an Array"));
										global::hscript.Error e35 = new global::hscript.Error(((global::hscript.ErrorDef) (e34) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(a5, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a5, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(a5, "line", 1202919412, true)) ));
										if ( ! (this.isCompletion) ) {
											throw ((global::System.Exception) (global::haxe.Exception.thrown(e35)) );
										}
										
									}
									
								}
								
							}
							
							break;
						}
						
						
						case 17:
						{
							global::Array<object> el1 = ( _g as global::hscript.ExprDef_EArrayDecl ).e;
							global::hscript.TType et4 = null;
							{
								int _g56 = 0;
								while (( _g56 < el1.length )) {
									object v3 = el1[_g56];
									 ++ _g56;
									global::hscript.TType t9 = this.typeExpr(v3, ( (( et4 == null )) ? (global::hscript._Checker.WithType.Value) : (global::hscript._Checker.WithType.WithType_WithType(et4)) ));
									if (( et4 == null )) {
										et4 = t9;
									}
									else if ( ! (this.tryUnify(t9, et4)) ) {
										if (this.tryUnify(et4, t9)) {
											et4 = t9;
										}
										else {
											this.unify(t9, et4, v3);
										}
										
									}
									
								}
								
							}
							
							if (( et4 == null )) {
								et4 = this.makeMono();
							}
							
							return this.types.getType("Array", new global::Array<object>(new object[]{et4}));
						}
						
						
						case 18:
						{
							string cl = ( _g as global::hscript.ExprDef_ENew ).cl;
							global::Array<object> params1 = ( _g as global::hscript.ExprDef_ENew ).@params;
							break;
						}
						
						
						case 19:
						{
							object e36 = ( _g as global::hscript.ExprDef_EThrow ).e;
							this.typeExpr(e36, global::hscript._Checker.WithType.Value);
							return this.makeMono();
						}
						
						
						case 20:
						{
							object etry = ( _g as global::hscript.ExprDef_ETry ).e;
							string v4 = ( _g as global::hscript.ExprDef_ETry ).v;
							global::hscript.CType et5 = ( _g as global::hscript.ExprDef_ETry ).t;
							object ecatch = ( _g as global::hscript.ExprDef_ETry ).ecatch;
							global::hscript.TType vt4 = this.typeExpr(etry, withType);
							global::hscript.TType old = ((global::hscript.TType) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@get(v4)).@value) );
							((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(v4, this.makeType(et5, ecatch));
							global::hscript.TType ct = this.typeExpr(ecatch, withType);
							if (( old != null )) {
								((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@set(v4, old);
							}
							else {
								((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (this.locals) )) ))) ).@remove(v4);
							}
							
							if (( withType == global::hscript._Checker.WithType.NoValue )) {
								return global::hscript.TType.TVoid;
							}
							
							if (this.tryUnify(vt4, ct)) {
								return ct;
							}
							
							this.unify(ct, vt4, ecatch);
							return vt4;
						}
						
						
						case 21:
						{
							global::Array<object> fl = ( _g as global::hscript.ExprDef_EObject ).fl;
							if (( withType._hx_index == 2 )) {
								global::hscript.TType _hx_tmp2 = this.follow(( withType as global::hscript._Checker.WithType_WithType ).t);
								if (( _hx_tmp2._hx_index == 14 )) {
									global::Array<object> tfields = ( _hx_tmp2 as global::hscript.TType_TAnon ).fields;
									if (( tfields.length > 0 )) {
										global::haxe.ds.StringMap<object> _g57 = new global::haxe.ds.StringMap<object>();
										{
											int _g58 = 0;
											while (( _g58 < tfields.length )) {
												object f3 = tfields[_g58];
												 ++ _g58;
												_g57.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f3, "name", 1224700491, true)), f3);
											}
											
										}
										
										global::haxe.ds.StringMap<object> map = _g57;
										global::Array<object> _g59 = new global::Array<object>(new object[]{});
										{
											int _g60 = 0;
											while (( _g60 < fl.length )) {
												object f4 = fl[_g60];
												 ++ _g60;
												object ft5 = (map.@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f4, "name", 1224700491, true)))).@value;
												global::hscript.TType ft6 = null;
												if (( ft5 == null )) {
													{
														object curExpr1 = global::haxe.lang.Runtime.getField(f4, "e", 101, true);
														global::hscript.ErrorDef e37 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Extra field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f4, "name", 1224700491, true))));
														global::hscript.Error e38 = new global::hscript.Error(((global::hscript.ErrorDef) (e37) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr1, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(curExpr1, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(curExpr1, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(curExpr1, "line", 1202919412, true)) ));
														if ( ! (this.isCompletion) ) {
															throw ((global::System.Exception) (global::haxe.Exception.thrown(e38)) );
														}
														
													}
													
													ft6 = global::hscript.TType.TDynamic;
												}
												else {
													ft6 = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(ft5, "t", 116, true)) );
												}
												
												global::hscript.TType tmp2 = this.typeExprWith(global::haxe.lang.Runtime.getField(f4, "e", 101, true), ft6);
												object __temp_stmt8 = null;
												{
													string __temp_odecl1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f4, "name", 1224700491, true));
													__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{tmp2, false, __temp_odecl1}, new int[]{}, new double[]{});
												}
												
												_g59.push(__temp_stmt8);
											}
											
										}
										
										return global::hscript.TType.TAnon(_g59);
									}
									else {
										global::Array<object> _g61 = new global::Array<object>(new object[]{});
										{
											int _g62 = 0;
											while (( _g62 < fl.length )) {
												object f5 = fl[_g62];
												 ++ _g62;
												global::hscript.TType tmp3 = this.typeExpr(global::haxe.lang.Runtime.getField(f5, "e", 101, true), global::hscript._Checker.WithType.Value);
												object __temp_stmt7 = null;
												{
													string __temp_odecl2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f5, "name", 1224700491, true));
													__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{tmp3, false, __temp_odecl2}, new int[]{}, new double[]{});
												}
												
												_g61.push(__temp_stmt7);
											}
											
										}
										
										return global::hscript.TType.TAnon(_g61);
									}
									
								}
								else {
									global::Array<object> _g63 = new global::Array<object>(new object[]{});
									{
										int _g64 = 0;
										while (( _g64 < fl.length )) {
											object f6 = fl[_g64];
											 ++ _g64;
											global::hscript.TType tmp4 = this.typeExpr(global::haxe.lang.Runtime.getField(f6, "e", 101, true), global::hscript._Checker.WithType.Value);
											object __temp_stmt6 = null;
											{
												string __temp_odecl3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f6, "name", 1224700491, true));
												__temp_stmt6 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{tmp4, false, __temp_odecl3}, new int[]{}, new double[]{});
											}
											
											_g63.push(__temp_stmt6);
										}
										
									}
									
									return global::hscript.TType.TAnon(_g63);
								}
								
							}
							else {
								global::Array<object> _g65 = new global::Array<object>(new object[]{});
								{
									int _g66 = 0;
									while (( _g66 < fl.length )) {
										object f7 = fl[_g66];
										 ++ _g66;
										global::hscript.TType tmp5 = this.typeExpr(global::haxe.lang.Runtime.getField(f7, "e", 101, true), global::hscript._Checker.WithType.Value);
										object __temp_stmt5 = null;
										{
											string __temp_odecl4 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f7, "name", 1224700491, true));
											__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{116, 5545011, 1224700491}, new object[]{tmp5, false, __temp_odecl4}, new int[]{}, new double[]{});
										}
										
										_g65.push(__temp_stmt5);
									}
									
								}
								
								return global::hscript.TType.TAnon(_g65);
							}
							
						}
						
						
						case 22:
						{
							object cond2 = ( _g as global::hscript.ExprDef_ETernary ).cond;
							object e110 = ( _g as global::hscript.ExprDef_ETernary ).e1;
							object e210 = ( _g as global::hscript.ExprDef_ETernary ).e2;
							{
								this.typeExprWith(cond2, global::hscript.TType.TBool);
								global::hscript.TType t19 = this.typeExpr(e110, withType);
								if (( e210 == null )) {
									return t19;
								}
								
								global::hscript.TType t29 = this.typeExpr(e210, withType);
								if (( withType == global::hscript._Checker.WithType.NoValue )) {
									return global::hscript.TType.TVoid;
								}
								
								if (this.tryUnify(t29, t19)) {
									return t19;
								}
								
								if (this.tryUnify(t19, t29)) {
									return t29;
								}
								
								this.unify(t29, t19, e210);
							}
							
							break;
						}
						
						
						case 23:
						{
							object @value = ( _g as global::hscript.ExprDef_ESwitch ).e;
							global::Array<object> cases = ( _g as global::hscript.ExprDef_ESwitch ).cases;
							object defaultExpr = ( _g as global::hscript.ExprDef_ESwitch ).defaultExpr;
							global::hscript.TType tmin = null;
							global::hscript.TType vt5 = this.typeExpr(@value, global::hscript._Checker.WithType.Value);
							{
								int _g67 = 0;
								while (( _g67 < cases.length )) {
									object c1 = cases[_g67];
									 ++ _g67;
									{
										int _g68 = 0;
										global::Array<object> _g69 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c1, "values", 1337394146, true)) ))) );
										while (( _g68 < _g69.length )) {
											object v5 = _g69[_g68];
											 ++ _g68;
											global::hscript.TType ct1 = this.typeExpr(v5, global::hscript._Checker.WithType.WithType_WithType(vt5));
											this.unify(ct1, vt5, v5);
										}
										
									}
									
									global::hscript.TType et6 = this.typeExpr(global::haxe.lang.Runtime.getField(c1, "expr", 1126038837, true), withType);
									{
										object p1 = global::haxe.lang.Runtime.getField(c1, "expr", 1126038837, true);
										if (( withType != global::hscript._Checker.WithType.NoValue )) {
											if (( tmin == null )) {
												tmin = et6;
											}
											else if ( ! (_gthis.tryUnify(et6, tmin)) ) {
												_gthis.unify(tmin, et6, p1);
												tmin = et6;
											}
											
										}
										
									}
									
								}
								
							}
							
							if (( defaultExpr != null )) {
								global::hscript.TType t10 = this.typeExpr(defaultExpr, withType);
								if (( withType != global::hscript._Checker.WithType.NoValue )) {
									if (( tmin == null )) {
										tmin = t10;
									}
									else if ( ! (_gthis.tryUnify(t10, tmin)) ) {
										_gthis.unify(tmin, t10, defaultExpr);
										tmin = t10;
									}
									
								}
								
							}
							
							if (( withType == global::hscript._Checker.WithType.NoValue )) {
								return global::hscript.TType.TVoid;
							}
							else if (( tmin == null )) {
								return this.makeMono();
							}
							else {
								return tmin;
							}
							
						}
						
						
						case 24:
						{
							object cond3 = ( _g as global::hscript.ExprDef_EDoWhile ).cond;
							object e39 = ( _g as global::hscript.ExprDef_EDoWhile ).e;
							this.typeExprWith(cond3, global::hscript.TType.TBool);
							this.typeExpr(e39, global::hscript._Checker.WithType.NoValue);
							return global::hscript.TType.TVoid;
						}
						
						
						case 25:
						{
							global::Array<object> _g70 = ( _g as global::hscript.ExprDef_EMeta ).args;
							string m = ( _g as global::hscript.ExprDef_EMeta ).name;
							object e40 = ( _g as global::hscript.ExprDef_EMeta ).e;
							if (( ( m == ":untyped" ) && this.allowUntypedMeta )) {
								return this.makeMono();
							}
							
							return this.typeExpr(e40, withType);
						}
						
						
						case 26:
						{
							object v6 = ( _g as global::hscript.ExprDef_ECheckType ).e;
							global::hscript.CType t20 = ( _g as global::hscript.ExprDef_ECheckType ).t;
							global::hscript.TType ct2 = this.makeType(t20, expr);
							global::hscript.TType vt6 = this.typeExpr(v6, global::hscript._Checker.WithType.WithType_WithType(ct2));
							this.unify(vt6, ct2, v6);
							return ct2;
						}
						
						
					}
					
				}
				
				{
					global::hscript.ErrorDef e41 = global::hscript.ErrorDef.ECustom(global::haxe.lang.Runtime.concat("Don\'t know how to type ", global::Type.enumConstructor(((object) (global::haxe.lang.Runtime.getField(expr, "e", 101, true)) ))));
					global::hscript.Error e42 = new global::hscript.Error(((global::hscript.ErrorDef) (e41) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmin", 1247475490, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(expr, "pmax", 1247473716, true)) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(expr, "origin", 1258363366, true)), ((int) (global::haxe.lang.Runtime.getField_f(expr, "line", 1202919412, true)) ));
					if ( ! (this.isCompletion) ) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(e42)) );
					}
					
				}
				
				return global::hscript.TType.TDynamic;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 633407693:
					{
						this.allowUntypedMeta = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1093477314:
					{
						this.allowGlobalsDefine = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1353009689:
					{
						this.allowReturn = ((global::hscript.TType) (@value) );
						return @value;
					}
					
					
					case 1359591923:
					{
						this.allowAsync = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 777789860:
					{
						this.allowDefine = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1417081766:
					{
						this.isCompletion = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1960373088:
					{
						this.currentFunType = ((global::hscript.TType) (@value) );
						return @value;
					}
					
					
					case 376065817:
					{
						this.events = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 339281328:
					{
						this.globals = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 1505719464:
					{
						this.locals = ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (@value) ))) );
						return @value;
					}
					
					
					case 449540217:
					{
						this.types = ((global::hscript.CheckerTypes) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 803799311:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeExpr", 803799311)) );
					}
					
					
					case 1164701600:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeField", 1164701600)) );
					}
					
					
					case 1520135451:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "onCompletion", 1520135451)) );
					}
					
					
					case 1771684955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isString", 1771684955)) );
					}
					
					
					case 24414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mk", 24414)) );
					}
					
					
					case 1483922940:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "makeIterator", 1483922940)) );
					}
					
					
					case 1056887089:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "makeMono", 1056887089)) );
					}
					
					
					case 466736821:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeExprWith", 466736821)) );
					}
					
					
					case 583988803:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unasync", 583988803)) );
					}
					
					
					case 1617601604:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getField", 1617601604)) );
					}
					
					
					case 2095388591:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getFields", 2095388591)) );
					}
					
					
					case 2039910769:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "follow", 2039910769)) );
					}
					
					
					case 839165814:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mapType", 839165814)) );
					}
					
					
					case 607880558:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "apply", 607880558)) );
					}
					
					
					case 652696899:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unify", 652696899)) );
					}
					
					
					case 179179016:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tryUnify", 179179016)) );
					}
					
					
					case 1463210438:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeEq", 1463210438)) );
					}
					
					
					case 1202919418:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "link", 1202919418)) );
					}
					
					
					case 2034790270:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "linkLoop", 2034790270)) );
					}
					
					
					case 1135011784:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "makeType", 1135011784)) );
					}
					
					
					case 578355141:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "saveLocals", 578355141)) );
					}
					
					
					case 1932118984:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "error", 1932118984)) );
					}
					
					
					case 1125041792:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "edef", 1125041792)) );
					}
					
					
					case 1169594568:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "check", 1169594568)) );
					}
					
					
					case 759140663:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeArgs", 759140663)) );
					}
					
					
					case 1671072698:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getGlobals", 1671072698)) );
					}
					
					
					case 66662680:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setEvent", 66662680)) );
					}
					
					
					case 123315877:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setGlobal", 123315877)) );
					}
					
					
					case 383765703:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "removeGlobal", 383765703)) );
					}
					
					
					case 1729636910:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setGlobals", 1729636910)) );
					}
					
					
					case 633407693:
					{
						return this.allowUntypedMeta;
					}
					
					
					case 1093477314:
					{
						return this.allowGlobalsDefine;
					}
					
					
					case 1353009689:
					{
						return this.allowReturn;
					}
					
					
					case 1359591923:
					{
						return this.allowAsync;
					}
					
					
					case 777789860:
					{
						return this.allowDefine;
					}
					
					
					case 1417081766:
					{
						return this.isCompletion;
					}
					
					
					case 1960373088:
					{
						return this.currentFunType;
					}
					
					
					case 376065817:
					{
						return this.events;
					}
					
					
					case 339281328:
					{
						return this.globals;
					}
					
					
					case 1505719464:
					{
						return this.locals;
					}
					
					
					case 449540217:
					{
						return this.types;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 803799311:
					{
						return this.typeExpr(dynargs[0], ((global::hscript._Checker.WithType) (dynargs[1]) ));
					}
					
					
					case 1164701600:
					{
						return this.typeField(dynargs[0], global::haxe.lang.Runtime.toString(dynargs[1]), dynargs[2], global::haxe.lang.Runtime.toBool(dynargs[3]));
					}
					
					
					case 1520135451:
					{
						this.onCompletion(dynargs[0], ((global::hscript.TType) (dynargs[1]) ));
						break;
					}
					
					
					case 1771684955:
					{
						return this.isString(((global::hscript.TType) (dynargs[0]) ));
					}
					
					
					case 24414:
					{
						return this.mk(((global::hscript.ExprDef) (dynargs[0]) ), dynargs[1]);
					}
					
					
					case 1483922940:
					{
						return this.makeIterator(((global::hscript.TType) (dynargs[0]) ));
					}
					
					
					case 1056887089:
					{
						return this.makeMono();
					}
					
					
					case 466736821:
					{
						return this.typeExprWith(dynargs[0], ((global::hscript.TType) (dynargs[1]) ));
					}
					
					
					case 583988803:
					{
						return this.unasync(((global::hscript.TType) (dynargs[0]) ));
					}
					
					
					case 1617601604:
					{
						return this.getField(((global::hscript.TType) (dynargs[0]) ), global::haxe.lang.Runtime.toString(dynargs[1]), dynargs[2], global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 3 )) ? (dynargs[3]) : (null) )));
					}
					
					
					case 2095388591:
					{
						return this.getFields(((global::hscript.TType) (dynargs[0]) ));
					}
					
					
					case 2039910769:
					{
						return this.follow(((global::hscript.TType) (dynargs[0]) ));
					}
					
					
					case 839165814:
					{
						return this.mapType(((global::hscript.TType) (dynargs[0]) ), ((global::haxe.lang.Function) (dynargs[1]) ));
					}
					
					
					case 607880558:
					{
						return this.apply(((global::hscript.TType) (dynargs[0]) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[2]) ))) ));
					}
					
					
					case 652696899:
					{
						this.unify(((global::hscript.TType) (dynargs[0]) ), ((global::hscript.TType) (dynargs[1]) ), dynargs[2]);
						break;
					}
					
					
					case 179179016:
					{
						return this.tryUnify(((global::hscript.TType) (dynargs[0]) ), ((global::hscript.TType) (dynargs[1]) ));
					}
					
					
					case 1463210438:
					{
						return this.typeEq(((global::hscript.TType) (dynargs[0]) ), ((global::hscript.TType) (dynargs[1]) ));
					}
					
					
					case 1202919418:
					{
						return this.link(((global::hscript.TType) (dynargs[0]) ), ((global::hscript.TType) (dynargs[1]) ), dynargs[2]);
					}
					
					
					case 2034790270:
					{
						return this.linkLoop(((global::hscript.TType) (dynargs[0]) ), ((global::hscript.TType) (dynargs[1]) ));
					}
					
					
					case 1135011784:
					{
						return this.makeType(((global::hscript.CType) (dynargs[0]) ), dynargs[1]);
					}
					
					
					case 578355141:
					{
						return this.saveLocals();
					}
					
					
					case 1932118984:
					{
						this.error(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						break;
					}
					
					
					case 1125041792:
					{
						return this.edef(dynargs[0]);
					}
					
					
					case 1169594568:
					{
						return this.check(dynargs[0], ((global::hscript._Checker.WithType) (( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )) ), global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 2 )) ? (dynargs[2]) : (null) )));
					}
					
					
					case 759140663:
					{
						return this.typeArgs(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ), dynargs[1]);
					}
					
					
					case 1671072698:
					{
						return this.getGlobals();
					}
					
					
					case 66662680:
					{
						this.setEvent(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::hscript.TType) (dynargs[1]) ));
						break;
					}
					
					
					case 123315877:
					{
						this.setGlobal(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::hscript.TType) (dynargs[1]) ));
						break;
					}
					
					
					case 383765703:
					{
						this.removeGlobal(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 1729636910:
					{
						this.setGlobals(dynargs[0]);
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("allowUntypedMeta");
			baseArr.push("allowGlobalsDefine");
			baseArr.push("allowReturn");
			baseArr.push("allowAsync");
			baseArr.push("allowDefine");
			baseArr.push("isCompletion");
			baseArr.push("currentFunType");
			baseArr.push("events");
			baseArr.push("globals");
			baseArr.push("locals");
			baseArr.push("types");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker_setGlobals_310__Fun : global::haxe.lang.Function {
		
		public Checker_setGlobals_310__Fun(object f1, global::hscript.Checker _gthis) : base(0, 0) {
			this.f1 = f1;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			global::hscript.Checker _gthis1 = this._gthis;
			global::hscript.TType f = ((global::hscript.TType) (global::haxe.lang.Runtime.getField(this.f1, "t", 116, true)) );
			global::Array<object> f2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.f1, "params", 1836776262, true)) ))) );
			global::Array<object> _g = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.f1, "params", 1836776262, true)) ))) ).length;
				while (( _g1 < _g2 )) {
					int i = _g1++;
					_g.push(this._gthis.makeMono());
				}
				
			}
			
			return _gthis1.apply(f, f2, _g);
		}
		
		
		public object f1;
		
		public global::hscript.Checker _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker_check_365__Fun : global::haxe.lang.Function {
		
		public Checker_check_365__Fun(global::hscript.TType ft, object[] e, global::hscript.Checker _gthis) : base(0, 0) {
			this.ft = ft;
			this.e = e;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.currentFunType = this.ft;
			this._gthis.typeExpr(this.e[0], global::hscript._Checker.WithType.NoValue);
			return this.ft;
		}
		
		
		public global::hscript.TType ft;
		
		public object[] e;
		
		public global::hscript.Checker _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker_apply_681__Fun : global::haxe.lang.Function {
		
		public Checker_apply_681__Fun(global::haxe.ds.EnumValueMap<object, object> subst, global::haxe.lang.Function[] map, global::hscript.Checker _gthis) : base(1, 0) {
			this.subst = subst;
			this.map = map;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::hscript.TType t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hscript.TType) (((object) (__fn_float1) )) )) : (((global::hscript.TType) (__fn_dyn1) )) );
			global::hscript.TType st = ((global::hscript.TType) ((this.subst.@get(t)).@value) );
			if (( st != null )) {
				return st;
			}
			
			return this._gthis.mapType(t, this.map[0]);
		}
		
		
		public global::haxe.ds.EnumValueMap<object, object> subst;
		
		public global::haxe.lang.Function[] map;
		
		public global::hscript.Checker _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker_getFields_731__Fun : global::haxe.lang.Function {
		
		public Checker_getFields_731__Fun(object[] c, global::Array<object> args, global::hscript.Checker _gthis) : base(1, 0) {
			this.c = c;
			this.args = args;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::hscript.TType t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hscript.TType) (((object) (__fn_float1) )) )) : (((global::hscript.TType) (__fn_dyn1) )) );
			return this._gthis.apply(t, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.c[0], "params", 1836776262, true)) ))) ), this.args);
		}
		
		
		public object[] c;
		
		public global::Array<object> args;
		
		public global::hscript.Checker _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Checker_getFields_753__Fun : global::haxe.lang.Function {
		
		public Checker_getFields_753__Fun(global::haxe.lang.Function curMap, object csup, global::Array<object> args1, global::hscript.Checker _gthis) : base(1, 0) {
			this.curMap = curMap;
			this.csup = csup;
			this.args1 = args1;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::hscript.TType t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hscript.TType) (((object) (__fn_float1) )) )) : (((global::hscript.TType) (__fn_dyn1) )) );
			return ((global::hscript.TType) (this.curMap.__hx_invoke1_o(default(double), this._gthis.apply(t, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.csup, "params", 1836776262, true)) ))) ), this.args1))) );
		}
		
		
		public global::haxe.lang.Function curMap;
		
		public object csup;
		
		public global::Array<object> args1;
		
		public global::hscript.Checker _gthis;
		
	}
}


