// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Printer : global::haxe.lang.HxObject {
		
		public Printer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Printer() {
			global::hscript.Printer.__hx_ctor_hscript_Printer(this);
		}
		
		
		protected static void __hx_ctor_hscript_Printer(global::hscript.Printer __hx_this) {
		}
		
		
		public static string toString(object e) {
			return new global::hscript.Printer().exprToString(e);
		}
		
		
		public static string errorToString(global::hscript.Error e) {
			unchecked {
				string message = null;
				global::hscript.ErrorDef _g = e.e;
				switch (_g._hx_index) {
					case 0:
					{
						int c = ( _g as global::hscript.ErrorDef_EInvalidChar ).c;
						message = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid character: \'", (( (( c == -1 )) ? ("EOF") : (global::haxe.lang.StringExt.fromCharCode(c)) ))), "\' ("), global::haxe.lang.Runtime.toString(c)), ")");
						break;
					}
					
					
					case 1:
					{
						string s = ( _g as global::hscript.ErrorDef_EUnexpected ).s;
						message = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Unexpected token: \"", s), "\"");
						break;
					}
					
					
					case 2:
					{
						message = "Unterminated string";
						break;
					}
					
					
					case 3:
					{
						message = "Unterminated comment";
						break;
					}
					
					
					case 4:
					{
						string str = ( _g as global::hscript.ErrorDef_EInvalidPreprocessor ).msg;
						message = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid preprocessor (", str), ")");
						break;
					}
					
					
					case 5:
					{
						string v = ( _g as global::hscript.ErrorDef_EUnknownVariable ).v;
						message = global::haxe.lang.Runtime.concat("Unknown variable: ", v);
						break;
					}
					
					
					case 6:
					{
						string v1 = ( _g as global::hscript.ErrorDef_EInvalidIterator ).v;
						message = global::haxe.lang.Runtime.concat("Invalid iterator: ", v1);
						break;
					}
					
					
					case 7:
					{
						string op = ( _g as global::hscript.ErrorDef_EInvalidOp ).op;
						message = global::haxe.lang.Runtime.concat("Invalid operator: ", op);
						break;
					}
					
					
					case 8:
					{
						string f = ( _g as global::hscript.ErrorDef_EInvalidAccess ).f;
						message = global::haxe.lang.Runtime.concat("Invalid access to field ", f);
						break;
					}
					
					
					case 9:
					{
						string msg = ( _g as global::hscript.ErrorDef_ECustom ).msg;
						message = msg;
						break;
					}
					
					
				}
				
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(e.origin, ":"), global::haxe.lang.Runtime.toString(e.line)), ": "), message);
			}
		}
		
		
		public global::StringBuf buf;
		
		public string tabs;
		
		public virtual string exprToString(object e) {
			this.buf = new global::StringBuf();
			this.tabs = "";
			this.expr(e);
			return this.buf.b.ToString();
		}
		
		
		public virtual string typeToString(global::hscript.CType t) {
			this.buf = new global::StringBuf();
			this.tabs = "";
			this.type(t);
			return this.buf.b.ToString();
		}
		
		
		public void @add<T>(T s) {
			this.buf.b.Append(((string) (global::Std.@string(s)) ));
		}
		
		
		public virtual void type(global::hscript.CType t) {
			unchecked {
				switch (t._hx_index) {
					case 0:
					{
						global::Array<string> path = ( t as global::hscript.CType_CTPath ).path;
						global::Array<object> @params = ( t as global::hscript.CType_CTPath ).@params;
						{
							{
								string s = path.@join(".");
								this.buf.b.Append(((string) (global::Std.@string(s)) ));
							}
							
							if (( @params != null )) {
								this.buf.b.Append(((string) ("<") ));
								bool first = true;
								{
									int _g = 0;
									while (( _g < @params.length )) {
										global::hscript.CType p = ((global::hscript.CType) (@params[_g]) );
										 ++ _g;
										if (first) {
											first = false;
										}
										else {
											this.buf.b.Append(((string) (", ") ));
										}
										
										this.type(p);
									}
									
								}
								
								this.buf.b.Append(((string) (">") ));
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						global::Array<object> _g1 = ( t as global::hscript.CType_CTFun ).args;
						global::hscript.CType _g2 = ( t as global::hscript.CType_CTFun ).ret;
						{
							global::Array<object> args = _g1;
							global::hscript.CType ret = _g2;
							if (global::Lambda.exists<object>(((object) (args) ), ((global::haxe.lang.Function) (( (( global::hscript.Printer_type_69__Fun.__hx_current != null )) ? (global::hscript.Printer_type_69__Fun.__hx_current) : (global::hscript.Printer_type_69__Fun.__hx_current = ((global::hscript.Printer_type_69__Fun) (new global::hscript.Printer_type_69__Fun()) )) )) ))) {
								this.buf.b.Append(((string) ("(") ));
								{
									int _g3 = 0;
									while (( _g3 < args.length )) {
										global::hscript.CType a = ((global::hscript.CType) (args[_g3]) );
										 ++ _g3;
										if (( a._hx_index == 5 )) {
											string _g4 = ( a as global::hscript.CType_CTNamed ).n;
											global::hscript.CType _g5 = ( a as global::hscript.CType_CTNamed ).t;
											this.type(a);
										}
										else {
											this.type(global::hscript.CType.CTNamed("_", a));
										}
										
									}
									
								}
								
								this.buf.b.Append(((string) (")->") ));
								this.type(ret);
							}
							else {
								global::Array<object> args1 = _g1;
								global::hscript.CType ret1 = _g2;
								{
									if (( args1.length == 0 )) {
										this.buf.b.Append(((string) ("Void -> ") ));
									}
									else {
										int _g6 = 0;
										while (( _g6 < args1.length )) {
											global::hscript.CType a1 = ((global::hscript.CType) (args1[_g6]) );
											 ++ _g6;
											this.type(a1);
											this.buf.b.Append(((string) (" -> ") ));
										}
										
									}
									
									this.type(ret1);
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						global::Array<object> fields = ( t as global::hscript.CType_CTAnon ).fields;
						{
							this.buf.b.Append(((string) ("{") ));
							bool first1 = true;
							{
								int _g7 = 0;
								while (( _g7 < fields.length )) {
									object f = fields[_g7];
									 ++ _g7;
									if (first1) {
										first1 = false;
										this.buf.b.Append(((string) (" ") ));
									}
									else {
										this.buf.b.Append(((string) (", ") ));
									}
									
									this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f, "name", 1224700491, true)), " : "))) ));
									this.type(((global::hscript.CType) (global::haxe.lang.Runtime.getField(f, "t", 116, true)) ));
								}
								
							}
							
							this.buf.b.Append(((string) (( (first1) ? ("}") : (" }") )) ));
						}
						
						break;
					}
					
					
					case 3:
					{
						global::hscript.CType t1 = ( t as global::hscript.CType_CTParent ).t;
						{
							this.buf.b.Append(((string) ("(") ));
							this.type(t1);
							this.buf.b.Append(((string) (")") ));
						}
						
						break;
					}
					
					
					case 4:
					{
						global::hscript.CType t2 = ( t as global::hscript.CType_CTOpt ).t;
						{
							this.buf.b.Append(((string) ("?") ));
							this.type(t2);
						}
						
						break;
					}
					
					
					case 5:
					{
						string name = ( t as global::hscript.CType_CTNamed ).n;
						global::hscript.CType t3 = ( t as global::hscript.CType_CTNamed ).t;
						{
							this.buf.b.Append(((string) (global::Std.@string(name)) ));
							this.buf.b.Append(((string) (":") ));
							this.type(t3);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual void addType(global::hscript.CType t) {
			if (( t != null )) {
				this.buf.b.Append(((string) (" : ") ));
				this.type(t);
			}
			
		}
		
		
		public virtual void expr(object e) {
			unchecked {
				if (( e == null )) {
					this.buf.b.Append(((string) ("??NULL??") ));
					return;
				}
				
				{
					global::hscript.ExprDef _g = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e, "e", 101, true)) );
					switch (_g._hx_index) {
						case 0:
						{
							global::hscript.Const c = ( _g as global::hscript.ExprDef_EConst ).c;
							switch (c._hx_index) {
								case 0:
								{
									int i = ( c as global::hscript.Const_CInt ).v;
									this.buf.b.Append(((string) (global::Std.@string(i)) ));
									break;
								}
								
								
								case 1:
								{
									double f = ( c as global::hscript.Const_CFloat ).f;
									this.buf.b.Append(((string) (global::Std.@string(f)) ));
									break;
								}
								
								
								case 2:
								{
									string s = ( c as global::hscript.Const_CString ).s;
									{
										this.buf.b.Append(((string) ("\"") ));
										{
											string s1 = global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(s, "\"").@join("\\\""), "\n").@join("\\n"), "\r").@join("\\r"), "\t").@join("\\t");
											this.buf.b.Append(((string) (global::Std.@string(s1)) ));
										}
										
										this.buf.b.Append(((string) ("\"") ));
									}
									
									break;
								}
								
								
							}
							
							break;
						}
						
						
						case 1:
						{
							string v = ( _g as global::hscript.ExprDef_EIdent ).v;
							this.buf.b.Append(((string) (global::Std.@string(v)) ));
							break;
						}
						
						
						case 2:
						{
							string n = ( _g as global::hscript.ExprDef_EVar ).n;
							global::hscript.CType t = ( _g as global::hscript.ExprDef_EVar ).t;
							object e1 = ( _g as global::hscript.ExprDef_EVar ).e;
							{
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat("var ", n))) ));
								this.addType(t);
								if (( e1 != null )) {
									this.buf.b.Append(((string) (" = ") ));
									this.expr(e1);
								}
								
							}
							
							break;
						}
						
						
						case 3:
						{
							object e2 = ( _g as global::hscript.ExprDef_EParent ).e;
							{
								this.buf.b.Append(((string) ("(") ));
								this.expr(e2);
								this.buf.b.Append(((string) (")") ));
							}
							
							break;
						}
						
						
						case 4:
						{
							global::Array<object> el = ( _g as global::hscript.ExprDef_EBlock ).e;
							if (( el.length == 0 )) {
								this.buf.b.Append(((string) ("{}") ));
							}
							else {
								{
									global::hscript.Printer __temp_dynop1 = this;
									__temp_dynop1.tabs = global::haxe.lang.Runtime.concat(__temp_dynop1.tabs, "\t");
								}
								
								this.buf.b.Append(((string) ("{\n") ));
								{
									int _g1 = 0;
									while (( _g1 < el.length )) {
										object e3 = el[_g1];
										 ++ _g1;
										this.buf.b.Append(((string) (global::Std.@string(this.tabs)) ));
										this.expr(e3);
										this.buf.b.Append(((string) (";\n") ));
									}
									
								}
								
								this.tabs = global::haxe.lang.StringExt.substr(this.tabs, 1, default(global::haxe.lang.Null<int>));
								this.buf.b.Append(((string) ("}") ));
							}
							
							break;
						}
						
						
						case 5:
						{
							object e4 = ( _g as global::hscript.ExprDef_EField ).e;
							string f1 = ( _g as global::hscript.ExprDef_EField ).f;
							{
								this.expr(e4);
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(".", f1))) ));
							}
							
							break;
						}
						
						
						case 6:
						{
							string op = ( _g as global::hscript.ExprDef_EBinop ).op;
							object e11 = ( _g as global::hscript.ExprDef_EBinop ).e1;
							object e21 = ( _g as global::hscript.ExprDef_EBinop ).e2;
							{
								this.expr(e11);
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", op), " "))) ));
								this.expr(e21);
							}
							
							break;
						}
						
						
						case 7:
						{
							string op1 = ( _g as global::hscript.ExprDef_EUnop ).op;
							bool pre = ( _g as global::hscript.ExprDef_EUnop ).prefix;
							object e5 = ( _g as global::hscript.ExprDef_EUnop ).e;
							if (pre) {
								this.buf.b.Append(((string) (global::Std.@string(op1)) ));
								this.expr(e5);
							}
							else {
								this.expr(e5);
								this.buf.b.Append(((string) (global::Std.@string(op1)) ));
							}
							
							break;
						}
						
						
						case 8:
						{
							object e6 = ( _g as global::hscript.ExprDef_ECall ).e;
							global::Array<object> args = ( _g as global::hscript.ExprDef_ECall ).@params;
							{
								if (( e6 == null )) {
									this.expr(e6);
								}
								else {
									global::hscript.ExprDef _g2 = ((global::hscript.ExprDef) (global::haxe.lang.Runtime.getField(e6, "e", 101, true)) );
									switch (_g2._hx_index) {
										case 0:
										{
											global::hscript.Const _g3 = ( _g2 as global::hscript.ExprDef_EConst ).c;
											this.expr(e6);
											break;
										}
										
										
										case 1:
										{
											string _g4 = ( _g2 as global::hscript.ExprDef_EIdent ).v;
											this.expr(e6);
											break;
										}
										
										
										case 5:
										{
											object _g5 = ( _g2 as global::hscript.ExprDef_EField ).e;
											string _g6 = ( _g2 as global::hscript.ExprDef_EField ).f;
											this.expr(e6);
											break;
										}
										
										
										default:
										{
											this.buf.b.Append(((string) ("(") ));
											this.expr(e6);
											this.buf.b.Append(((string) (")") ));
											break;
										}
										
									}
									
								}
								
								this.buf.b.Append(((string) ("(") ));
								bool first = true;
								{
									int _g7 = 0;
									while (( _g7 < args.length )) {
										object a = args[_g7];
										 ++ _g7;
										if (first) {
											first = false;
										}
										else {
											this.buf.b.Append(((string) (", ") ));
										}
										
										this.expr(a);
									}
									
								}
								
								this.buf.b.Append(((string) (")") ));
							}
							
							break;
						}
						
						
						case 9:
						{
							object cond = ( _g as global::hscript.ExprDef_EIf ).cond;
							object e12 = ( _g as global::hscript.ExprDef_EIf ).e1;
							object e22 = ( _g as global::hscript.ExprDef_EIf ).e2;
							{
								this.buf.b.Append(((string) ("if( ") ));
								this.expr(cond);
								this.buf.b.Append(((string) (" ) ") ));
								this.expr(e12);
								if (( e22 != null )) {
									this.buf.b.Append(((string) (" else ") ));
									this.expr(e22);
								}
								
							}
							
							break;
						}
						
						
						case 10:
						{
							object cond1 = ( _g as global::hscript.ExprDef_EWhile ).cond;
							object e7 = ( _g as global::hscript.ExprDef_EWhile ).e;
							{
								this.buf.b.Append(((string) ("while( ") ));
								this.expr(cond1);
								this.buf.b.Append(((string) (" ) ") ));
								this.expr(e7);
							}
							
							break;
						}
						
						
						case 11:
						{
							string v1 = ( _g as global::hscript.ExprDef_EFor ).v;
							object it = ( _g as global::hscript.ExprDef_EFor ).it;
							object e8 = ( _g as global::hscript.ExprDef_EFor ).e;
							{
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("for( ", v1), " in "))) ));
								this.expr(it);
								this.buf.b.Append(((string) (" ) ") ));
								this.expr(e8);
							}
							
							break;
						}
						
						
						case 12:
						{
							this.buf.b.Append(((string) ("break") ));
							break;
						}
						
						
						case 13:
						{
							this.buf.b.Append(((string) ("continue") ));
							break;
						}
						
						
						case 14:
						{
							global::Array<object> @params = ( _g as global::hscript.ExprDef_EFunction ).args;
							object e9 = ( _g as global::hscript.ExprDef_EFunction ).e;
							string name = ( _g as global::hscript.ExprDef_EFunction ).name;
							global::hscript.CType ret = ( _g as global::hscript.ExprDef_EFunction ).ret;
							{
								this.buf.b.Append(((string) ("function") ));
								if (( name != null )) {
									this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(" ", name))) ));
								}
								
								this.buf.b.Append(((string) ("(") ));
								bool first1 = true;
								{
									int _g8 = 0;
									while (( _g8 < @params.length )) {
										object a1 = @params[_g8];
										 ++ _g8;
										if (first1) {
											first1 = false;
										}
										else {
											this.buf.b.Append(((string) (", ") ));
										}
										
										if (((global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(a1, "opt", 5545011, true)))).@value) {
											this.buf.b.Append(((string) ("?") ));
										}
										
										this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a1, "name", 1224700491, true)))) ));
										this.addType(((global::hscript.CType) (global::haxe.lang.Runtime.getField(a1, "t", 116, true)) ));
									}
									
								}
								
								this.buf.b.Append(((string) (")") ));
								this.addType(ret);
								this.buf.b.Append(((string) (" ") ));
								this.expr(e9);
							}
							
							break;
						}
						
						
						case 15:
						{
							object e10 = ( _g as global::hscript.ExprDef_EReturn ).e;
							{
								this.buf.b.Append(((string) ("return") ));
								if (( e10 != null )) {
									this.buf.b.Append(((string) (" ") ));
									this.expr(e10);
								}
								
							}
							
							break;
						}
						
						
						case 16:
						{
							object e13 = ( _g as global::hscript.ExprDef_EArray ).e;
							object index = ( _g as global::hscript.ExprDef_EArray ).index;
							{
								this.expr(e13);
								this.buf.b.Append(((string) ("[") ));
								this.expr(index);
								this.buf.b.Append(((string) ("]") ));
							}
							
							break;
						}
						
						
						case 17:
						{
							global::Array<object> el1 = ( _g as global::hscript.ExprDef_EArrayDecl ).e;
							{
								this.buf.b.Append(((string) ("[") ));
								bool first2 = true;
								{
									int _g9 = 0;
									while (( _g9 < el1.length )) {
										object e14 = el1[_g9];
										 ++ _g9;
										if (first2) {
											first2 = false;
										}
										else {
											this.buf.b.Append(((string) (", ") ));
										}
										
										this.expr(e14);
									}
									
								}
								
								this.buf.b.Append(((string) ("]") ));
							}
							
							break;
						}
						
						
						case 18:
						{
							string cl = ( _g as global::hscript.ExprDef_ENew ).cl;
							global::Array<object> args1 = ( _g as global::hscript.ExprDef_ENew ).@params;
							{
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("new ", cl), "("))) ));
								bool first3 = true;
								{
									int _g10 = 0;
									while (( _g10 < args1.length )) {
										object e15 = args1[_g10];
										 ++ _g10;
										if (first3) {
											first3 = false;
										}
										else {
											this.buf.b.Append(((string) (", ") ));
										}
										
										this.expr(e15);
									}
									
								}
								
								this.buf.b.Append(((string) (")") ));
							}
							
							break;
						}
						
						
						case 19:
						{
							object e16 = ( _g as global::hscript.ExprDef_EThrow ).e;
							{
								this.buf.b.Append(((string) ("throw ") ));
								this.expr(e16);
							}
							
							break;
						}
						
						
						case 20:
						{
							object e17 = ( _g as global::hscript.ExprDef_ETry ).e;
							string v2 = ( _g as global::hscript.ExprDef_ETry ).v;
							global::hscript.CType t1 = ( _g as global::hscript.ExprDef_ETry ).t;
							object ecatch = ( _g as global::hscript.ExprDef_ETry ).ecatch;
							{
								this.buf.b.Append(((string) ("try ") ));
								this.expr(e17);
								this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(" catch( ", v2))) ));
								this.addType(t1);
								this.buf.b.Append(((string) (") ") ));
								this.expr(ecatch);
							}
							
							break;
						}
						
						
						case 21:
						{
							global::Array<object> fl = ( _g as global::hscript.ExprDef_EObject ).fl;
							if (( fl.length == 0 )) {
								this.buf.b.Append(((string) ("{}") ));
							}
							else {
								{
									global::hscript.Printer __temp_dynop2 = this;
									__temp_dynop2.tabs = global::haxe.lang.Runtime.concat(__temp_dynop2.tabs, "\t");
								}
								
								this.buf.b.Append(((string) ("{\n") ));
								{
									int _g11 = 0;
									while (( _g11 < fl.length )) {
										object f2 = fl[_g11];
										 ++ _g11;
										this.buf.b.Append(((string) (global::Std.@string(this.tabs)) ));
										this.buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(f2, "name", 1224700491, true)), " : "))) ));
										this.expr(global::haxe.lang.Runtime.getField(f2, "e", 101, true));
										this.buf.b.Append(((string) (",\n") ));
									}
									
								}
								
								this.tabs = global::haxe.lang.StringExt.substr(this.tabs, 1, default(global::haxe.lang.Null<int>));
								this.buf.b.Append(((string) ("}") ));
							}
							
							break;
						}
						
						
						case 22:
						{
							object c1 = ( _g as global::hscript.ExprDef_ETernary ).cond;
							object e18 = ( _g as global::hscript.ExprDef_ETernary ).e1;
							object e23 = ( _g as global::hscript.ExprDef_ETernary ).e2;
							{
								this.expr(c1);
								this.buf.b.Append(((string) (" ? ") ));
								this.expr(e18);
								this.buf.b.Append(((string) (" : ") ));
								this.expr(e23);
							}
							
							break;
						}
						
						
						case 23:
						{
							object e19 = ( _g as global::hscript.ExprDef_ESwitch ).e;
							global::Array<object> cases = ( _g as global::hscript.ExprDef_ESwitch ).cases;
							object def = ( _g as global::hscript.ExprDef_ESwitch ).defaultExpr;
							{
								this.buf.b.Append(((string) ("switch( ") ));
								this.expr(e19);
								this.buf.b.Append(((string) (") {") ));
								{
									int _g12 = 0;
									while (( _g12 < cases.length )) {
										object c2 = cases[_g12];
										 ++ _g12;
										this.buf.b.Append(((string) ("case ") ));
										bool first4 = true;
										{
											int _g13 = 0;
											global::Array<object> _g14 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(c2, "values", 1337394146, true)) ))) );
											while (( _g13 < _g14.length )) {
												object v3 = _g14[_g13];
												 ++ _g13;
												if (first4) {
													first4 = false;
												}
												else {
													this.buf.b.Append(((string) (", ") ));
												}
												
												this.expr(v3);
											}
											
										}
										
										this.buf.b.Append(((string) (": ") ));
										this.expr(global::haxe.lang.Runtime.getField(c2, "expr", 1126038837, true));
										this.buf.b.Append(((string) (";\n") ));
									}
									
								}
								
								if (( def != null )) {
									this.buf.b.Append(((string) ("default: ") ));
									this.expr(def);
									this.buf.b.Append(((string) (";\n") ));
								}
								
								this.buf.b.Append(((string) ("}") ));
							}
							
							break;
						}
						
						
						case 24:
						{
							object cond2 = ( _g as global::hscript.ExprDef_EDoWhile ).cond;
							object e20 = ( _g as global::hscript.ExprDef_EDoWhile ).e;
							{
								this.buf.b.Append(((string) ("do ") ));
								this.expr(e20);
								this.buf.b.Append(((string) (" while ( ") ));
								this.expr(cond2);
								this.buf.b.Append(((string) (" )") ));
							}
							
							break;
						}
						
						
						case 25:
						{
							string name1 = ( _g as global::hscript.ExprDef_EMeta ).name;
							global::Array<object> args2 = ( _g as global::hscript.ExprDef_EMeta ).args;
							object e24 = ( _g as global::hscript.ExprDef_EMeta ).e;
							{
								this.buf.b.Append(((string) ("@") ));
								this.buf.b.Append(((string) (global::Std.@string(name1)) ));
								if (( ( args2 != null ) && ( args2.length > 0 ) )) {
									this.buf.b.Append(((string) ("(") ));
									bool first5 = true;
									{
										int _g15 = 0;
										while (( _g15 < args2.length )) {
											object a2 = args2[_g15];
											 ++ _g15;
											if (first5) {
												first5 = false;
											}
											else {
												this.buf.b.Append(((string) (", ") ));
											}
											
											this.expr(e24);
										}
										
									}
									
									this.buf.b.Append(((string) (")") ));
								}
								
								this.buf.b.Append(((string) (" ") ));
								this.expr(e24);
							}
							
							break;
						}
						
						
						case 26:
						{
							object e25 = ( _g as global::hscript.ExprDef_ECheckType ).e;
							global::hscript.CType t2 = ( _g as global::hscript.ExprDef_ECheckType ).t;
							{
								this.buf.b.Append(((string) ("(") ));
								this.expr(e25);
								this.buf.b.Append(((string) (" : ") ));
								this.addType(t2);
								this.buf.b.Append(((string) (")") ));
							}
							
							break;
						}
						
						
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1291235454:
					{
						this.tabs = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 4899635:
					{
						this.buf = ((global::StringBuf) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1126038837:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "expr", 1126038837)) );
					}
					
					
					case 155596155:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addType", 155596155)) );
					}
					
					
					case 1292432058:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "type", 1292432058)) );
					}
					
					
					case 4846113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "add", 4846113)) );
					}
					
					
					case 533842310:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "typeToString", 533842310)) );
					}
					
					
					case 2063484673:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "exprToString", 2063484673)) );
					}
					
					
					case 1291235454:
					{
						return this.tabs;
					}
					
					
					case 4899635:
					{
						return this.buf;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1126038837:
					{
						this.expr(dynargs[0]);
						break;
					}
					
					
					case 155596155:
					{
						this.addType(((global::hscript.CType) (dynargs[0]) ));
						break;
					}
					
					
					case 1292432058:
					{
						this.type(((global::hscript.CType) (dynargs[0]) ));
						break;
					}
					
					
					case 4846113:
					{
						this.@add<object>(((object) (dynargs[0]) ));
						break;
					}
					
					
					case 533842310:
					{
						return this.typeToString(((global::hscript.CType) (dynargs[0]) ));
					}
					
					
					case 2063484673:
					{
						return this.exprToString(dynargs[0]);
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("tabs");
			baseArr.push("buf");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hscript {
	public class Printer_type_69__Fun : global::haxe.lang.Function {
		
		public Printer_type_69__Fun() : base(1, 0) {
		}
		
		
		public static global::hscript.Printer_type_69__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::hscript.CType a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hscript.CType) (((object) (__fn_float1) )) )) : (((global::hscript.CType) (__fn_dyn1) )) );
				if (( a._hx_index == 5 )) {
					string _g = ( a as global::hscript.CType_CTNamed ).n;
					global::hscript.CType _g1 = ( a as global::hscript.CType_CTNamed ).t;
					return true;
				}
				else {
					return false;
				}
				
			}
		}
		
		
	}
}


