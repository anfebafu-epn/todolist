<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\fields;

use \nMorph\framework\orm\interfaces\ISet;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\enums\DBTypeEnum;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\FieldSentence;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\common\exceptions\ExceptionHelper;
use \nMorph\framework\orm\common\enums\HaxeTypeEnum;
use \nMorph\framework\orm\common\enums\NullableEnum;

class DateTimeSentence extends FieldSentence {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.framework.orm.common.fields.DateTimeSentence\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\x0A\x09<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"20\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></ValidateDBCompatibility>\x0A\x09<Equals public=\"1\" set=\"method\" line=\"30\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Equals>\x0A\x09<Different public=\"1\" set=\"method\" line=\"35\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Different>\x0A\x09<LessThan public=\"1\" set=\"method\" line=\"40\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThan>\x0A\x09<LessThanAndEquals public=\"1\" set=\"method\" line=\"45\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></LessThanAndEquals>\x0A\x09<MoreThan public=\"1\" set=\"method\" line=\"50\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThan>\x0A\x09<MoreThanAndEquals public=\"1\" set=\"method\" line=\"55\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></MoreThanAndEquals>\x0A\x09<IsNull public=\"1\" set=\"method\" line=\"60\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\x0A\x09<IsNotNull public=\"1\" set=\"method\" line=\"64\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\x0A\x09<SET public=\"1\" set=\"method\" line=\"68\"><f a=\"DateValue\">\x0A\x09<c path=\"Date\"/>\x0A\x09<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\x0A</f></SET>\x0A\x09<new public=\"1\" set=\"method\" line=\"16\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A\x09<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\x0A\x09<x path=\"Bool\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></new>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keep\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @param string $FieldTable
	 * @param string $FieldName
	 * @param NullableEnum $Nullable
	 * @param bool $IsPrimaryKey
	 * 
	 * @return void
	 */
	public function __construct ($FieldTable, $FieldName, $Nullable, $IsPrimaryKey) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:17: characters 9-113
		parent::__construct($FieldTable, $FieldName, DBTypeEnum::DATETIME(), HaxeTypeEnum::DATE(), null, null, $Nullable, $IsPrimaryKey);
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function Different ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:36: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:37: characters 9-70
		return Condition::SET($this, Op::Different(), Val::date($DateValue));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function Equals ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:31: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:32: characters 9-66
		return Condition::SET($this, Op::Equal(), Val::date($DateValue));
	}

	/**
	 * @return Condition
	 */
	public function IsNotNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:65: characters 9-65
		return Condition::SET($this, Op::Different(), Val::date(null));
	}

	/**
	 * @return Condition
	 */
	public function IsNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:61: characters 9-61
		return Condition::SET($this, Op::Equal(), Val::date(null));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function LessThan ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:41: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:42: characters 9-69
		return Condition::SET($this, Op::LessThan(), Val::date($DateValue));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function LessThanAndEquals ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:46: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:47: characters 9-78
		return Condition::SET($this, Op::LessThanAndEquals(), Val::date($DateValue));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function MoreThan ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:51: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:52: characters 9-69
		return Condition::SET($this, Op::MoreThan(), Val::date($DateValue));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return Condition
	 */
	public function MoreThanAndEquals ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:56: characters 9-43
		$this->ValidateDBCompatibility($DateValue);
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:57: characters 9-78
		return Condition::SET($this, Op::MoreThanAndEquals(), Val::date($DateValue));
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return ISet
	 */
	public function SET ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:69: characters 9-57
		$asg = Assign::SET($this, Val::date($DateValue));
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:70: characters 9-19
		return $asg;
	}

	/**
	 * @param \Date $DateValue
	 * 
	 * @return void
	 */
	public function ValidateDBCompatibility ($DateValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:21: lines 21-23
		if ($DateValue->getFullYear() < 1753) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:22: characters 13-116
			ExceptionHelper::LogicException(50006, "Date not compatible with Database, Date is less than year 1753");
		}
		#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:25: lines 25-27
		if ($DateValue->getFullYear() > 9999) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/DateTimeSentence.hx:26: characters 13-116
			ExceptionHelper::LogicException(50007, "Date not compatible with Database, Date is more than year 9999");
		}
	}
}

Boot::registerClass(DateTimeSentence::class, 'nMorph.framework.orm.common.fields.DateTimeSentence');
