// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.core.logic.task {
	public sealed class TaskLogic : global::haxe.lang.HxObject {
		
		static TaskLogic() {
			global::nMorph.core.logic.task.TaskLogic.__rtti = "<class path=\"nMorph.core.logic.task.TaskLogic\" params=\"\" final=\"1\">\n\t<Task_Search public=\"1\" set=\"method\" line=\"32\"><f a=\"SearchTerm:CategoryID:PersonID\">\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<c path=\"Array\"><c path=\"nMorph.core.db.sw_todolist.Task_VTA\"/></c>\n</f></Task_Search>\n\t<Task_GetByID public=\"1\" set=\"method\" line=\"52\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<c path=\"nMorph.core.db.sw_todolist.Task\"/>\n</f></Task_GetByID>\n\t<Task_SetComplete public=\"1\" set=\"method\" line=\"57\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<x path=\"Void\"/>\n</f></Task_SetComplete>\n\t<Task_Save public=\"1\" set=\"method\" line=\"68\"><f a=\"UpdatedObj\">\n\t<c path=\"nMorph.core.db.sw_todolist.Task\"/>\n\t<x path=\"Void\"/>\n</f></Task_Save>\n\t<Task_Delete public=\"1\" set=\"method\" line=\"113\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<x path=\"Void\"/>\n</f></Task_Delete>\n\t<new public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<haxe_doc>* ...\n * @author Smartwork</haxe_doc>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":final\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public TaskLogic(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TaskLogic() {
			global::nMorph.core.logic.task.TaskLogic.__hx_ctor_nMorph_core_logic_task_TaskLogic(this);
		}
		
		
		private static void __hx_ctor_nMorph_core_logic_task_TaskLogic(global::nMorph.core.logic.task.TaskLogic __hx_this) {
		}
		
		
		public static string __rtti;
		
		public global::Array<object> Task_Search(string SearchTerm, global::nMorph.framework.common.datatypes.UUID CategoryID, global::nMorph.framework.common.datatypes.UUID PersonID) {
			global::nMorph.framework.orm.common.conditions.ConditionGroup cg = global::nMorph.framework.orm.common.conditions.ConditionGroup.SET(global::nMorph.core.db.sw_todolist.Task_VTA.col_Title.LIKE(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("%", SearchTerm), "%")).OR(global::nMorph.core.db.sw_todolist.Task_VTA.col_Description.LIKE(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("%", SearchTerm), "%")))).AND(global::nMorph.core.db.sw_todolist.Task_VTA.col_IsCompleted.Equals(false));
			if ( ! (CategoryID.@equals(global::nMorph.framework.common.datatypes.UUID.empty())) ) {
				cg = cg.AND(global::nMorph.core.db.sw_todolist.Task_VTA.col_CategoryId.eq(CategoryID));
			}
			
			if ( ! (PersonID.@equals(global::nMorph.framework.common.datatypes.UUID.empty())) ) {
				cg = cg.AND(global::nMorph.core.db.sw_todolist.Task_VTA.col_PersonId.eq(PersonID));
			}
			
			global::Array<object> lst = global::nMorph.core.db.sw_todolist.Task_VTA.WHERE(cg).Read<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Task_VTA)) ), default(global::nMorph.framework.orm.tools.Context));
			return lst;
		}
		
		
		public global::nMorph.core.db.sw_todolist.Task Task_GetByID(global::nMorph.framework.common.datatypes.UUID ID) {
			global::nMorph.core.db.sw_todolist.Task cat = ((global::nMorph.core.db.sw_todolist.Task) (global::nMorph.core.db.sw_todolist.Task.BYPK(ID).ReadOne<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Task)) ), default(global::nMorph.framework.orm.tools.Context))) );
			return cat;
		}
		
		
		public void Task_SetComplete(global::nMorph.framework.common.datatypes.UUID ID) {
			global::nMorph.framework.orm.lang.SQL.UPDATE(global::nMorph.core.db.sw_todolist.Task.table, null).SET(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_IsCompleted, global::nMorph.framework.orm.common.sentences.Val.@bool(new global::haxe.lang.Null<bool>(true, true)))})).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Task.col_TaskId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(ID))).Execute();
		}
		
		
		public void Task_Save(global::nMorph.core.db.sw_todolist.Task UpdatedObj) {
			int Exists = ((int) (global::haxe.lang.Runtime.toInt(global::nMorph.framework.orm.lang.SQL.SELECT(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Ag.COUNTALL(null)}), null).FROM(global::nMorph.core.db.sw_todolist.Task.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Task.col_TaskId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_TaskId()))).ReadValue())) );
			if (( Exists == 0 )) {
				global::nMorph.framework.orm.lang.SQL.INSERT(global::nMorph.core.db.sw_todolist.Task.table, null).VALUES(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_TaskId()), global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_PersonId()), global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_CategoryId()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Title()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Description()), global::nMorph.framework.orm.common.sentences.Val.date(new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ))), global::nMorph.framework.orm.common.sentences.Val.date(UpdatedObj.get_DueDate()), global::nMorph.framework.orm.common.sentences.Val.@bool(new global::haxe.lang.Null<bool>(UpdatedObj.get_IsCompleted(), true))})).Execute();
			}
			else {
				global::nMorph.framework.orm.lang.SQL.UPDATE(global::nMorph.core.db.sw_todolist.Task.table, null).SET(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_PersonId, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_PersonId())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_CategoryId, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_CategoryId())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_Title, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Title())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_Description, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Description())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_DueDate, global::nMorph.framework.orm.common.sentences.Val.date(UpdatedObj.get_DueDate())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Task.col_IsCompleted, global::nMorph.framework.orm.common.sentences.Val.@bool(new global::haxe.lang.Null<bool>(UpdatedObj.get_IsCompleted(), true)))})).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Task.col_TaskId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_TaskId()))).Execute();
			}
			
		}
		
		
		public void Task_Delete(global::nMorph.framework.common.datatypes.UUID ID) {
			global::nMorph.framework.orm.lang.SQL.DELETE(null).FROM(global::nMorph.core.db.sw_todolist.Task.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Task.col_TaskId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(ID))).Execute();
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1570685221:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Task_Delete", 1570685221)) );
					}
					
					
					case 1138719159:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Task_Save", 1138719159)) );
					}
					
					
					case 1692073793:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Task_SetComplete", 1692073793)) );
					}
					
					
					case 237011694:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Task_GetByID", 237011694)) );
					}
					
					
					case 1438490722:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Task_Search", 1438490722)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1570685221:
					{
						this.Task_Delete(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
						break;
					}
					
					
					case 1138719159:
					{
						this.Task_Save(((global::nMorph.core.db.sw_todolist.Task) (dynargs[0]) ));
						break;
					}
					
					
					case 1692073793:
					{
						this.Task_SetComplete(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
						break;
					}
					
					
					case 237011694:
					{
						return this.Task_GetByID(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
					}
					
					
					case 1438490722:
					{
						return this.Task_Search(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::nMorph.framework.common.datatypes.UUID) (dynargs[1]) ), ((global::nMorph.framework.common.datatypes.UUID) (dynargs[2]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


