// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.core.logic.person {
	public sealed class PersonLogic : global::haxe.lang.HxObject {
		
		static PersonLogic() {
			global::nMorph.core.logic.person.PersonLogic.__rtti = "<class path=\"nMorph.core.logic.person.PersonLogic\" params=\"\" final=\"1\">\n\t<Person_Login public=\"1\" set=\"method\" line=\"31\"><f a=\"Email:password\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<c path=\"nMorph.core.db.sw_todolist.Person\"/>\n</f></Person_Login>\n\t<Person_Search public=\"1\" set=\"method\" line=\"43\"><f a=\"SearchTerm\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.core.db.sw_todolist.Person\"/></c>\n</f></Person_Search>\n\t<Person_GetByID public=\"1\" set=\"method\" line=\"54\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<c path=\"nMorph.core.db.sw_todolist.Person\"/>\n</f></Person_GetByID>\n\t<Person_Save public=\"1\" set=\"method\" line=\"60\"><f a=\"UpdatedObj\">\n\t<c path=\"nMorph.core.db.sw_todolist.Person\"/>\n\t<x path=\"Void\"/>\n</f></Person_Save>\n\t<Person_Delete public=\"1\" set=\"method\" line=\"96\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<x path=\"Void\"/>\n</f></Person_Delete>\n\t<new public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<haxe_doc>* ...\n * @author Smartwork</haxe_doc>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":final\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public PersonLogic(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public PersonLogic() {
			global::nMorph.core.logic.person.PersonLogic.__hx_ctor_nMorph_core_logic_person_PersonLogic(this);
		}
		
		
		private static void __hx_ctor_nMorph_core_logic_person_PersonLogic(global::nMorph.core.logic.person.PersonLogic __hx_this) {
		}
		
		
		public static string __rtti;
		
		public global::nMorph.core.db.sw_todolist.Person Person_Login(string Email, string password) {
			global::nMorph.core.db.sw_todolist.Person p = ((global::nMorph.core.db.sw_todolist.Person) (global::nMorph.core.db.sw_todolist.Person.WHERE(global::nMorph.core.db.sw_todolist.Person.col_Email.Equals(Email).AND(global::nMorph.core.db.sw_todolist.Person.col_PasswordHash.Equals(password))).ReadOne<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Person)) ), default(global::nMorph.framework.orm.tools.Context))) );
			if (( p != null )) {
				p.set_PasswordHash("");
			}
			
			return p;
		}
		
		
		public global::Array<object> Person_Search(string SearchTerm) {
			global::Array<object> lst = global::nMorph.core.db.sw_todolist.Person.WHERE(global::nMorph.core.db.sw_todolist.Person.col_FullName.LIKE(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("%", SearchTerm), "%")).OR(global::nMorph.core.db.sw_todolist.Person.col_Email.LIKE(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("%", SearchTerm), "%")))).ORDERBY(new global::Array<object>(new object[]{global::nMorph.core.db.sw_todolist.Person.col_FullName})).Read<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Person)) ), default(global::nMorph.framework.orm.tools.Context));
			return lst;
		}
		
		
		public global::nMorph.core.db.sw_todolist.Person Person_GetByID(global::nMorph.framework.common.datatypes.UUID ID) {
			global::nMorph.core.db.sw_todolist.Person cat = ((global::nMorph.core.db.sw_todolist.Person) (global::nMorph.core.db.sw_todolist.Person.BYPK(ID).ReadOne<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Person)) ), default(global::nMorph.framework.orm.tools.Context))) );
			return cat;
		}
		
		
		public void Person_Save(global::nMorph.core.db.sw_todolist.Person UpdatedObj) {
			int Exists = ((int) (global::haxe.lang.Runtime.toInt(global::nMorph.framework.orm.lang.SQL.SELECT(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Ag.COUNTALL(null)}), null).FROM(global::nMorph.core.db.sw_todolist.Person.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Person.col_PersonId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_PersonId()))).ReadValue())) );
			if (( Exists == 0 )) {
				global::nMorph.framework.orm.lang.SQL.INSERT(global::nMorph.core.db.sw_todolist.Person.table, null).VALUES(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_PersonId()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_FullName()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Email()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_PasswordHash()), global::nMorph.framework.orm.common.sentences.Val.@int(UpdatedObj.get_Role())})).Execute();
			}
			else {
				global::nMorph.framework.orm.lang.SQL.UPDATE(global::nMorph.core.db.sw_todolist.Person.table, null).SET(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Person.col_FullName, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_FullName())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Person.col_Email, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_Email())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Person.col_PasswordHash, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_PasswordHash())), global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Person.col_Role, global::nMorph.framework.orm.common.sentences.Val.@int(UpdatedObj.get_Role()))})).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Person.col_PersonId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_PersonId()))).Execute();
			}
			
		}
		
		
		public void Person_Delete(global::nMorph.framework.common.datatypes.UUID ID) {
			unchecked {
				int Exists = ((int) (global::haxe.lang.Runtime.toInt(global::nMorph.framework.orm.lang.SQL.SELECT(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Ag.COUNTALL(null)}), null).FROM(global::nMorph.core.db.sw_todolist.Task.table).WHERE(global::nMorph.core.db.sw_todolist.Task.col_PersonId.eq(ID)).ReadValue())) );
				if (( Exists > 0 )) {
					global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1001, "Unable to delete Person. There are associated tasks.");
					return;
				}
				
				global::nMorph.framework.orm.lang.SQL.DELETE(null).FROM(global::nMorph.core.db.sw_todolist.Person.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Person.col_PersonId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(ID))).Execute();
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 426437333:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Person_Delete", 426437333)) );
					}
					
					
					case 827643751:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Person_Save", 827643751)) );
					}
					
					
					case 620286782:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Person_GetByID", 620286782)) );
					}
					
					
					case 294242834:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Person_Search", 294242834)) );
					}
					
					
					case 2052010495:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Person_Login", 2052010495)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 426437333:
					{
						this.Person_Delete(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
						break;
					}
					
					
					case 827643751:
					{
						this.Person_Save(((global::nMorph.core.db.sw_todolist.Person) (dynargs[0]) ));
						break;
					}
					
					
					case 620286782:
					{
						return this.Person_GetByID(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
					}
					
					
					case 294242834:
					{
						return this.Person_Search(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 2052010495:
					{
						return this.Person_Login(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


