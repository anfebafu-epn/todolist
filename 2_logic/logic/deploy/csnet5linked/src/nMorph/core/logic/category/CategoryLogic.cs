// Generated by Haxe 4.2.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nMorph.core.logic.category {
	public sealed class CategoryLogic : global::haxe.lang.HxObject {
		
		static CategoryLogic() {
			global::nMorph.core.logic.category.CategoryLogic.__rtti = "<class path=\"nMorph.core.logic.category.CategoryLogic\" params=\"\" final=\"1\">\n\t<Query public=\"1\" set=\"method\" line=\"32\"><f a=\"\"><c path=\"String\"/></f></Query>\n\t<Category_Search public=\"1\" set=\"method\" line=\"38\"><f a=\"SearchTerm\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"nMorph.core.db.sw_todolist.Category\"/></c>\n</f></Category_Search>\n\t<Category_GetByID public=\"1\" set=\"method\" line=\"49\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<c path=\"nMorph.core.db.sw_todolist.Category\"/>\n</f></Category_GetByID>\n\t<Category_Save public=\"1\" set=\"method\" line=\"57\"><f a=\"UpdatedObj\">\n\t<c path=\"nMorph.core.db.sw_todolist.Category\"/>\n\t<x path=\"Void\"/>\n</f></Category_Save>\n\t<Category_Delete public=\"1\" set=\"method\" line=\"82\"><f a=\"ID\">\n\t<c path=\"nMorph.framework.common.datatypes.UUID\"/>\n\t<x path=\"Void\"/>\n</f></Category_Delete>\n\t<new public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<haxe_doc>* ...\n * @author Smartwork</haxe_doc>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":hxGen\"/>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":final\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
		}
		
		
		public CategoryLogic(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CategoryLogic() {
			global::nMorph.core.logic.category.CategoryLogic.__hx_ctor_nMorph_core_logic_category_CategoryLogic(this);
		}
		
		
		private static void __hx_ctor_nMorph_core_logic_category_CategoryLogic(global::nMorph.core.logic.category.CategoryLogic __hx_this) {
		}
		
		
		public static string __rtti;
		
		public string Query() {
			global::nMorph.core.db.sw_todolist.Category p = ((global::nMorph.core.db.sw_todolist.Category) (global::nMorph.framework.orm.lang.SQL.SELECT(null, null).FROM(global::nMorph.core.db.sw_todolist.Category.table).ReadOne<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Category)) ), default(global::nMorph.framework.orm.tools.Context))) );
			return p.get_CategoryName();
		}
		
		
		public global::Array<object> Category_Search(string SearchTerm) {
			global::Array<object> lst = global::nMorph.core.db.sw_todolist.Category.WHERE(global::nMorph.core.db.sw_todolist.Category.col_CategoryName.LIKE(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("%", SearchTerm), "%"))).ORDERBY(new global::Array<object>(new object[]{global::nMorph.core.db.sw_todolist.Category.col_CategoryName})).Read<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Category)) ), default(global::nMorph.framework.orm.tools.Context));
			return lst;
		}
		
		
		public global::nMorph.core.db.sw_todolist.Category Category_GetByID(global::nMorph.framework.common.datatypes.UUID ID) {
			global::nMorph.core.db.sw_todolist.Category cat = ((global::nMorph.core.db.sw_todolist.Category) (global::nMorph.core.db.sw_todolist.Category.BYPK(ID).ReadOne<object>(((global::System.Type) (typeof(global::nMorph.core.db.sw_todolist.Category)) ), default(global::nMorph.framework.orm.tools.Context))) );
			return cat;
		}
		
		
		public void Category_Save(global::nMorph.core.db.sw_todolist.Category UpdatedObj) {
			int Exists = ((int) (global::haxe.lang.Runtime.toInt(global::nMorph.framework.orm.lang.SQL.SELECT(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Ag.COUNTALL(null)}), null).FROM(global::nMorph.core.db.sw_todolist.Category.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Category.col_CategoryId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_CategoryId()))).ReadValue())) );
			if (( Exists == 0 )) {
				global::nMorph.framework.orm.lang.SQL.INSERT(global::nMorph.core.db.sw_todolist.Category.table, null).VALUES(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_CategoryId()), global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_CategoryName())})).Execute();
			}
			else {
				global::nMorph.framework.orm.lang.SQL.UPDATE(global::nMorph.core.db.sw_todolist.Category.table, null).SET(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Assign.SET(global::nMorph.core.db.sw_todolist.Category.col_CategoryName, global::nMorph.framework.orm.common.sentences.Val.str(UpdatedObj.get_CategoryName()))})).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Category.col_CategoryId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(UpdatedObj.get_CategoryId()))).Execute();
			}
			
		}
		
		
		public void Category_Delete(global::nMorph.framework.common.datatypes.UUID ID) {
			unchecked {
				int Exists = ((int) (global::haxe.lang.Runtime.toInt(global::nMorph.framework.orm.lang.SQL.SELECT(new global::Array<object>(new object[]{global::nMorph.framework.orm.common.sentences.Ag.COUNTALL(null)}), null).FROM(global::nMorph.core.db.sw_todolist.Task.table).WHERE(global::nMorph.core.db.sw_todolist.Task.col_CategoryId.eq(ID)).ReadValue())) );
				if (( Exists > 0 )) {
					global::nMorph.framework.common.exceptions.ExceptionHelper.LogicException(1002, "Unable to delete Category. There are associated tasks.");
					return;
				}
				
				global::nMorph.framework.orm.lang.SQL.DELETE(null).FROM(global::nMorph.core.db.sw_todolist.Category.table).WHERE(global::nMorph.framework.orm.common.conditions.Condition.SET(global::nMorph.core.db.sw_todolist.Category.col_CategoryId, global::nMorph.framework.orm.common.enums.Op.Equal, global::nMorph.framework.orm.common.sentences.Val.uuid(ID))).Execute();
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 222994060:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Category_Delete", 222994060)) );
					}
					
					
					case 1762221918:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Category_Save", 1762221918)) );
					}
					
					
					case 349593511:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Category_GetByID", 349593511)) );
					}
					
					
					case 90799561:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Category_Search", 90799561)) );
					}
					
					
					case 1897396968:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Query", 1897396968)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 222994060:
					{
						this.Category_Delete(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
						break;
					}
					
					
					case 1762221918:
					{
						this.Category_Save(((global::nMorph.core.db.sw_todolist.Category) (dynargs[0]) ));
						break;
					}
					
					
					case 349593511:
					{
						return this.Category_GetByID(((global::nMorph.framework.common.datatypes.UUID) (dynargs[0]) ));
					}
					
					
					case 90799561:
					{
						return this.Category_Search(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1897396968:
					{
						return this.Query();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


