<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \haxe\ds\List_hx;
use \haxe\ds\StringMap;

class Parser {
	/**
	 * @var bool
	 * activate JSON compatiblity
	 */
	public $allowJSON;
	/**
	 * @var bool
	 * allow haxe metadata declarations
	 */
	public $allowMetadata;
	/**
	 * @var bool
	 * allow types declarations
	 */
	public $allowTypes;
	/**
	 * @var int
	 */
	public $char;
	/**
	 * @var string
	 */
	public $identChars;
	/**
	 * @var bool[]|\Array_hx
	 */
	public $idents;
	/**
	 * @var string
	 */
	public $input;
	/**
	 * @var int
	 */
	public $line;
	/**
	 * @var int
	 */
	public $oldTokenMax;
	/**
	 * @var int
	 */
	public $oldTokenMin;
	/**
	 * @var string
	 */
	public $opChars;
	/**
	 * @var StringMap
	 */
	public $opPriority;
	/**
	 * @var StringMap
	 */
	public $opRightAssoc;
	/**
	 * @var bool[]|\Array_hx
	 */
	public $ops;
	/**
	 * @var string
	 */
	public $origin;
	/**
	 * @var object[]|\Array_hx
	 */
	public $preprocStack;
	/**
	 * @var StringMap
	 * allows to check for #if / #else in code
	 */
	public $preprocesorValues;
	/**
	 * @var int
	 */
	public $readPos;
	/**
	 * @var bool
	 * resume from parsing errors (when parsing incomplete code, during completion for example)
	 */
	public $resumeErrors;
	/**
	 * @var int
	 */
	public $tokenMax;
	/**
	 * @var int
	 */
	public $tokenMin;
	/**
	 * @var List_hx
	 */
	public $tokens;
	/**
	 * @var int
	 */
	public $uid;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:91: characters 18-19
		$this->uid = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:62: characters 55-64
		$this->preprocesorValues = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:114: characters 3-11
		$this->line = 1;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:115: characters 3-28
		$this->opChars = "+*/-=!><&|^%~";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:116: characters 3-81
		$this->identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:117: lines 117-129
		$priorities = \Array_hx::wrap([
			\Array_hx::wrap(["%"]),
			\Array_hx::wrap([
				"*",
				"/",
			]),
			\Array_hx::wrap([
				"+",
				"-",
			]),
			\Array_hx::wrap([
				"<<",
				">>",
				">>>",
			]),
			\Array_hx::wrap([
				"|",
				"&",
				"^",
			]),
			\Array_hx::wrap([
				"==",
				"!=",
				">",
				"<",
				">=",
				"<=",
			]),
			\Array_hx::wrap(["..."]),
			\Array_hx::wrap(["&&"]),
			\Array_hx::wrap(["||"]),
			\Array_hx::wrap([
				"=",
				"+=",
				"-=",
				"*=",
				"/=",
				"%=",
				"<<=",
				">>=",
				">>>=",
				"|=",
				"&=",
				"^=",
				"=>",
			]),
			\Array_hx::wrap(["->"]),
		]);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:131: characters 3-25
		$this->opPriority = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:132: characters 3-27
		$this->opRightAssoc = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:137: characters 13-17
		$_g = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:137: characters 17-34
		$_g1 = $priorities->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:137: lines 137-141
		while ($_g < $_g1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:137: characters 13-34
			$i = $_g++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:138: lines 138-141
			$_g2 = 0;
			$_g3 = ($priorities->arr[$i] ?? null);
			while ($_g2 < $_g3->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:138: characters 9-10
				$x = ($_g3->arr[$_g2] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:138: lines 138-141
				++$_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:139: characters 5-25
				$this->opPriority->data[$x] = $i;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:140: characters 5-43
				if ($i === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:140: characters 18-43
					$this->opRightAssoc->data[$x] = true;
				}
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:142: characters 14-17
		$x = "!";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:143: characters 4-55
		$this->opPriority->data[$x] = (($x === "++") || ($x === "--") ? -1 : -2);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:142: characters 19-23
		$x = "++";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:143: characters 4-55
		$this->opPriority->data[$x] = (($x === "++") || ($x === "--") ? -1 : -2);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:142: characters 25-29
		$x = "--";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:143: characters 4-55
		$this->opPriority->data[$x] = (($x === "++") || ($x === "--") ? -1 : -2);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:142: characters 31-34
		$x = "~";
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:143: characters 4-55
		$this->opPriority->data[$x] = (($x === "++") || ($x === "--") ? -1 : -2);
	}

	/**
	 * @return Token
	 */
	public function _token () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1345: characters 3-12
		$char = null;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1346: lines 1346-1351
		if ($this->char < 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1347: characters 4-21
			$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1349: characters 4-20
			$char = $this->char;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1350: characters 4-18
			$this->char = -1;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1352: lines 1352-1560
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1353: lines 1353-1356
			if ($char === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1354: characters 5-21
				$this->char = $char;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1355: characters 5-16
				return Token::TEof();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1357: lines 1357-1558
			if ($char === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1359: characters 5-16
				return Token::TEof();
			} else if ($char === 10) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1364: characters 13-19
				$this->line++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1366: characters 5-15
				$this->tokenMin++;
			} else if ($char === 9 || $char === 13 || $char === 32) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1362: characters 5-15
				$this->tokenMin++;
			} else if ($char === 35) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1512: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1513: lines 1513-1523
				if (($this->idents->arr[$char] ?? null)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1514: characters 6-41
					$id = \mb_chr($char);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1515: lines 1515-1522
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1516: characters 7-24
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1517: lines 1517-1520
						if (!($this->idents->arr[$char] ?? null)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1518: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1519: characters 8-29
							return $this->preprocess($id);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1521: characters 7-38
						$id = ($id??'null') . (\mb_chr($char)??'null');
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1524: characters 5-22
				$this->invalidChar($char);
			} else if ($char === 34 || $char === 39) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1486: characters 29-71
				return Token::TConst(Const_hx::CString($this->readString($char)));
			} else if ($char === 40) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1453: characters 19-32
				return Token::TPOpen();
			} else if ($char === 41) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1454: characters 19-33
				return Token::TPClose();
			} else if ($char === 44) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1455: characters 19-32
				return Token::TComma();
			} else if ($char === 46) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1457: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1458: lines 1458-1481
				if ($char === 46) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1474: characters 6-23
					$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1475: lines 1475-1476
					if ($char !== 46) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1476: characters 7-24
						$this->invalidChar($char);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1477: characters 6-23
					return Token::TOp("...");
				} else if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1460: characters 6-24
					$n = $char - 48;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1461: characters 6-18
					$exp = 1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1462: lines 1462-1472
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1463: characters 7-24
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1464: characters 7-16
						$exp *= 10;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1465: lines 1465-1471
						if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1467: characters 8-32
							$n = $n * 10 + ($char - 48);
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1469: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1470: characters 8-38
							return Token::TConst(Const_hx::CFloat($n / $exp));
						}
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1479: characters 6-22
					$this->char = $char;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1480: characters 6-17
					return Token::TDot();
				}
			} else if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1369: characters 5-31
				$n1 = ($char - 48) * 1.0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1370: characters 5-18
				$exp1 = 0.;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1371: lines 1371-1451
				while (true) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1372: characters 6-23
					$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1373: characters 6-15
					$exp1 *= 10;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1374: lines 1374-1450
					if ($char === 46) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1395: lines 1395-1403
						if ($exp1 > 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1397: lines 1397-1401
							if (Boot::equal($exp1, 10) && (\StringTools::fastCodeAt($this->input, $this->readPos++) === 46)) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1398: characters 9-25
								$this->tokens->push(new _HxAnon_Parser0(Token::TOp("..."), $this->tokenMin, $this->tokenMax));
								$this->tokenMin = $this->oldTokenMin;
								$this->tokenMax = $this->oldTokenMax;
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1399: characters 9-28
								$i = (int)($n1);
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1400: characters 9-56
								return Token::TConst((Boot::equal($i, $n1) ? Const_hx::CInt($i) : Const_hx::CFloat($n1)));
							}
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1402: characters 8-25
							$this->invalidChar($char);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1404: characters 7-15
						$exp1 = 1.;
					} else if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1376: characters 7-31
						$n1 = $n1 * 10 + ($char - 48);
					} else if ($char === 69 || $char === 101) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1378: characters 7-24
						$tk = $this->token();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1379: characters 7-34
						$pow = null;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1380: lines 1380-1390
						$__hx__switch = ($tk->index);
						if ($__hx__switch === 1) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1381: characters 19-26
							$_g = $tk->params[0];
							if ($_g->index === 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1381: characters 24-25
								$e = $_g->params[0];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1381: characters 29-36
								$pow = $e;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1389: characters 8-16
								$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
								$this->tokenMin = $this->oldTokenMin;
								$this->tokenMax = $this->oldTokenMax;
							}
						} else if ($__hx__switch === 3) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1382: characters 16-19
							if ($tk->params[0] === "-") {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1383: characters 8-20
								$tk = $this->token();
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1384: lines 1384-1387
								if ($tk->index === 1) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1385: characters 20-27
									$_g1 = $tk->params[0];
									if ($_g1->index === 0) {
										#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1385: characters 25-26
										$e1 = $_g1->params[0];
										#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1385: characters 30-38
										$pow = -$e1;
									} else {
										#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1386: characters 17-25
										$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
										$this->tokenMin = $this->oldTokenMin;
										$this->tokenMax = $this->oldTokenMax;
									}
								} else {
									$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
									$this->tokenMin = $this->oldTokenMin;
									$this->tokenMax = $this->oldTokenMax;
								}
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1389: characters 8-16
								$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
								$this->tokenMin = $this->oldTokenMin;
								$this->tokenMax = $this->oldTokenMax;
							}
						} else {
							$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
							$this->tokenMin = $this->oldTokenMin;
							$this->tokenMax = $this->oldTokenMax;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1391: lines 1391-1392
						if ($pow === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1392: characters 8-25
							$this->invalidChar($char);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1393: characters 7-64
						return Token::TConst(Const_hx::CFloat((10 ** $pow) / $exp1 * $n1 * 10));
					} else if ($char === 120) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1406: lines 1406-1407
						if (($n1 > 0) || ($exp1 > 0)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1407: characters 8-25
							$this->invalidChar($char);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1410: characters 7-17
						$n2 = 0;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1411: lines 1411-1424
						while (true) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1412: characters 8-25
							$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1413: lines 1413-1423
							if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1415: characters 9-33
								$n2 = ($n2 << 4) + $char - 48;
							} else if ($char === 65 || $char === 66 || $char === 67 || $char === 68 || $char === 69 || $char === 70) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1417: characters 9-35
								$n2 = ($n2 << 4) + ($char - 55);
							} else if ($char === 97 || $char === 98 || $char === 99 || $char === 100 || $char === 101 || $char === 102) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1419: characters 9-35
								$n2 = ($n2 << 4) + ($char - 87);
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1421: characters 9-25
								$this->char = $char;
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1422: characters 9-31
								return Token::TConst(Const_hx::CInt($n2));
							}
						}
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1447: characters 7-23
						$this->char = $char;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1448: characters 7-26
						$i1 = (int)($n1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1449: characters 7-91
						return Token::TConst(($exp1 > 0 ? Const_hx::CFloat($n1 * 10 / $exp1) : (Boot::equal($i1, $n1) ? Const_hx::CInt($i1) : Const_hx::CFloat($n1))));
					}
				}
			} else if ($char === 58) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1488: characters 19-36
				return Token::TDoubleDot();
			} else if ($char === 59) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1452: characters 19-36
				return Token::TSemicolon();
			} else if ($char === 61) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1490: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1491: lines 1491-1494
				if ($char === 61) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1492: characters 6-22
					return Token::TOp("==");
				} else if ($char === 62) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1494: characters 6-22
					return Token::TOp("=>");
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1495: characters 5-21
				$this->char = $char;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1496: characters 5-20
				return Token::TOp("=");
			} else if ($char === 63) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1487: characters 19-35
				return Token::TQuestion();
			} else if ($char === 64) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1498: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1499: lines 1499-1509
				if (($this->idents->arr[$char] ?? null) || ($char === 58)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1500: characters 6-41
					$id1 = \mb_chr($char);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1501: lines 1501-1508
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1502: characters 7-24
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1503: lines 1503-1506
						if (!($this->idents->arr[$char] ?? null)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1504: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1505: characters 8-24
							return Token::TMeta($id1);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1507: characters 7-38
						$id1 = ($id1??'null') . (\mb_chr($char)??'null');
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1510: characters 5-22
				$this->invalidChar($char);
			} else if ($char === 91) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1484: characters 19-33
				return Token::TBkOpen();
			} else if ($char === 93) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1485: characters 19-34
				return Token::TBkClose();
			} else if ($char === 123) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1482: characters 19-33
				return Token::TBrOpen();
			} else if ($char === 125) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1483: characters 19-34
				return Token::TBrClose();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1526: lines 1526-1544
				if (($this->ops->arr[$char] ?? null)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1527: characters 6-41
					$op = \mb_chr($char);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1528: lines 1528-1543
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1529: characters 7-24
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1530: characters 7-45
						if ($char === 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1530: characters 37-45
							$char = 0;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1531: lines 1531-1534
						if (!($this->ops->arr[$char] ?? null)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1532: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1533: characters 8-22
							return Token::TOp($op);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1535: characters 7-20
						$pop = $op;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1536: characters 7-38
						$op = ($op??'null') . (\mb_chr($char)??'null');
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1537: lines 1537-1542
						if (!\array_key_exists($op, $this->opPriority->data) && \array_key_exists($pop, $this->opPriority->data)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1538: lines 1538-1539
							if (($op === "//") || ($op === "/*")) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1539: characters 9-37
								return $this->tokenComment($op, $char);
							}
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1540: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1541: characters 8-23
							return Token::TOp($pop);
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1545: lines 1545-1556
				if (($this->idents->arr[$char] ?? null)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1546: characters 6-41
					$id2 = \mb_chr($char);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1547: lines 1547-1555
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1548: characters 7-24
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1549: characters 7-45
						if ($char === 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1549: characters 37-45
							$char = 0;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1550: lines 1550-1553
						if (!($this->idents->arr[$char] ?? null)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1551: characters 8-24
							$this->char = $char;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1552: characters 8-22
							return Token::TId($id2);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1554: characters 7-38
						$id2 = ($id2??'null') . (\mb_chr($char)??'null');
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1557: characters 5-22
				$this->invalidChar($char);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1559: characters 4-21
			$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
		}
	}

	/**
	 * @param Const_hx $c
	 * 
	 * @return string
	 */
	public function constString ($c) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1694: lines 1694-1701
		$__hx__switch = ($c->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1695: characters 13-14
			$v = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1695: characters 17-30
			return \Std::string($v);
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1696: characters 15-16
			$f = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1696: characters 19-32
			return \Std::string($f);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1697: characters 16-17
			$s = $c->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1697: characters 20-21
			return $s;
		}
	}

	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function ensure ($tk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:213: characters 3-19
		$t = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:214: characters 3-30
		if ($t !== $tk) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:214: characters 17-30
			$this->unexpected($t);
		}
	}

	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function ensureToken ($tk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:218: characters 3-19
		$t = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:219: characters 3-41
		if (!\Type::enumEq($t, $tk)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:219: characters 28-41
			$this->unexpected($t);
		}
	}

	/**
	 * @param ErrorDef $err
	 * @param int $pmin
	 * @param int $pmax
	 * 
	 * @return void
	 */
	public function error ($err, $pmin, $pmax) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:147: lines 147-149
		if (!$this->resumeErrors) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:149: characters 3-8
			throw Exception::thrown(new Error($err, $pmin, $pmax, $this->origin, $this->line));
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return bool
	 */
	public function evalPreproCond ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1586: characters 11-18
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1587: characters 15-17
			$id = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1588: characters 4-35
			return $this->preprocValue($id) !== null;
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1591: characters 16-17
			$e1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1592: characters 4-28
			return $this->evalPreproCond($e1);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1595: characters 21-23
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1595: characters 25-27
			$_g2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1595: characters 15-19
			$__hx__switch = ($_g->params[0]);
			if ($__hx__switch === "&&") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1593: characters 21-23
				$e1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1593: characters 25-27
				$e2 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1594: characters 11-51
				if ($this->evalPreproCond($e1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1594: characters 33-51
					return $this->evalPreproCond($e2);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1594: characters 11-51
					return false;
				}
			} else if ($__hx__switch === "||") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1595: characters 21-23
				$e1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1595: characters 25-27
				$e2 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1596: characters 11-51
				if (!$this->evalPreproCond($e1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1596: characters 33-51
					return $this->evalPreproCond($e2);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1596: characters 11-51
					return true;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1598: characters 4-84
				if (!$this->resumeErrors) {
					throw Exception::thrown(new Error(ErrorDef::EInvalidPreprocessor("Can't eval " . ($e->e->tag??'null')), $this->readPos, $this->readPos, $this->origin, $this->line));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1599: characters 4-16
				return false;
			}
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1589: characters 19-20
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1589: characters 14-17
			if ($_g->params[0] === "!") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1589: characters 22-23
				$e1 = $_g->params[2];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1590: characters 4-29
				return !$this->evalPreproCond($e1);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1598: characters 4-84
				if (!$this->resumeErrors) {
					throw Exception::thrown(new Error(ErrorDef::EInvalidPreprocessor("Can't eval " . ($e->e->tag??'null')), $this->readPos, $this->readPos, $this->origin, $this->line));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1599: characters 4-16
				return false;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1598: characters 4-84
			if (!$this->resumeErrors) {
				throw Exception::thrown(new Error(ErrorDef::EInvalidPreprocessor("Can't eval " . ($e->e->tag??'null')), $this->readPos, $this->readPos, $this->origin, $this->line));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1599: characters 4-16
			return false;
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return ExprDef
	 */
	public function expr ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:242: characters 3-13
		return $e->e;
	}

	/**
	 * @return string
	 */
	public function getIdent () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:231: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:232: lines 232-237
		if ($tk->index === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:233: characters 12-14
			$id = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:233: characters 17-26
			return $id;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:235: characters 4-18
			$this->unexpected($tk);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:236: characters 4-15
			return null;
		}
	}

	/**
	 * @param string $origin
	 * 
	 * @return void
	 */
	public function initParser ($origin) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:161: characters 3-20
		$this->preprocStack = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:163: characters 3-23
		$this->origin = $origin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:164: characters 3-14
		$this->readPos = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:165: characters 3-29
		$this->tokenMin = $this->oldTokenMin = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:166: characters 3-29
		$this->tokenMax = $this->oldTokenMax = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:167: characters 3-22
		$this->tokens = new List_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:173: characters 3-12
		$this->char = -1;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:174: characters 3-20
		$this->ops = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:175: characters 3-23
		$this->idents = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:176: characters 3-10
		$this->uid = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:177: characters 13-17
		$_g = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:177: characters 17-31
		$_g1 = mb_strlen($this->opChars);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:177: lines 177-178
		while ($_g < $_g1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:177: characters 13-31
			$i = $_g++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:178: characters 4-37
			$this->ops->offsetSet(HxString::charCodeAt($this->opChars, $i), true);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:179: characters 13-17
		$_g = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:179: characters 17-34
		$_g1 = mb_strlen($this->identChars);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:179: lines 179-180
		while ($_g < $_g1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:179: characters 13-34
			$i = $_g++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:180: characters 4-43
			$this->idents->offsetSet(HxString::charCodeAt($this->identChars, $i), true);
		}
	}

	/**
	 * @param int $c
	 * 
	 * @return void
	 */
	public function invalidChar ($c) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:156: characters 3-47
		if (!$this->resumeErrors) {
			throw Exception::thrown(new Error(ErrorDef::EInvalidChar($c), $this->readPos - 1, $this->readPos - 1, $this->origin, $this->line));
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return bool
	 */
	public function isBlock ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:276: characters 3-31
		if ($e === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:276: characters 19-31
			return false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:277: characters 18-25
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 13-14
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 16-17
			$t = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 19-20
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 23-86
			if ($e !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 35-45
				return $this->isBlock($e);
			} else if ($t !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 60-67
				if ($t === null) {
					return false;
				} else if ($t->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 75-76
					$_g1 = $t->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 60-67
					return true;
				} else {
					return false;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:280: characters 81-86
				return false;
			}
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 15-16
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 43-47
			return true;
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:282: characters 15-16
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:282: characters 17-18
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:282: characters 19-20
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:282: characters 23-33
			return $this->isBlock($e);
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 14-15
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 16-22
			$prefix = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 23-24
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 27-48
			if (!$prefix) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 38-48
				return $this->isBlock($e);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:283: characters 27-48
				return false;
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 12-13
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 14-16
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 17-19
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 22-67
			if ($e2 !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 39-50
				return $this->isBlock($e2);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:281: characters 56-67
				return $this->isBlock($e1);
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:284: characters 15-16
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:284: characters 17-18
			$e = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:284: characters 21-31
			return $this->isBlock($e);
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:286: characters 13-14
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:286: characters 15-16
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:286: characters 17-18
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:286: characters 21-31
			return $this->isBlock($e);
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:279: characters 18-19
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:279: characters 22-23
			$_g1 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:279: characters 24-25
			$_g1 = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:279: characters 20-21
			$e = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:279: characters 28-38
			return $this->isBlock($e);
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:287: characters 16-17
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:287: characters 20-43
			if ($e !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:287: characters 33-43
				return $this->isBlock($e);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:287: characters 20-43
				return false;
			}
		} else if ($__hx__switch === 20) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:288: characters 13-14
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:288: characters 16-17
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:288: characters 19-20
			$_g1 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:288: characters 22-23
			$e = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:288: characters 26-36
			return $this->isBlock($e);
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 27-28
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 43-47
			return true;
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 39-40
			$_g1 = $_g->params[0];
			$_g1 = $_g->params[1];
			$_g1 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:278: characters 43-47
			return true;
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:285: characters 17-18
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:285: characters 19-20
			$e = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:285: characters 23-33
			return $this->isBlock($e);
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:289: characters 14-15
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:289: characters 17-18
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:289: characters 20-21
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:289: characters 24-34
			return $this->isBlock($e);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:290: characters 12-17
			return false;
		}
	}

	/**
	 * @param string $op
	 * @param object $e1
	 * @param object $e
	 * 
	 * @return object
	 */
	public function makeBinop ($op, $e1, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:564: lines 564-565
		if (($e === null) && $this->resumeErrors) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:565: characters 11-48
			$e2 = ExprDef::EBinop($op, $e1, $e);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = ($e1 === null ? 0 : $e1->pmax);
			if ($e2 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:566: characters 18-25
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:567: characters 15-18
			$op2 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:567: characters 19-21
			$e2 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:567: characters 22-24
			$e3 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:568: lines 568-571
			if ((($this->opPriority->data[$op] ?? null) <= ($this->opPriority->data[$op2] ?? null)) && !\array_key_exists($op, $this->opRightAssoc->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:569: characters 5-61
				$e4 = ExprDef::EBinop($op2, $this->makeBinop($op, $e1, $e2), $e3);
				$pmin = ($e1 === null ? 0 : $e1->pmin);
				$pmax = ($e3 === null ? 0 : $e3->pmax);
				if ($e4 === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e4, $pmin, $pmax, $this->origin, $this->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:571: characters 5-45
				$e2 = ExprDef::EBinop($op, $e1, $e);
				$pmin = ($e1 === null ? 0 : $e1->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				if ($e2 === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
				}
			}
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:572: characters 17-19
			$e2 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:572: characters 20-22
			$e3 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:572: characters 23-25
			$e4 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:573: lines 573-576
			if (\array_key_exists($op, $this->opRightAssoc->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:574: characters 5-41
				$e5 = ExprDef::EBinop($op, $e1, $e);
				$pmin = ($e1 === null ? 0 : $e1->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				if ($e5 === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e5, $pmin, $pmax, $this->origin, $this->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:576: characters 5-67
				$e5 = ExprDef::ETernary($this->makeBinop($op, $e1, $e2), $e3, $e4);
				$pmin = ($e1 === null ? 0 : $e1->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				if ($e5 === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e5, $pmin, $pmax, $this->origin, $this->line);
				}
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:578: characters 4-40
			$e2 = ExprDef::EBinop($op, $e1, $e);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = ($e === null ? 0 : $e->pmax);
			if ($e2 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
			}
		}
	}

	/**
	 * @param string $op
	 * @param object $e
	 * 
	 * @return object
	 */
	public function makeUnop ($op, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:554: lines 554-555
		if (($e === null) && $this->resumeErrors) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:555: characters 4-15
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:556: characters 18-25
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:557: characters 15-18
			$bop = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:557: characters 20-22
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:557: characters 24-26
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:557: characters 29-86
			$e3 = ExprDef::EBinop($bop, $this->makeUnop($op, $e1), $e2);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = ($e2 === null ? 0 : $e2->pmax);
			if ($e3 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e3, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:558: characters 17-19
			$e1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:558: characters 21-23
			$e2 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:558: characters 25-27
			$e3 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:558: characters 30-88
			$e4 = ExprDef::ETernary($this->makeUnop($op, $e1), $e2, $e3);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = ($e3 === null ? 0 : $e3->pmax);
			if ($e4 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e4, $pmin, $pmax, $this->origin, $this->line);
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:559: characters 12-48
			$e1 = ExprDef::EUnop($op, true, $e);
			$pmin = ($e === null ? 0 : $e->pmin);
			$pmax = ($e === null ? 0 : $e->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		}
	}

	/**
	 * @param string $tmp
	 * @param object $e
	 * 
	 * @return object
	 */
	public function mapCompr ($tmp, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:533: characters 3-30
		if ($e === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:533: characters 19-30
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
		$edef = null;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: characters 22-29
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:545: characters 16-18
			$e2 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
			$edef = ExprDef::EParent($this->mapCompr($tmp, $e2));
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:543: characters 15-18
			$_g1 = $_g->params[0];
			if ($_g1->length === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:543: characters 16-17
				$e1 = ($_g1->arr[0] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
				$edef = ExprDef::EBlock(\Array_hx::wrap([$this->mapCompr($tmp, $e1)]));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 21-54
				$e1 = ExprDef::EIdent($tmp);
				$pmin = ($e === null ? 0 : $e->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				$e2 = null;
				if ($e1 === null) {
					$e2 = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$e2 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 11-82
				$e1 = ExprDef::EField($e2, "push");
				$pmin = ($e === null ? 0 : $e->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				$edef1 = null;
				if ($e1 === null) {
					$edef1 = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$edef1 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
				$edef = ExprDef::ECall($edef1, \Array_hx::wrap([$e]));
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:541: characters 12-16
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:541: characters 18-20
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:541: characters 22-24
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:541: lines 541-548
			if ($e2 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
				$edef = ExprDef::EIf($cond, $this->mapCompr($tmp, $e1), null);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 21-54
				$e1 = ExprDef::EIdent($tmp);
				$pmin = ($e === null ? 0 : $e->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				$e2 = null;
				if ($e1 === null) {
					$e2 = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$e2 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 11-82
				$e1 = ExprDef::EField($e2, "push");
				$pmin = ($e === null ? 0 : $e->pmin);
				$pmax = ($e === null ? 0 : $e->pmax);
				$edef1 = null;
				if ($e1 === null) {
					$edef1 = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$edef1 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
				$edef = ExprDef::ECall($edef1, \Array_hx::wrap([$e]));
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:537: characters 15-19
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:537: characters 21-23
			$e2 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
			$edef = ExprDef::EWhile($cond, $this->mapCompr($tmp, $e2));
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:535: characters 13-14
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:535: characters 16-18
			$it = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:535: characters 20-22
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
			$edef = ExprDef::EFor($v, $it, $this->mapCompr($tmp, $e2));
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:539: characters 17-21
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:539: characters 23-25
			$e2 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
			$edef = ExprDef::EDoWhile($cond, $this->mapCompr($tmp, $e2));
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 21-54
			$e1 = ExprDef::EIdent($tmp);
			$pmin = ($e === null ? 0 : $e->pmin);
			$pmax = ($e === null ? 0 : $e->pmax);
			$e2 = null;
			if ($e1 === null) {
				$e2 = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$e2 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:548: characters 11-82
			$e1 = ExprDef::EField($e2, "push");
			$pmin = ($e === null ? 0 : $e->pmin);
			$pmax = ($e === null ? 0 : $e->pmax);
			$edef1 = null;
			if ($e1 === null) {
				$edef1 = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$edef1 = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:534: lines 534-549
			$edef = ExprDef::ECall($edef1, \Array_hx::wrap([$e]));
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:550: characters 10-36
		$pmin = ($e === null ? 0 : $e->pmin);
		$pmax = ($e === null ? 0 : $e->pmax);
		if ($edef === null) {
			return null;
		} else {
			if ($pmin === null) {
				$pmin = $this->tokenMin;
			}
			if ($pmax === null) {
				$pmax = $this->tokenMax;
			}
			return new _HxAnon_Parser1($edef, $pmin, $pmax, $this->origin, $this->line);
		}
	}

	/**
	 * @param Token $tk
	 * 
	 * @return bool
	 */
	public function maybe ($tk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:223: characters 3-19
		$t = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:224: lines 224-225
		if (\Type::enumEq($t, $tk)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:225: characters 4-15
			return true;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:226: characters 3-10
		$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
		$this->tokenMin = $this->oldTokenMin;
		$this->tokenMax = $this->oldTokenMax;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:227: characters 3-15
		return false;
	}

	/**
	 * @param ExprDef $e
	 * @param int $pmin
	 * @param int $pmax
	 * 
	 * @return object
	 */
	public function mk ($e, $pmin = null, $pmax = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:266: characters 3-30
		if ($e === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:266: characters 19-30
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:267: characters 3-37
		if ($pmin === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:267: characters 22-37
			$pmin = $this->tokenMin;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:268: characters 3-37
		if ($pmax === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:268: characters 22-37
			$pmax = $this->tokenMax;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:269: characters 3-75
		return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
	}

	/**
	 * @return object
	 */
	public function parseExpr () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:350: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:352: characters 3-21
		$p1 = $this->tokenMin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:354: lines 354-485
		$__hx__switch = ($tk->index);
		if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:360: characters 15-16
			$c = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:361: characters 25-38
			$e = ExprDef::EConst($c);
			$pmin = null;
			$pmax = null;
			$tmp = null;
			if ($e === null) {
				$tmp = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:361: characters 4-39
			return $this->parseExprNext($tmp);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:355: characters 12-14
			$id = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:356: characters 4-31
			$e = $this->parseStructure($id);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:357: lines 357-358
			if ($e === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:358: characters 9-23
				$e1 = ExprDef::EIdent($id);
				$pmin = null;
				$pmax = null;
				if ($e1 === null) {
					$e = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$e = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:359: characters 4-27
			return $this->parseExprNext($e);
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:439: characters 12-14
			$op = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:440: lines 440-453
			if ($op === "-") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:441: characters 5-26
				$start = $this->tokenMin;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:442: characters 5-25
				$e = $this->parseExpr();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:443: lines 443-444
				if ($e === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:444: characters 6-27
					return $this->makeUnop($op, $e);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:445: characters 13-20
				$_g = $e->e;
				if ($_g->index === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:448: characters 17-26
					$_g1 = $_g->params[0];
					$__hx__switch = ($_g1->index);
					if ($__hx__switch === 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:446: characters 22-23
						$i = $_g1->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:447: characters 13-49
						$e1 = ExprDef::EConst(Const_hx::CInt(-$i));
						$pmin = $start;
						$pmax = ($e === null ? 0 : $e->pmax);
						if ($e1 === null) {
							return null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
						}
					} else if ($__hx__switch === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:448: characters 24-25
						$f = $_g1->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:449: characters 13-51
						$e1 = ExprDef::EConst(Const_hx::CFloat(-$f));
						$pmin = $start;
						$pmax = ($e === null ? 0 : $e->pmax);
						if ($e1 === null) {
							return null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
						}
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:451: characters 6-27
						return $this->makeUnop($op, $e);
					}
				} else {
					return $this->makeUnop($op, $e);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:454: lines 454-455
			if (($this->opPriority->data[$op] ?? null) < 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:455: characters 5-36
				return $this->makeUnop($op, $this->parseExpr());
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:456: characters 4-25
			return $this->unexpected($tk);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:363: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:364: lines 364-368
			if ($tk === Token::TPClose()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:365: characters 5-27
				$t = $this->token();
				if (!\Type::enumEq($t, Token::TOp("->"))) {
					$this->unexpected($t);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:366: characters 5-28
				$eret = $this->parseExpr();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:367: characters 29-49
				$e = ExprDef::EReturn($eret);
				$pmin = $p1;
				$pmax = null;
				$e1 = null;
				if ($e === null) {
					$e1 = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:367: characters 12-55
				$e = ExprDef::EFunction(new \Array_hx(), $e1);
				$pmin = $p1;
				$pmax = null;
				if ($e === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:369: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:370: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:371: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:372: lines 372-394
			$__hx__switch = ($tk->index);
			if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:374: characters 26-52
				$e1 = ExprDef::EParent($e);
				$pmin = $p1;
				$pmax = $this->tokenMax;
				$tmp = null;
				if ($e1 === null) {
					$tmp = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$tmp = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:374: characters 5-53
				return $this->parseExprNext($tmp);
			} else if ($__hx__switch === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:389: characters 13-20
				$_g = $e->e;
				if ($_g->index === 1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:390: characters 17-18
					$v = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:390: characters 21-60
					return $this->parseLambda(\Array_hx::wrap([new _HxAnon_Parser2($v)]), ($e === null ? 0 : $e->pmin));
				}
			} else if ($__hx__switch === 14) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:376: characters 5-25
				$t = $this->parseType();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:377: characters 5-17
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:378: lines 378-387
				$__hx__switch = ($tk->index);
				if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:380: characters 27-58
					$e1 = ExprDef::ECheckType($e, $t);
					$pmin = $p1;
					$pmax = $this->tokenMax;
					$tmp = null;
					if ($e1 === null) {
						$tmp = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$tmp = new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:380: characters 6-59
					return $this->parseExprNext($tmp);
				} else if ($__hx__switch === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:382: characters 14-21
					$_g = $e->e;
					if ($_g->index === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:383: characters 18-19
						$v = $_g->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:383: characters 22-72
						return $this->parseLambda(\Array_hx::wrap([new _HxAnon_Parser3($v, $t)]), ($e === null ? 0 : $e->pmin));
					}
				} else {
				}
			} else {
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:395: characters 4-25
			return $this->unexpected($tk);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:397: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:398: lines 398-429
			$__hx__switch = ($tk->index);
			if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:410: characters 16-17
				$c = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:411: lines 411-426
				if ($this->allowJSON) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:412: lines 412-424
					if ($c->index === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:413: characters 19-20
						$_g = $c->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:414: characters 7-25
						$tk2 = $this->token();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:415: characters 7-16
						$this->tokens->push(new _HxAnon_Parser0($tk2, $this->tokenMin, $this->tokenMax));
						$this->tokenMin = $this->oldTokenMin;
						$this->tokenMax = $this->oldTokenMax;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:416: characters 7-15
						$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
						$this->tokenMin = $this->oldTokenMin;
						$this->tokenMax = $this->oldTokenMax;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:417: lines 417-421
						if ($tk2->index === 14) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:419: characters 8-45
							return $this->parseExprNext($this->parseObject($p1));
						}
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:423: characters 7-15
						$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
						$this->tokenMin = $this->oldTokenMin;
						$this->tokenMax = $this->oldTokenMax;
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:426: characters 6-14
					$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
				}
			} else if ($__hx__switch === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:401: characters 13-14
				$_g = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:402: characters 5-23
				$tk2 = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:403: characters 5-14
				$this->tokens->push(new _HxAnon_Parser0($tk2, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:404: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:405: lines 405-409
				if ($tk2->index === 14) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:407: characters 6-43
					return $this->parseExprNext($this->parseObject($p1));
				}
			} else if ($__hx__switch === 7) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:400: characters 26-44
				$e = ExprDef::EObject(new \Array_hx());
				$pmin = $p1;
				$pmax = null;
				$tmp = null;
				if ($e === null) {
					$tmp = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:400: characters 5-45
				return $this->parseExprNext($tmp);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:428: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:430: characters 4-24
			$a = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:431: lines 431-437
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:432: characters 5-21
				$this->parseFullExpr($a);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:433: characters 5-17
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:434: lines 434-435
				if (($tk === Token::TBrClose()) || ($this->resumeErrors && ($tk === Token::TEof()))) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:435: characters 6-11
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:436: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:438: characters 11-27
			$e = ExprDef::EBlock($a);
			$pmin = $p1;
			$pmax = null;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:458: characters 4-24
			$a = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:459: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:460: lines 460-466
			while (($tk !== Token::TBkClose()) && (!$this->resumeErrors || ($tk !== Token::TEof()))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:461: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:462: characters 5-24
				$x = $this->parseExpr();
				$a->arr[$a->length++] = $x;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:463: characters 5-17
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:464: lines 464-465
				if ($tk === Token::TComma()) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:465: characters 6-18
					$tk = $this->token();
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:467: lines 467-478
			if (($a->length === 1) && (($a->arr[0] ?? null) !== null)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:468: characters 13-23
				$_g = ($a->arr[0] ?? null)->e;
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 10) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:469: characters 26-27
					$_g1 = $_g->params[0];
					$_g1 = $_g->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:470: characters 6-33
					$tmp = "__a_" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 26-48
					$e = ExprDef::EArrayDecl(new \Array_hx());
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 7-54
					$e = ExprDef::EVar($tmp, null, $e1);
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:473: characters 7-26
					$e = $this->mapCompr($tmp, ($a->arr[0] ?? null));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:474: characters 7-25
					$e2 = ExprDef::EIdent($tmp);
					$pmin = $p1;
					$pmax = null;
					$e3 = null;
					if ($e2 === null) {
						$e3 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e3 = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:471: lines 471-475
					$e2 = ExprDef::EBlock(\Array_hx::wrap([
						$e1,
						$e,
						$e3,
					]));
					$pmin = $p1;
					$pmax = null;
					$e = null;
					if ($e2 === null) {
						$e = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:476: characters 6-29
					return $this->parseExprNext($e);
				} else if ($__hx__switch === 11) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:469: characters 15-16
					$_g1 = $_g->params[0];
					$_g1 = $_g->params[1];
					$_g1 = $_g->params[2];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:470: characters 6-33
					$tmp = "__a_" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 26-48
					$e = ExprDef::EArrayDecl(new \Array_hx());
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 7-54
					$e = ExprDef::EVar($tmp, null, $e1);
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:473: characters 7-26
					$e = $this->mapCompr($tmp, ($a->arr[0] ?? null));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:474: characters 7-25
					$e2 = ExprDef::EIdent($tmp);
					$pmin = $p1;
					$pmax = null;
					$e3 = null;
					if ($e2 === null) {
						$e3 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e3 = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:471: lines 471-475
					$e2 = ExprDef::EBlock(\Array_hx::wrap([
						$e1,
						$e,
						$e3,
					]));
					$pmin = $p1;
					$pmax = null;
					$e = null;
					if ($e2 === null) {
						$e = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:476: characters 6-29
					return $this->parseExprNext($e);
				} else if ($__hx__switch === 24) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:469: characters 39-40
					$_g1 = $_g->params[0];
					$_g1 = $_g->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:470: characters 6-33
					$tmp = "__a_" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 26-48
					$e = ExprDef::EArrayDecl(new \Array_hx());
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:472: characters 7-54
					$e = ExprDef::EVar($tmp, null, $e1);
					$pmin = $p1;
					$pmax = null;
					$e1 = null;
					if ($e === null) {
						$e1 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e1 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:473: characters 7-26
					$e = $this->mapCompr($tmp, ($a->arr[0] ?? null));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:474: characters 7-25
					$e2 = ExprDef::EIdent($tmp);
					$pmin = $p1;
					$pmax = null;
					$e3 = null;
					if ($e2 === null) {
						$e3 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e3 = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:471: lines 471-475
					$e2 = ExprDef::EBlock(\Array_hx::wrap([
						$e1,
						$e,
						$e3,
					]));
					$pmin = $p1;
					$pmax = null;
					$e = null;
					if ($e2 === null) {
						$e = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:476: characters 6-29
					return $this->parseExprNext($e);
				} else {
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:479: characters 25-46
			$e = ExprDef::EArrayDecl($a);
			$pmin = $p1;
			$pmax = null;
			$tmp = null;
			if ($e === null) {
				$tmp = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:479: characters 4-47
			return $this->parseExprNext($tmp);
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:480: characters 14-16
			$id = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:480: lines 480-484
			if ($this->allowMetadata) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:481: characters 4-31
				$args = $this->parseMetaArgs();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:482: characters 11-46
				$e = ExprDef::EMeta($id, $args, $this->parseExpr());
				$pmin = $p1;
				$pmax = null;
				if ($e === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:484: characters 4-25
				return $this->unexpected($tk);
			}
		} else {
			return $this->unexpected($tk);
		}
	}

	/**
	 * @param Token $etk
	 * 
	 * @return object[]|\Array_hx
	 */
	public function parseExprList ($etk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1035: characters 3-26
		$args = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1036: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1037: lines 1037-1038
		if ($tk === $etk) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1038: characters 4-15
			return $args;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1039: characters 3-11
		$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
		$this->tokenMin = $this->oldTokenMin;
		$this->tokenMax = $this->oldTokenMax;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1040: lines 1040-1050
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1041: characters 4-26
			$x = $this->parseExpr();
			$args->arr[$args->length++] = $x;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1042: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1043: lines 1043-1049
			if ($tk->index !== 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1046: characters 5-26
				if ($tk === $etk) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1046: characters 21-26
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1047: characters 5-19
				$this->unexpected($tk);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1048: characters 5-10
				break;
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1051: characters 3-14
		return $args;
	}

	/**
	 * @param object $e1
	 * 
	 * @return object
	 */
	public function parseExprNext ($e1) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:775: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:776: lines 776-818
		$__hx__switch = ($tk->index);
		if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:777: characters 12-14
			$op = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:779: lines 779-791
			if ($op === "->") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:781: characters 13-21
				$_g = $e1->e;
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:782: characters 17-18
					$i = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:783: characters 6-29
					$eret = $this->parseExpr();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:784: characters 42-70
					$e = ExprDef::EReturn($eret);
					$pmin = ($eret === null ? 0 : $eret->pmin);
					$pmax = null;
					$e2 = null;
					if ($e === null) {
						$e2 = null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						$e2 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:784: characters 13-82
					$e = ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Parser2($i)]), $e2);
					$pmin = ($e1 === null ? 0 : $e1->pmin);
					$pmax = null;
					if ($e === null) {
						return null;
					} else {
						if ($pmin === null) {
							$pmin = $this->tokenMin;
						}
						if ($pmax === null) {
							$pmax = $this->tokenMax;
						}
						return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
					}
				} else if ($__hx__switch === 3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:782: characters 29-36
					$_hx_tmp = $_g->params[0]->e;
					if ($_hx_tmp->index === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:782: characters 47-48
						$i = $_hx_tmp->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:783: characters 6-29
						$eret = $this->parseExpr();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:784: characters 42-70
						$e = ExprDef::EReturn($eret);
						$pmin = ($eret === null ? 0 : $eret->pmin);
						$pmax = null;
						$e2 = null;
						if ($e === null) {
							$e2 = null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							$e2 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:784: characters 13-82
						$e = ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Parser2($i)]), $e2);
						$pmin = ($e1 === null ? 0 : $e1->pmin);
						$pmax = null;
						if ($e === null) {
							return null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
						}
					}
				} else if ($__hx__switch === 26) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:785: characters 21-28
					$_hx_tmp = $_g->params[0]->e;
					if ($_hx_tmp->index === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:785: characters 39-40
						$i = $_hx_tmp->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:785: characters 43-44
						$t = $_g->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:786: characters 6-29
						$eret = $this->parseExpr();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:787: characters 49-77
						$e = ExprDef::EReturn($eret);
						$pmin = ($eret === null ? 0 : $eret->pmin);
						$pmax = null;
						$e2 = null;
						if ($e === null) {
							$e2 = null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							$e2 = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:787: characters 13-89
						$e = ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Parser3($i, $t)]), $e2);
						$pmin = ($e1 === null ? 0 : $e1->pmin);
						$pmax = null;
						if ($e === null) {
							return null;
						} else {
							if ($pmin === null) {
								$pmin = $this->tokenMin;
							}
							if ($pmax === null) {
								$pmax = $this->tokenMax;
							}
							return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
						}
					}
				} else {
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:790: characters 5-19
				$this->unexpected($tk);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:793: lines 793-799
			if (($this->opPriority->data[$op] ?? null) === -1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:794: characters 9-83
				$tmp = null;
				if (!$this->isBlock($e1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:794: characters 31-39
					$_g = $e1->e;
					if ($_g->index === 3) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:794: characters 56-57
						$_g1 = $_g->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:794: characters 9-83
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:794: lines 794-797
				if ($tmp) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:795: characters 6-14
					$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:796: characters 6-15
					return $e1;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:798: characters 26-57
				$e = ExprDef::EUnop($op, false, $e1);
				$pmin = ($e1 === null ? 0 : $e1->pmin);
				$pmax = null;
				$tmp = null;
				if ($e === null) {
					$tmp = null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:798: characters 5-58
				return $this->parseExprNext($tmp);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:800: characters 4-39
			return $this->makeBinop($op, $e1, $this->parseExpr());
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:805: characters 25-70
			$e = ExprDef::ECall($e1, $this->parseExprList(Token::TPClose()));
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = null;
			$tmp = null;
			if ($e === null) {
				$tmp = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:805: characters 4-71
			return $this->parseExprNext($tmp);
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:802: characters 4-27
			$field = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:803: characters 25-54
			$e = ExprDef::EField($e1, $field);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = null;
			$tmp = null;
			if ($e === null) {
				$tmp = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:803: characters 4-55
			return $this->parseExprNext($tmp);
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:807: characters 4-25
			$e2 = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:808: characters 4-20
			$t = $this->token();
			if ($t !== Token::TBkClose()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:809: characters 25-51
			$e = ExprDef::EArray($e1, $e2);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = null;
			$tmp = null;
			if ($e === null) {
				$tmp = null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:809: characters 4-52
			return $this->parseExprNext($tmp);
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:811: characters 4-25
			$e2 = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:812: characters 4-22
			$t = $this->token();
			if ($t !== Token::TDoubleDot()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:813: characters 4-25
			$e3 = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:814: characters 11-51
			$e = ExprDef::ETernary($e1, $e2, $e3);
			$pmin = ($e1 === null ? 0 : $e1->pmin);
			$pmax = ($e3 === null ? 0 : $e3->pmax);
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:816: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:817: characters 4-13
			return $e1;
		}
	}

	/**
	 * @return object
	 */
	public function parseField () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1187: characters 3-30
		$meta = $this->parseMetadata();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1188: characters 3-19
		$access = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1189: lines 1189-1254
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1190: characters 4-24
			$id = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1191: lines 1191-1253
			if ($id === "function") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1205: characters 5-27
				$name = $this->getIdent();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1206: characters 5-35
				$inf = $this->parseFunctionDecl();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1207: lines 1207-1216
				return new _HxAnon_Parser4($name, $meta, $access, FieldKind::KFunction(new _HxAnon_Parser5($inf->args, $inf->body, $inf->ret)));
			} else if ($id === "inline") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1199: characters 5-25
				$access->arr[$access->length++] = FieldAccess::AInline();
			} else if ($id === "macro") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1203: characters 5-24
				$access->arr[$access->length++] = FieldAccess::AMacro();
			} else if ($id === "override") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1193: characters 5-27
				$access->arr[$access->length++] = FieldAccess::AOverride();
			} else if ($id === "private") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1197: characters 5-26
				$access->arr[$access->length++] = FieldAccess::APrivate();
			} else if ($id === "public") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1195: characters 5-25
				$access->arr[$access->length++] = FieldAccess::APublic();
			} else if ($id === "static") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1201: characters 5-25
				$access->arr[$access->length++] = FieldAccess::AStatic();
			} else if ($id === "var") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1218: characters 5-27
				$name1 = $this->getIdent();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1219: characters 5-32
				$get = null;
				$set = null;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1220: lines 1220-1225
				if ($this->maybe(Token::TPOpen())) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1221: characters 6-22
					$get = $this->getIdent();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1222: characters 6-20
					$t = $this->token();
					if ($t !== Token::TComma()) {
						$this->unexpected($t);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1223: characters 6-22
					$set = $this->getIdent();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1224: characters 6-21
					$t1 = $this->token();
					if ($t1 !== Token::TPClose()) {
						$this->unexpected($t1);
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1226: characters 5-55
				$type = ($this->maybe(Token::TDoubleDot()) ? $this->parseType() : null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1227: characters 5-53
				$expr = ($this->maybe(Token::TOp("=")) ? $this->parseExpr() : null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1229: lines 1229-1237
				if ($expr !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1230: lines 1230-1233
					if ($this->isBlock($expr)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1231: characters 7-24
						$this->maybe(Token::TSemicolon());
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1233: characters 7-25
						$t2 = $this->token();
						if ($t2 !== Token::TSemicolon()) {
							$this->unexpected($t2);
						}
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: characters 16-53
					$tmp = null;
					if ($type !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: characters 32-42
						if ($type === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: characters 16-53
							$tmp = false;
						} else if ($type->index === 2) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: characters 50-51
							$_g = $type->params[0];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: characters 16-53
							$tmp = true;
						} else {
							$tmp = false;
						}
					} else {
						$tmp = false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1234: lines 1234-1237
					if ($tmp) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1235: characters 6-23
						$this->maybe(Token::TSemicolon());
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1237: characters 6-24
						$t3 = $this->token();
						if ($t3 !== Token::TSemicolon()) {
							$this->unexpected($t3);
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1239: lines 1239-1249
				return new _HxAnon_Parser4($name1, $meta, $access, FieldKind::KVar(new _HxAnon_Parser6($get, $set, $type, $expr)));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1251: characters 5-24
				$this->unexpected(Token::TId($id));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1252: characters 5-10
				break;
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1255: characters 3-14
		return null;
	}

	/**
	 * @param object[]|\Array_hx $exprs
	 * 
	 * @return void
	 */
	public function parseFullExpr ($exprs) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:295: characters 3-23
		$e = $this->parseExpr();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:296: characters 3-16
		$exprs->arr[$exprs->length++] = $e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:298: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: lines 300-304
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: characters 10-61
			$tmp = null;
			if (($tk === Token::TComma()) && ($e !== null)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: characters 39-46
				$_g = $e->e;
				if ($_g->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: characters 58-59
					$_g1 = $_g->params[0];
					$_g2 = $_g->params[1];
					$_g3 = $_g->params[2];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: characters 10-61
					$tmp = true;
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:300: lines 300-304
			if (!$tmp) {
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:301: characters 4-29
			$e = $this->parseStructure("var");
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:302: characters 4-17
			$exprs->arr[$exprs->length++] = $e;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:303: characters 4-16
			$tk = $this->token();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:306: lines 306-311
		if (($tk !== Token::TSemicolon()) && ($tk !== Token::TEof())) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:307: lines 307-310
			if ($this->isBlock($e)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:308: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:310: characters 5-19
				$this->unexpected($tk);
			}
		}
	}

	/**
	 * @return object[]|\Array_hx
	 */
	public function parseFunctionArgs () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:822: characters 3-26
		$args = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:823: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:824: lines 824-859
		if ($tk !== Token::TPClose()) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:825: characters 4-21
			$done = false;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:826: lines 826-858
			while (!$done) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:827: characters 5-34
				$name = null;
				$opt = false;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:828: lines 828-833
				if ($tk->index === 13) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:830: characters 6-16
					$opt = true;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:831: characters 6-18
					$tk = $this->token();
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:834: lines 834-839
				if ($tk->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:835: characters 14-16
					$id = $tk->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:835: characters 19-28
					$name = $id;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:837: characters 6-20
					$this->unexpected($tk);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:838: characters 6-11
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:840: characters 5-42
				$arg = new _HxAnon_Parser2($name);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:841: characters 5-19
				$args->arr[$args->length++] = $arg;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:842: characters 5-29
				if ($opt) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:842: characters 15-29
					$arg->opt = true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:843: lines 843-848
				if ($this->allowTypes) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:844: lines 844-845
					if ($this->maybe(Token::TDoubleDot())) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:845: characters 7-26
						$arg->t = $this->parseType();
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:846: lines 846-847
					if ($this->maybe(Token::TOp("="))) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:847: characters 7-30
						$arg->value = $this->parseExpr();
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:849: characters 5-17
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:850: lines 850-857
				$__hx__switch = ($tk->index);
				if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:854: characters 6-17
					$done = true;
				} else if ($__hx__switch === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:852: characters 6-18
					$tk = $this->token();
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:856: characters 6-20
					$this->unexpected($tk);
				}
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:860: characters 3-14
		return $args;
	}

	/**
	 * @return object
	 */
	public function parseFunctionDecl () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:864: characters 3-17
		$t = $this->token();
		if ($t !== Token::TPOpen()) {
			$this->unexpected($t);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:865: characters 3-34
		$args = $this->parseFunctionArgs();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:866: characters 3-18
		$ret = null;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:867: lines 867-873
		if ($this->allowTypes) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:868: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:869: lines 869-872
			if ($tk !== Token::TDoubleDot()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:870: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:872: characters 5-22
				$ret = $this->parseType();
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:874: characters 3-56
		return new _HxAnon_Parser7($args, $ret, $this->parseExpr());
	}

	/**
	 * @param object[]|\Array_hx $args
	 * @param int $pmin
	 * 
	 * @return object
	 */
	public function parseLambda ($args, $pmin) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:489: lines 489-502
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:490: characters 4-24
			$id = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:491: characters 4-51
			$t = ($this->maybe(Token::TDoubleDot()) ? $this->parseType() : null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:492: characters 4-35
			$args->arr[$args->length++] = new _HxAnon_Parser3($id, $t);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:493: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:494: lines 494-501
			$__hx__switch = ($tk->index);
			if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:497: characters 5-10
				break;
			} else if ($__hx__switch === 9) {
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:499: characters 5-19
				$this->unexpected($tk);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:500: characters 5-10
				break;
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:503: characters 3-25
		$t = $this->token();
		if (!\Type::enumEq($t, Token::TOp("->"))) {
			$this->unexpected($t);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:504: characters 3-26
		$eret = $this->parseExpr();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:505: characters 29-51
		$e = ExprDef::EReturn($eret);
		$pmin1 = $pmin;
		$pmax = null;
		$e1 = null;
		if ($e === null) {
			$e1 = null;
		} else {
			if ($pmin1 === null) {
				$pmin1 = $this->tokenMin;
			}
			if ($pmax === null) {
				$pmax = $this->tokenMax;
			}
			$e1 = new _HxAnon_Parser1($e, $pmin1, $pmax, $this->origin, $this->line);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:505: characters 10-59
		$e = ExprDef::EFunction($args, $e1);
		$pmin1 = $pmin;
		$pmax = null;
		if ($e === null) {
			return null;
		} else {
			if ($pmin1 === null) {
				$pmin1 = $this->tokenMin;
			}
			if ($pmax === null) {
				$pmax = $this->tokenMax;
			}
			return new _HxAnon_Parser1($e, $pmin1, $pmax, $this->origin, $this->line);
		}
	}

	/**
	 * @return object[]|\Array_hx
	 */
	public function parseMetaArgs () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:509: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:510: lines 510-513
		if ($tk !== Token::TPOpen()) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:511: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:512: characters 4-15
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:514: characters 3-17
		$args = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:515: characters 3-15
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:516: lines 516-528
		if ($tk !== Token::TPClose()) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:517: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:518: lines 518-527
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:519: characters 5-27
				$x = $this->parseExpr();
				$args->arr[$args->length++] = $x;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:520: characters 13-20
				$_g = $this->token();
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:523: characters 6-11
					break;
				} else if ($__hx__switch === 9) {
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:524: characters 10-12
					$tk = $_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:525: characters 6-20
					$this->unexpected($tk);
				}
			};
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:529: characters 3-14
		return $args;
	}

	/**
	 * @return object[]|\Array_hx
	 */
	public function parseMetadata () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1073: characters 3-17
		$meta = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1074: lines 1074-1083
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1075: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1076: lines 1076-1082
			if ($tk->index === 15) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1077: characters 15-19
				$name = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1078: characters 5-57
				$x = new _HxAnon_Parser8($name, $this->parseMetaArgs());
				$meta->arr[$meta->length++] = $x;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1080: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1081: characters 5-10
				break;
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1084: characters 3-14
		return $meta;
	}

	/**
	 * @param string $content
	 * @param string $origin
	 * 
	 * @return ModuleDecl[]|\Array_hx
	 */
	public function parseModule ($content, $origin = "hscript") {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1056: lines 1056-1070
		if ($origin === null) {
			$origin = "hscript";
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1057: characters 3-21
		$this->initParser($origin);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1058: characters 3-18
		$this->input = $content;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1059: characters 3-14
		$this->readPos = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1060: characters 3-20
		$this->allowTypes = true;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1061: characters 3-23
		$this->allowMetadata = true;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1062: characters 3-18
		$decls = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1063: lines 1063-1068
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1064: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1065: characters 4-26
			if ($tk === Token::TEof()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1065: characters 21-26
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1066: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1067: characters 4-33
			$x = $this->parseModuleDecl();
			$decls->arr[$decls->length++] = $x;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1069: characters 3-15
		return $decls;
	}

	/**
	 * @return ModuleDecl
	 */
	public function parseModuleDecl () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1094: characters 3-30
		$meta = $this->parseMetadata();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1095: characters 3-26
		$ident = $this->getIdent();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1096: characters 3-43
		$isPrivate = false;
		$isExtern = false;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1097: lines 1097-1107
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1098: lines 1098-1105
			if ($ident === "extern") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1102: characters 5-20
				$isExtern = true;
			} else if ($ident === "private") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1100: characters 5-21
				$isPrivate = true;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1104: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1106: characters 4-22
			$ident = $this->getIdent();
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1108: lines 1108-1182
		if ($ident === "class") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1135: characters 4-26
			$name = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1136: characters 4-31
			$params = $this->parseParams();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1137: characters 4-22
			$extend = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1138: characters 4-23
			$implement = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1140: lines 1140-1151
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1141: characters 5-21
				$t = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1142: lines 1142-1150
				if ($t->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1145: characters 14-26
					$__hx__switch = ($t->params[0]);
					if ($__hx__switch === "extends") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1144: characters 6-26
						$extend = $this->parseType();
					} else if ($__hx__switch === "implements") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1146: characters 6-33
						$x = $this->parseType();
						$implement->arr[$implement->length++] = $x;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1148: characters 6-13
						$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
						$this->tokenMin = $this->oldTokenMin;
						$this->tokenMax = $this->oldTokenMax;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1149: characters 6-11
						break;
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1148: characters 6-13
					$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1149: characters 6-11
					break;
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1153: characters 4-20
			$fields = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1154: characters 4-19
			$t = $this->token();
			if ($t !== Token::TBrOpen()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1155: lines 1155-1156
			while (!$this->maybe(Token::TBrClose())) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1156: characters 5-30
				$x = $this->parseField();
				$fields->arr[$fields->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1158: lines 1158-1167
			return ModuleDecl::DClass(new _HxAnon_Parser9($name, $meta, $params, $extend, $implement, $fields, $isPrivate, $isExtern));
		} else if ($ident === "import") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1114: characters 4-28
			$path = \Array_hx::wrap([$this->getIdent()]);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1115: characters 4-21
			$star = false;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1116: lines 1116-1131
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1117: characters 5-21
				$t = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1118: lines 1118-1121
				if ($t !== Token::TDot()) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1119: characters 6-13
					$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1120: characters 6-11
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1122: characters 5-16
				$t = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1123: lines 1123-1130
				$__hx__switch = ($t->index);
				if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1124: characters 14-16
					$id = $t->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1125: characters 6-19
					$path->arr[$path->length++] = $id;
				} else if ($__hx__switch === 3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1126: characters 14-17
					if ($t->params[0] === "*") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1127: characters 6-17
						$star = true;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1129: characters 6-19
						$this->unexpected($t);
					}
				} else {
					$this->unexpected($t);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1132: characters 4-22
			$t = $this->token();
			if ($t !== Token::TSemicolon()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1133: characters 4-30
			return ModuleDecl::DImport($path, $star);
		} else if ($ident === "package") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1110: characters 4-27
			$path = $this->parsePath();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1111: characters 4-22
			$t = $this->token();
			if ($t !== Token::TSemicolon()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1112: characters 4-25
			return ModuleDecl::DPackage($path);
		} else if ($ident === "typedef") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1169: characters 4-26
			$name = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1170: characters 4-31
			$params = $this->parseParams();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1171: characters 4-25
			$t = $this->token();
			if (!\Type::enumEq($t, Token::TOp("="))) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1172: characters 4-24
			$t = $this->parseType();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1173: lines 1173-1179
			return ModuleDecl::DTypedef(new _HxAnon_Parser10($name, $meta, $params, $isPrivate, $t));
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1181: characters 4-26
			$this->unexpected(Token::TId($ident));
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1183: characters 3-14
		return null;
	}

	/**
	 * @param int $p1
	 * 
	 * @return object
	 */
	public function parseObject ($p1) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:316: characters 3-24
		$fl = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:317: lines 317-345
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:318: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:319: characters 4-18
			$id = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:320: lines 320-334
			$__hx__switch = ($tk->index);
			if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:322: characters 16-17
				$c = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:323: lines 323-324
				if (!$this->allowJSON) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:324: characters 6-20
					$this->unexpected($tk);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:325: lines 325-328
				if ($c->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:326: characters 18-19
					$s = $c->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:326: characters 22-28
					$id = $s;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:327: characters 14-28
					$this->unexpected($tk);
				}
			} else if ($__hx__switch === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:321: characters 13-14
				$i = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:321: characters 17-23
				$id = $i;
			} else if ($__hx__switch === 7) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:330: characters 5-10
				break;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:332: characters 5-19
				$this->unexpected($tk);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:333: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:335: characters 4-22
			$t = $this->token();
			if ($t !== Token::TDoubleDot()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:336: characters 4-43
			$x = new _HxAnon_Parser11($id, $this->parseExpr());
			$fl->arr[$fl->length++] = $x;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:337: characters 4-16
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:338: lines 338-344
			$__hx__switch = ($tk->index);
			if ($__hx__switch === 7) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:340: characters 5-10
				break;
			} else if ($__hx__switch === 9) {
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:343: characters 5-19
				$this->unexpected($tk);
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:346: characters 24-42
		$e = ExprDef::EObject($fl);
		$pmin = $p1;
		$pmax = null;
		$tmp = null;
		if ($e === null) {
			$tmp = null;
		} else {
			if ($pmin === null) {
				$pmin = $this->tokenMin;
			}
			if ($pmax === null) {
				$pmax = $this->tokenMax;
			}
			$tmp = new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:346: characters 3-43
		return $this->parseExprNext($tmp);
	}

	/**
	 * @return object
	 */
	public function parseParams () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1088: lines 1088-1089
		if ($this->maybe(Token::TOp("<"))) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1089: characters 4-76
			if (!$this->resumeErrors) {
				throw Exception::thrown(new Error(ErrorDef::EInvalidOp("Unsupported class type parameters"), $this->readPos, $this->readPos, $this->origin, $this->line));
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1090: characters 3-12
		return new HxAnon();
	}

	/**
	 * @return string[]|\Array_hx
	 */
	public function parsePath () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:878: characters 3-27
		$path = \Array_hx::wrap([$this->getIdent()]);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:879: lines 879-886
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:880: characters 4-20
			$t = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:881: lines 881-884
			if ($t !== Token::TDot()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:882: characters 5-12
				$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:883: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:885: characters 4-25
			$x = $this->getIdent();
			$path->arr[$path->length++] = $x;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:887: characters 3-14
		return $path;
	}

	/**
	 * @return object
	 */
	public function parsePreproCond () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1571: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1572: lines 1572-1582
		$__hx__switch = ($tk->index);
		if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1576: characters 12-14
			$id = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1577: characters 4-38
			$e = ExprDef::EIdent($id);
			$pmin = $this->tokenMin;
			$pmax = $this->tokenMax;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1578: characters 12-15
			if ($tk->params[0] === "!") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1579: characters 4-63
				$e = ExprDef::EUnop("!", true, $this->parsePreproCond());
				$pmin = $this->tokenMin;
				$pmax = $this->tokenMax;
				if ($e === null) {
					return null;
				} else {
					if ($pmin === null) {
						$pmin = $this->tokenMin;
					}
					if ($pmax === null) {
						$pmax = $this->tokenMax;
					}
					return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1581: characters 4-18
				return $this->unexpected($tk);
			}
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1574: characters 4-16
			$this->tokens->push(new _HxAnon_Parser0(Token::TPOpen(), $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1575: characters 4-15
			return $this->parseExpr();
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1581: characters 4-18
			return $this->unexpected($tk);
		}
	}

	/**
	 * @param string $s
	 * @param string $origin
	 * 
	 * @return object
	 */
	public function parseString ($s, $origin = "hscript") {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:183: lines 183-195
		if ($origin === null) {
			$origin = "hscript";
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:184: characters 3-21
		$this->initParser($origin);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:185: characters 3-12
		$this->input = $s;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:186: characters 3-14
		$this->readPos = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:187: characters 3-23
		$a = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:188: lines 188-193
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:189: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:190: characters 4-26
			if ($tk === Token::TEof()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:190: characters 21-26
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:191: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:192: characters 4-20
			$this->parseFullExpr($a);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:194: characters 10-55
		if ($a->length === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:194: characters 30-34
			return ($a->arr[0] ?? null);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:194: characters 40-55
			$e = ExprDef::EBlock($a);
			$pmin = 0;
			$pmax = null;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		}
	}

	/**
	 * @param string $id
	 * 
	 * @return object
	 */
	public function parseStructure ($id) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:584: characters 3-21
		$p1 = $this->tokenMin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:586: lines 586-771
		if ($id === "break") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:642: characters 17-27
			$e = ExprDef::EBreak();
			$pmin = null;
			$pmax = null;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "continue") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:643: characters 20-33
			$e = ExprDef::EContinue();
			$pmin = null;
			$pmax = null;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "do") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:625: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:626: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:627: lines 627-631
			if ($tk->index === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:629: characters 14-21
				if ($tk->params[0] !== "while") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:630: characters 14-28
					$this->unexpected($tk);
				}
			} else {
				$this->unexpected($tk);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:632: characters 4-28
			$econd = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:633: characters 4-40
			$e1 = ExprDef::EDoWhile($econd, $e);
			$pmin = $p1;
			$pmax = ($econd === null ? 0 : $econd->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "else") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:644: characters 16-35
			return $this->unexpected(Token::TId($id));
		} else if ($id === "for") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:635: characters 4-18
			$t = $this->token();
			if ($t !== Token::TPOpen()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:636: characters 4-27
			$vname = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:637: characters 4-26
			$t = $this->token();
			if (!\Type::enumEq($t, Token::TId("in"))) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:638: characters 4-28
			$eiter = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:639: characters 4-19
			$t = $this->token();
			if ($t !== Token::TPClose()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:640: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:641: characters 4-38
			$e1 = ExprDef::EFor($vname, $eiter, $e);
			$pmin = $p1;
			$pmax = ($e === null ? 0 : $e->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "function") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:649: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:650: characters 4-20
			$name = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:651: lines 651-654
			if ($tk->index === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:652: characters 13-15
				$id = $tk->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:652: characters 18-27
				$name = $id;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:653: characters 13-21
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:655: characters 4-34
			$inf = $this->parseFunctionDecl();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:656: characters 4-70
			$e = ExprDef::EFunction($inf->args, $inf->body, $name, $inf->ret);
			$pmin = $p1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:656: characters 55-69
			$e1 = $inf->body;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:656: characters 4-70
			$pmax = ($e1 === null ? 0 : $e1->pmax);
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "if") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:588: characters 4-18
			$t = $this->token();
			if ($t !== Token::TPOpen()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:589: characters 4-27
			$cond = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:590: characters 4-19
			$t = $this->token();
			if ($t !== Token::TPClose()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:591: characters 4-25
			$e1 = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:592: characters 4-18
			$e2 = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:593: characters 4-22
			$semic = false;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:594: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:595: lines 595-598
			if ($tk === Token::TSemicolon()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:596: characters 5-17
				$semic = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:597: characters 5-17
				$tk = $this->token();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:599: lines 599-604
			if (\Type::enumEq($tk, Token::TId("else"))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:600: characters 5-21
				$e2 = $this->parseExpr();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:602: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:603: characters 5-33
				if ($semic) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:603: characters 17-33
					$this->tokens->push(new _HxAnon_Parser0(Token::TSemicolon(), $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:605: characters 4-61
			$e = ExprDef::EIf($cond, $e1, $e2);
			$pmin = $p1;
			$pmax = ($e2 === null ? $this->tokenMax : ($e2 === null ? 0 : $e2->pmax));
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "inline") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:646: characters 4-59
			if (!$this->maybe(Token::TId("function"))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:646: characters 34-59
				$this->unexpected(Token::TId("inline"));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:647: characters 4-37
			return $this->parseStructure("function");
		} else if ($id === "new") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:663: characters 4-24
			$a = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:664: characters 4-22
			$x = $this->getIdent();
			$a->arr[$a->length++] = $x;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:665: lines 665-676
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:666: characters 5-22
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:667: lines 667-675
				$__hx__switch = ($tk->index);
				if ($__hx__switch === 4) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:671: characters 6-11
					break;
				} else if ($__hx__switch === 8) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:669: characters 6-24
					$x = $this->getIdent();
					$a->arr[$a->length++] = $x;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:673: characters 6-20
					$this->unexpected($tk);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:674: characters 6-11
					break;
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:677: characters 4-38
			$args = $this->parseExprList(Token::TPClose());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:678: characters 4-33
			$e = ExprDef::ENew($a->join("."), $args);
			$pmin = $p1;
			$pmax = null;
			if ($e === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "return") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:658: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:659: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:660: characters 4-57
			$e = ($tk === Token::TSemicolon() ? null : $this->parseExpr());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:661: characters 4-59
			$e1 = ExprDef::EReturn($e);
			$pmin = $p1;
			$pmax = ($e === null ? $this->tokenMax : ($e === null ? 0 : $e->pmax));
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "switch") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:697: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:698: characters 4-31
			$def = null;
			$cases = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:699: characters 4-19
			$t = $this->token();
			if ($t !== Token::TBrOpen()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:700: lines 700-767
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:701: characters 5-22
				$tk = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:702: lines 702-766
				$__hx__switch = ($tk->index);
				if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:739: characters 14-23
					$__hx__switch = ($tk->params[0]);
					if ($__hx__switch === "case") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:704: characters 6-43
						$c = new _HxAnon_Parser12(new \Array_hx(), null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:705: characters 6-19
						$cases->arr[$cases->length++] = $c;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:706: lines 706-719
						while (true) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:707: characters 7-27
							$e1 = $this->parseExpr();
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:708: characters 7-23
							$_this = $c->values;
							$_this->arr[$_this->length++] = $e1;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:709: characters 7-19
							$tk = $this->token();
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:710: lines 710-718
							$__hx__switch = ($tk->index);
							if ($__hx__switch === 9) {
							} else if ($__hx__switch === 14) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:714: characters 8-13
								break;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:716: characters 8-22
								$this->unexpected($tk);
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:717: characters 8-13
								break;
							}
						};
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:720: characters 6-21
						$exprs = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:721: lines 721-732
						while (true) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:722: characters 7-19
							$tk = $this->token();
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:723: characters 7-15
							$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
							$this->tokenMin = $this->oldTokenMin;
							$this->tokenMax = $this->oldTokenMax;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:724: lines 724-731
							$__hx__switch = ($tk->index);
							if ($__hx__switch === 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:727: lines 727-730
								if ($this->resumeErrors) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:728: characters 8-13
									break;
								} else {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:730: characters 8-28
									$this->parseFullExpr($exprs);
								}
							} else if ($__hx__switch === 2) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:725: characters 29-38
								$__hx__switch = ($tk->params[0]);
								if ($__hx__switch === "case" || $__hx__switch === "default") {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:726: characters 8-13
									break;
								} else {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:730: characters 8-28
									$this->parseFullExpr($exprs);
								}
							} else if ($__hx__switch === 7) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:726: characters 8-13
								break;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:730: characters 8-28
								$this->parseFullExpr($exprs);
							}
						};
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:733: lines 733-738
						$tmp = null;
						if ($exprs->length === 1) {
							$tmp = ($exprs->arr[0] ?? null);
						} else if ($exprs->length === 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:736: characters 7-41
							$e2 = ExprDef::EBlock(new \Array_hx());
							$pmin = $this->tokenMin;
							$pmax = $this->tokenMin;
							if ($e2 === null) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:733: lines 733-738
								$tmp = null;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:736: characters 7-41
								if ($pmin === null) {
									$pmin = $this->tokenMin;
								}
								if ($pmax === null) {
									$pmax = $this->tokenMax;
								}
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:733: lines 733-738
								$tmp = new _HxAnon_Parser1($e2, $pmin, $pmax, $this->origin, $this->line);
							}
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 7-71
							$e3 = ExprDef::EBlock($exprs);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 25-39
							$e4 = ($exprs->arr[0] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 7-71
							$pmin1 = ($e4 === null ? 0 : $e4->pmin);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 41-70
							$e5 = ($exprs->arr[$exprs->length - 1] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 7-71
							$pmax1 = ($e5 === null ? 0 : $e5->pmax);
							if ($e3 === null) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:733: lines 733-738
								$tmp = null;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:738: characters 7-71
								if ($pmin1 === null) {
									$pmin1 = $this->tokenMin;
								}
								if ($pmax1 === null) {
									$pmax1 = $this->tokenMax;
								}
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:733: lines 733-738
								$tmp = new _HxAnon_Parser1($e3, $pmin1, $pmax1, $this->origin, $this->line);
							}
						}
						$c->expr = $tmp;
					} else if ($__hx__switch === "default") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:740: characters 6-38
						if ($def !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:740: characters 24-38
							$this->unexpected($tk);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:741: characters 6-24
						$t = $this->token();
						if ($t !== Token::TDoubleDot()) {
							$this->unexpected($t);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:742: characters 6-21
						$exprs1 = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:743: lines 743-754
						while (true) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:744: characters 7-19
							$tk = $this->token();
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:745: characters 7-15
							$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
							$this->tokenMin = $this->oldTokenMin;
							$this->tokenMax = $this->oldTokenMax;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:746: lines 746-753
							$__hx__switch = ($tk->index);
							if ($__hx__switch === 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:749: lines 749-752
								if ($this->resumeErrors) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:750: characters 8-13
									break;
								} else {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:752: characters 8-28
									$this->parseFullExpr($exprs1);
								}
							} else if ($__hx__switch === 2) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:747: characters 29-38
								$__hx__switch = ($tk->params[0]);
								if ($__hx__switch === "case" || $__hx__switch === "default") {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:748: characters 8-13
									break;
								} else {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:752: characters 8-28
									$this->parseFullExpr($exprs1);
								}
							} else if ($__hx__switch === 7) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:748: characters 8-13
								break;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:752: characters 8-28
								$this->parseFullExpr($exprs1);
							}
						};
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:755: lines 755-760
						if ($exprs1->length === 1) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:756: characters 7-15
							$def = ($exprs1->arr[0] ?? null);
						} else if ($exprs1->length === 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:758: characters 7-41
							$e6 = ExprDef::EBlock(new \Array_hx());
							$pmin2 = $this->tokenMin;
							$pmax2 = $this->tokenMin;
							if ($e6 === null) {
								$def = null;
							} else {
								if ($pmin2 === null) {
									$pmin2 = $this->tokenMin;
								}
								if ($pmax2 === null) {
									$pmax2 = $this->tokenMax;
								}
								$def = new _HxAnon_Parser1($e6, $pmin2, $pmax2, $this->origin, $this->line);
							}
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:760: characters 7-71
							$e7 = ExprDef::EBlock($exprs1);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:760: characters 25-39
							$e8 = ($exprs1->arr[0] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:760: characters 7-71
							$pmin3 = ($e8 === null ? 0 : $e8->pmin);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:760: characters 41-70
							$e9 = ($exprs1->arr[$exprs1->length - 1] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:760: characters 7-71
							$pmax3 = ($e9 === null ? 0 : $e9->pmax);
							if ($e7 === null) {
								$def = null;
							} else {
								if ($pmin3 === null) {
									$pmin3 = $this->tokenMin;
								}
								if ($pmax3 === null) {
									$pmax3 = $this->tokenMax;
								}
								$def = new _HxAnon_Parser1($e7, $pmin3, $pmax3, $this->origin, $this->line);
							}
						}
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:764: characters 6-20
						$this->unexpected($tk);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:765: characters 6-11
						break;
					}
				} else if ($__hx__switch === 7) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:762: characters 6-11
					break;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:764: characters 6-20
					$this->unexpected($tk);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:765: characters 6-11
					break;
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:768: characters 4-44
			$e1 = ExprDef::ESwitch($e, $cases, $def);
			$pmin = $p1;
			$pmax = $this->tokenMax;
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "throw") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:680: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:681: characters 4-28
			$e1 = ExprDef::EThrow($e);
			$pmin = $p1;
			$pmax = ($e === null ? 0 : $e->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "try") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:683: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:684: characters 4-29
			$t = $this->token();
			if (!\Type::enumEq($t, Token::TId("catch"))) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:685: characters 4-18
			$t = $this->token();
			if ($t !== Token::TPOpen()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:686: characters 4-27
			$vname = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:687: characters 4-22
			$t = $this->token();
			if ($t !== Token::TDoubleDot()) {
				$this->unexpected($t);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:688: characters 4-17
			$t = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:689: lines 689-692
			if ($this->allowTypes) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:690: characters 5-20
				$t = $this->parseType();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:692: characters 5-32
				$t1 = $this->token();
				if (!\Type::enumEq($t1, Token::TId("Dynamic"))) {
					$this->unexpected($t1);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:693: characters 4-19
			$t1 = $this->token();
			if ($t1 !== Token::TPClose()) {
				$this->unexpected($t1);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:694: characters 4-25
			$ec = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:695: characters 4-43
			$e1 = ExprDef::ETry($e, $vname, $t, $ec);
			$pmin = $p1;
			$pmax = ($ec === null ? 0 : $ec->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "var") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:607: characters 4-27
			$ident = $this->getIdent();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:608: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:609: characters 4-17
			$t = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:610: lines 610-613
			if (($tk === Token::TDoubleDot()) && $this->allowTypes) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:611: characters 5-20
				$t = $this->parseType();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:612: characters 5-17
				$tk = $this->token();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:614: characters 4-17
			$e = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:615: lines 615-618
			if (\Type::enumEq($tk, Token::TOp("="))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:616: characters 5-20
				$e = $this->parseExpr();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:618: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:619: characters 4-59
			$e1 = ExprDef::EVar($ident, $t, $e);
			$pmin = $p1;
			$pmax = ($e === null ? $this->tokenMax : ($e === null ? 0 : $e->pmax));
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else if ($id === "while") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:621: characters 4-28
			$econd = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:622: characters 4-24
			$e = $this->parseExpr();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:623: characters 4-34
			$e1 = ExprDef::EWhile($econd, $e);
			$pmin = $p1;
			$pmax = ($e === null ? 0 : $e->pmax);
			if ($e1 === null) {
				return null;
			} else {
				if ($pmin === null) {
					$pmin = $this->tokenMin;
				}
				if ($pmax === null) {
					$pmax = $this->tokenMax;
				}
				return new _HxAnon_Parser1($e1, $pmin, $pmax, $this->origin, $this->line);
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:770: characters 4-8
			return null;
		}
	}

	/**
	 * @return CType
	 */
	public function parseType () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:890: lines 890-1010
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:891: characters 3-19
		$t = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:892: lines 892-1009
		$__hx__switch = ($t->index);
		if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:893: characters 12-13
			$v = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:894: characters 4-11
			$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:895: characters 4-27
			$path = $this->parsePath();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:896: characters 4-22
			$params = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:897: characters 4-15
			$t = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:898: lines 898-926
			if ($t->index === 3) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:899: characters 13-15
				$op = $t->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:900: lines 900-923
				if ($op === "<") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:901: characters 6-17
					$params = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:902: lines 902-921
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:903: characters 7-31
						$x = $this->parseType();
						$params->arr[$params->length++] = $x;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:904: characters 7-18
						$t = $this->token();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:905: lines 905-918
						$__hx__switch = ($t->index);
						if ($__hx__switch === 3) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:907: characters 16-18
							$op = $t->params[0];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:908: characters 8-29
							if ($op === ">") {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:908: characters 24-29
								break;
							}
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:909: lines 909-916
							if (HxString::charCodeAt($op, 0) === 62) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:911: characters 9-15
								$tmp = $this->tokens;
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:911: characters 26-43
								$tmp1 = Token::TOp(\mb_substr($op, 1, null));
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:911: characters 9-94
								$tmp->add(new _HxAnon_Parser0($tmp1, $this->tokenMax - mb_strlen($op) - 1, $this->tokenMax));
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:915: characters 9-14
								break;
							}
						} else if ($__hx__switch === 9) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:906: characters 20-28
							continue;
						} else {
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:919: characters 7-20
						$this->unexpected($t);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:920: characters 7-12
						break;
					};
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:923: characters 6-13
					$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
					$this->tokenMin = $this->oldTokenMin;
					$this->tokenMax = $this->oldTokenMax;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:925: characters 5-12
				$this->tokens->push(new _HxAnon_Parser0($t, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:927: characters 4-46
			return $this->parseTypeNext(CType::CTPath($path, $params));
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:929: lines 929-930
			$a = $this->token();
			$b = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:932: characters 4-11
			$this->tokens->push(new _HxAnon_Parser0($b, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:933: characters 4-11
			$this->tokens->push(new _HxAnon_Parser0($a, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:935: lines 935-942
			$withReturn = function ($args) use (&$_gthis) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:936: characters 12-19
				$_g = $_gthis->token();
				if ($_g->index === 3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:937: characters 15-19
					if ($_g->params[0] !== "->") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:938: characters 11-12
						$t = $_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:938: characters 14-27
						$_gthis->unexpected($t);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:938: characters 11-12
					$t = $_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:938: characters 14-27
					$_gthis->unexpected($t);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:941: characters 5-36
				return CType::CTFun($args, $_gthis->parseType());
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:944: lines 944-975
			$__hx__switch = ($a->index);
			if ($__hx__switch === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:945: characters 30-31
				$_g = $a->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:944: characters 15-16
				if ($b->index === 14) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
					$_g = new \Array_hx();
					$_g1 = 0;
					$_g2 = $this->parseFunctionArgs();
					while ($_g1 < $_g2->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: characters 23-26
						$arg = ($_g2->arr[$_g1] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
						++$_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:948: characters 14-23
						$_g3 = $arg->value;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:949: lines 949-951
						if ($_g3 !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:950: characters 13-14
							$v = $_g3;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:951: characters 9-118
							if (!$this->resumeErrors) {
								throw Exception::thrown(new Error(ErrorDef::ECustom("Default values not allowed in function types"), $v->pmin, $v->pmax, $this->origin, $this->line));
							}
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:954: characters 7-62
						$_g->arr[$_g->length++] = CType::CTNamed($arg->name, ($arg->opt ? CType::CTOpt($arg->t) : $arg->t));
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
					$args = $_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:957: characters 6-29
					return $withReturn($args);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:960: characters 6-26
					$t1 = $this->parseType();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:961: characters 20-27
					$_g = $this->token();
					$__hx__switch = ($_g->index);
					if ($__hx__switch === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:972: characters 8-34
						return $this->parseTypeNext(CType::CTParent($t1));
					} else if ($__hx__switch === 9) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:963: characters 8-23
						$args = \Array_hx::wrap([$t1]);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:965: lines 965-968
						while (true) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:966: characters 9-31
							$x = $this->parseType();
							$args->arr[$args->length++] = $x;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:967: characters 9-34
							if (!$this->maybe(Token::TComma())) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:967: characters 29-34
								break;
							}
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:969: characters 8-23
						$t1 = $this->token();
						if ($t1 !== Token::TPClose()) {
							$this->unexpected($t1);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:970: characters 8-24
						return $withReturn($args);
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:973: characters 12-13
						$t1 = $_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:973: characters 15-28
						return $this->unexpected($t1);
					}
				}
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
				$_g = new \Array_hx();
				$_g1 = 0;
				$_g2 = $this->parseFunctionArgs();
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: characters 23-26
					$arg = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:948: characters 14-23
					$_g3 = $arg->value;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:949: lines 949-951
					if ($_g3 !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:950: characters 13-14
						$v = $_g3;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:951: characters 9-118
						if (!$this->resumeErrors) {
							throw Exception::thrown(new Error(ErrorDef::ECustom("Default values not allowed in function types"), $v->pmin, $v->pmax, $this->origin, $this->line));
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:954: characters 7-62
					$_g->arr[$_g->length++] = CType::CTNamed($arg->name, ($arg->opt ? CType::CTOpt($arg->t) : $arg->t));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:947: lines 947-955
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:957: characters 6-29
				return $withReturn($args);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:960: characters 6-26
				$t1 = $this->parseType();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:961: characters 20-27
				$_g = $this->token();
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:972: characters 8-34
					return $this->parseTypeNext(CType::CTParent($t1));
				} else if ($__hx__switch === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:963: characters 8-23
					$args = \Array_hx::wrap([$t1]);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:965: lines 965-968
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:966: characters 9-31
						$x = $this->parseType();
						$args->arr[$args->length++] = $x;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:967: characters 9-34
						if (!$this->maybe(Token::TComma())) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:967: characters 29-34
							break;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:969: characters 8-23
					$t1 = $this->token();
					if ($t1 !== Token::TPClose()) {
						$this->unexpected($t1);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:970: characters 8-24
					return $withReturn($args);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:973: characters 12-13
					$t1 = $_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:973: characters 15-28
					return $this->unexpected($t1);
				}
			}
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:977: characters 4-20
			$fields = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:978: characters 4-20
			$meta = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:979: lines 979-1005
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:980: characters 5-16
				$t = $this->token();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:981: lines 981-1004
				$__hx__switch = ($t->index);
				if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:989: characters 14-18
					$_g = $t->params[0];
					if ($_g === "var") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:984: characters 6-28
						$name = $this->getIdent();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:985: characters 6-24
						$t1 = $this->token();
						if ($t1 !== Token::TDoubleDot()) {
							$this->unexpected($t1);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:986: characters 6-66
						$x = new _HxAnon_Parser13($name, $this->parseType(), $meta);
						$fields->arr[$fields->length++] = $x;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:987: characters 6-17
						$meta = null;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:988: characters 6-24
						$t2 = $this->token();
						if ($t2 !== Token::TSemicolon()) {
							$this->unexpected($t2);
						}
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:989: characters 14-18
						$name1 = $_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:990: characters 6-24
						$t3 = $this->token();
						if ($t3 !== Token::TDoubleDot()) {
							$this->unexpected($t3);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:991: characters 6-66
						$x1 = new _HxAnon_Parser13($name1, $this->parseType(), $meta);
						$fields->arr[$fields->length++] = $x1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:992: characters 6-17
						$t = $this->token();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:993: lines 993-997
						$__hx__switch = ($t->index);
						if ($__hx__switch === 7) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:995: characters 21-26
							break;
						} else if ($__hx__switch === 9) {
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:996: characters 15-28
							$this->unexpected($t);
						}
					}
				} else if ($__hx__switch === 7) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:982: characters 20-25
					break;
				} else if ($__hx__switch === 15) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:998: characters 16-20
					$name2 = $t->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:999: characters 6-34
					if ($meta === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:999: characters 25-34
						$meta = new \Array_hx();
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1000: characters 6-58
					$x2 = new _HxAnon_Parser8($name2, $this->parseMetaArgs());
					$meta->arr[$meta->length++] = $x2;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1002: characters 6-19
					$this->unexpected($t);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1003: characters 6-11
					break;
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1006: characters 4-40
			return $this->parseTypeNext(CType::CTAnon($fields));
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1008: characters 4-24
			return $this->unexpected($t);
		}
	}

	/**
	 * @param CType $t
	 * 
	 * @return CType
	 */
	public function parseTypeNext ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1013: characters 3-20
		$tk = $this->token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1014: lines 1014-1023
		if ($tk->index === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1015: characters 12-14
			$op = $tk->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1016: lines 1016-1019
			if ($op !== "->") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1017: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1018: characters 5-13
				return $t;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1021: characters 4-12
			$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
			$this->tokenMin = $this->oldTokenMin;
			$this->tokenMax = $this->oldTokenMax;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1022: characters 4-12
			return $t;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1024: characters 3-24
		$t2 = $this->parseType();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1025: lines 1025-1031
		if ($t2->index === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1026: characters 20-21
			$_g = $t2->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1026: characters 14-18
			$args = $t2->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1027: characters 4-19
			$args->length = \array_unshift($args->arr, $t);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1028: characters 4-13
			return $t2;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1030: characters 4-25
			return CType::CTFun(\Array_hx::wrap([$t]), $t2);
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return int
	 */
	public function pmax ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:258: characters 10-32
		if ($e === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:258: characters 22-23
			return 0;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:258: characters 26-32
			return $e->pmax;
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return int
	 */
	public function pmin ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:250: characters 10-32
		if ($e === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:250: characters 22-23
			return 0;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:250: characters 26-32
			return $e->pmin;
		}
	}

	/**
	 * @param string $id
	 * 
	 * @return mixed
	 */
	public function preprocValue ($id) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1565: characters 10-35
		return ($this->preprocesorValues->data[$id] ?? null);
	}

	/**
	 * @param string $id
	 * 
	 * @return Token
	 */
	public function preprocess ($id) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1604: lines 1604-1633
		if ($id === "else" || $id === "elseif") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1614: lines 1614-1632
			if ($this->preprocStack->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1615: lines 1615-1627
				if (($this->preprocStack->arr[$this->preprocStack->length - 1] ?? null)->r) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1616: characters 5-52
					$this->preprocStack[$this->preprocStack->length - 1]->r = false;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1617: characters 5-17
					$this->skipTokens();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1618: characters 5-19
					return $this->token();
				} else if ($id === "else") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1620: characters 5-23
					$_this = $this->preprocStack;
					if ($_this->length > 0) {
						$_this->length--;
					}
					\array_pop($_this->arr);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1621: characters 5-36
					$_this = $this->preprocStack;
					$_this->arr[$_this->length++] = new _HxAnon_Parser14(true);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1622: characters 5-19
					return $this->token();
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1625: characters 5-23
					$_this = $this->preprocStack;
					if ($_this->length > 0) {
						$_this->length--;
					}
					\array_pop($_this->arr);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1626: characters 5-28
					return $this->preprocess("if");
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1632: characters 4-22
				return Token::TPrepro($id);
			}
		} else if ($id === "end") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1628: lines 1628-1632
			if ($this->preprocStack->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1629: characters 4-22
				$_this = $this->preprocStack;
				if ($_this->length > 0) {
					$_this->length--;
				}
				\array_pop($_this->arr);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1630: characters 4-18
				return $this->token();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1632: characters 4-22
				return Token::TPrepro($id);
			}
		} else if ($id === "if") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1606: characters 4-30
			$e = $this->parsePreproCond();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1607: lines 1607-1610
			if ($this->evalPreproCond($e)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1608: characters 5-36
				$_this = $this->preprocStack;
				$_this->arr[$_this->length++] = new _HxAnon_Parser14(true);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1609: characters 5-19
				return $this->token();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1611: characters 4-36
			$_this = $this->preprocStack;
			$_this->arr[$_this->length++] = new _HxAnon_Parser14(false);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1612: characters 4-16
			$this->skipTokens();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1613: characters 4-18
			return $this->token();
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1632: characters 4-22
			return Token::TPrepro($id);
		}
	}

	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function push ($tk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:204: characters 3-60
		$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:205: characters 3-25
		$this->tokenMin = $this->oldTokenMin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:206: characters 3-25
		$this->tokenMax = $this->oldTokenMax;
	}

	/**
	 * @return int
	 */
	public function readChar () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1261: characters 3-50
		return \StringTools::fastCodeAt($this->input, $this->readPos++);
	}

	/**
	 * @param int $until
	 * 
	 * @return string
	 */
	public function readString ($until) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1265: characters 3-13
		$c = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1266: characters 3-27
		$b = new \StringBuf();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1267: characters 3-19
		$esc = false;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1268: characters 3-18
		$old = $this->line;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1269: characters 3-17
		$s = $this->input;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1271: characters 3-24
		$p1 = $this->readPos - 1;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1273: lines 1273-1320
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1274: characters 4-23
			$c = \StringTools::fastCodeAt($this->input, $this->readPos++);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1275: lines 1275-1279
			if ($c === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1276: characters 5-15
				$this->line = $old;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1277: characters 5-39
				if (!$this->resumeErrors) {
					throw Exception::thrown(new Error(ErrorDef::EUnterminatedString(), $p1, $p1, $this->origin, $this->line));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1278: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1280: lines 1280-1319
			if ($esc) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1281: characters 5-16
				$esc = false;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1282: lines 1282-1311
				if ($c === 34 || $c === 39 || $c === 92) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1286: characters 41-42
					$b1 = $b;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1286: characters 41-53
					$b1->b = ($b1->b??'null') . (\mb_chr($c)??'null');
				} else if ($c === 47) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1287: characters 20-68
					if ($this->allowJSON) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1287: characters 36-37
						$b2 = $b;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1287: characters 36-48
						$b2->b = ($b2->b??'null') . (\mb_chr($c)??'null');
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1287: characters 54-68
						$this->invalidChar($c);
					}
				} else if ($c === 110) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1283: characters 20-21
					$b3 = $b;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1283: characters 20-40
					$b3->b = ($b3->b??'null') . (\mb_chr(10)??'null');
				} else if ($c === 114) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1284: characters 20-21
					$b4 = $b;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1284: characters 20-40
					$b4->b = ($b4->b??'null') . (\mb_chr(13)??'null');
				} else if ($c === 116) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1285: characters 20-21
					$b5 = $b;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1285: characters 20-40
					$b5->b = ($b5->b??'null') . (\mb_chr(9)??'null');
				} else if ($c === 117) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1289: characters 6-37
					if (!$this->allowJSON) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1289: characters 23-37
						$this->invalidChar($c);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1290: characters 6-16
					$k = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1291: characters 16-20
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1291: lines 1291-1308
					while ($_g < 4) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1291: characters 16-21
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1292: characters 7-14
						$k <<= 4;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1293: characters 7-29
						$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1294: lines 1294-1307
						if ($char === 48 || $char === 49 || $char === 50 || $char === 51 || $char === 52 || $char === 53 || $char === 54 || $char === 55 || $char === 56 || $char === 57) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1296: characters 8-22
							$k += $char - 48;
						} else if ($char === 65 || $char === 66 || $char === 67 || $char === 68 || $char === 69 || $char === 70) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1298: characters 8-22
							$k += $char - 55;
						} else if ($char === 97 || $char === 98 || $char === 99 || $char === 100 || $char === 101 || $char === 102) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1300: characters 8-22
							$k += $char - 87;
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1302: lines 1302-1305
							if ($char === 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1303: characters 9-19
								$this->line = $old;
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1304: characters 9-43
								if (!$this->resumeErrors) {
									throw Exception::thrown(new Error(ErrorDef::EUnterminatedString(), $p1, $p1, $this->origin, $this->line));
								}
							}
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1306: characters 8-25
							$this->invalidChar($char);
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1309: characters 6-7
					$b6 = $b;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1309: characters 6-18
					$b6->b = ($b6->b??'null') . (\mb_chr($k)??'null');
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1310: characters 14-28
					$this->invalidChar($c);
				}
			} else if ($c === 92) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1313: characters 5-15
				$esc = true;
			} else if ($c === $until) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1315: characters 5-10
				break;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1317: characters 5-25
				if ($c === 10) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1317: characters 19-25
					$this->line++;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1318: characters 5-6
				$b7 = $b;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1318: characters 5-17
				$b7->b = ($b7->b??'null') . (\mb_chr($c)??'null');
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1321: characters 3-22
		return $b->b;
	}

	/**
	 * @return void
	 */
	public function skipTokens () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1637: characters 3-38
		$spos = $this->preprocStack->length - 1;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1638: characters 3-32
		$obj = ($this->preprocStack->arr[$spos] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1639: characters 3-21
		$pos = $this->readPos;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1640: lines 1640-1648
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1641: characters 4-21
			$tk = $this->token();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1642: lines 1642-1643
			if ($tk === Token::TEof()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1643: characters 5-54
				if (!$this->resumeErrors) {
					throw Exception::thrown(new Error(ErrorDef::EInvalidPreprocessor("Unclosed"), $pos, $pos, $this->origin, $this->line));
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1644: lines 1644-1647
			if (($this->preprocStack->arr[$spos] ?? null) !== $obj) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1645: characters 5-13
				$this->tokens->push(new _HxAnon_Parser0($tk, $this->tokenMin, $this->tokenMax));
				$this->tokenMin = $this->oldTokenMin;
				$this->tokenMax = $this->oldTokenMax;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1646: characters 5-10
				break;
			}
		}
	}

	/**
	 * @return Token
	 */
	public function token () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1326: characters 3-24
		$t = $this->tokens->pop();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1327: lines 1327-1331
		if ($t !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1328: characters 4-20
			$this->tokenMin = $t->min;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1329: characters 4-20
			$this->tokenMax = $t->max;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1330: characters 4-14
			return $t->t;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1332: characters 3-25
		$this->oldTokenMin = $this->tokenMin;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1333: characters 3-25
		$this->oldTokenMax = $this->tokenMax;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1334: characters 3-53
		$this->tokenMin = ($this->char < 0 ? $this->readPos : $this->readPos - 1);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1335: characters 3-20
		$t = $this->_token();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1336: characters 3-57
		$this->tokenMax = ($this->char < 0 ? $this->readPos - 1 : $this->readPos - 2);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1337: characters 3-11
		return $t;
	}

	/**
	 * @param string $op
	 * @param int $char
	 * 
	 * @return Token
	 */
	public function tokenComment ($op, $char) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1652: characters 3-28
		$c = HxString::charCodeAt($op, 1);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1653: characters 3-17
		$s = $this->input;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1654: lines 1654-1661
		if ($c === 47) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1655: lines 1655-1658
			while (($char !== 13) && ($char !== 10)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1656: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1657: characters 5-40
				if ($char === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1657: characters 35-40
					break;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1659: characters 4-20
			$this->char = $char;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1660: characters 4-18
			return $this->token();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1662: lines 1662-1688
		if ($c === 42) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1663: characters 4-19
			$old = $this->line;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1664: lines 1664-1667
			if ($op === "/**/") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1665: characters 5-21
				$this->char = $char;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1666: characters 5-19
				return $this->token();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1668: lines 1668-1686
			while (true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1669: lines 1669-1677
				while ($char !== 42) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1670: characters 6-36
					if ($char === 10) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1670: characters 30-36
						$this->line++;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1671: characters 6-23
					$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1672: lines 1672-1676
					if ($char === 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1673: characters 7-17
						$this->line = $old;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1674: characters 7-54
						if (!$this->resumeErrors) {
							throw Exception::thrown(new Error(ErrorDef::EUnterminatedComment(), $this->tokenMin, $this->tokenMin, $this->origin, $this->line));
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1675: characters 7-12
						break;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1678: characters 5-22
				$char = \StringTools::fastCodeAt($this->input, $this->readPos++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1679: lines 1679-1683
				if ($char === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1680: characters 6-16
					$this->line = $old;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1681: characters 6-53
					if (!$this->resumeErrors) {
						throw Exception::thrown(new Error(ErrorDef::EUnterminatedComment(), $this->tokenMin, $this->tokenMin, $this->origin, $this->line));
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1682: characters 6-11
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1684: lines 1684-1685
				if ($char === 47) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1685: characters 6-11
					break;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1687: characters 4-18
			return $this->token();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1689: characters 3-19
		$this->char = $char;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1690: characters 3-17
		return Token::TOp($op);
	}

	/**
	 * @param Token $t
	 * 
	 * @return string
	 */
	public function tokenString ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1705: lines 1705-1723
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1706: characters 14-21
			return "<eof>";
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1707: characters 15-16
			$c = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1707: characters 19-33
			return $this->constString($c);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1708: characters 12-13
			$s = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1708: characters 16-17
			return $s;
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1709: characters 12-13
			$s = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1709: characters 16-17
			return $s;
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1710: characters 16-19
			return "(";
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1711: characters 17-20
			return ")";
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1712: characters 17-20
			return "{";
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1713: characters 18-21
			return "}";
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1714: characters 14-17
			return ".";
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1715: characters 16-19
			return ",";
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1716: characters 20-23
			return ";";
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1717: characters 17-20
			return "[";
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1718: characters 18-21
			return "]";
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1719: characters 19-22
			return "?";
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1720: characters 20-23
			return ":";
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1721: characters 14-16
			$id = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1721: characters 19-27
			return "@" . ($id??'null');
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1722: characters 16-18
			$id = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:1722: characters 21-29
			return "#" . ($id??'null');
		}
	}

	/**
	 * @param Token $tk
	 * 
	 * @return mixed
	 */
	public function unexpected ($tk) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:198: characters 3-56
		$err = ErrorDef::EUnexpected($this->tokenString($tk));
		if (!$this->resumeErrors) {
			throw Exception::thrown(new Error($err, $this->tokenMin, $this->tokenMax, $this->origin, $this->line));
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Parser.hx:199: characters 3-14
		return null;
	}
}

class _HxAnon_Parser0 extends HxAnon {
	function __construct($t, $min, $max) {
		$this->t = $t;
		$this->min = $min;
		$this->max = $max;
	}
}

class _HxAnon_Parser1 extends HxAnon {
	function __construct($e, $pmin, $pmax, $origin, $line) {
		$this->e = $e;
		$this->pmin = $pmin;
		$this->pmax = $pmax;
		$this->origin = $origin;
		$this->line = $line;
	}
}

class _HxAnon_Parser2 extends HxAnon {
	function __construct($name) {
		$this->name = $name;
	}
}

class _HxAnon_Parser3 extends HxAnon {
	function __construct($name, $t) {
		$this->name = $name;
		$this->t = $t;
	}
}

class _HxAnon_Parser5 extends HxAnon {
	function __construct($args, $expr, $ret) {
		$this->args = $args;
		$this->expr = $expr;
		$this->ret = $ret;
	}
}

class _HxAnon_Parser4 extends HxAnon {
	function __construct($name, $meta, $access, $kind) {
		$this->name = $name;
		$this->meta = $meta;
		$this->access = $access;
		$this->kind = $kind;
	}
}

class _HxAnon_Parser6 extends HxAnon {
	function __construct($get, $set, $type, $expr) {
		$this->get = $get;
		$this->set = $set;
		$this->type = $type;
		$this->expr = $expr;
	}
}

class _HxAnon_Parser7 extends HxAnon {
	function __construct($args, $ret, $body) {
		$this->args = $args;
		$this->ret = $ret;
		$this->body = $body;
	}
}

class _HxAnon_Parser8 extends HxAnon {
	function __construct($name, $params) {
		$this->name = $name;
		$this->params = $params;
	}
}

class _HxAnon_Parser9 extends HxAnon {
	function __construct($name, $meta, $params, $extend, $implement, $fields, $isPrivate, $isExtern) {
		$this->name = $name;
		$this->meta = $meta;
		$this->params = $params;
		$this->extend = $extend;
		$this->implement = $implement;
		$this->fields = $fields;
		$this->isPrivate = $isPrivate;
		$this->isExtern = $isExtern;
	}
}

class _HxAnon_Parser10 extends HxAnon {
	function __construct($name, $meta, $params, $isPrivate, $t) {
		$this->name = $name;
		$this->meta = $meta;
		$this->params = $params;
		$this->isPrivate = $isPrivate;
		$this->t = $t;
	}
}

class _HxAnon_Parser11 extends HxAnon {
	function __construct($name, $e) {
		$this->name = $name;
		$this->e = $e;
	}
}

class _HxAnon_Parser12 extends HxAnon {
	function __construct($values, $expr) {
		$this->values = $values;
		$this->expr = $expr;
	}
}

class _HxAnon_Parser13 extends HxAnon {
	function __construct($name, $t, $meta) {
		$this->name = $name;
		$this->t = $t;
		$this->meta = $meta;
	}
}

class _HxAnon_Parser14 extends HxAnon {
	function __construct($r) {
		$this->r = $r;
	}
}

Boot::registerClass(Parser::class, 'hscript.Parser');
