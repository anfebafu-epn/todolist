<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \hscript\_Checker\WithType;
use \haxe\ds\StringMap;
use \haxe\ds\EnumValueMap;

class Checker {
	/**
	 * @var bool
	 */
	public $allowAsync;
	/**
	 * @var bool
	 */
	public $allowDefine;
	/**
	 * @var bool
	 */
	public $allowGlobalsDefine;
	/**
	 * @var TType
	 */
	public $allowReturn;
	/**
	 * @var bool
	 */
	public $allowUntypedMeta;
	/**
	 * @var TType
	 */
	public $currentFunType;
	/**
	 * @var StringMap
	 */
	public $events;
	/**
	 * @var StringMap
	 */
	public $globals;
	/**
	 * @var bool
	 */
	public $isCompletion;
	/**
	 * @var StringMap
	 */
	public $locals;
	/**
	 * @var CheckerTypes
	 */
	public $types;

	/**
	 * @param TType $t
	 * 
	 * @return string
	 */
	public static function typeStr ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:430: lines 430-446
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:431: characters 14-15
			$r = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:431: characters 18-56
			if ($r->r === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:431: characters 32-41
				return "Unknown";
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:431: characters 44-56
				return Checker::typeStr($r->r);
			}
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:442: characters 15-19
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:442: characters 22-26
			return $name;
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:444: characters 20-24
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:444: characters 27-35
			return "?" . ($name??'null');
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:443: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:443: characters 18-40
			return "Null<" . (Checker::typeStr($t1)??'null') . ">";
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:432: characters 14-15
			$c = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:432: characters 17-21
			$args = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:432: characters 24-30
			$c1 = $c->name;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:432: characters 33-47
			$tmp = null;
			if ($args->length === 0) {
				$tmp = "";
			} else {
				$_g = new \Array_hx();
				$_g1 = 0;
				while ($_g1 < $args->length) {
					$t1 = ($args->arr[$_g1] ?? null);
					++$_g1;
					$x = Checker::typeStr($t1);
					$_g->arr[$_g->length++] = $x;
				}
				$tmp = "<" . ($_g->join(",")??'null') . ">";
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:432: characters 24-47
			return ($c1??'null') . ($tmp??'null');
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:433: characters 14-15
			$e = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:433: characters 17-21
			$args = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:433: characters 24-30
			$e1 = $e->name;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:433: characters 33-47
			$tmp = null;
			if ($args->length === 0) {
				$tmp = "";
			} else {
				$_g = new \Array_hx();
				$_g1 = 0;
				while ($_g1 < $args->length) {
					$t1 = ($args->arr[$_g1] ?? null);
					++$_g1;
					$x = Checker::typeStr($t1);
					$_g->arr[$_g->length++] = $x;
				}
				$tmp = "<" . ($_g->join(",")??'null') . ">";
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:433: characters 24-47
			return ($e1??'null') . ($tmp??'null');
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:434: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:434: characters 17-21
			$args = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:435: lines 435-438
			if ($t1->name === "hscript.TypeCheck") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:436: characters 5-21
				return Checker::typeStr(($args->arr[1] ?? null));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:438: characters 5-11
				$t2 = $t1->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:438: characters 14-28
				$tmp = null;
				if ($args->length === 0) {
					$tmp = "";
				} else {
					$_g = new \Array_hx();
					$_g1 = 0;
					while ($_g1 < $args->length) {
						$t1 = ($args->arr[$_g1] ?? null);
						++$_g1;
						$x = Checker::typeStr($t1);
						$_g->arr[$_g->length++] = $x;
					}
					$tmp = "<" . ($_g->join(",")??'null') . ">";
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:438: characters 5-28
				return ($t2??'null') . ($tmp??'null');
			}
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:439: characters 18-19
			$a = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:439: characters 21-25
			$args = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:439: characters 28-34
			$a1 = $a->name;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:439: characters 37-51
			$tmp = null;
			if ($args->length === 0) {
				$tmp = "";
			} else {
				$_g = new \Array_hx();
				$_g1 = 0;
				while ($_g1 < $args->length) {
					$t1 = ($args->arr[$_g1] ?? null);
					++$_g1;
					$x = Checker::typeStr($t1);
					$_g->arr[$_g->length++] = $x;
				}
				$tmp = "<" . ($_g->join(",")??'null') . ">";
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:439: characters 28-51
			return ($a1??'null') . ($tmp??'null');
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 13-17
			$args = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 19-22
			$ret = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 31-110
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 32-109
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 37-38
				$a = ($args->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 32-109
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 49-109
				$x = ((($a->opt ? "?" : ""))??'null') . ((($a->name === "" ? "" : ($a->name??'null') . ":"))??'null') . (Checker::typeStr($a->t)??'null');
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:440: characters 25-142
			return "(" . ($_g->join(", ")??'null') . ") -> " . (Checker::typeStr($ret)??'null');
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 14-20
			$fields = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 29-88
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 30-87
			$_g1 = 0;
			while ($_g1 < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 35-36
				$f = ($fields->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 30-87
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 49-87
				$x = ((($f->opt ? "?" : ""))??'null') . ($f->name??'null') . ":" . (Checker::typeStr($f->t)??'null');
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:441: characters 23-103
			return "{" . ($_g->join(", ")??'null') . "}";
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:445: characters 12-33
			return \mb_substr($t->tag, 1, null);
		}
	}

	/**
	 * @param CheckerTypes $types
	 * 
	 * @return void
	 */
	public function __construct ($types = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:292: characters 35-44
		$this->events = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:291: characters 36-45
		$this->globals = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:302: characters 3-49
		if ($types === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:302: characters 23-49
			$types = new CheckerTypes();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:303: characters 3-21
		$this->types = $types;
	}

	/**
	 * @param TType $t
	 * @param TType[]|\Array_hx $params
	 * @param TType[]|\Array_hx $args
	 * 
	 * @return TType
	 */
	public function apply ($t, $params, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:674: lines 674-687
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:675: characters 3-43
		if ($args->length !== $params->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:675: characters 38-43
			throw Exception::thrown("Invalid number of type parameters");
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:676: lines 676-677
		if ($args->length === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:677: characters 4-12
			return $t;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:678: characters 3-25
		$subst = new EnumValueMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:679: characters 13-17
		$_g = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:679: characters 17-30
		$_g1 = $params->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:679: lines 679-680
		while ($_g < $_g1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:679: characters 13-30
			$i = $_g++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:680: characters 4-33
			$subst->set(($params->arr[$i] ?? null), ($args->arr[$i] ?? null));
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:681: lines 681-685
		$map = null;
		$map = function ($t) use (&$_gthis, &$map, &$subst) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:682: characters 4-26
			$st = $subst->get($t);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:683: characters 4-30
			if ($st !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:683: characters 21-30
				return $st;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:684: characters 4-25
			return $_gthis->mapType($t, $map);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:686: characters 3-16
		return $map($t);
	}

	/**
	 * @param object $expr
	 * @param WithType $withType
	 * @param bool $isCompletion
	 * 
	 * @return TType
	 */
	public function check ($expr, $withType = null, $isCompletion = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:344: lines 344-385
		if ($isCompletion === null) {
			$isCompletion = false;
		}
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:345: characters 3-44
		if ($withType === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:345: characters 26-44
			$withType = WithType::NoValue();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:346: characters 3-21
		$this->locals = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:347: characters 3-35
		$this->allowDefine = $this->allowGlobalsDefine;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:348: characters 3-35
		$this->isCompletion = $isCompletion;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:349: characters 11-21
		$_g = $expr->e;
		if ($_g->index === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:350: characters 15-17
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:351: characters 4-21
			$delayed = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:352: characters 4-21
			$last = TType::TVoid();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:353: lines 353-378
			$_g = 0;
			while ($_g < $el->length) {
				unset($e, $ft);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:353: characters 9-10
				$e = ($el->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:353: lines 353-378
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:354: lines 354-359
				while (true) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:355: characters 14-21
					$_g1 = $e->e;
					if ($_g1->index === 25) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:356: characters 17-18
						$_g2 = $_g1->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:356: characters 19-20
						$_g3 = $_g1->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:356: characters 21-23
						$e2 = $_g1->params[2];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:356: characters 26-32
						$e = $e2;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:357: characters 15-20
						break;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:360: characters 13-20
				$_g4 = $e->e;
				if ($_g4->index === 14) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:361: characters 25-26
					$_g5 = $_g4->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:361: characters 20-24
					$args = $_g4->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:361: characters 27-31
					$name = $_g4->params[2];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:361: characters 32-35
					$ret = $_g4->params[3];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:361: lines 361-376
					if ($name !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:362: characters 6-61
						$tret = ($ret === null ? $this->makeMono() : $this->makeType($ret, $e));
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:363: characters 6-43
						$ft = TType::TFun($this->typeArgs($args, $e), $tret);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:364: characters 6-26
						$this->locals->data[$name] = $ft;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:365: lines 365-369
						$delayed->arr[$delayed->length++] = function () use (&$e, &$ft, &$_gthis) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:366: characters 7-26
							$_gthis->currentFunType = $ft;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:367: characters 7-27
							$_gthis->typeExpr($e, WithType::NoValue());
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:368: characters 7-16
							return $ft;
						};
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 6-29
						$_g6 = 0;
						while ($_g6 < $delayed->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 11-12
							$f = ($delayed->arr[$_g6] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 6-29
							++$_g6;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 26-29
							$f();
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:372: characters 6-18
						$delayed = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:373: lines 373-376
						if (($el->arr[$el->length - 1] ?? null) === $e) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:374: characters 7-35
							$last = $this->typeExpr($e, $withType);
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:376: characters 7-27
							$this->typeExpr($e, WithType::NoValue());
						}
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 6-29
					$_g7 = 0;
					while ($_g7 < $delayed->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 11-12
						$f1 = ($delayed->arr[$_g7] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 6-29
						++$_g7;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:371: characters 26-29
						$f1();
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:372: characters 6-18
					$delayed = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:373: lines 373-376
					if (($el->arr[$el->length - 1] ?? null) === $e) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:374: characters 7-35
						$last = $this->typeExpr($e, $withType);
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:376: characters 7-27
						$this->typeExpr($e, WithType::NoValue());
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:379: lines 379-380
			$_g = 0;
			while ($_g < $delayed->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:379: characters 9-10
				$f = ($delayed->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:379: lines 379-380
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:380: characters 5-15
				$last = $f();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:381: characters 4-15
			return $last;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:384: characters 3-33
		return $this->typeExpr($expr, $withType);
	}

	/**
	 * @param object $e
	 * 
	 * @return ExprDef
	 */
	public function edef ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:389: characters 3-13
		return $e->e;
	}

	/**
	 * @param string $msg
	 * @param object $curExpr
	 * 
	 * @return void
	 */
	public function error ($msg, $curExpr) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:396: characters 3-24
		$e = ErrorDef::ECustom($msg);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:397: characters 18-97
		$e1 = new Error($e, $curExpr->pmin, $curExpr->pmax, $curExpr->origin, $curExpr->line);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:398: characters 3-28
		if (!$this->isCompletion) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:398: characters 23-28
			throw Exception::thrown($e1);
		}
	}

	/**
	 * @param TType $t
	 * 
	 * @return TType
	 */
	public function follow ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:718: lines 718-724
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:719: characters 14-15
			$r = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:719: characters 18-54
			if ($r->r !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:719: characters 36-47
				return $this->follow($r->r);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:719: characters 53-54
				return $t;
			}
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:721: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:721: characters 18-27
			return $this->follow($t1);
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:720: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:720: characters 16-20
			$args = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:720: characters 23-57
			return $this->follow($this->apply($t1->t, $t1->params, $args));
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:722: characters 14-15
			$f = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:722: characters 18-29
			return $this->follow($f());
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:723: characters 12-13
			return $t;
		}
	}

	/**
	 * @param TType $t
	 * @param string $f
	 * @param object $e
	 * @param bool $forWrite
	 * 
	 * @return TType
	 */
	public function getField ($t, $f, $e, $forWrite = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:768: lines 768-808
		if ($forWrite === null) {
			$forWrite = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:768: characters 11-20
		$_g = $this->follow($t);
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:800: characters 4-21
			return $this->makeMono();
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:769: characters 14-15
			$c = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:769: characters 17-21
			$args = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:770: characters 4-29
			$cf = ($c->fields->data[$f] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:771: lines 771-778
			if (($cf === null) && $this->allowAsync) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:772: characters 10-30
				$cf = ($c->fields->data["a_" . ($f??'null')] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:773: lines 773-777
				if ($cf !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:774: characters 6-26
					$isPublic = true;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:775: characters 61-70
					$cf1 = $cf->params;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:775: characters 79-86
					$cf2 = $cf->name;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:775: characters 92-105
					$cf3 = $this->unasync($cf->t);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:775: characters 6-131
					$cf = new _HxAnon_Checker0($isPublic, false, $cf1, $cf2, $cf3, $cf->complete);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:776: characters 6-34
					if ($cf->t === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:776: characters 25-34
						$cf = null;
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:779: lines 779-785
			if (($cf === null) && $c->isInterface && ($c->interfaces !== null)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:780: lines 780-784
				$_g1 = 0;
				$_g2 = $c->interfaces;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:780: characters 10-11
					$i = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:780: lines 780-784
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:781: characters 6-43
					$ft = $this->getField($i, $f, $e, $forWrite);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:782: lines 782-783
					if ($ft !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:783: characters 7-39
						return $this->apply($ft, $c->params, $args);
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:786: lines 786-791
			if ($cf === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:787: characters 5-43
				if ($c->superClass === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:787: characters 32-43
					return null;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:788: characters 5-53
				$ft = $this->getField($c->superClass, $f, $e, $forWrite);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:789: characters 5-52
				if ($ft !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:789: characters 22-52
					$ft = $this->apply($ft, $c->params, $args);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:790: characters 5-14
				return $ft;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:792: lines 792-793
			if (!$cf->isPublic) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:793: characters 5-60
				$e1 = ErrorDef::ECustom("Can't access private field " . ($f??'null') . " on " . ($c->name??'null'));
				$e2 = new Error($e1, $e->pmin, $e->pmax, $e->origin, $e->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e2);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:794: lines 794-795
			if ($forWrite && !$cf->canWrite) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:795: characters 5-60
				$e1 = ErrorDef::ECustom("Can't write readonly field " . ($f??'null') . " on " . ($c->name??'null'));
				$e2 = new Error($e1, $e->pmin, $e->pmax, $e->origin, $e->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e2);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:796: characters 4-17
			$t = $cf->t;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 4-98
			if ($cf->params !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 41-50
				$cf1 = $cf->params;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 52-97
				$_g1 = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 63-67
				$_g2 = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 67-83
				$_g3 = $cf->params->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 53-96
				while ($_g2 < $_g3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 63-83
					$i = $_g2++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 86-96
					$x = $this->makeMono();
					$_g1->arr[$_g1->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:797: characters 28-98
				$t = $this->apply($t, $cf1, $_g1);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:798: characters 4-35
			return $this->apply($t, $c->params, $args);
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:801: characters 14-20
			$fields = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:802: lines 802-804
			$_g = 0;
			while ($_g < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:802: characters 9-11
				$af = ($fields->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:802: lines 802-804
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:803: lines 803-804
				if ($af->name === $f) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:804: characters 6-17
					return $af->t;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:805: characters 4-15
			return null;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:807: characters 4-15
			return null;
		}
	}

	/**
	 * @param TType $t
	 * 
	 * @return object[]|\Array_hx
	 */
	public function getFields ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:727: lines 727-765
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:728: characters 3-19
		$fields = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:729: characters 11-20
		$_g = $this->follow($t);
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:730: characters 14-15
			$c = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:730: characters 17-21
			$args = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:731: characters 4-44
			$map = function ($t) use (&$args, &$c, &$_gthis) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:731: characters 21-43
				return $_gthis->apply($t, $c->params, $args);
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:732: lines 732-758
			while ($c !== null) {
				unset($csup, $args1, $curMap);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:733: characters 19-34
				$data = \array_values(\array_map("strval", \array_keys($c->fields->data)));
				$fname_current = 0;
				$fname_length = \count($data);
				$fname_data = $data;
				while ($fname_current < $fname_length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:733: lines 733-742
					$fname = $fname_data[$fname_current++];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:734: characters 6-34
					$f = ($c->fields->data[$fname] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:735: characters 6-47
					if (!$f->isPublic || !$f->complete) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:735: characters 39-47
						continue;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:736: characters 6-38
					$name = $f->name;
					$t = $map($f->t);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:737: lines 737-740
					if ($this->allowAsync && \StringTools::startsWith($name, "a_")) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:738: characters 7-8
						$t = $this->unasync($t);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:739: characters 14-28
						$name = \mb_substr($name, 2, null);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:741: characters 6-41
					$fields->arr[$fields->length++] = new _HxAnon_Checker1($name, $t);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:743: lines 743-748
				if ($c->isInterface && ($c->interfaces !== null)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:744: lines 744-747
					$_g1 = 0;
					$_g2 = $c->interfaces;
					while ($_g1 < $_g2->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:744: characters 11-12
						$i = ($_g2->arr[$_g1] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:744: lines 744-747
						++$_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:745: lines 745-746
						$_g3 = 0;
						$_g4 = $this->getFields($i);
						while ($_g3 < $_g4->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:745: characters 12-13
							$f1 = ($_g4->arr[$_g3] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:745: lines 745-746
							++$_g3;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:746: characters 29-35
							$f2 = $f1->name;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:746: characters 8-52
							$x = new _HxAnon_Checker1($f2, $map($f1->t));
							$fields->arr[$fields->length++] = $x;
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:749: characters 5-37
				if ($c->superClass === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:749: characters 32-37
					break;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:750: characters 13-25
				$_g5 = $c->superClass;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:750: lines 750-756
				if ($_g5 === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:756: characters 6-11
					break;
				} else if ($_g5->index === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:751: characters 16-20
					$csup = $_g5->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:751: characters 21-25
					$args1 = $_g5->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:752: characters 6-23
					$curMap = $map;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:753: characters 6-9
					$map = function ($t) use (&$csup, &$args1, &$_gthis, &$curMap) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:753: characters 19-52
						return $curMap($_gthis->apply($t, $csup->params, $args1));
					};
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:754: characters 6-7
					$c = $csup;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:756: characters 6-11
					break;
				}
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:759: characters 14-16
			$fl = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:760: lines 760-761
			$_g = 0;
			while ($_g < $fl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:760: characters 9-10
				$f = ($fl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:760: lines 760-761
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:761: characters 5-44
				$fields->arr[$fields->length++] = new _HxAnon_Checker1($f->name, $f->t);
			}
		} else {
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:764: characters 3-16
		return $fields;
	}

	/**
	 * @return StringMap
	 */
	public function getGlobals () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:333: characters 3-17
		return $this->globals;
	}

	/**
	 * @param TType $t
	 * 
	 * @return bool
	 */
	public function isString ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:847: characters 3-16
		$t = $this->follow($t);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:848: characters 10-17
		if ($t->index === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:848: characters 24-39
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:848: characters 40-41
			$_g1 = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:848: characters 24-39
			$_g1 = $_g->constructor;
			$_g1 = $_g->fields;
			$_g1 = $_g->interfaces;
			$_g1 = $_g->isInterface;
			$_g1 = $_g->params;
			$_g1 = $_g->statics;
			$_g1 = $_g->superClass;
			if ($_g->name === "String") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:848: characters 10-17
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * @param TType $a
	 * @param TType $b
	 * @param object $r
	 * 
	 * @return bool
	 */
	public function link ($a, $b, $r) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:480: lines 480-481
		if ($this->linkLoop($a, $b)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:481: characters 4-25
			return $this->follow($b) === $a;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:482: lines 482-483
		if ($b === TType::TDynamic()) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:483: characters 4-15
			return true;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:484: characters 3-10
		$r->r = $b;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:485: characters 3-14
		return true;
	}

	/**
	 * @param TType $a
	 * @param TType $t
	 * 
	 * @return bool
	 */
	public function linkLoop ($a, $t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:450: characters 3-27
		if ($t === $a) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:450: characters 16-27
			return true;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:451: lines 451-476
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:452: characters 14-15
			$r = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:453: characters 4-34
			if ($r->r === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:453: characters 22-34
				return false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:454: characters 4-26
			return $this->linkLoop($a, $r->r);
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:466: lines 466-467
			if ($t === TType::TDynamic()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:467: characters 5-17
				return false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:468: characters 4-31
			return $this->linkLoop($a, TType::TDynamic());
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 27-28
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 29-31
			$tl = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
			$_g = 0;
			while ($_g < $tl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: characters 9-10
				$t1 = ($tl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:457: lines 457-458
				if ($this->linkLoop($a, $t1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:458: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:459: characters 4-16
			return false;
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 14-15
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 16-18
			$tl = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
			$_g = 0;
			while ($_g < $tl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: characters 9-10
				$t1 = ($tl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:457: lines 457-458
				if ($this->linkLoop($a, $t1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:458: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:459: characters 4-16
			return false;
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 40-41
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 42-44
			$tl = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
			$_g = 0;
			while ($_g < $tl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: characters 9-10
				$t1 = ($tl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:457: lines 457-458
				if ($this->linkLoop($a, $t1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:458: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:459: characters 4-16
			return false;
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 57-58
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:455: characters 59-61
			$tl = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
			$_g = 0;
			while ($_g < $tl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: characters 9-10
				$t1 = ($tl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:456: lines 456-458
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:457: lines 457-458
				if ($this->linkLoop($a, $t1)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:458: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:459: characters 4-16
			return false;
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:460: characters 13-17
			$args = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:460: characters 18-21
			$ret = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:461: lines 461-463
			$_g = 0;
			while ($_g < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:461: characters 9-12
				$arg = ($args->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:461: lines 461-463
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:462: lines 462-463
				if ($this->linkLoop($a, $arg->t)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:463: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:464: characters 4-26
			return $this->linkLoop($a, $ret);
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:469: characters 14-16
			$fl = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:470: lines 470-472
			$_g = 0;
			while ($_g < $fl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:470: characters 9-10
				$f = ($fl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:470: lines 470-472
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:471: lines 471-472
				if ($this->linkLoop($a, $f->t)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:472: characters 6-17
					return true;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:473: characters 4-16
			return false;
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:475: characters 4-16
			return false;
		}
	}

	/**
	 * @param TType $t
	 * 
	 * @return TType
	 */
	public function makeIterator ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:835: characters 3-120
		return TType::TAnon(\Array_hx::wrap([
			new _HxAnon_Checker2("next", false, TType::TFun(new \Array_hx(), $t)),
			new _HxAnon_Checker2("hasNext", false, TType::TFun(new \Array_hx(), TType::TBool())),
		]));
	}

	/**
	 * @return TType
	 */
	public function makeMono () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:831: characters 3-25
		return TType::TMono(new _HxAnon_Checker3(null));
	}

	/**
	 * @param CType $t
	 * @param object $e
	 * 
	 * @return TType
	 */
	public function makeType ($t, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:406: lines 406-425
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:407: characters 15-19
			$path = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:407: characters 21-27
			$params = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 13-18
			$ct = $this->types;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 27-41
			$ct1 = $path->join(".");
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 42-98
			$ct2 = null;
			if ($params === null) {
				$ct2 = new \Array_hx();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 64-98
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 65-97
				$_g1 = 0;
				while ($_g1 < $params->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 70-71
					$p = ($params->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 65-97
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 84-97
					$x = $this->makeType($p, $e);
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 42-98
				$ct2 = $_g;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:408: characters 4-100
			$ct3 = $ct->resolve($ct1, $ct2);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:409: lines 409-412
			if ($ct3 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:410: characters 5-35
				$e1 = ErrorDef::ECustom("Unknown type " . \Std::string($path));
				$e2 = new Error($e1, $e->pmin, $e->pmax, $e->origin, $e->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:411: characters 5-18
				$ct3 = TType::TDynamic();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:413: characters 4-13
			return $ct3;
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:414: characters 14-18
			$args = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:414: characters 20-23
			$ret = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:415: characters 4-14
			$i = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 16-87
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 17-86
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 22-23
				$a = ($args->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 17-86
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 34-86
				$x = new _HxAnon_Checker2("p" . ($i++), false, $this->makeType($a, $e));
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:416: characters 4-105
			return TType::TFun($_g, $this->makeType($ret, $e));
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:417: characters 15-21
			$fields = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 17-89
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 18-88
			$_g1 = 0;
			while ($_g1 < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 23-24
				$f = ($fields->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 18-88
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 46-52
				$f1 = $f->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 37-88
				$x = new _HxAnon_Checker2($f1, false, $this->makeType($f->t, $e));
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:418: characters 4-90
			return TType::TAnon($_g);
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:419: characters 17-18
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:420: characters 4-24
			return $this->makeType($t1, $e);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:423: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:424: characters 4-24
			return $this->makeType($t1, $e);
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:421: characters 16-17
			$n = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:421: characters 19-20
			$t1 = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:422: characters 4-24
			return $this->makeType($t1, $e);
		}
	}

	/**
	 * @param TType $t
	 * @param \Closure $f
	 * 
	 * @return TType
	 */
	public function mapType ($t, $f) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:690: lines 690-714
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:691: characters 14-15
			$r = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:692: characters 4-30
			if ($r->r === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:692: characters 22-30
				return $t;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:693: characters 4-15
			return $f($t);
		} else if ($__hx__switch === 1 || $__hx__switch === 2 || $__hx__switch === 3 || $__hx__switch === 4 || $__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:695: characters 4-12
			return $t;
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:694: characters 50-51
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:695: characters 4-12
			return $t;
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:694: characters 66-67
			$_g = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:695: characters 4-12
			return $t;
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:698: characters 14-15
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:699: characters 4-22
			return TType::TNull($f($t1));
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:700: characters 17-21
			$_g = $t->params[1];
			if ($_g->length === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:697: characters 4-12
				return $t;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:700: characters 17-21
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:700: characters 14-15
				$c = $t->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 20-43
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 21-42
				$_g1 = 0;
				while ($_g1 < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 26-27
					$t1 = ($args->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 21-42
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 38-42
					$x = $f($t1);
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:701: characters 4-44
				return TType::TInst($c, $_g);
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:702: characters 17-21
			$_g = $t->params[1];
			if ($_g->length === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:697: characters 4-12
				return $t;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:702: characters 17-21
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:702: characters 14-15
				$e = $t->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 20-43
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 21-42
				$_g1 = 0;
				while ($_g1 < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 26-27
					$t1 = ($args->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 21-42
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 38-42
					$x = $f($t1);
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:703: characters 4-44
				return TType::TEnum($e, $_g);
			}
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:704: characters 17-21
			$_g = $t->params[1];
			if ($_g->length === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:697: characters 4-12
				return $t;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:704: characters 17-21
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:704: characters 14-15
				$t1 = $t->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 20-43
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 21-42
				$_g1 = 0;
				while ($_g1 < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 26-27
					$t2 = ($args->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 21-42
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 38-42
					$x = $f($t2);
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:705: characters 4-44
				return TType::TType($t1, $_g);
			}
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:706: characters 21-25
			$_g = $t->params[1];
			if ($_g->length === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:697: characters 4-12
				return $t;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:706: characters 21-25
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:706: characters 18-19
				$a = $t->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 24-47
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 25-46
				$_g1 = 0;
				while ($_g1 < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 30-31
					$t1 = ($args->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 25-46
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 42-46
					$x = $f($t1);
					$_g->arr[$_g->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:707: characters 4-48
				return TType::TAbstract($a, $_g);
			}
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:708: characters 13-17
			$args = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:708: characters 19-22
			$ret = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 16-77
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 17-76
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 22-23
				$a = ($args->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 17-76
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 43-49
				$a1 = $a->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 57-62
				$a2 = $a->opt;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 34-76
				$x = new _HxAnon_Checker2($a1, $a2, $f($a->t));
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:709: characters 4-86
			return TType::TFun($_g, $f($ret));
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:710: characters 14-20
			$fields = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 17-84
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 18-83
			$_g1 = 0;
			while ($_g1 < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 23-25
				$af = ($fields->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 18-83
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 47-54
				$af1 = $af->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 62-68
				$af2 = $af->opt;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 38-83
				$x = new _HxAnon_Checker2($af1, $af2, $f($af->t));
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:711: characters 4-85
			return TType::TAnon($_g);
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:712: characters 14-15
			$l = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:713: characters 4-17
			return $f($l());
		}
	}

	/**
	 * @param ExprDef $e
	 * @param object $p
	 * 
	 * @return object
	 */
	public function mk ($e, $p) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:840: characters 3-83
		return new _HxAnon_Checker4($e, $p->pmin, $p->pmax, $p->origin, $p->line);
	}

	/**
	 * @param object $expr
	 * @param TType $t
	 * 
	 * @return void
	 */
	public function onCompletion ($expr, $t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:852: characters 3-27
		if ($this->isCompletion) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:852: characters 22-27
			throw Exception::thrown(new Completion($expr, $t));
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public function removeGlobal ($name) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:321: characters 3-23
		$this->globals->remove($name);
	}

	/**
	 * @return StringMap
	 */
	public function saveLocals () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:402: characters 10-56
		$_g = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:402: characters 21-34
		$data = \array_values(\array_map("strval", \array_keys($this->locals->data)));
		$k_current = 0;
		$k_length = \count($data);
		$k_data = $data;
		while ($k_current < $k_length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:402: characters 11-55
			$k = $k_data[$k_current++];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:402: characters 37-55
			$value = ($this->locals->data[$k] ?? null);
			$_g->data[$k] = $value;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:402: characters 10-56
		return $_g;
	}

	/**
	 * @param string $name
	 * @param TType $type
	 * 
	 * @return void
	 */
	public function setEvent ($name, $type) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:329: characters 3-25
		$this->events->data[$name] = $type;
	}

	/**
	 * @param string $name
	 * @param TType $type
	 * 
	 * @return void
	 */
	public function setGlobal ($name, $type) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:325: characters 3-26
		$this->globals->data[$name] = $type;
	}

	/**
	 * @param object $cl
	 * 
	 * @return void
	 */
	public function setGlobals ($cl) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:306: lines 306-318
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:307: lines 307-317
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:308: characters 14-23
			$data = \array_values($cl->fields->data);
			$f_current = 0;
			$f_length = \count($data);
			$f_data = $data;
			while ($f_current < $f_length) {
				unset($f);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:308: lines 308-310
				$f = $f_data[$f_current++];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:309: lines 309-310
				if ($f->isPublic) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 24-141
					$tmp = ($f->params->length === 0 ? $f->t : TType::TLazy(function () use (&$f, &$_gthis) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 77-82
						$_gthis1 = $_gthis;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 83-86
						$f1 = $f->t;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 87-95
						$f2 = $f->params;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 96-139
						$_g = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 107-111
						$_g1 = 0;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 111-126
						$_g2 = $f->params->length;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 97-138
						while ($_g1 < $_g2) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 107-126
							$i = $_g1++;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 128-138
							$x = $_gthis->makeMono();
							$_g->arr[$_g->length++] = $x;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 70-140
						return $_gthis1->apply($f1, $f2, $_g);
					}));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:310: characters 6-142
					$this->setGlobal($f->name, $tmp);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:311: lines 311-312
			if ($cl->superClass === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:312: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:313: characters 17-30
			$_g = $cl->superClass;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:313: lines 313-315
			if ($_g === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:315: characters 13-18
				throw Exception::thrown("assert");
			} else if ($_g->index === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:314: characters 17-18
				$_g1 = $_g->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:314: characters 15-16
				$c = $_g->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:314: characters 21-22
				$cl = $c;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:315: characters 13-18
				throw Exception::thrown("assert");
			}
		}
	}

	/**
	 * @param TType $t1
	 * @param TType $t2
	 * 
	 * @return bool
	 */
	public function tryUnify ($t1, $t2) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:560: lines 560-561
		if ($t1 === $t2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:561: characters 4-15
			return true;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: lines 562-665
		$__hx__switch = ($t1->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:563: characters 15-16
			$r = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:564: lines 564-569
			if ($r->r === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:565: lines 565-566
				if (!$this->link($t1, $t2, $r)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:566: characters 6-18
					return false;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:567: characters 5-8
				$r->r = $t2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:568: characters 5-16
				return true;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:570: characters 4-28
			return $this->tryUnify($r->r, $t2);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 3) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:661: characters 4-15
				return true;
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
			}
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:598: characters 4-15
				return true;
			}
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:583: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:583: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:584: characters 4-26
				return $this->tryUnify($t11, $t2);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$_g1 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:583: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:584: characters 4-26
				return $this->tryUnify($t11, $t2);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:583: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:584: characters 4-26
				return $this->tryUnify($t11, $t2);
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:641: characters 15-18
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:641: characters 19-22
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:615: characters 31-34
				$cl2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:615: characters 35-38
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:615: characters 19-22
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:615: characters 15-18
				$cl1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:616: lines 616-636
				while ($cl1 !== $cl2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:617: lines 617-628
					if ($cl1->interfaces !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:618: lines 618-627
						$_g2 = 0;
						$_g3 = $cl1->interfaces;
						while ($_g2 < $_g3->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:618: characters 11-12
							$i = ($_g3->arr[$_g2] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:618: lines 618-627
							++$_g2;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:619: lines 619-626
							if ($i->index === 9) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:620: characters 18-21
								$cli = $i->params[0];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:620: characters 23-27
								$args = $i->params[1];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 27-71
								$_g4 = new \Array_hx();
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 28-70
								$_g5 = 0;
								while ($_g5 < $args->length) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 33-34
									$a = ($args->arr[$_g5] ?? null);
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 28-70
									++$_g5;
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 45-70
									$x = $this->apply($a, $cl1->params, $pl1);
									$_g4->arr[$_g4->length++] = $x;
								}
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:621: characters 8-73
								$i1 = TType::TInst($cli, $_g4);
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:622: lines 622-623
								if ($this->tryUnify($i1, $t2)) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:623: characters 9-20
									return true;
								}
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:625: characters 8-13
								throw Exception::thrown("assert");
							}
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:629: characters 13-27
					$_g6 = $cl1->superClass;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:629: lines 629-630
					if ($_g6 === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:630: characters 16-28
						return false;
					} else if ($_g6->index === 9) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:631: characters 16-17
						$c = $_g6->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:631: characters 19-23
						$args1 = $_g6->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 12-54
						$_g7 = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 13-53
						$_g8 = 0;
						while ($_g8 < $args1->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 18-19
							$a1 = ($args1->arr[$_g8] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 13-53
							++$_g8;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 30-53
							$x1 = $this->apply($a1, $cl1->params, $pl1);
							$_g7->arr[$_g7->length++] = $x1;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:632: characters 12-54
						$pl1 = $_g7;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:633: characters 6-9
						$cl1 = $c;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:634: characters 14-19
						throw Exception::thrown("assert");
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:637: characters 14-18
				$_g2 = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:637: characters 18-28
				$_g3 = $pl1->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:637: lines 637-639
				while ($_g2 < $_g3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:637: characters 14-28
					$i = $_g2++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:638: lines 638-639
					if (!$this->typeEq(($pl1->arr[$i] ?? null), ($pl2->arr[$i] ?? null))) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:639: characters 6-18
						return false;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:640: characters 4-15
				return true;
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 14) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:641: characters 30-32
				$fl = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:641: characters 19-22
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:641: characters 15-18
				$cl1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:642: characters 14-18
				$_g = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:642: characters 18-27
				$_g1 = $fl->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:642: lines 642-658
				while ($_g < $_g1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:642: characters 14-27
					$i = $_g++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:643: characters 5-20
					$f2 = ($fl->arr[$i] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:644: characters 5-19
					$f1 = null;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:645: characters 5-18
					$cl = $cl1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:646: lines 646-655
					while (true) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:647: characters 12-34
						$f1 = ($cl->fields->data[$f2->name] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:648: characters 6-28
						if ($f1 !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:648: characters 23-28
							break;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:649: lines 649-650
						if ($cl->superClass === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:650: characters 7-19
							return false;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:651: characters 19-32
						$_g2 = $cl->superClass;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:651: lines 651-653
						if ($_g2 === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:653: characters 15-20
							throw Exception::thrown("assert");
						} else if ($_g2->index === 9) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:652: characters 19-20
							$_g3 = $_g2->params[1];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:652: characters 17-18
							$c = $_g2->params[0];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:652: characters 23-24
							$cl = $c;
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:653: characters 15-20
							throw Exception::thrown("assert");
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:656: lines 656-657
					if (!$this->typeEq($f1->t, $f2->t)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:657: characters 6-18
						return false;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:659: characters 4-15
				return true;
			} else {
			}
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 18-21
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:580: characters 4-52
				return $this->tryUnify($this->apply($t11->t, $t11->params, $pl1), $t2);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$_g2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:580: characters 4-52
				return $this->tryUnify($this->apply($t11->t, $t11->params, $pl1), $t2);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$_g2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$_g2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:580: characters 4-52
				return $this->tryUnify($this->apply($t11->t, $t11->params, $pl1), $t2);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:579: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:580: characters 4-52
				return $this->tryUnify($this->apply($t11->t, $t11->params, $pl1), $t2);
			}
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:662: characters 14-15
			$_g = $t1->params[0];
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 12) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:662: characters 28-54
				$_g2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:662: characters 55-56
				$_g3 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:662: characters 28-54
				$_g3 = $_g2->params;
				$_g3 = $_g2->t;
				if ($_g2->name === "haxe.Function") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:663: characters 4-15
					return true;
				}
			} else if ($__hx__switch === 13) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:587: characters 29-34
				$args2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:587: characters 35-37
				$r2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:587: characters 20-22
				$r1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:587: characters 14-19
				$args1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:587: lines 587-664
				if ($args1->length === $args2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:588: characters 14-18
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:588: characters 18-30
					$_g1 = $args1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:588: lines 588-593
					while ($_g < $_g1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:588: characters 14-30
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:589: characters 5-23
						$a1 = ($args1->arr[$i] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:590: characters 5-23
						$a2 = ($args2->arr[$i] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:591: characters 5-41
						if ($a2->opt && !$a1->opt) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:591: characters 29-41
							return false;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:592: characters 5-45
						if (!$this->tryUnify($a2->t, $a1->t)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:592: characters 33-45
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:594: characters 4-26
					return $this->tryUnify($r1, $r2);
				}
			} else {
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:599: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 14) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:599: characters 25-27
				$a2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:599: characters 15-17
				$a1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:600: lines 600-601
				if ($a2->length === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:601: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:602: characters 12-21
				$this1 = [];
				$m_data = $this1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:603: lines 603-604
				$_g = 0;
				while ($_g < $a1->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:603: characters 9-10
					$f = ($a1->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:603: lines 603-604
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:604: characters 5-21
					$m_data[$f->name] = $f;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:605: lines 605-613
				$_g = 0;
				while ($_g < $a2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:605: characters 9-11
					$f2 = ($a2->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:605: lines 605-613
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:606: characters 5-29
					$f1 = ($m_data[$f2->name] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:607: lines 607-610
					if ($f1 === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:608: characters 6-27
						if ($f2->opt) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:608: characters 19-27
							continue;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:609: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:611: lines 611-612
					if (!$this->typeEq($f1->t, $f2->t)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:612: characters 6-18
						return false;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:614: characters 4-15
				return true;
			} else {
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:562: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:571: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:572: lines 572-577
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:573: lines 573-574
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:574: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:575: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:576: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:578: characters 4-28
				return $this->tryUnify($t1, $r->r);
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:596: characters 4-15
				return true;
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:585: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:586: characters 4-26
				return $this->tryUnify($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:581: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:582: characters 4-52
				return $this->tryUnify($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:666: characters 3-23
		return $this->typeEq($t1, $t2);
	}

	/**
	 * @param object[]|\Array_hx $args
	 * @param object $pos
	 * 
	 * @return object[]|\Array_hx
	 */
	public function typeArgs ($args, $pos) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: lines 337-341
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: characters 21-25
		$_g1 = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: characters 25-36
		$_g2 = $args->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: lines 337-341
		while ($_g1 < $_g2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: characters 21-36
			$i = $_g1++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:338: characters 4-20
			$a = ($args->arr[$i] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:339: characters 4-59
			$at = ($a->t === null ? $this->makeMono() : $this->makeType($a->t, $pos));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:340: characters 4-42
			$_g->arr[$_g->length++] = new _HxAnon_Checker2($a->name, $a->opt, $at);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:337: lines 337-341
		return $_g;
	}

	/**
	 * @param TType $t1
	 * @param TType $t2
	 * 
	 * @return bool
	 */
	public function typeEq ($t1, $t2) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:489: lines 489-490
		if ($t1 === $t2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:490: characters 4-15
			return true;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: lines 491-555
		$__hx__switch = ($t1->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:492: characters 15-16
			$r = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:493: lines 493-498
			if ($r->r === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:494: lines 494-495
				if (!$this->link($t1, $t2, $r)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:495: characters 6-18
					return false;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:496: characters 5-8
				$r->r = $t2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:497: characters 5-16
				return true;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:499: characters 4-26
			return $this->typeEq($r->r, $t2);
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:534: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:532: characters 26-28
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:532: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:533: characters 4-24
				return $this->typeEq($t11, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:534: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:535: characters 4-24
				return $this->typeEq($t11, $t2);
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 15-18
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 19-22
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 31-34
				$cl2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 35-38
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 19-22
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: characters 15-18
				$cl1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:517: lines 517-554
				if ($cl1 === $cl2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:518: characters 14-18
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:518: characters 18-28
					$_g1 = $pl1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:518: lines 518-520
					while ($_g < $_g1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:518: characters 14-28
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:519: lines 519-520
						if (!$this->typeEq(($pl1->arr[$i] ?? null), ($pl2->arr[$i] ?? null))) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:520: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:521: characters 4-15
					return true;
				}
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 18-21
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 10) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 30-32
				$e2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 33-36
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: characters 15-17
				$e1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:522: lines 522-554
				if ($e1 === $e2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:523: characters 14-18
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:523: characters 18-28
					$_g1 = $pl1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:523: lines 523-525
					while ($_g < $_g1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:523: characters 14-28
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:524: lines 524-525
						if (!$this->typeEq(($pl1->arr[$i] ?? null), ($pl2->arr[$i] ?? null))) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:525: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:526: characters 4-15
					return true;
				}
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
			}
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 18-21
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$_g2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:514: characters 4-50
				return $this->typeEq($this->apply($t11->t, $t11->params, $pl1), $t2);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:508: characters 29-31
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:508: characters 32-35
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:508: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:508: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:508: lines 508-514
				if ($t11 === $t21) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:509: characters 14-18
					$_g2 = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:509: characters 18-28
					$_g3 = $pl1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:509: lines 509-511
					while ($_g2 < $_g3) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:509: characters 14-28
						$i = $_g2++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:510: lines 510-511
						if (!$this->typeEq(($pl1->arr[$i] ?? null), ($pl2->arr[$i] ?? null))) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:511: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:512: characters 4-15
					return true;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 18-21
					$pl1 = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 15-17
					$t11 = $_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:514: characters 4-50
					return $this->typeEq($this->apply($t11->t, $t11->params, $pl1), $t2);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 18-21
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:513: characters 15-17
				$t11 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:514: characters 4-50
				return $this->typeEq($this->apply($t11->t, $t11->params, $pl1), $t2);
			}
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 19-21
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 22-25
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 12) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 38-40
				$a2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 41-44
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 22-25
				$pl1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: characters 19-21
				$a1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:527: lines 527-554
				if ($a1 === $a2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:528: characters 14-18
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:528: characters 18-28
					$_g1 = $pl1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:528: lines 528-530
					while ($_g < $_g1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:528: characters 14-28
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:529: lines 529-530
						if (!$this->typeEq(($pl1->arr[$i] ?? null), ($pl2->arr[$i] ?? null))) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:530: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:531: characters 4-15
					return true;
				}
			} else {
			}
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 14-19
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 20-22
			$_g1 = $t1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 13) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 30-35
				$args2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 36-38
				$r2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 20-22
				$r1 = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: characters 14-19
				$args1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:538: lines 538-554
				if ($args1->length === $args2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:539: characters 14-18
					$_g = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:539: characters 18-30
					$_g1 = $args1->length;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:539: lines 539-541
					while ($_g < $_g1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:539: characters 14-30
						$i = $_g++;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:540: lines 540-541
						if (!$this->typeEq(($args1->arr[$i] ?? null)->t, ($args2->arr[$i] ?? null)->t)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:541: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:542: characters 4-25
					return $this->typeEq($r1, $r2);
				}
			} else {
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:543: characters 15-17
			$_g = $t1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else if ($__hx__switch === 14) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:543: characters 25-27
				$a2 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:543: characters 15-17
				$a1 = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:543: lines 543-554
				if ($a1->length === $a2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:544: characters 12-21
					$this1 = [];
					$m_data = $this1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:545: lines 545-546
					$_g = 0;
					while ($_g < $a2->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:545: characters 9-10
						$f = ($a2->arr[$_g] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:545: lines 545-546
						++$_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:546: characters 5-21
						$m_data[$f->name] = $f;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:547: lines 547-552
					$_g = 0;
					while ($_g < $a1->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:547: characters 9-11
						$f1 = ($a1->arr[$_g] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:547: lines 547-552
						++$_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:548: characters 5-29
						$f2 = ($m_data[$f1->name] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:549: characters 5-34
						if ($f2 === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:549: characters 22-34
							return false;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:550: lines 550-551
						if (!$this->typeEq($f1->t, $f2->t)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:551: characters 6-18
							return false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:553: characters 4-15
					return true;
				}
			} else {
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:491: characters 15-17
			$__hx__switch = ($t2->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:500: characters 18-19
				$r = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:501: lines 501-506
				if ($r->r === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:502: lines 502-503
					if (!$this->link($t2, $t1, $r)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:503: characters 6-18
						return false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:504: characters 5-8
					$r->r = $t1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:505: characters 5-16
					return true;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:507: characters 4-26
				return $this->typeEq($t1, $r->r);
			} else if ($__hx__switch === 8) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:536: characters 18-20
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:537: characters 4-24
				return $this->typeEq($t1, $t21);
			} else if ($__hx__switch === 11) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 17-19
				$t21 = $t2->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:515: characters 20-23
				$pl2 = $t2->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:516: characters 4-50
				return $this->typeEq($t1, $this->apply($t21->t, $t21->params, $pl2));
			} else {
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:556: characters 3-15
		return false;
	}

	/**
	 * @param object $expr
	 * @param WithType $withType
	 * 
	 * @return TType
	 */
	public function typeExpr ($expr, $withType) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:867: lines 867-1239
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:868: lines 868-872
		if (($expr === null) && $this->isCompletion) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:869: lines 869-872
			if ($withType->index === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:870: characters 18-19
				$t = $withType->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:870: characters 22-23
				return $t;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:871: characters 13-21
				return TType::TDynamic();
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:873: characters 11-21
		$_g = $expr->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:874: characters 15-16
			$c = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:875: lines 875-879
			$__hx__switch = ($c->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:876: characters 14-15
				$_g1 = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:876: characters 18-22
				return TType::TInt();
			} else if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:877: characters 16-17
				$_g1 = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:877: characters 20-26
				return TType::TFloat();
			} else if ($__hx__switch === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:878: characters 17-18
				$_g1 = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:878: characters 21-35
				return $this->types->t_string;
			}
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:880: characters 15-16
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:881: characters 4-26
			$l = ($this->locals->data[$v] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:882: characters 4-28
			if ($l !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:882: characters 20-28
				return $l;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:883: characters 4-27
			$g = ($this->globals->data[$v] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:884: lines 884-889
			if ($g !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:885: lines 885-888
				if ($g === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:887: characters 14-15
					return $g;
				} else if ($g->index === 15) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:886: characters 16-17
					$f = $g->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:886: characters 20-23
					return $f();
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:887: characters 14-15
					return $g;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:890: lines 890-894
			if ($this->allowAsync) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:891: characters 9-28
				$g = ($this->globals->data["a_" . ($v??'null')] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:892: characters 5-35
				if ($g !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:892: characters 21-22
					$g = $this->unasync($g);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:893: characters 5-29
				if ($g !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:893: characters 21-29
					return $g;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:895: lines 895-905
			if ($v === "null") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:897: characters 5-22
				return $this->makeMono();
			} else if ($v === "trace") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:901: characters 5-20
				return TType::TDynamic();
			} else if ($v === "false" || $v === "true") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:899: characters 5-17
				return TType::TBool();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:903: characters 5-38
				if ($this->isCompletion) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:903: characters 23-38
					return TType::TDynamic();
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:904: characters 5-41
				$e = ErrorDef::ECustom("Unknown identifier " . ($v??'null'));
				$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e1);
				}
			}
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:913: characters 13-14
			$n = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:913: characters 16-17
			$t = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:913: characters 19-23
			$init = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:914: characters 4-56
			$vt = ($t === null ? $this->makeMono() : $this->makeType($t, $expr));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:915: lines 915-918
			if ($init !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:916: characters 5-63
				$et = $this->typeExpr($init, ($t === null ? WithType::Value() : WithType::WithType($vt)));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:917: characters 5-52
				if ($t === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:917: characters 21-23
					$vt = $et;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:917: characters 34-52
					$this->unify($et, $vt, $init);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:919: characters 4-21
			$this->locals->data[$n] = $vt;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:920: characters 4-16
			return TType::TVoid();
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:921: characters 16-17
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:922: characters 4-31
			return $this->typeExpr($e, $withType);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:906: characters 15-17
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:907: characters 4-18
			$t = TType::TVoid();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:908: characters 4-30
			$locals = $this->saveLocals();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:909: lines 909-910
			$_g1 = 0;
			while ($_g1 < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:909: characters 9-10
				$e = ($el->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:909: lines 909-910
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:910: characters 5-6
				$t = $this->typeExpr($e, ($e === ($el->arr[$el->length - 1] ?? null) ? $withType : WithType::NoValue()));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:911: characters 4-15
			$this->locals = $locals;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:912: characters 4-12
			return $t;
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:947: characters 15-16
			$o = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:947: characters 18-19
			$f = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:948: characters 4-36
			return $this->typeField($o, $f, $expr, false);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1111: characters 15-17
			$op = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1111: characters 19-21
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1111: characters 23-25
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1112: lines 1112-1196
			if ($op === "%" || $op === "*" || $op === "-" || $op === "/") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1151: characters 5-42
				$t1 = $this->typeExpr($e1, WithType::WithType(TType::TInt()));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1152: characters 5-40
				$t2 = $this->typeExpr($e2, WithType::WithType($t1));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1153: lines 1153-1154
				if (!$this->tryUnify($t1, $t2)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1154: characters 6-21
					$this->unify($t2, $t1, $e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1155: characters 14-24
				$_g1 = $this->follow($t1);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1155: characters 26-36
				$_g2 = $this->follow($t2);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1155: characters 14-24
				$__hx__switch = ($_g1->index);
				if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1155: characters 26-36
					$__hx__switch = ($_g2->index);
					if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1157: characters 6-35
						if ($op === "/") {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1157: characters 22-35
							return TType::TFloat();
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1158: characters 6-17
						return TType::TInt();
					} else if ($__hx__switch === 3 || $__hx__switch === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1160: characters 6-19
						return TType::TFloat();
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1162: characters 6-27
						$this->unify($t1, TType::TFloat(), $e1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1163: characters 6-27
						$this->unify($t2, TType::TFloat(), $e2);
					}
				} else if ($__hx__switch === 3 || $__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1155: characters 26-36
					$__hx__switch = ($_g2->index);
					if ($__hx__switch === 2 || $__hx__switch === 3 || $__hx__switch === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1160: characters 6-19
						return TType::TFloat();
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1162: characters 6-27
						$this->unify($t1, TType::TFloat(), $e1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1163: characters 6-27
						$this->unify($t2, TType::TFloat(), $e2);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1162: characters 6-27
					$this->unify($t1, TType::TFloat(), $e1);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1163: characters 6-27
					$this->unify($t2, TType::TFloat(), $e2);
				}
			} else if ($op === "+") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1134: characters 5-42
				$t1 = $this->typeExpr($e1, WithType::WithType(TType::TInt()));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1135: characters 5-40
				$t2 = $this->typeExpr($e2, WithType::WithType($t1));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1136: characters 5-20
				$this->tryUnify($t1, $t2);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 14-24
				$_g1 = $this->follow($t1);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 26-36
				$_g2 = $this->follow($t2);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 14-24
				$__hx__switch = ($_g1->index);
				if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 26-36
					$__hx__switch = ($_g2->index);
					if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1139: characters 6-17
						return TType::TInt();
					} else if ($__hx__switch === 3) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1141: characters 6-19
						return TType::TFloat();
					} else if ($__hx__switch === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1143: characters 6-21
						return TType::TDynamic();
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 11-13
						$t1 = $_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 14-16
						$t2 = $_g2;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1145: lines 1145-1146
						if ($this->isString($t1) || $this->isString($t2)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1146: characters 7-28
							return $this->types->t_string;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1147: characters 6-27
						$this->unify($t1, TType::TFloat(), $e1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1148: characters 6-27
						$this->unify($t2, TType::TFloat(), $e2);
					}
				} else if ($__hx__switch === 3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 26-36
					$__hx__switch = ($_g2->index);
					if ($__hx__switch === 2 || $__hx__switch === 3) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1141: characters 6-19
						return TType::TFloat();
					} else if ($__hx__switch === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1143: characters 6-21
						return TType::TDynamic();
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 11-13
						$t1 = $_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 14-16
						$t2 = $_g2;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1145: lines 1145-1146
						if ($this->isString($t1) || $this->isString($t2)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1146: characters 7-28
							return $this->types->t_string;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1147: characters 6-27
						$this->unify($t1, TType::TFloat(), $e1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1148: characters 6-27
						$this->unify($t2, TType::TFloat(), $e2);
					}
				} else if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1143: characters 6-21
					return TType::TDynamic();
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1137: characters 26-36
					if ($_g2->index === 5) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1143: characters 6-21
						return TType::TDynamic();
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 11-13
						$t1 = $_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1144: characters 14-16
						$t2 = $_g2;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1145: lines 1145-1146
						if ($this->isString($t1) || $this->isString($t2)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1146: characters 7-28
							return $this->types->t_string;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1147: characters 6-27
						$this->unify($t1, TType::TFloat(), $e1);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1148: characters 6-27
						$this->unify($t2, TType::TFloat(), $e2);
					}
				}
			} else if ($op === "...") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1170: characters 5-26
				$this->typeExprWith($e1, TType::TInt());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1171: characters 5-26
				$this->typeExprWith($e2, TType::TInt());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1172: characters 5-30
				return $this->makeIterator(TType::TInt());
			} else if ($op === "&" || $op === "<<" || $op === ">>" || $op === ">>>" || $op === "^" || $op === "|") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1114: characters 5-26
				$this->typeExprWith($e1, TType::TInt());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1115: characters 5-26
				$this->typeExprWith($e2, TType::TInt());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1116: characters 5-16
				return TType::TInt();
			} else if ($op === "=") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1118: lines 1118-1126
				if ($this->allowDefine) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1119: characters 14-22
					$_g1 = $e1->e;
					if ($_g1->index === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1120: characters 18-19
						$i = $_g1->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1120: lines 1120-1124
						if (!\array_key_exists($i, $this->locals->data) && !\array_key_exists($i, $this->globals->data)) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1121: characters 7-35
							$vt = $this->typeExpr($e2, WithType::Value());
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1122: characters 7-24
							$this->locals->data[$i] = $vt;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1123: characters 7-16
							return $vt;
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1127: lines 1127-1130
				$vt = null;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1127: characters 22-30
				$_g1 = $e1->e;
				if ($_g1->index === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1128: characters 17-18
					$o = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1128: characters 19-20
					$f = $_g1->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1127: lines 1127-1130
					$vt = $this->typeField($o, $f, $e1, true);
				} else {
					$vt = $this->typeExpr($e1, WithType::Value());
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1131: characters 5-24
				$this->typeExprWith($e2, $vt);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1132: characters 5-14
				return $vt;
			} else if ($op === "!=" || $op === "==") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1174: characters 5-33
				$t1 = $this->typeExpr($e1, WithType::Value());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1175: characters 5-40
				$t2 = $this->typeExpr($e2, WithType::WithType($t1));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1176: lines 1176-1177
				if (!$this->tryUnify($t1, $t2)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1177: characters 6-21
					$this->unify($t2, $t1, $e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1178: characters 5-17
				return TType::TBool();
			} else if ($op === "<" || $op === "<=" || $op === ">" || $op === ">=") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1180: characters 5-33
				$t1 = $this->typeExpr($e1, WithType::Value());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1181: characters 5-40
				$t2 = $this->typeExpr($e2, WithType::WithType($t1));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1182: lines 1182-1183
				if (!$this->tryUnify($t1, $t2)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1183: characters 6-21
					$this->unify($t2, $t1, $e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1184: characters 13-23
				$_g1 = $this->follow($t1);
				$__hx__switch = ($_g1->index);
				if ($__hx__switch === 2 || $__hx__switch === 3 || $__hx__switch === 4) {
				} else if ($__hx__switch === 9) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1185: characters 37-52
					$_g2 = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1185: characters 53-54
					$_g3 = $_g1->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1185: characters 37-52
					$_g1 = $_g2->constructor;
					$_g1 = $_g2->fields;
					$_g1 = $_g2->interfaces;
					$_g1 = $_g2->isInterface;
					$_g1 = $_g2->params;
					$_g1 = $_g2->statics;
					$_g1 = $_g2->superClass;
					if ($_g2->name !== "String") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1187: characters 6-48
						$e = ErrorDef::ECustom("Cannot compare " . (Checker::typeStr($t1)??'null'));
						$e3 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
						if (!$this->isCompletion) {
							throw Exception::thrown($e3);
						}
					}
				} else {
					$e = ErrorDef::ECustom("Cannot compare " . (Checker::typeStr($t1)??'null'));
					$e3 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
					if (!$this->isCompletion) {
						throw Exception::thrown($e3);
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1189: characters 5-17
				return TType::TBool();
			} else if ($op === "&&" || $op === "||") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1166: characters 5-27
				$this->typeExprWith($e1, TType::TBool());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1167: characters 5-27
				$this->typeExprWith($e2, TType::TBool());
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1168: characters 5-17
				return TType::TBool();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1191: lines 1191-1194
				if (HxString::charCodeAt($op, mb_strlen($op) - 1) === 61) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1192: characters 6-81
					$t = $this->typeExpr($this->mk(ExprDef::EBinop(\mb_substr($op, 0, mb_strlen($op) - 1), $e1, $e2), $expr), $withType);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1193: characters 6-59
					return $this->typeExpr($this->mk(ExprDef::EBinop("=", $e1, $e2), $expr), $withType);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1195: characters 5-45
				$e = ErrorDef::ECustom("Unsupported operation " . ($op??'null'));
				$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e1);
				}
			}
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1070: characters 18-19
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1070: characters 14-16
			$op = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1070: characters 21-22
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1071: characters 4-32
			$et = $this->typeExpr($e, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1072: lines 1072-1080
			if ($op === "!") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1077: characters 5-22
				$this->unify($et, TType::TBool(), $e);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1078: characters 5-14
				return $et;
			} else if ($op === "++" || $op === "-" || $op === "--") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1074: characters 5-21
				$this->unify($et, TType::TInt(), $e);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1075: characters 5-14
				return $et;
			} else {
			}
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:923: characters 14-15
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:923: characters 17-23
			$params = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:924: characters 4-32
			$ft = $this->typeExpr($e, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:925: characters 12-22
			$_g1 = $this->follow($ft);
			$__hx__switch = ($_g1->index);
			if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:941: characters 5-41
				$_g2 = 0;
				while ($_g2 < $params->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:941: characters 10-11
					$p = ($params->arr[$_g2] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:941: characters 5-41
					++$_g2;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:941: characters 24-41
					$this->typeExpr($p, WithType::Value());
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:942: characters 5-22
				return $this->makeMono();
			} else if ($__hx__switch === 13) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:926: characters 14-18
				$args = $_g1->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:926: characters 20-23
				$ret = $_g1->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:927: characters 15-19
				$_g1 = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:927: characters 19-32
				$_g2 = $params->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:927: lines 927-935
				while ($_g1 < $_g2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:927: characters 15-32
					$i = $_g1++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:928: characters 6-22
					$a = ($args->arr[$i] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:929: lines 929-932
					if ($a === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:930: characters 7-45
						$curExpr = ($params->arr[$i] ?? null);
						$e1 = ErrorDef::ECustom("Too many arguments");
						$e2 = new Error($e1, $curExpr->pmin, $curExpr->pmax, $curExpr->origin, $curExpr->line);
						if (!$this->isCompletion) {
							throw Exception::thrown($e2);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:931: characters 7-12
						break;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:933: characters 6-69
					$t = $this->typeExpr(($params->arr[$i] ?? null), ($a === null ? WithType::Value() : WithType::WithType($a->t)));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:934: characters 6-30
					$this->unify($t, $a->t, ($params->arr[$i] ?? null));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:936: characters 15-28
				$_g1 = $params->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:936: characters 31-42
				$_g2 = $args->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:936: lines 936-938
				while ($_g1 < $_g2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:936: characters 15-42
					$i = $_g1++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:937: lines 937-938
					if (!($args->arr[$i] ?? null)->opt) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:938: characters 7-75
						$e1 = ErrorDef::ECustom("Missing argument " . (($args->arr[$i] ?? null)->name??'null') . ":" . (Checker::typeStr(($args->arr[$i] ?? null)->t)??'null'));
						$e2 = new Error($e1, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
						if (!$this->isCompletion) {
							throw Exception::thrown($e2);
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:939: characters 5-15
				return $ret;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:944: characters 5-46
				$e1 = ErrorDef::ECustom((Checker::typeStr($ft)??'null') . " cannot be called");
				$e2 = new Error($e1, $e->pmin, $e->pmax, $e->origin, $e->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:945: characters 5-22
				return $this->makeMono();
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 12-16
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 18-20
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 22-24
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:959: characters 4-29
			$this->typeExprWith($cond, TType::TBool());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:960: characters 4-36
			$t1 = $this->typeExpr($e1, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:961: lines 961-962
			if ($e2 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:962: characters 5-14
				return $t1;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:963: characters 4-36
			$t2 = $this->typeExpr($e2, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:964: lines 964-965
			if ($withType === WithType::NoValue()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:965: characters 5-17
				return TType::TVoid();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:966: lines 966-967
			if ($this->tryUnify($t2, $t1)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:967: characters 5-14
				return $t1;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:968: lines 968-969
			if ($this->tryUnify($t1, $t2)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:969: characters 5-14
				return $t2;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:970: characters 4-19
			$this->unify($t2, $t1, $e2);
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:971: characters 15-19
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:971: characters 21-22
			$e = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:972: characters 4-28
			$this->typeExprWith($cond, TType::TBool());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:973: characters 4-24
			$this->typeExpr($e, WithType::NoValue());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:974: characters 4-16
			return TType::TVoid();
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1081: characters 13-14
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1081: characters 16-18
			$it = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1081: characters 20-21
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1082: characters 4-30
			$locals = $this->saveLocals();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1083: characters 4-34
			$itt = $this->typeExpr($it, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: lines 1084-1106
			$vt = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: characters 21-32
			$_g1 = $this->follow($itt);
			if ($_g1->index === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1085: characters 15-29
				$_g2 = $_g1->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1085: characters 30-33
				$_g3 = $_g1->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1085: characters 15-29
				$_g1 = $_g2->constructor;
				$_g1 = $_g2->fields;
				$_g1 = $_g2->interfaces;
				$_g1 = $_g2->isInterface;
				$_g1 = $_g2->params;
				$_g1 = $_g2->statics;
				$_g1 = $_g2->superClass;
				if ($_g2->name === "Array") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1085: characters 30-33
					if ($_g3->length === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1085: characters 31-32
						$t = ($_g3->arr[0] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: lines 1084-1106
						$vt = $t;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1088: characters 5-43
						$ft = $this->getField($itt, "iterator", $it);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1089: lines 1089-1096
						if ($ft === null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1090: lines 1090-1096
							if ($itt->index === 12) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 21-22
								$a = $itt->params[0];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 24-28
								$args = $itt->params[1];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1094: characters 7-9
								$ft = $this->getField($this->apply($a->t, $a->params, $args), "iterator", $it);
							}
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1097: lines 1097-1101
						if ($ft !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1098: lines 1098-1101
							if ($ft->index === 13) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 16-18
								if ($ft->params[0]->length === 0) {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 19-22
									$ret = $ft->params[1];
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 25-27
									$ft = $ret;
								} else {
									#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1100: characters 15-17
									$ft = null;
								}
							} else {
								$ft = null;
							}
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1102: characters 5-24
						$t = $this->makeMono();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1103: characters 5-32
						$iter = $this->makeIterator($t);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1104: characters 5-41
						$this->unify(($ft !== null ? $ft : $itt), $iter, $it);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: lines 1084-1106
						$vt = $t;
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1088: characters 5-43
					$ft = $this->getField($itt, "iterator", $it);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1089: lines 1089-1096
					if ($ft === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1090: lines 1090-1096
						if ($itt->index === 12) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 21-22
							$a = $itt->params[0];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 24-28
							$args = $itt->params[1];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1094: characters 7-9
							$ft = $this->getField($this->apply($a->t, $a->params, $args), "iterator", $it);
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1097: lines 1097-1101
					if ($ft !== null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1098: lines 1098-1101
						if ($ft->index === 13) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 16-18
							if ($ft->params[0]->length === 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 19-22
								$ret = $ft->params[1];
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 25-27
								$ft = $ret;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1100: characters 15-17
								$ft = null;
							}
						} else {
							$ft = null;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1102: characters 5-24
					$t = $this->makeMono();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1103: characters 5-32
					$iter = $this->makeIterator($t);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1104: characters 5-41
					$this->unify(($ft !== null ? $ft : $itt), $iter, $it);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: lines 1084-1106
					$vt = $t;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1088: characters 5-43
				$ft = $this->getField($itt, "iterator", $it);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1089: lines 1089-1096
				if ($ft === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1090: lines 1090-1096
					if ($itt->index === 12) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 21-22
						$a = $itt->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1091: characters 24-28
						$args = $itt->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1094: characters 7-9
						$ft = $this->getField($this->apply($a->t, $a->params, $args), "iterator", $it);
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1097: lines 1097-1101
				if ($ft !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1098: lines 1098-1101
					if ($ft->index === 13) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 16-18
						if ($ft->params[0]->length === 0) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 19-22
							$ret = $ft->params[1];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1099: characters 25-27
							$ft = $ret;
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1100: characters 15-17
							$ft = null;
						}
					} else {
						$ft = null;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1102: characters 5-24
				$t = $this->makeMono();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1103: characters 5-32
				$iter = $this->makeIterator($t);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1104: characters 5-41
				$this->unify(($ft !== null ? $ft : $itt), $iter, $it);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1084: lines 1084-1106
				$vt = $t;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1107: characters 4-26
			$this->locals->data[$v] = $vt;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1108: characters 4-24
			$this->typeExpr($e, WithType::NoValue());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1109: characters 4-15
			$this->locals = $locals;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1110: characters 4-16
			return TType::TVoid();
		} else if ($__hx__switch === 12 || $__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:991: characters 4-16
			return TType::TVoid();
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1019: characters 18-22
			$args = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1019: characters 24-28
			$body = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1019: characters 30-34
			$name = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1019: characters 36-39
			$ret = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1020: characters 4-45
			$ft = null;
			$tret = null;
			$targs = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1021: lines 1021-1032
			if ($this->currentFunType !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1022: characters 13-27
				$_g1 = $this->currentFunType;
				if ($_g1->index === 13) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1023: characters 15-19
					$args1 = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1023: characters 20-23
					$ret1 = $_g1->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1024: characters 6-8
					$ft = $this->currentFunType;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1025: characters 6-10
					$tret = $ret1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1025: characters 18-23
					$targs = $args1;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1027: characters 6-11
					throw Exception::thrown("assert");
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1029: characters 5-19
				$this->currentFunType = null;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1031: characters 26-36
				$tret = ($ret === null ? $this->makeMono() : $this->makeType($ret, $expr));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1033: characters 4-30
			$locals = $this->saveLocals();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1034: characters 4-29
			$oldRet = $this->allowReturn;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1035: characters 4-30
			$oldGDef = $this->allowDefine;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1036: characters 4-15
			$this->allowReturn = $tret;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1037: characters 4-15
			$this->allowDefine = false;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1038: characters 4-24
			$withArgs = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 8-71
			$tmp = null;
			if ($name !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 25-39
				$tmp1 = null;
				if ($withType->index === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 49-58
					$_hx_tmp = $this->follow($withType->params[0]);
					if ($_hx_tmp->index === 13) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 67-68
						$_g1 = $_hx_tmp->params[0];
						$_g1 = $_hx_tmp->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 25-39
						$tmp1 = true;
					} else {
						$tmp1 = false;
					}
				} else {
					$tmp1 = false;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: characters 8-71
				$tmp = !$tmp1;
			} else {
				$tmp = false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1039: lines 1039-1042
			if ($tmp) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1040: characters 5-31
				$ev = ($this->events->data[$name] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1041: characters 5-45
				if ($ev !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1041: characters 22-30
					$withType = WithType::WithType($ev);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1043: lines 1043-1046
			if ($withType->index === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1044: characters 18-27
				$_hx_tmp = $this->follow($withType->params[0]);
				if ($_hx_tmp->index === 13) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1044: characters 36-40
					$args1 = $_hx_tmp->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1044: characters 41-44
					$ret = $_hx_tmp->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1044: characters 48-56
					$withArgs = $args1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1044: characters 65-85
					$this->unify($tret, $ret, $expr);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1047: lines 1047-1048
			if ($targs === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1048: characters 5-10
				$targs = $this->typeArgs($args, $expr);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1049: characters 14-18
			$_g1 = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1049: characters 18-30
			$_g2 = $targs->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1049: lines 1049-1058
			while ($_g1 < $_g2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1049: characters 14-30
				$i = $_g1++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1050: characters 5-22
				$a = ($targs->arr[$i] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1051: lines 1051-1056
				if ($withArgs !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1052: lines 1052-1055
					if ($i < $withArgs->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1053: characters 7-38
						$this->unify(($withArgs->arr[$i] ?? null)->t, $a->t, $expr);
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1055: characters 7-44
						$e = ErrorDef::ECustom("Extra argument " . ($a->name??'null'));
						$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
						if (!$this->isCompletion) {
							throw Exception::thrown($e1);
						}
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1057: characters 5-33
				$this->locals->data[$a->name] = $a->t;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1059: lines 1059-1060
			if (($withArgs !== null) && ($targs->length < $withArgs->length)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 11-69
				$msg = "Missing " . ($withArgs->length - $targs->length) . " arguments (";
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 70-137
				$_g1 = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 81-93
				$_g2 = $targs->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 96-111
				$_g3 = $withArgs->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 71-136
				while ($_g2 < $_g3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 81-111
					$i = $_g2++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 114-136
					$x = Checker::typeStr(($withArgs->arr[$i] ?? null)->t);
					$_g1->arr[$_g1->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1060: characters 5-158
				$e = ErrorDef::ECustom(($msg??'null') . ($_g1->join(",")??'null') . ")");
				$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e1);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1061: characters 4-26
			$this->typeExpr($body, WithType::NoValue());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1062: characters 4-15
			$this->allowDefine = $oldGDef;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1063: characters 4-15
			$this->allowReturn = $oldRet;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1064: characters 4-15
			$this->locals = $locals;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1065: lines 1065-1068
			if ($ft === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1066: characters 5-7
				$ft = TType::TFun($targs, $tret);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1067: characters 5-25
				$locals->data[$name] = $ft;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1069: characters 4-13
			return $ft;
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:992: characters 16-17
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:993: characters 4-98
			$et = ($v === null ? TType::TVoid() : $this->typeExpr($v, ($this->allowReturn === null ? WithType::Value() : WithType::WithType($this->allowReturn))));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:994: lines 994-997
			if ($this->allowReturn === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:995: characters 5-43
				$e = ErrorDef::ECustom("Return not allowed here");
				$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e1);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:997: characters 5-49
				$this->unify($et, $this->allowReturn, ($v === null ? $expr : $v));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:998: characters 4-21
			return $this->makeMono();
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1009: characters 15-16
			$a = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1009: characters 18-23
			$index = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1010: characters 4-29
			$this->typeExprWith($index, TType::TInt());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1011: characters 4-32
			$at = $this->typeExpr($a, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1012: characters 12-22
			$_g1 = $this->follow($at);
			if ($_g1->index === 9) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 15-32
				$_g2 = $_g1->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 33-37
				$_g3 = $_g1->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 15-32
				$_g1 = $_g2->constructor;
				$_g1 = $_g2->fields;
				$_g1 = $_g2->interfaces;
				$_g1 = $_g2->isInterface;
				$_g1 = $_g2->params;
				$_g1 = $_g2->statics;
				$_g1 = $_g2->superClass;
				if ($_g2->name === "Array") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 33-37
					if ($_g3->length === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 34-36
						$et = ($_g3->arr[0] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1013: characters 40-49
						return $et;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1014: characters 13-53
						$e = ErrorDef::ECustom((Checker::typeStr($at)??'null') . " is not an Array");
						$e1 = new Error($e, $a->pmin, $a->pmax, $a->origin, $a->line);
						if (!$this->isCompletion) {
							throw Exception::thrown($e1);
						}
					}
				} else {
					$e = ErrorDef::ECustom((Checker::typeStr($at)??'null') . " is not an Array");
					$e1 = new Error($e, $a->pmin, $a->pmax, $a->origin, $a->line);
					if (!$this->isCompletion) {
						throw Exception::thrown($e1);
					}
				}
			} else {
				$e = ErrorDef::ECustom((Checker::typeStr($at)??'null') . " is not an Array");
				$e1 = new Error($e, $a->pmin, $a->pmax, $a->origin, $a->line);
				if (!$this->isCompletion) {
					throw Exception::thrown($e1);
				}
			}
		} else if ($__hx__switch === 17) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:999: characters 19-21
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1000: characters 4-18
			$et = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1001: lines 1001-1006
			$_g1 = 0;
			while ($_g1 < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1001: characters 9-10
				$v = ($el->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1001: lines 1001-1006
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1002: characters 5-60
				$t = $this->typeExpr($v, ($et === null ? WithType::Value() : WithType::WithType($et)));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1003: lines 1003-1005
				if ($et === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1003: characters 22-24
					$et = $t;
				} else if (!$this->tryUnify($t, $et)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1004: characters 6-52
					if ($this->tryUnify($et, $t)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1004: characters 27-29
						$et = $t;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1004: characters 39-52
						$this->unify($t, $et, $v);
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1007: characters 4-36
			if ($et === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1007: characters 21-23
				$et = $this->makeMono();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1008: characters 4-38
			return $this->types->getType("Array", \Array_hx::wrap([$et]));
		} else if ($__hx__switch === 18) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1235: characters 13-15
			$cl = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1235: characters 17-23
			$params = $_g->params[1];
		} else if ($__hx__switch === 19) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1016: characters 15-16
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1017: characters 4-22
			$this->typeExpr($e, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1018: characters 4-21
			return $this->makeMono();
		} else if ($__hx__switch === 20) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1197: characters 13-17
			$etry = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1197: characters 19-20
			$v = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1197: characters 22-24
			$et = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1197: characters 26-32
			$ecatch = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1198: characters 4-38
			$vt = $this->typeExpr($etry, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1200: characters 4-28
			$old = ($this->locals->data[$v] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1201: characters 4-39
			$this1 = $this->locals;
			$value = $this->makeType($et, $ecatch);
			$this1->data[$v] = $value;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1202: characters 4-40
			$ct = $this->typeExpr($ecatch, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1203: characters 4-61
			if ($old !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1203: characters 22-39
				$this->locals->data[$v] = $old;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1203: characters 45-61
				$this->locals->remove($v);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1205: lines 1205-1206
			if ($withType === WithType::NoValue()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1206: characters 5-17
				return TType::TVoid();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1207: lines 1207-1208
			if ($this->tryUnify($vt, $ct)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1208: characters 5-14
				return $ct;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1209: characters 4-23
			$this->unify($ct, $vt, $ecatch);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1210: characters 4-13
			return $vt;
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:975: characters 16-18
			$fl = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:976: lines 976-989
			if ($withType->index === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:977: characters 18-27
				$_hx_tmp = $this->follow($withType->params[0]);
				if ($_hx_tmp->index === 14) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:977: characters 37-44
					$tfields = $_hx_tmp->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:977: lines 977-988
					if ($tfields->length > 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:978: characters 15-48
						$this1 = [];
						$map_data = $this1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:978: characters 16-47
						$_g1 = 0;
						while ($_g1 < $tfields->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:978: characters 21-22
							$f = ($tfields->arr[$_g1] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:978: characters 16-47
							++$_g1;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:978: characters 36-47
							$map_data[$f->name] = $f;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:979: lines 979-986
						$_g1 = new \Array_hx();
						$_g2 = 0;
						while ($_g2 < $fl->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:979: characters 24-25
							$f = ($fl->arr[$_g2] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:979: lines 979-986
							++$_g2;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:980: characters 6-31
							$ft = ($map_data[$f->name] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:981: lines 981-984
							$ft1 = null;
							if ($ft === null) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:982: characters 7-40
								$curExpr = $f->e;
								$e = ErrorDef::ECustom("Extra field " . ($f->name??'null'));
								$e1 = new Error($e, $curExpr->pmin, $curExpr->pmax, $curExpr->origin, $curExpr->line);
								if (!$this->isCompletion) {
									throw Exception::thrown($e1);
								}
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:981: lines 981-984
								$ft1 = TType::TDynamic();
							} else {
								$ft1 = $ft->t;
							}
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:985: characters 12-33
							$x = $this->typeExprWith($f->e, $ft1);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:985: characters 6-63
							$_g1->arr[$_g1->length++] = new _HxAnon_Checker5($x, false, $f->name);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:979: lines 979-986
						return TType::TAnon($_g1);
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 18-91
						$_g1 = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
						$_g2 = 0;
						while ($_g2 < $fl->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 24-25
							$f = ($fl->arr[$_g2] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
							++$_g2;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 40-60
							$x = $this->typeExpr($f->e, WithType::Value());
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 34-90
							$_g1->arr[$_g1->length++] = new _HxAnon_Checker5($x, false, $f->name);
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 5-92
						return TType::TAnon($_g1);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 18-91
					$_g1 = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
					$_g2 = 0;
					while ($_g2 < $fl->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 24-25
						$f = ($fl->arr[$_g2] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
						++$_g2;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 40-60
						$x = $this->typeExpr($f->e, WithType::Value());
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 34-90
						$_g1->arr[$_g1->length++] = new _HxAnon_Checker5($x, false, $f->name);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 5-92
					return TType::TAnon($_g1);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 18-91
				$_g1 = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
				$_g2 = 0;
				while ($_g2 < $fl->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 24-25
					$f = ($fl->arr[$_g2] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 19-90
					++$_g2;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 40-60
					$x = $this->typeExpr($f->e, WithType::Value());
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 34-90
					$_g1->arr[$_g1->length++] = new _HxAnon_Checker5($x, false, $f->name);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:988: characters 5-92
				return TType::TAnon($_g1);
			}
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 36-40
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 42-44
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:958: characters 46-48
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:959: characters 4-29
			$this->typeExprWith($cond, TType::TBool());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:960: characters 4-36
			$t1 = $this->typeExpr($e1, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:961: lines 961-962
			if ($e2 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:962: characters 5-14
				return $t1;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:963: characters 4-36
			$t2 = $this->typeExpr($e2, $withType);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:964: lines 964-965
			if ($withType === WithType::NoValue()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:965: characters 5-17
				return TType::TVoid();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:966: lines 966-967
			if ($this->tryUnify($t2, $t1)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:967: characters 5-14
				return $t1;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:968: lines 968-969
			if ($this->tryUnify($t1, $t2)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:969: characters 5-14
				return $t2;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:970: characters 4-19
			$this->unify($t2, $t1, $e2);
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1211: characters 16-21
			$value = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1211: characters 23-28
			$cases = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1211: characters 30-41
			$defaultExpr = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1212: characters 4-20
			$tmin = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1213: characters 4-36
			$vt = $this->typeExpr($value, WithType::Value());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1224: lines 1224-1231
			$_g1 = 0;
			while ($_g1 < $cases->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1224: characters 9-10
				$c = ($cases->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1224: lines 1224-1231
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1225: lines 1225-1228
				$_g2 = 0;
				$_g3 = $c->values;
				while ($_g2 < $_g3->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1225: characters 10-11
					$v = ($_g3->arr[$_g2] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1225: lines 1225-1228
					++$_g2;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1226: characters 6-41
					$ct = $this->typeExpr($v, WithType::WithType($vt));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1227: characters 6-22
					$this->unify($ct, $vt, $v);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1229: characters 5-41
				$et = $this->typeExpr($c->expr, $withType);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1230: characters 5-26
				$p = $c->expr;
				if ($withType !== WithType::NoValue()) {
					if ($tmin === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1217: characters 7-11
						$tmin = $et;
					} else if (!$_gthis->tryUnify($et, $tmin)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1230: characters 5-26
						$_gthis->unify($tmin, $et, $p);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1220: characters 7-11
						$tmin = $et;
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1232: lines 1232-1233
			if ($defaultExpr !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1233: characters 5-61
				$t = $this->typeExpr($defaultExpr, $withType);
				if ($withType !== WithType::NoValue()) {
					if ($tmin === null) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1217: characters 7-11
						$tmin = $t;
					} else if (!$_gthis->tryUnify($t, $tmin)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1233: characters 5-61
						$_gthis->unify($tmin, $t, $defaultExpr);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1220: characters 7-11
						$tmin = $t;
					}
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1234: characters 11-73
			if ($withType === WithType::NoValue()) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1234: characters 33-38
				return TType::TVoid();
			} else if ($tmin === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1234: characters 56-66
				return $this->makeMono();
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1234: characters 69-73
				return $tmin;
			}
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:971: characters 34-38
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:971: characters 40-41
			$e = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:972: characters 4-28
			$this->typeExprWith($cond, TType::TBool());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:973: characters 4-24
			$this->typeExpr($e, WithType::NoValue());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:974: characters 4-16
			return TType::TVoid();
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:954: characters 17-18
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:954: characters 14-15
			$m = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:954: characters 20-21
			$e = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:955: lines 955-956
			if (($m === ":untyped") && $this->allowUntypedMeta) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:956: characters 5-22
				return $this->makeMono();
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:957: characters 4-32
			return $this->typeExpr($e, $withType);
		} else if ($__hx__switch === 26) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:949: characters 19-20
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:949: characters 22-23
			$t = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:950: characters 4-31
			$ct = $this->makeType($t, $expr);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:951: characters 4-39
			$vt = $this->typeExpr($v, WithType::WithType($ct));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:952: characters 4-20
			$this->unify($vt, $ct, $v);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:953: characters 4-13
			return $ct;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1237: characters 3-62
		$e = ErrorDef::ECustom("Don't know how to type " . ($expr->e->tag??'null'));
		$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
		if (!$this->isCompletion) {
			throw Exception::thrown($e1);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:1238: characters 3-18
		return TType::TDynamic();
	}

	/**
	 * @param object $expr
	 * @param TType $t
	 * 
	 * @return TType
	 */
	public function typeExprWith ($expr, $t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:825: characters 3-40
		$et = $this->typeExpr($expr, WithType::WithType($t));
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:826: characters 3-21
		$this->unify($et, $t, $expr);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:827: characters 3-11
		return $t;
	}

	/**
	 * @param object $o
	 * @param string $f
	 * @param object $expr
	 * @param bool $forWrite
	 * 
	 * @return TType
	 */
	public function typeField ($o, $f, $expr, $forWrite) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:856: characters 3-31
		$ot = $this->typeExpr($o, WithType::Value());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:857: lines 857-858
		if ($f === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:858: characters 4-26
			$this->onCompletion($expr, $ot);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:859: characters 3-44
		$ft = $this->getField($ot, $f, $expr, $forWrite);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:860: lines 860-863
		if ($ft === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:861: characters 4-47
			$e = ErrorDef::ECustom((Checker::typeStr($ot)??'null') . " has no field " . ($f??'null'));
			$e1 = new Error($e, $expr->pmin, $expr->pmax, $expr->origin, $expr->line);
			if (!$this->isCompletion) {
				throw Exception::thrown($e1);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:862: characters 4-17
			$ft = TType::TDynamic();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:864: characters 3-12
		return $ft;
	}

	/**
	 * @param TType $t
	 * 
	 * @return TType
	 */
	public function unasync ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:812: characters 11-20
		$_g = $this->follow($t);
		if ($_g->index === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:813: characters 13-17
			$args = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:813: characters 19-22
			$ret = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:813: lines 813-819
			if ($args->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:814: characters 4-28
				$rargs = (clone $args);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:815: characters 19-32
				if ($rargs->length > 0) {
					$rargs->length--;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:815: characters 12-35
				$_g = $this->follow(\array_shift($rargs->arr)->t);
				if ($_g->index === 13) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:816: characters 14-17
					$_g1 = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:816: characters 18-19
					$_g2 = $_g->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:816: characters 14-17
					if ($_g1->length === 1) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:816: characters 15-16
						$r = ($_g1->arr[0] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:816: characters 22-44
						return TType::TFun($rargs, $r->t);
					}
				}
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:821: characters 3-14
		return null;
	}

	/**
	 * @param TType $t1
	 * @param TType $t2
	 * @param object $e
	 * 
	 * @return void
	 */
	public function unify ($t1, $t2, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:670: lines 670-671
		if (!$this->tryUnify($t1, $t2)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:671: characters 4-50
			$e1 = ErrorDef::ECustom((Checker::typeStr($t1)??'null') . " should be " . (Checker::typeStr($t2)??'null'));
			$e2 = new Error($e1, $e->pmin, $e->pmax, $e->origin, $e->line);
			if (!$this->isCompletion) {
				throw Exception::thrown($e2);
			}
		}
	}
}

class _HxAnon_Checker0 extends HxAnon {
	function __construct($isPublic, $canWrite, $params, $name, $t, $complete) {
		$this->isPublic = $isPublic;
		$this->canWrite = $canWrite;
		$this->params = $params;
		$this->name = $name;
		$this->t = $t;
		$this->complete = $complete;
	}
}

class _HxAnon_Checker1 extends HxAnon {
	function __construct($name, $t) {
		$this->name = $name;
		$this->t = $t;
	}
}

class _HxAnon_Checker2 extends HxAnon {
	function __construct($name, $opt, $t) {
		$this->name = $name;
		$this->opt = $opt;
		$this->t = $t;
	}
}

class _HxAnon_Checker3 extends HxAnon {
	function __construct($r) {
		$this->r = $r;
	}
}

class _HxAnon_Checker4 extends HxAnon {
	function __construct($e, $pmin, $pmax, $origin, $line) {
		$this->e = $e;
		$this->pmin = $pmin;
		$this->pmax = $pmax;
		$this->origin = $origin;
		$this->line = $line;
	}
}

class _HxAnon_Checker5 extends HxAnon {
	function __construct($t, $opt, $name) {
		$this->t = $t;
		$this->opt = $opt;
		$this->name = $name;
	}
}

Boot::registerClass(Checker::class, 'hscript.Checker');
