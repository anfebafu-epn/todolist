<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\ds\ObjectMap;
use \haxe\Exception;
use \hscript\_Interp\Stop;
use \haxe\Log;
use \haxe\ds\IntMap;
use \haxe\IMap;
use \haxe\ds\StringMap;
use \haxe\ds\EnumValueMap;
use \php\_Boot\HxEnum;
use \haxe\NativeStackTrace;

class Interp {
	/**
	 * @var StringMap
	 */
	public $binops;
	/**
	 * @var object
	 */
	public $curExpr;
	/**
	 * @var object[]|\Array_hx
	 */
	public $declared;
	/**
	 * @var int
	 */
	public $depth;
	/**
	 * @var bool
	 */
	public $inTry;
	/**
	 * @var StringMap
	 */
	public $locals;
	/**
	 * @var mixed
	 */
	public $returnValue;
	/**
	 * @var StringMap
	 */
	public $variables;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:56: characters 3-21
		$this->locals = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:60: characters 3-25
		$this->declared = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:61: characters 3-19
		$this->resetVariables();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:62: characters 3-12
		$this->initOps();
	}

	/**
	 * @param object $e1
	 * @param object $e2
	 * 
	 * @return mixed
	 */
	public function assign ($e1, $e2) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:137: characters 3-20
		$v = $this->expr($e2);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:138: characters 11-25
		$_g = $e1->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:139: characters 15-17
			$id = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:140: characters 4-27
			$l = ($this->locals->data[$id] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:141: lines 141-144
			if ($l === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:142: characters 5-17
				$this->setVar($id, $v);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:144: characters 5-12
				$l->r = $v;
			}
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:145: characters 15-16
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:145: characters 17-18
			$f = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:146: characters 4-24
			$v = $this->set($this->expr($e), $f, $v);
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:147: characters 15-16
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:147: characters 18-23
			$index = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:148: characters 4-30
			$arr = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:149: characters 4-36
			$index1 = $this->expr($index);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:150: lines 150-155
			if (($arr instanceof IMap)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:151: characters 5-31
				(Boot::typedCast(Boot::getClass(IMap::class), $arr))->set($index1, $v);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:154: characters 5-19
				$arr[$index1] = $v;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:158: characters 4-26
			$e = new Error(ErrorDef::EInvalidOp("="), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:160: characters 3-11
		return $v;
	}

	/**
	 * @param string $op
	 * @param \Closure $fop
	 * 
	 * @return void
	 */
	public function assignOp ($op, $fop) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:164: characters 3-17
		$me = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:165: characters 3-70
		$this->binops->data[$op] = function ($e1, $e2) use (&$op, &$fop, &$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:165: characters 33-69
			return $me->evalAssignOp($op, $fop, $e1, $e2);
		};
	}

	/**
	 * @param mixed $o
	 * @param mixed $f
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return mixed
	 */
	public function call ($o, $f, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:691: characters 3-38
		return \Reflect::callMethod($o, $f, $args);
	}

	/**
	 * @param string $cl
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return mixed
	 */
	public function cnew ($cl, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:695: characters 3-33
		$c = \Type::resolveClass($cl);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:696: characters 3-34
		if ($c === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:696: characters 19-34
			$c = $this->resolve($cl);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:697: characters 3-37
		return \Type::createInstance($c, $args);
	}

	/**
	 * @param object $econd
	 * @param object $e
	 * 
	 * @return void
	 */
	public function doWhileLoop ($econd, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:591: characters 3-29
		$old = $this->declared->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:592: lines 592-603
		while (true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:593: lines 593-601
			try {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:594: characters 5-12
				$this->expr($e);
			} catch(\Throwable $_g) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:595: characters 13-16
				NativeStackTrace::saveStack($_g);
				$_g1 = Exception::caught($_g)->unwrap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:593: lines 593-601
				if (Boot::isOfType($_g1, Boot::getClass(Stop::class))) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:595: characters 13-16
					$err = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:596: lines 596-600
					$__hx__switch = ($err->index);
					if ($__hx__switch === 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:598: characters 18-23
						break;
					} else if ($__hx__switch === 1) {
					} else if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:599: characters 19-24
						throw Exception::thrown($err);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:593: lines 593-601
					throw $_g;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:592: lines 592-603
			if (!($this->expr($econd) === true)) {
				break;
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:604: characters 3-15
		$this->restore($old);
	}

	/**
	 * @param StringMap $h
	 * 
	 * @return StringMap
	 */
	public function duplicate ($h) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:280: characters 3-22
		$h2 = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:284: characters 13-21
		$data = \array_values(\array_map("strval", \array_keys($h->data)));
		$k_current = 0;
		$k_length = \count($data);
		$k_data = $data;
		while ($k_current < $k_length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:284: lines 284-285
			$k = $k_data[$k_current++];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:285: characters 4-22
			$value = ($h->data[$k] ?? null);
			$h2->data[$k] = $value;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:286: characters 3-12
		return $h2;
	}

	/**
	 * @param ErrorDef $e
	 * @param bool $rethrow
	 * 
	 * @return mixed
	 */
	public function error ($e, $rethrow = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:296: lines 296-300
		if ($rethrow === null) {
			$rethrow = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:297: characters 18-97
		$e1 = new Error($e, $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:298: characters 3-43
		if ($rethrow) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:298: characters 17-32
			throw Exception::thrown($e1);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:298: characters 38-43
			throw Exception::thrown($e1);
		}
	}

	/**
	 * @param string $op
	 * @param \Closure $fop
	 * @param object $e1
	 * @param object $e2
	 * 
	 * @return mixed
	 */
	public function evalAssignOp ($op, $fop, $e1, $e2) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:169: characters 3-9
		$v = null;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:170: characters 11-25
		$_g = $e1->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:171: characters 15-17
			$id = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:172: characters 4-27
			$l = ($this->locals->data[$id] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:173: characters 4-30
			$v = $fop($this->expr($e1), $this->expr($e2));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:174: lines 174-177
			if ($l === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:175: characters 5-17
				$this->setVar($id, $v);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:177: characters 5-12
				$l->r = $v;
			}
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:178: characters 15-16
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:178: characters 17-18
			$f = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:179: characters 4-22
			$obj = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:180: characters 4-32
			$v = $fop($this->get($obj, $f), $this->expr($e2));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:181: characters 4-20
			$v = $this->set($obj, $f, $v);
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:182: characters 15-16
			$e = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:182: characters 18-23
			$index = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:183: characters 4-30
			$arr = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:184: characters 4-36
			$index1 = $this->expr($index);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:185: lines 185-192
			if (($arr instanceof IMap)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:186: characters 5-47
				$v = $fop((Boot::typedCast(Boot::getClass(IMap::class), $arr))->get($index1), $this->expr($e2));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:187: characters 5-31
				(Boot::typedCast(Boot::getClass(IMap::class), $arr))->set($index1, $v);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:190: characters 5-33
				$v = $fop($arr[$index1], $this->expr($e2));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:191: characters 5-19
				$arr[$index1] = $v;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:194: characters 11-32
			$e = new Error(ErrorDef::EInvalidOp($op), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:196: characters 3-11
		return $v;
	}

	/**
	 * @param object $expr
	 * 
	 * @return mixed
	 */
	public function execute ($expr) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:252: characters 3-12
		$this->depth = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:254: characters 3-21
		$this->locals = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:258: characters 3-25
		$this->declared = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:259: characters 3-26
		return $this->exprReturn($expr);
	}

	/**
	 * @param object $e
	 * 
	 * @return mixed
	 */
	public function expr ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:320: lines 320-588
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:322: characters 3-14
		$this->curExpr = $e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:323: characters 3-15
		$e1 = $e->e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:325: lines 325-586
		$__hx__switch = ($e1->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:326: characters 15-16
			$c = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:327: lines 327-334
			$__hx__switch = ($c->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:328: characters 14-15
				$v = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:328: characters 18-26
				return $v;
			} else if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:329: characters 16-17
				$f = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:329: characters 20-28
				return $f;
			} else if ($__hx__switch === 2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:330: characters 17-18
				$s = $c->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:330: characters 21-29
				return $s;
			}
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:335: characters 15-17
			$id = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:336: characters 4-22
			return $this->resolve($id);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:337: characters 15-16
			$_g = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:337: characters 13-14
			$n = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:337: characters 17-18
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:338: characters 4-49
			$_this = $this->declared;
			$x = new _HxAnon_Interp0($n, ($this->locals->data[$n] ?? null));
			$_this->arr[$_this->length++] = $x;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:339: characters 4-50
			$this1 = $this->locals;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:339: characters 23-47
			$value = ($e === null ? null : $this->expr($e));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:339: characters 4-50
			$this1->data[$n] = new _HxAnon_Interp1($value);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:340: characters 4-15
			return null;
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:341: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:342: characters 4-18
			return $this->expr($e);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:343: characters 15-20
			$exprs = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:344: characters 4-30
			$old = $this->declared->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:345: characters 4-17
			$v = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:346: lines 346-347
			$_g = 0;
			while ($_g < $exprs->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:346: characters 9-10
				$e = ($exprs->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:346: lines 346-347
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:347: characters 5-16
				$v = $this->expr($e);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:348: characters 4-16
			$this->restore($old);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:349: characters 4-12
			return $v;
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:350: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:350: characters 17-18
			$f = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:351: characters 4-25
			return $this->get($this->expr($e), $f);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:352: characters 15-17
			$op = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:352: characters 18-20
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:352: characters 21-23
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:353: characters 4-29
			$fop = ($this->binops->data[$op] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:354: characters 4-43
			if ($fop === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:354: characters 22-43
				$e = new Error(ErrorDef::EInvalidOp($op), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
				throw Exception::thrown($e);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:355: characters 4-21
			return $fop($e11, $e2);
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:356: characters 14-16
			$op = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:356: characters 17-23
			$prefix = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:356: characters 24-25
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:357: lines 357-374
			if ($op === "!") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:359: characters 5-27
				return $this->expr($e) !== true;
			} else if ($op === "++") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:363: characters 5-33
				return $this->increment($e, $prefix, 1);
			} else if ($op === "-") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:361: characters 5-20
				return -$this->expr($e);
			} else if ($op === "--") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:365: characters 5-34
				return $this->increment($e, $prefix, -1);
			} else if ($op === "~") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:370: characters 5-20
				return ~$this->expr($e);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:373: characters 5-26
				$e = new Error(ErrorDef::EInvalidOp($op), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
				throw Exception::thrown($e);
			}
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:375: characters 14-15
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:375: characters 16-22
			$params = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:376: characters 4-27
			$args = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:377: lines 377-378
			$_g = 0;
			while ($_g < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:377: characters 9-10
				$p = ($params->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:377: lines 377-378
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:378: characters 5-23
				$x = $this->expr($p);
				$args->arr[$args->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:380: characters 12-25
			$_g = $e->e;
			if ($_g->index === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:381: characters 16-17
				$e2 = $_g->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:381: characters 18-19
				$f = $_g->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:382: characters 5-23
				$obj = $this->expr($e2);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:383: characters 5-47
				if ($obj === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:383: characters 23-47
					$e2 = new Error(ErrorDef::EInvalidAccess($f), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
					throw Exception::thrown($e2);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:384: characters 5-29
				return $this->fcall($obj, $f, $args);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:386: characters 5-35
				return $this->call(null, $this->expr($e), $args);
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:388: characters 12-17
			$econd = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:388: characters 18-20
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:388: characters 21-23
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:389: characters 11-86
			if ($this->expr($econd) === true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:389: characters 37-45
				return $this->expr($e11);
			} else if ($e2 === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:389: characters 68-72
				return null;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:389: characters 78-86
				return $this->expr($e2);
			}
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:390: characters 15-20
			$econd = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:390: characters 21-22
			$e = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:391: characters 4-22
			$this->whileLoop($econd, $e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:392: characters 4-15
			return null;
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:396: characters 13-14
			$v = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:396: characters 15-17
			$it = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:396: characters 18-19
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:397: characters 4-19
			$this->forLoop($v, $it, $e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:398: characters 4-15
			return null;
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:400: characters 4-9
			throw Exception::thrown(Stop::SBreak());
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:402: characters 4-9
			throw Exception::thrown(Stop::SContinue());
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:406: characters 36-37
			$_g = $e1->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:406: characters 18-24
			$params = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:406: characters 25-30
			$fexpr = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:406: characters 31-35
			$name = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:407: characters 4-43
			$capturedLocals = $this->duplicate($this->locals);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:408: characters 4-18
			$me = $this;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:409: characters 4-38
			$hasOpt = false;
			$minParams = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:410: lines 410-414
			$_g = 0;
			while ($_g < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:410: characters 9-10
				$p = ($params->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:410: lines 410-414
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:411: lines 411-414
				if ($p->opt) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:412: characters 6-19
					$hasOpt = true;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:414: characters 6-17
					$minParams += 1;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:415: lines 415-462
			$f = function ($args) use (&$name, &$params, &$capturedLocals, &$_gthis, &$minParams, &$fexpr, &$me) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:416: lines 416-436
				if ((($args === null ? 0 : $args->length)) !== $params->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:417: lines 417-421
					if ($args->length < $minParams) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:418: characters 7-96
						$str = "Invalid number of parameters. Got " . ($args->length??'null') . ", required " . ($minParams??'null');
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:419: characters 7-61
						if ($name !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:419: characters 26-61
							$str = ($str??'null') . " for function '" . ($name??'null') . "'";
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:420: characters 7-26
						$e = new Error(ErrorDef::ECustom($str), $_gthis->curExpr->pmin, $_gthis->curExpr->pmax, $_gthis->curExpr->origin, $_gthis->curExpr->line);
						throw Exception::thrown($e);
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:423: characters 6-21
					$args2 = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:424: characters 6-48
					$extraParams = $args->length - $minParams;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:425: characters 6-18
					$pos = 0;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:426: lines 426-434
					$_g = 0;
					while ($_g < $params->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:426: characters 11-12
						$p = ($params->arr[$_g] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:426: lines 426-434
						++$_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:427: lines 427-434
						if ($p->opt) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:428: lines 428-432
							if ($extraParams > 0) {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:429: characters 9-32
								$x = ($args->arr[$pos++] ?? null);
								$args2->arr[$args2->length++] = $x;
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:430: characters 9-22
								--$extraParams;
							} else {
								#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:432: characters 9-25
								$args2->arr[$args2->length++] = null;
							}
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:434: characters 8-31
							$x1 = ($args->arr[$pos++] ?? null);
							$args2->arr[$args2->length++] = $x1;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:435: characters 6-18
					$args = $args2;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:437: characters 5-43
				$old = $me->locals;
				$depth = $me->depth;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:438: characters 5-15
				$me->depth++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:439: characters 5-45
				$me->locals = $me->duplicate($capturedLocals);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:440: characters 15-19
				$_g = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:440: characters 19-32
				$_g1 = $params->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:440: lines 440-441
				while ($_g < $_g1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:440: characters 15-32
					$i = $_g++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:441: characters 6-51
					$me->locals->data[$params[$i]->name] = new _HxAnon_Interp1(($args->arr[$i] ?? null));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:442: characters 5-18
				$r = null;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:443: characters 5-35
				$oldDecl = $_gthis->declared->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:444: lines 444-457
				if ($_gthis->inTry) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:445: lines 445-455
					try {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:446: characters 7-31
						$r = $me->exprReturn($fexpr);
					} catch(\Throwable $_g) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:447: characters 15-16
						NativeStackTrace::saveStack($_g);
						$e = Exception::caught($_g)->unwrap();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:448: characters 7-22
						$me->locals = $old;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:449: characters 7-23
						$me->depth = $depth;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:453: characters 7-12
						throw Exception::thrown($e);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:457: characters 6-30
					$r = $me->exprReturn($fexpr);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:458: characters 5-21
				$_gthis->restore($oldDecl);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:459: characters 5-20
				$me->locals = $old;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:460: characters 5-21
				$me->depth = $depth;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:461: characters 5-13
				return $r;
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:463: characters 4-35
			$f1 = \Reflect::makeVarArgs($f);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:464: lines 464-475
			if ($name !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:465: lines 465-474
				if ($this->depth === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:467: characters 6-28
					$this->variables->data[$name] = $f1;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:470: characters 6-59
					$_this = $this->declared;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:470: characters 27-31
					$name1 = $name;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:470: characters 6-59
					$x = new _HxAnon_Interp0($name1, ($this->locals->data[$name] ?? null));
					$_this->arr[$_this->length++] = $x;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:471: characters 6-26
					$ref = new _HxAnon_Interp1($f1);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:472: characters 6-27
					$this->locals->data[$name] = $ref;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:473: characters 6-35
					$capturedLocals->data[$name] = $ref;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:476: characters 4-12
			return $f1;
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:403: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:404: characters 4-44
			$this->returnValue = ($e === null ? null : $this->expr($e));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:405: characters 4-9
			throw Exception::thrown(Stop::SReturn());
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:519: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:519: characters 18-23
			$index = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:520: characters 4-30
			$arr = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:521: characters 4-36
			$index1 = $this->expr($index);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:522: lines 522-527
			if (($arr instanceof IMap)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:523: characters 5-35
				return (Boot::typedCast(Boot::getClass(IMap::class), $arr))->get($index1);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:526: characters 5-22
				return $arr[$index1];
			}
		} else if ($__hx__switch === 17) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:477: characters 19-22
			$arr = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:478: characters 8-67
			$tmp = null;
			if ($arr->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:478: characters 26-44
				$_g = ($arr->arr[0] ?? null)->e;
				if ($_g->index === 6) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:478: characters 64-65
					$_g1 = $_g->params[1];
					$_g1 = $_g->params[2];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:478: characters 8-67
					$tmp = $_g->params[0] === "=>";
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:478: lines 478-518
			if ($tmp) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:479: characters 5-33
				$isAllString = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:480: characters 5-30
				$isAllInt = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:481: characters 5-33
				$isAllObject = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:482: characters 5-31
				$isAllEnum = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:483: characters 5-34
				$keys = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:484: characters 5-36
				$values = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:485: lines 485-499
				$_g = 0;
				while ($_g < $arr->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:485: characters 10-11
					$e = ($arr->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:485: lines 485-499
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:486: characters 13-26
					$_g1 = $e->e;
					if ($_g1->index === 6) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:487: characters 19-23
						if ($_g1->params[0] === "=>") {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:487: characters 25-29
							$eKey = $_g1->params[1];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:487: characters 31-37
							$eValue = $_g1->params[2];
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:488: characters 8-37
							$key = $this->expr($eKey);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:489: characters 8-41
							$value = $this->expr($eValue);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:490: characters 37-52
							$isAllString = $isAllString && is_string($key);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:491: characters 31-43
							$isAllInt = $isAllInt && Boot::isOfType($key, Boot::getClass('Int'));
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:492: characters 37-58
							$isAllObject = $isAllObject && \Reflect::isObject($key);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:493: characters 33-57
							$isAllEnum = $isAllEnum && ($key instanceof HxEnum);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:494: characters 8-22
							$keys->arr[$keys->length++] = $key;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:495: characters 8-26
							$values->arr[$values->length++] = $value;
						} else {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:497: characters 16-21
							throw Exception::thrown("=> expected");
						}
					} else {
						throw Exception::thrown("=> expected");
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:500: lines 500-506
				$map = null;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:501: lines 501-505
				if ($isAllInt) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:500: lines 500-506
					$map = new IntMap();
				} else if ($isAllString) {
					$map = new StringMap();
				} else if ($isAllEnum) {
					$map = new EnumValueMap();
				} else if ($isAllObject) {
					$map = new ObjectMap();
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:505: characters 11-16
					throw Exception::thrown("Inconsistent key types");
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:507: characters 15-19
				$_g = 0;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:507: characters 19-30
				$_g1 = $keys->length;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:507: lines 507-509
				while ($_g < $_g1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:507: characters 15-30
					$n = $_g++;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:508: characters 6-42
					(Boot::typedCast(Boot::getClass(IMap::class), $map))->set(($keys->arr[$n] ?? null), ($values->arr[$n] ?? null));
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:510: characters 5-15
				return $map;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:513: characters 5-25
				$a = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:514: lines 514-516
				$_g = 0;
				while ($_g < $arr->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:514: characters 11-12
					$e = ($arr->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:514: lines 514-516
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:515: characters 6-21
					$x = $this->expr($e);
					$a->arr[$a->length++] = $x;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:517: characters 5-13
				return $a;
			}
		} else if ($__hx__switch === 18) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:528: characters 13-15
			$cl = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:528: characters 16-22
			$params1 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:529: characters 4-24
			$a = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:530: lines 530-531
			$_g = 0;
			while ($_g < $params1->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:530: characters 9-10
				$e = ($params1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:530: lines 530-531
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:531: characters 5-20
				$x = $this->expr($e);
				$a->arr[$a->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:532: characters 4-21
			return $this->cnew($cl, $a);
		} else if ($__hx__switch === 19) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:533: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:534: characters 4-9
			throw Exception::thrown($this->expr($e));
		} else if ($__hx__switch === 20) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:535: characters 17-18
			$_g = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:535: characters 13-14
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:535: characters 15-16
			$n = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:535: characters 19-25
			$ecatch = $e1->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:536: characters 4-30
			$old = $this->declared->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:537: characters 4-23
			$oldTry = $this->inTry;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:538: lines 538-557
			try {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:539: characters 5-17
				$this->inTry = true;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:540: characters 5-31
				$v = $this->expr($e);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:541: characters 5-17
				$this->restore($old);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:542: characters 5-19
				$this->inTry = $oldTry;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:543: characters 5-13
				return $v;
			} catch(\Throwable $_g) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:544: characters 13-16
				NativeStackTrace::saveStack($_g);
				$_g1 = Exception::caught($_g)->unwrap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:538: lines 538-557
				if (Boot::isOfType($_g1, Boot::getClass(Stop::class))) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:544: characters 13-16
					$err = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:545: characters 5-19
					$this->inTry = $oldTry;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:546: characters 5-10
					throw Exception::thrown($err);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:547: characters 13-16
					$err = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:549: characters 5-17
					$this->restore($old);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:550: characters 5-19
					$this->inTry = $oldTry;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:552: characters 5-50
					$_this = $this->declared;
					$x = new _HxAnon_Interp0($n, ($this->locals->data[$n] ?? null));
					$_this->arr[$_this->length++] = $x;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:553: characters 5-30
					$this->locals->data[$n] = new _HxAnon_Interp1($err);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:554: characters 5-36
					$v = $this->expr($ecatch);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:555: characters 5-17
					$this->restore($old);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:556: characters 5-13
					return $v;
				}
			}
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:558: characters 16-18
			$fl = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:559: characters 4-15
			$o = new HxAnon();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:560: lines 560-561
			$_g = 0;
			while ($_g < $fl->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:560: characters 9-10
				$f = ($fl->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:560: lines 560-561
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:561: characters 5-28
				$this->set($o, $f->name, $this->expr($f->e));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:562: characters 4-12
			return $o;
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:563: characters 17-22
			$econd = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:563: characters 23-25
			$e11 = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:563: characters 26-28
			$e2 = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:564: characters 11-59
			if ($this->expr($econd) === true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:564: characters 37-45
				return $this->expr($e11);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:564: characters 51-59
				return $this->expr($e2);
			}
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:565: characters 16-17
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:565: characters 19-24
			$cases = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:565: characters 26-29
			$def = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:566: characters 4-32
			$val = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:567: characters 4-22
			$match = false;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:568: lines 568-578
			$_g = 0;
			while ($_g < $cases->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:568: characters 9-10
				$c = ($cases->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:568: lines 568-578
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:569: lines 569-573
				$_g1 = 0;
				$_g2 = $c->values;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:569: characters 10-11
					$v = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:569: lines 569-573
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:570: lines 570-573
					if (Boot::equal($this->expr($v), $val)) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:571: characters 7-19
						$match = true;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:572: characters 7-12
						break;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:574: lines 574-577
				if ($match) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:575: characters 6-24
					$val = $this->expr($c->expr);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:576: characters 6-11
					break;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:579: lines 579-580
			if (!$match) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:580: characters 25-29
				$val = ($def === null ? null : $this->expr($def));
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:581: characters 4-14
			return $val;
		} else if ($__hx__switch === 24) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:393: characters 17-22
			$econd = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:393: characters 23-24
			$e = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:394: characters 4-24
			$this->doWhileLoop($econd, $e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:395: characters 4-15
			return null;
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:582: characters 14-15
			$_g = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:582: characters 17-18
			$_g = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:582: characters 20-21
			$e = $e1->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:583: characters 4-18
			return $this->expr($e);
		} else if ($__hx__switch === 26) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:584: characters 21-22
			$_g = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:584: characters 19-20
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:585: characters 4-18
			return $this->expr($e);
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return mixed
	 */
	public function exprReturn ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:263: lines 263-274
		try {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:264: characters 4-18
			return $this->expr($e);
		} catch(\Throwable $_g) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:265: characters 12-13
			NativeStackTrace::saveStack($_g);
			$_g1 = Exception::caught($_g)->unwrap();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:263: lines 263-274
			if (Boot::isOfType($_g1, Boot::getClass(Stop::class))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:265: characters 12-13
				$e = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:266: lines 266-273
				$__hx__switch = ($e->index);
				if ($__hx__switch === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:267: characters 17-22
					throw Exception::thrown("Invalid break");
				} else if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:268: characters 20-25
					throw Exception::thrown("Invalid continue");
				} else if ($__hx__switch === 2) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:270: characters 5-25
					$v = $this->returnValue;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:271: characters 5-23
					$this->returnValue = null;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:272: characters 5-13
					return $v;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:263: lines 263-274
				throw $_g;
			}
		}
	}

	/**
	 * @param mixed $o
	 * @param string $f
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return mixed
	 */
	public function fcall ($o, $f, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:687: characters 3-34
		return $this->call($o, $this->get($o, $f), $args);
	}

	/**
	 * @param string $n
	 * @param object $it
	 * @param object $e
	 * 
	 * @return void
	 */
	public function forLoop ($n, $it, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:634: characters 3-29
		$old = $this->declared->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:635: characters 3-48
		$_this = $this->declared;
		$x = new _HxAnon_Interp0($n, ($this->locals->data[$n] ?? null));
		$_this->arr[$_this->length++] = $x;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:636: characters 3-35
		$it1 = $this->makeIterator($this->expr($it));
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:637: lines 637-648
		while ($it1->hasNext()) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:638: characters 4-35
			$this1 = $this->locals;
			$value = new _HxAnon_Interp1($it1->next());
			$this1->data[$n] = $value;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:639: lines 639-647
			try {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:640: characters 5-12
				$this->expr($e);
			} catch(\Throwable $_g) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:641: characters 13-16
				NativeStackTrace::saveStack($_g);
				$_g1 = Exception::caught($_g)->unwrap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:639: lines 639-647
				if (Boot::isOfType($_g1, Boot::getClass(Stop::class))) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:641: characters 13-16
					$err = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:642: lines 642-646
					$__hx__switch = ($err->index);
					if ($__hx__switch === 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:644: characters 18-23
						break;
					} else if ($__hx__switch === 1) {
					} else if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:645: characters 19-24
						throw Exception::thrown($err);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:639: lines 639-647
					throw $_g;
				}
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:649: characters 3-15
		$this->restore($old);
	}

	/**
	 * @param mixed $o
	 * @param string $f
	 * 
	 * @return mixed
	 */
	public function get ($o, $f) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:665: characters 3-44
		if ($o === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:665: characters 20-44
			$e = new Error(ErrorDef::EInvalidAccess($f), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:669: lines 669-673
		try {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:670: characters 6-31
			return \Reflect::getProperty($o, $f);
		} catch(\Throwable $_g) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:671: characters 14-15
			NativeStackTrace::saveStack($_g);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:672: characters 6-25
			return \Reflect::field($o, $f);
		}
	}

	/**
	 * @param mixed $map
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function getMapValue ($map, $key) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:657: characters 3-69
		return (Boot::typedCast(Boot::getClass(IMap::class), $map))->get($key);
	}

	/**
	 * @param object $e
	 * @param bool $prefix
	 * @param int $delta
	 * 
	 * @return mixed
	 */
	public function increment ($e, $prefix, $delta) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:201: characters 3-14
		$this->curExpr = $e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:202: characters 3-15
		$e1 = $e->e;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:204: lines 204-248
		$__hx__switch = ($e1->index);
		if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:205: characters 15-17
			$id = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:206: characters 4-27
			$l = ($this->locals->data[$id] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:207: characters 4-54
			$v = ($l === null ? $this->resolve($id) : $l->r);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:208: lines 208-212
			if ($prefix) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:209: characters 5-15
				$v += $delta;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:210: characters 5-46
				if ($l === null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:210: characters 21-33
					$this->setVar($id, $v);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:210: characters 39-46
					$l->r = $v;
				}
			} else if ($l === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:212: characters 21-41
				$this->setVar($id, $v + $delta);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:212: characters 47-62
				$l->r = $v + $delta;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:213: characters 4-12
			return $v;
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:214: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:214: characters 17-18
			$f = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:215: characters 4-22
			$obj = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:216: characters 4-33
			$v = $this->get($obj, $f);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:217: lines 217-221
			if ($prefix) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:218: characters 5-15
				$v += $delta;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:219: characters 5-17
				$this->set($obj, $f, $v);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:221: characters 5-25
				$this->set($obj, $f, $v + $delta);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:222: characters 4-12
			return $v;
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:223: characters 15-16
			$e = $e1->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:223: characters 18-23
			$index = $e1->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:224: characters 4-30
			$arr = $this->expr($e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:225: characters 4-36
			$index1 = $this->expr($index);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:226: lines 226-245
			if (($arr instanceof IMap)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:227: characters 5-37
				$v = (Boot::typedCast(Boot::getClass(IMap::class), $arr))->get($index1);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:228: lines 228-234
				if ($prefix) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:229: characters 6-16
					$v += $delta;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:230: characters 6-32
					(Boot::typedCast(Boot::getClass(IMap::class), $arr))->set($index1, $v);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:233: characters 6-40
					(Boot::typedCast(Boot::getClass(IMap::class), $arr))->set($index1, $v + $delta);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:235: characters 5-13
				return $v;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:238: characters 5-24
				$v = $arr[$index1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:239: lines 239-243
				if ($prefix) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:240: characters 6-16
					$v += $delta;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:241: characters 6-20
					$arr[$index1] = $v;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:243: characters 6-28
					$arr[$index1] = $v + $delta;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:244: characters 5-13
				return $v;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:247: characters 11-51
			$e = new Error(ErrorDef::EInvalidOp(($delta > 0 ? "++" : "--")), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
	}

	/**
	 * @return void
	 */
	public function initOps () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:92: characters 3-17
		$me = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:94: characters 3-21
		$this->binops = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:98: characters 3-67
		$this->binops->data["+"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:98: characters 34-66
			return Boot::addOrConcat($me->expr($e1), $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:99: characters 3-67
		$this->binops->data["-"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:99: characters 34-66
			return $me->expr($e1) - $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:100: characters 3-67
		$this->binops->data["*"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:100: characters 34-66
			return $me->expr($e1) * $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:101: characters 3-67
		$this->binops->data["/"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:101: characters 34-66
			return $me->expr($e1) / $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:102: characters 3-67
		$this->binops->data["%"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:102: characters 34-66
			return fmod($me->expr($e1), $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:103: characters 3-67
		$this->binops->data["&"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:103: characters 34-66
			return $me->expr($e1) & $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:104: characters 3-67
		$this->binops->data["|"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:104: characters 34-66
			return $me->expr($e1) | $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:105: characters 3-67
		$this->binops->data["^"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:105: characters 34-66
			return $me->expr($e1) ^ $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:106: characters 3-69
		$this->binops->data["<<"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:106: characters 35-68
			return $me->expr($e1) << $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:107: characters 3-69
		$this->binops->data[">>"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:107: characters 35-68
			return $me->expr($e1) >> $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:108: characters 3-71
		$this->binops->data[">>>"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:108: characters 36-70
			return Boot::shiftRightUnsigned($me->expr($e1), $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:109: characters 3-69
		$this->binops->data["=="] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:109: characters 35-68
			return Boot::equal($me->expr($e1), $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:110: characters 3-69
		$this->binops->data["!="] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:110: characters 35-68
			return !Boot::equal($me->expr($e1), $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:111: characters 3-69
		$this->binops->data[">="] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:111: characters 35-68
			return $me->expr($e1) >= $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:112: characters 3-69
		$this->binops->data["<="] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:112: characters 35-68
			return $me->expr($e1) <= $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:113: characters 3-67
		$this->binops->data[">"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:113: characters 34-66
			return $me->expr($e1) > $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:114: characters 3-67
		$this->binops->data["<"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:114: characters 34-66
			return $me->expr($e1) < $me->expr($e2);
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:115: characters 3-85
		$this->binops->data["||"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:115: characters 42-84
			if ($me->expr($e1) !== true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:115: characters 65-84
				return $me->expr($e2) === true;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:115: characters 42-84
				return true;
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:116: characters 3-85
		$this->binops->data["&&"] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:116: characters 42-84
			if ($me->expr($e1) === true) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:116: characters 65-84
				return $me->expr($e2) === true;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:116: characters 42-84
				return false;
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:117: characters 3-25
		$this->binops->data["="] = Boot::getInstanceClosure($this, 'assign');
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:118: characters 3-127
		$this->binops->data["..."] = function ($e1, $e2) use (&$me) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:118: characters 102-113
			$tmp = $me->expr($e1);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:118: characters 36-126
			return new \IntIterator($tmp, $me->expr($e2));
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:119: characters 3-64
		$this->assignOp("+=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:119: characters 49-63
			return Boot::addOrConcat($v1, $v2);
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:120: characters 3-60
		$this->assignOp("-=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:120: characters 45-59
			return $v1 - $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:121: characters 3-60
		$this->assignOp("*=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:121: characters 45-59
			return $v1 * $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:122: characters 3-60
		$this->assignOp("/=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:122: characters 45-59
			return $v1 / $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:123: characters 3-60
		$this->assignOp("%=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:123: characters 45-59
			return fmod($v1, $v2);
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:124: characters 3-48
		$this->assignOp("&=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:124: characters 33-47
			return $v1 & $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:125: characters 3-48
		$this->assignOp("|=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:125: characters 33-47
			return $v1 | $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:126: characters 3-48
		$this->assignOp("^=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:126: characters 33-47
			return $v1 ^ $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:127: characters 3-50
		$this->assignOp("<<=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:127: characters 34-49
			return $v1 << $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:128: characters 3-50
		$this->assignOp(">>=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:128: characters 34-49
			return $v1 >> $v2;
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:129: characters 3-52
		$this->assignOp(">>>=", function ($v1, $v2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:129: characters 35-51
			return Boot::shiftRightUnsigned($v1, $v2);
		});
	}

	/**
	 * @param mixed $o
	 * 
	 * @return bool
	 */
	public function isMap ($o) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:653: characters 3-21
		return ($o instanceof IMap);
	}

	/**
	 * @param mixed $v
	 * 
	 * @return object
	 */
	public function makeIterator ($v) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:627: characters 3-47
		try {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:627: characters 7-23
			$v = $v->iterator();
		} catch(\Throwable $_g) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:627: characters 31-32
			NativeStackTrace::saveStack($_g);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:629: characters 3-71
		if ((Boot::dynamicField($v, 'hasNext') === null) || (Boot::dynamicField($v, 'next') === null)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:629: characters 45-71
			$e = new Error(ErrorDef::EInvalidIterator($v), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:630: characters 3-11
		return $v;
	}

	/**
	 * @return object
	 */
	public function posInfos () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:85: lines 85-86
		if ($this->curExpr !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:86: characters 5-73
			return new _HxAnon_Interp2($this->curExpr->origin, $this->curExpr->line);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:88: characters 3-55
		return new _HxAnon_Interp2("hscript", 0);
	}

	/**
	 * @return void
	 */
	public function resetVariables () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:65: lines 65-81
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:67: characters 3-40
		$this->variables = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:72: characters 3-29
		$this->variables->data["null"] = null;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:73: characters 3-29
		$this->variables->data["true"] = true;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:74: characters 3-31
		$this->variables->data["false"] = false;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:75: lines 75-80
		$this1 = $this->variables;
		$value = \Reflect::makeVarArgs(function ($el) use (&$_gthis) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:76: characters 4-25
			$inf = $_gthis->posInfos();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:77: characters 12-22
			if ($el->length > 0) {
				$el->length--;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:77: characters 4-23
			$v = \array_shift($el->arr);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:78: characters 4-45
			if ($el->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:78: characters 24-45
				$inf->customParams = $el;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:79: characters 4-38
			(Log::$trace)(\Std::string($v), $inf);
		});
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:75: lines 75-80
		$this1->data["trace"] = $value;
	}

	/**
	 * @param string $id
	 * 
	 * @return mixed
	 */
	public function resolve ($id) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:311: characters 3-26
		$l = ($this->locals->data[$id] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:312: lines 312-313
		if ($l !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:313: characters 4-14
			return $l->r;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:314: characters 3-29
		$v = ($this->variables->data[$id] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:315: lines 315-316
		if (($v === null) && !\array_key_exists($id, $this->variables->data)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:316: characters 4-31
			$e = new Error(ErrorDef::EUnknownVariable($id), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:317: characters 3-11
		return $v;
	}

	/**
	 * @param int $old
	 * 
	 * @return void
	 */
	public function restore ($old) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:290: lines 290-293
		while ($this->declared->length > $old) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:291: characters 12-26
			$_this = $this->declared;
			if ($_this->length > 0) {
				$_this->length--;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:291: characters 4-27
			$d = \array_pop($_this->arr);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:292: characters 4-25
			$this->locals->data[$d->n] = $d->old;
		}
	}

	/**
	 * @param mixed $e
	 * 
	 * @return void
	 */
	public function rethrow ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:306: characters 3-8
		throw Exception::thrown($e);
	}

	/**
	 * @param mixed $o
	 * @param string $f
	 * @param mixed $v
	 * 
	 * @return mixed
	 */
	public function set ($o, $f, $v) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:681: characters 3-43
		if ($o === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:681: characters 19-43
			$e = new Error(ErrorDef::EInvalidAccess($f), $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:682: characters 3-29
		\Reflect::setProperty($o, $f, $v);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:683: characters 3-11
		return $v;
	}

	/**
	 * @param mixed $map
	 * @param mixed $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function setMapValue ($map, $key, $value) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:661: characters 3-69
		(Boot::typedCast(Boot::getClass(IMap::class), $map))->set($key, $value);
	}

	/**
	 * @param string $name
	 * @param mixed $v
	 * 
	 * @return void
	 */
	public function setVar ($name, $v) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:133: characters 3-25
		$this->variables->data[$name] = $v;
	}

	/**
	 * @param object $econd
	 * @param object $e
	 * 
	 * @return void
	 */
	public function whileLoop ($econd, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:608: characters 3-29
		$old = $this->declared->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:609: lines 609-619
		while ($this->expr($econd) === true) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:610: lines 610-618
			try {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:611: characters 5-12
				$this->expr($e);
			} catch(\Throwable $_g) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:612: characters 13-16
				NativeStackTrace::saveStack($_g);
				$_g1 = Exception::caught($_g)->unwrap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:610: lines 610-618
				if (Boot::isOfType($_g1, Boot::getClass(Stop::class))) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:612: characters 13-16
					$err = $_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:613: lines 613-617
					$__hx__switch = ($err->index);
					if ($__hx__switch === 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:615: characters 18-23
						break;
					} else if ($__hx__switch === 1) {
					} else if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:616: characters 19-24
						throw Exception::thrown($err);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:610: lines 610-618
					throw $_g;
				}
			}
		};
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Interp.hx:620: characters 3-15
		$this->restore($old);
	}
}

class _HxAnon_Interp0 extends HxAnon {
	function __construct($n, $old) {
		$this->n = $n;
		$this->old = $old;
	}
}

class _HxAnon_Interp1 extends HxAnon {
	function __construct($r) {
		$this->r = $r;
	}
}

class _HxAnon_Interp2 extends HxAnon {
	function __construct($fileName, $lineNumber) {
		$this->fileName = $fileName;
		$this->lineNumber = $lineNumber;
	}
}

Boot::registerClass(Interp::class, 'hscript.Interp');
