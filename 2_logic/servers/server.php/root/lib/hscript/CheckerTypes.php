<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \haxe\rtti\XmlParser;
use \php\Boot;
use \haxe\Exception;
use \haxe\rtti\TypeTree;
use \haxe\rtti\CType as RttiCType;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;

class CheckerTypes {
	/**
	 * @var StringMap
	 */
	public $localParams;
	/**
	 * @var TType
	 */
	public $t_string;
	/**
	 * @var StringMap
	 */
	public $types;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:90: characters 38-47
		$this->types = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:95: characters 3-20
		$this->types = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:96: characters 3-35
		$this->types->data["Void"] = CTypedecl::CTAlias(TType::TVoid());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:97: characters 3-33
		$this->types->data["Int"] = CTypedecl::CTAlias(TType::TInt());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:98: characters 3-37
		$this->types->data["Float"] = CTypedecl::CTAlias(TType::TFloat());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:99: characters 3-35
		$this->types->data["Bool"] = CTypedecl::CTAlias(TType::TBool());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:100: characters 3-41
		$this->types->data["Dynamic"] = CTypedecl::CTAlias(TType::TDynamic());
	}

	/**
	 * @param \Xml $api
	 * 
	 * @return void
	 */
	public function addXmlApi ($api) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:104: characters 3-41
		$types = new XmlParser();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:105: characters 3-25
		$types->process($api, "");
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:106: characters 3-17
		$todo = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:107: lines 107-108
		$_g = 0;
		$_g1 = $types->root;
		while ($_g < $_g1->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:107: characters 8-9
			$v = ($_g1->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:107: lines 107-108
			++$_g;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:108: characters 4-22
			$this->addXmlType($v, $todo);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:109: lines 109-110
		$_g = 0;
		while ($_g < $todo->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:109: characters 8-9
			$f = ($todo->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:109: lines 109-110
			++$_g;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:110: characters 4-7
			$f();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:111: characters 3-31
		$this->t_string = $this->getType("String");
	}

	/**
	 * @param TypeTree $x
	 * @param \Closure[]|\Array_hx $todo
	 * 
	 * @return void
	 */
	public function addXmlType ($x, $todo) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:114: lines 114-221
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:115: lines 115-220
		$__hx__switch = ($x->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:116: characters 17-21
			$name = $x->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:116: characters 23-27
			$full = $x->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:116: characters 29-33
			$subs = $x->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:117: characters 4-39
			$_g = 0;
			while ($_g < $subs->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:117: characters 9-10
				$s = ($subs->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:117: characters 4-39
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:117: characters 21-39
				$this->addXmlType($s, $todo);
			}
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:118: characters 19-20
			$c = $x->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:119: characters 4-37
			if (\array_key_exists($c->path, $this->types->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:119: characters 31-37
				return;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:121: characters 12-18
			$c1 = $c->path;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:123: characters 14-23
			$cl = new StringMap();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:120: lines 120-125
			$cl1 = new _HxAnon_CheckerTypes0($c1, new \Array_hx(), $cl, new StringMap());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:126: lines 126-127
			if ($c->isInterface) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:127: characters 5-26
				$cl1->isInterface = true;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:128: lines 128-129
			$_g = 0;
			$_g1 = $c->params;
			while ($_g < $_g1->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:128: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:128: lines 128-129
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:129: characters 5-30
				$_this = $cl1->params;
				$_this->arr[$_this->length++] = TType::TParam($p);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:130: lines 130-170
			$todo->arr[$todo->length++] = function () use (&$c, &$cl1, &$_gthis) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 19-77
				$_g = new StringMap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 20-76
				$_g1 = 0;
				$_g2 = $cl1->params;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 25-26
					$t = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 20-76
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 42-76
					$key = ($c->path??'null') . "." . (Checker::typeStr($t)??'null');
					$_g->data[$key] = $t;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:131: characters 5-77
				$_gthis->localParams = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:132: lines 132-133
				if ($c->superClass !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 22-29
					$_gthis1 = $_gthis;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 30-47
					$c1 = $c->superClass->path;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 49-97
					$_g = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 50-96
					$_g1 = 0;
					$_g2 = $c->superClass->params;
					while ($_g1 < $_g2->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 55-56
						$t = ($_g2->arr[$_g1] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 50-96
						++$_g1;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 82-96
						$x = $_gthis->makeXmlType($t);
						$_g->arr[$_g->length++] = $x;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:133: characters 6-98
					$cl1->superClass = $_gthis1->getType($c1, $_g);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:134: lines 134-138
				if ($c->interfaces !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:135: characters 6-24
					$cl1->interfaces = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:136: lines 136-137
					$_g = 0;
					$_g1 = $c->interfaces;
					while ($_g < $_g1->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:136: characters 11-12
						$i = ($_g1->arr[$_g] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:136: lines 136-137
						++$_g;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 7-81
						$_this = $cl1->interfaces;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 26-33
						$_gthis1 = $_gthis;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 34-40
						$i1 = $i->path;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 42-79
						$_g2 = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 43-78
						$_g3 = 0;
						$_g4 = $i->params;
						while ($_g3 < $_g4->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 48-49
							$t = ($_g4->arr[$_g3] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 43-78
							++$_g3;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 64-78
							$x = $_gthis->makeXmlType($t);
							$_g2->arr[$_g2->length++] = $x;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:137: characters 7-81
						$x1 = $_gthis1->getType($i1, $_g2);
						$_this->arr[$_this->length++] = $x1;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:139: characters 5-20
				$pkeys = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:140: lines 140-168
				$_g = 0;
				$_g1 = $c->fields;
				while ($_g < $_g1->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:140: characters 10-11
					$f = ($_g1->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:140: lines 140-168
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:141: characters 6-97
					if ($f->isOverride || (\mb_substr($f->name, 0, 4) === "get_") || (\mb_substr($f->name, 0, 4) === "set_")) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:141: characters 89-97
						continue;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:142: characters 6-23
					$skip = false;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:143: characters 6-58
					$complete = !\StringTools::startsWith($f->name, "__");
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:144: lines 144-151
					$_g2 = 0;
					$_g3 = $f->meta;
					while ($_g2 < $_g3->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:144: characters 11-12
						$m = ($_g3->arr[$_g2] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:144: lines 144-151
						++$_g2;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:145: lines 145-148
						if ($m->name === ":noScript") {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:146: characters 8-19
							$skip = true;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:147: characters 8-13
							break;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:149: lines 149-150
						if ($m->name === ":noCompletion") {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:150: characters 8-24
							$complete = false;
						}
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:152: characters 6-25
					if ($skip) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:152: characters 17-25
						continue;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 60-65
					$_g4 = $f->set;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 60-71
					$fl = null;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 60-65
					$__hx__switch = ($_g4->index);
					if ($__hx__switch === 0 || $__hx__switch === 4) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 60-71
						$fl = true;
					} else if ($__hx__switch === 2) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 88-89
						$_g5 = $_g4->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 60-71
						$fl = true;
					} else {
						$fl = false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:153: characters 6-164
					$fl1 = new _HxAnon_CheckerTypes1($f->isPublic, $fl, $complete, new \Array_hx(), $f->name, null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:154: lines 154-160
					$_g6 = 0;
					$_g7 = $f->params;
					while ($_g6 < $_g7->length) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:154: characters 11-12
						$p = ($_g7->arr[$_g6] ?? null);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:154: lines 154-160
						++$_g6;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:155: characters 7-26
						$pt = TType::TParam($p);
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:156: characters 7-30
						$key = ($f->name??'null') . "." . ($p??'null');
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:157: characters 7-22
						$pkeys->arr[$pkeys->length++] = $key;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:158: characters 7-25
						$_this = $fl1->params;
						$_this->arr[$_this->length++] = $pt;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:159: characters 7-31
						$_gthis->localParams->data[$key] = $pt;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:161: characters 6-32
					$fl1->t = $_gthis->makeXmlType($f->type);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:162: lines 162-163
					while ($pkeys->length > 0) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:163: characters 7-38
						$this1 = $_gthis->localParams;
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:163: characters 26-37
						if ($pkeys->length > 0) {
							$pkeys->length--;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:163: characters 7-38
						$this1->remove(\array_pop($pkeys->arr));
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:164: lines 164-167
					if ($fl1->name === "new") {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:165: characters 7-26
						$cl1->constructor = $fl1;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:167: characters 7-32
						$cl1->fields->data[$f->name] = $fl1;
					}
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:169: characters 5-23
				$_gthis->localParams = null;
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:171: characters 4-35
			$this->types->data[$cl1->name] = CTypedecl::CTClass($cl1);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:172: characters 18-19
			$e = $x->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:173: characters 4-37
			if (\array_key_exists($e->path, $this->types->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:173: characters 31-37
				return;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:174: lines 174-178
			$en = new _HxAnon_CheckerTypes2($e->path, new \Array_hx(), new \Array_hx());
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:179: lines 179-180
			$_g = 0;
			$_g1 = $e->params;
			while ($_g < $_g1->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:179: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:179: lines 179-180
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:180: characters 5-30
				$_this = $en->params;
				$_this->arr[$_this->length++] = TType::TParam($p);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:181: lines 181-186
			$todo->arr[$todo->length++] = function () use (&$e, &$_gthis, &$en) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 19-77
				$_g = new StringMap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 20-76
				$_g1 = 0;
				$_g2 = $en->params;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 25-26
					$t = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 20-76
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 42-76
					$key = ($e->path??'null') . "." . (Checker::typeStr($t)??'null');
					$_g->data[$key] = $t;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:182: characters 5-77
				$_gthis->localParams = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:183: lines 183-184
				$_g = 0;
				$_g1 = $e->constructors;
				while ($_g < $_g1->length) {
					unset($c);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:183: characters 10-11
					$c = ($_g1->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:183: lines 183-184
					++$_g;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 6-151
					$_this = $en->constructors;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 36-42
					$c1 = $c->name;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 51-148
					$x = null;
					if ($c->args === null) {
						$x = null;
					} else {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 75-148
						$_g2 = new \Array_hx();
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 76-147
						$_g3 = 0;
						$_g4 = $c->args;
						while ($_g3 < $_g4->length) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 81-82
							$a = ($_g4->arr[$_g3] ?? null);
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 76-147
							++$_g3;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 104-110
							$a1 = $a->name;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 118-123
							$a2 = $a->opt;
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 95-147
							$x1 = new _HxAnon_CheckerTypes3($a1, $a2, $_gthis->makeXmlType($a->t));
							$_g2->arr[$_g2->length++] = $x1;
						}
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 51-148
						$x = $_g2;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:184: characters 6-151
					$_this->arr[$_this->length++] = new _HxAnon_CheckerTypes4($c1, $x);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:185: characters 5-23
				$_gthis->localParams = null;
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:187: characters 4-34
			$this->types->data[$en->name] = CTypedecl::CTEnum($en);
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:188: characters 18-19
			$t = $x->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:189: characters 4-37
			if (\array_key_exists($t->path, $this->types->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:189: characters 31-37
				return;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:190: lines 190-194
			$td = new _HxAnon_CheckerTypes5($t->path, new \Array_hx(), null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:195: lines 195-196
			$_g = 0;
			$_g1 = $t->params;
			while ($_g < $_g1->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:195: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:195: lines 195-196
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:196: characters 5-30
				$_this = $td->params;
				$_this->arr[$_this->length++] = TType::TParam($p);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:197: lines 197-198
			if ($t->path === "hscript.TypeCheck") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:198: characters 5-24
				$_this = $td->params;
				$_this->arr = \array_reverse($_this->arr);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:199: lines 199-203
			$todo->arr[$todo->length++] = function () use (&$t, &$_gthis, &$td) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 19-80
				$_g = new StringMap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 20-79
				$_g1 = 0;
				$_g2 = $td->params;
				while ($_g1 < $_g2->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 25-27
					$pt = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 20-79
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 43-79
					$key = ($t->path??'null') . "." . (Checker::typeStr($pt)??'null');
					$_g->data[$key] = $pt;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:200: characters 5-80
				$_gthis->localParams = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:201: characters 5-31
				$td->t = $_gthis->makeXmlType($t->type);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:202: characters 5-23
				$_gthis->localParams = null;
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:204: characters 4-36
			$this->types->data[$t->path] = CTypedecl::CTTypedef($td);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:205: characters 22-23
			$a = $x->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:206: characters 4-37
			if (\array_key_exists($a->path, $this->types->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:206: characters 31-37
				return;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:207: lines 207-211
			$ta = new _HxAnon_CheckerTypes5($a->path, new \Array_hx(), null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:212: lines 212-213
			$_g = 0;
			$_g1 = $a->params;
			while ($_g < $_g1->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:212: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:212: lines 212-213
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:213: characters 5-30
				$_this = $ta->params;
				$_this->arr[$_this->length++] = TType::TParam($p);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:214: lines 214-218
			$todo->arr[$todo->length++] = function () use (&$ta, &$_gthis, &$a) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 19-77
				$_g = new StringMap();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 20-76
				$_g1 = 0;
				$_g2 = $ta->params;
				while ($_g1 < $_g2->length) {
					unset($t);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 25-26
					$t = ($_g2->arr[$_g1] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 20-76
					++$_g1;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 42-76
					$key = ($a->path??'null') . "." . (Checker::typeStr($t)??'null');
					$_g->data[$key] = $t;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:215: characters 5-77
				$_gthis->localParams = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:216: characters 5-32
				$ta->t = $_gthis->makeXmlType($a->athis);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:217: characters 5-23
				$_gthis->localParams = null;
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:219: characters 4-37
			$this->types->data[$a->path] = CTypedecl::CTAbstract($ta);
		}
	}

	/**
	 * @param string $name
	 * @param TType[]|\Array_hx $args
	 * 
	 * @return TType
	 */
	public function getType ($name, $args = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:248: lines 248-251
		if ($this->localParams !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:249: characters 4-34
			$t = ($this->localParams->data[$name] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:250: characters 4-28
			if ($t !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:250: characters 20-28
				return $t;
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:252: characters 3-30
		$t = $this->resolve($name, $args);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:253: lines 253-264
		if ($t === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:254: characters 4-31
			$pack = HxString::split($name, ".");
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:255: lines 255-262
			if ($pack->length > 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:257: characters 5-36
				$priv = ($pack->arr[$pack->length - 2] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:258: lines 258-261
				if (HxString::charCodeAt($priv, 0) === 95) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:259: characters 6-23
					$pack->remove($priv);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:260: characters 6-42
					return $this->getType($pack->join("."), $args);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:263: characters 4-28
			return TType::TUnresolved($name);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:265: characters 3-11
		return $t;
	}

	/**
	 * @param RttiCType $t
	 * 
	 * @return TType
	 */
	public function makeXmlType ($t) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:224: lines 224-244
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:225: characters 18-40
			return TType::TUnresolved("Unknown");
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 14-18
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 20-26
			$params = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 42-77
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 43-76
			$_g1 = 0;
			while ($_g1 < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 48-49
				$t1 = ($params->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 43-76
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 62-76
				$x = $this->makeXmlType($t1);
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:226: characters 29-78
			return $this->getType($name, $_g);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 15-19
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 21-27
			$params = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 43-78
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 44-77
			$_g1 = 0;
			while ($_g1 < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 49-50
				$t1 = ($params->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 44-77
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 63-77
				$x = $this->makeXmlType($t1);
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:227: characters 30-79
			return $this->getType($name, $_g);
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 17-21
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 23-29
			$params = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 45-80
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 46-79
			$_g1 = 0;
			while ($_g1 < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 51-52
				$t1 = ($params->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 46-79
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 65-79
				$x = $this->makeXmlType($t1);
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:228: characters 32-81
			return $this->getType($name, $_g);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 18-22
			$args = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 24-27
			$ret = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 35-106
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 36-105
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 41-42
				$a = ($args->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 36-105
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 62-68
				$a1 = $a->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 76-81
				$a2 = $a->opt;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 53-105
				$x = new _HxAnon_CheckerTypes3($a1, $a2, $this->makeXmlType($a->t));
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:229: characters 30-125
			return TType::TFun($_g, $this->makeXmlType($ret));
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:230: characters 19-25
			$fields = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 10-94
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 11-93
			$_g1 = 0;
			while ($_g1 < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 16-17
				$f = ($fields->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 11-93
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 39-45
				$f1 = $f->name;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 51-70
				$x = $this->makeXmlType($f->type);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 78-91
				$m = $f->meta;
				$x1 = null;
				if ($m === null) {
					$x1 = false;
				} else {
					$b = false;
					$_g2 = 0;
					while ($_g2 < $m->length) {
						$m1 = ($m->arr[$_g2] ?? null);
						++$_g2;
						if ($m1->name === ":optional") {
							$b = true;
							break;
						}
					}
					$x1 = $b;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 30-93
				$_g->arr[$_g->length++] = new _HxAnon_CheckerTypes6($f1, $x, $x1);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:237: characters 4-95
			return TType::TAnon($_g);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:238: characters 17-18
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:238: characters 21-29
			return TType::TDynamic();
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:239: characters 18-22
			$name = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:239: characters 24-30
			$params = $t->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 18-53
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 19-52
			$_g1 = 0;
			while ($_g1 < $params->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 24-25
				$t = ($params->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 19-52
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 38-52
				$x = $this->makeXmlType($t);
				$_g->arr[$_g->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:242: characters 5-54
			return $this->getType($name, $_g);
		}
	}

	/**
	 * @param string $name
	 * @param TType[]|\Array_hx $args
	 * 
	 * @return TType
	 */
	public function resolve ($name, $args = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:269: lines 269-272
		if ($name === "Null") {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:270: characters 4-48
			if (($args === null) || ($args->length !== 1)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:270: characters 43-48
				throw Exception::thrown("Missing Null<T> parameter");
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:271: characters 4-25
			return TType::TNull(($args->arr[0] ?? null));
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:273: characters 3-27
		$t = ($this->types->data[$name] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:274: characters 3-30
		if ($t === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:274: characters 19-30
			return null;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:275: characters 3-31
		if ($args === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:275: characters 22-31
			$args = new \Array_hx();
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:276: lines 276-282
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:277: characters 16-17
			$c = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:277: characters 20-33
			return TType::TInst($c, $args);
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:278: characters 15-16
			$e = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:278: characters 19-32
			return TType::TEnum($e, $args);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:279: characters 18-19
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:279: characters 22-35
			return TType::TType($t1, $args);
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:281: characters 16-17
			$t1 = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:281: characters 20-21
			return $t1;
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:280: characters 19-20
			$a = $t->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Checker.hx:280: characters 23-41
			return TType::TAbstract($a, $args);
		}
	}
}

class _HxAnon_CheckerTypes0 extends HxAnon {
	function __construct($name, $params, $fields, $statics) {
		$this->name = $name;
		$this->params = $params;
		$this->fields = $fields;
		$this->statics = $statics;
	}
}

class _HxAnon_CheckerTypes1 extends HxAnon {
	function __construct($isPublic, $canWrite, $complete, $params, $name, $t) {
		$this->isPublic = $isPublic;
		$this->canWrite = $canWrite;
		$this->complete = $complete;
		$this->params = $params;
		$this->name = $name;
		$this->t = $t;
	}
}

class _HxAnon_CheckerTypes2 extends HxAnon {
	function __construct($name, $params, $constructors) {
		$this->name = $name;
		$this->params = $params;
		$this->constructors = $constructors;
	}
}

class _HxAnon_CheckerTypes3 extends HxAnon {
	function __construct($name, $opt, $t) {
		$this->name = $name;
		$this->opt = $opt;
		$this->t = $t;
	}
}

class _HxAnon_CheckerTypes4 extends HxAnon {
	function __construct($name, $args) {
		$this->name = $name;
		$this->args = $args;
	}
}

class _HxAnon_CheckerTypes5 extends HxAnon {
	function __construct($name, $params, $t) {
		$this->name = $name;
		$this->params = $params;
		$this->t = $t;
	}
}

class _HxAnon_CheckerTypes6 extends HxAnon {
	function __construct($name, $t, $opt) {
		$this->name = $name;
		$this->t = $t;
		$this->opt = $opt;
	}
}

Boot::registerClass(CheckerTypes::class, 'hscript.CheckerTypes');
