<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;

class AsyncInterp extends Interp {
	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:435: lines 435-536
		parent::__construct();
	}

	/**
	 * @param string $id
	 * @param mixed[]|\Array_hx $args
	 * @param \Closure $onResult
	 * @param object $vthis
	 * 
	 * @return void
	 */
	public function callAsync ($id, $args, $onResult = null, $vthis = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:486: characters 3-29
		$v = ($this->variables->data[$id] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:487: lines 487-488
		if ($v === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:488: characters 4-9
			throw Exception::thrown("Missing function " . ($id??'null') . "()");
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:489: characters 3-38
		$this->callValue($v, $args, $onResult, $vthis);
	}

	/**
	 * @param mixed $value
	 * @param mixed[]|\Array_hx $args
	 * @param \Closure $onResult
	 * @param object $vthis
	 * 
	 * @return void
	 */
	public function callValue ($value, $args, $onResult = null, $vthis = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:475: characters 3-39
		$oldThis = ($this->variables->data["this"] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:476: lines 476-477
		if ($vthis !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:477: characters 4-32
			$this->variables->data["this"] = $vthis;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:478: lines 478-479
		if ($onResult === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:479: characters 4-29
			$onResult = function ($_) {
			};
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:480: characters 3-25
		$args->length = \array_unshift($args->arr, $onResult);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:481: characters 3-40
		\Reflect::callMethod(null, $value, $args);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:482: characters 3-33
		$this->variables->data["this"] = $oldThis;
	}

	/**
	 * @param mixed $o
	 * @param string $f
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return mixed
	 */
	public function fcall ($o, $f, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:506: characters 3-31
		$m = \Reflect::field($o, $f);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:507: lines 507-532
		if ($m === null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:508: lines 508-530
			if (\mb_substr($f, 0, 2) === "a_") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:509: characters 5-38
				$m = \Reflect::field($o, \mb_substr($f, 2, null));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:511: lines 511-515
				if ($m !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:512: characters 18-30
					if ($args->length > 0) {
						$args->length--;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:512: characters 6-31
					$onEnd = \array_shift($args->arr);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:513: characters 6-29
					$onEnd($this->call($o, $m, $args));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:514: characters 6-17
					return null;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:517: characters 5-39
				$m = \Reflect::field($o, "scriptCall");
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:518: lines 518-521
				if ($m !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:519: characters 18-30
					if ($args->length > 0) {
						$args->length--;
					}
					$tmp = \array_shift($args->arr);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:519: characters 6-51
					$this->call($o, $m, \Array_hx::wrap([
						$tmp,
						\mb_substr($f, 2, null),
						$args,
					]));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:520: characters 6-17
					return null;
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:524: characters 5-39
				$m = \Reflect::field($o, "scriptCall");
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:525: lines 525-529
				if ($m !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:526: characters 6-34
					$result = null;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:527: characters 6-51
					$this->call($o, $m, \Array_hx::wrap([
						function ($r) use (&$result) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:527: characters 30-40
							$result = $r;
						},
						$f,
						$args,
					]));
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:528: characters 6-19
					return $result;
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:531: characters 4-45
			$e = ErrorDef::ECustom(\Std::string($o) . " has no method " . ($f??'null'));
			$e1 = new Error($e, $this->curExpr->pmin, $this->curExpr->pmax, $this->curExpr->origin, $this->curExpr->line);
			throw Exception::thrown($e1);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:533: characters 3-26
		return $this->call($o, $m, $args);
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function hasMethod ($name) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:470: characters 3-31
		$v = ($this->variables->data[$name] ?? null);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:471: characters 10-44
		if ($v !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:471: characters 23-44
			if (!($v instanceof \Closure)) {
				return ($v instanceof HxClosure);
			} else {
				return true;
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:471: characters 10-44
			return false;
		}
	}

	/**
	 * @param mixed $api
	 * 
	 * @return void
	 */
	public function setContext ($api) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:439: characters 3-26
		$funs = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:440: characters 13-29
		$data = \array_values(\array_map("strval", \array_keys($this->variables->data)));
		$v_current = 0;
		$v_length = \count($data);
		$v_data = $data;
		while ($v_current < $v_length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:440: lines 440-442
			$v = $v_data[$v_current++];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:441: characters 8-44
			$f = ($this->variables->data[$v] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:441: lines 441-442
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:442: characters 5-37
				$funs->arr[$funs->length++] = new _HxAnon_AsyncInterp0($v, null);
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:444: characters 3-32
		$this->variables->data["split"] = Boot::getInstanceClosure($this, 'split');
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:445: characters 3-46
		$this->variables->data["makeIterator"] = Boot::getInstanceClosure($this, 'makeIterator');
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:447: characters 3-30
		$c = \Type::getClass($api);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:448: lines 448-456
		$_g = 0;
		$_g1 = ($c === null ? \Reflect::fields($api) : \Type::getInstanceFields($c));
		while ($_g < $_g1->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:448: characters 8-9
			$f = ($_g1->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:448: lines 448-456
			++$_g;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:449: characters 4-35
			$fv = \Reflect::field($api, $f);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:450: characters 9-31
			$f1 = $fv;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:450: characters 4-42
			if (!(($f1 instanceof \Closure) || ($f1 instanceof HxClosure))) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:450: characters 34-42
				continue;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:451: characters 4-53
			if (HxString::charCodeAt($f, 0) === 95) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:451: characters 42-53
				$f = \mb_substr($f, 1, null);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:452: characters 4-24
			$this->variables->data[$f] = $fv;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:454: lines 454-455
			if (\mb_substr($f, 0, 2) !== "a_") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:455: characters 5-36
				$funs->arr[$funs->length++] = new _HxAnon_AsyncInterp0($f, $api);
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:458: lines 458-466
		$_g = 0;
		while ($_g < $funs->length) {
			unset($fv, $obj);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:458: characters 8-9
			$v = ($funs->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:458: lines 458-466
			++$_g;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:459: characters 4-47
			if (\array_key_exists("a_" . ($v->v??'null'), $this->variables->data)) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:459: characters 39-47
				continue;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:460: characters 4-42
			$fv = ($this->variables->data[$v->v] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:461: characters 4-20
			$obj = $v->obj;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:462: lines 462-465
			$this1 = $this->variables;
			$key = "a_" . ($v->v??'null');
			$value = \Reflect::makeVarArgs(function ($args) use (&$fv, &$obj) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:463: characters 17-29
				if ($args->length > 0) {
					$args->length--;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:463: characters 5-30
				$onEnd = \array_shift($args->arr);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:464: characters 5-45
				$onEnd(\Reflect::callMethod($obj, $fv, $args));
			});
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:462: lines 462-465
			$this1->data[$key] = $value;
		}
	}

	/**
	 * @param \Closure $rest
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return void
	 */
	public function split ($rest, $args) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:493: lines 493-502
		if ($args->length === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:494: characters 4-14
			$rest(null);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:496: characters 4-28
			$count = $args->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:497: lines 497-499
			$next = function ($_) use (&$count, &$rest) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:498: characters 5-34
				if (($count -= 1) === 0) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:498: characters 24-34
					$rest(null);
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:500: lines 500-501
			$_g = 0;
			while ($_g < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:500: characters 9-10
				$a = ($args->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:500: lines 500-501
				++$_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:501: characters 5-12
				$a($next);
			}
		}
	}
}

class _HxAnon_AsyncInterp0 extends HxAnon {
	function __construct($v, $obj) {
		$this->v = $v;
		$this->obj = $obj;
	}
}

Boot::registerClass(AsyncInterp::class, 'hscript.AsyncInterp');
