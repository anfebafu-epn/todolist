<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace hscript;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;

class Async {
	/**
	 * @var object
	 */
	static public $nullExpr;
	/**
	 * @var object
	 */
	static public $nullId;

	/**
	 * @var StringMap
	 */
	public $asyncIdents;
	/**
	 * @var \Closure
	 */
	public $currentBreak;
	/**
	 * @var string
	 */
	public $currentFun;
	/**
	 * @var object
	 */
	public $currentLoop;
	/**
	 * @var object[]|\Array_hx
	 */
	public $definedVars;
	/**
	 * @var \Closure
	 */
	public $getTopLevelEnd;
	/**
	 * @var bool
	 */
	public $syncFlag;
	/**
	 * @var int
	 */
	public $uid;
	/**
	 * @var StringMap
	 */
	public $vars;

	/**
	 * @param object $e
	 * 
	 * @return ExprDef
	 */
	public static function expr ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:45: characters 3-28
		return $e->e;
	}

	/**
	 * @param ExprDef $e
	 * @param object $inf
	 * 
	 * @return object
	 */
	public static function mk ($e, $inf) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:49: characters 3-106
		return new _HxAnon_Async0($e, $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}

	/**
	 * Convert a script into asynchronous one.
	 * - calls such as foo(a,b,c) are translated to a_foo(function(r) ...rest, a,b,c) where r is the result value
	 * - object access such obj.bar(a,b,c) are translated to obj.a_bar(function(r) ...rest, a, b, c)
	 * - @async expr will execute the expression but continue without waiting for it to finish
	 * - @split [ e1, e2, e3 ] is transformed to split(function(_) ...rest, [e1, e2, e3]) which
	 * should execute asynchronously all expressions - until they return - before continuing the execution
	 * - for(i in v) block; loops are translated to the following:
	 * var _i = makeIterator(v);
	 * function _loop() {
	 * if( !_i.hasNext() ) return;
	 * var v = _i.next();
	 * block(function(_) _loop());
	 * }
	 * _loop()
	 * - while loops are translated similar to for loops
	 * - break and continue are correctly handled
	 * - you can use @sync <expr> to disable async transformation in some code parts (for performance reason)
	 * - a few expressions are still not supported (complex calls, try/catch, and a few others)
	 * In these examples ...rest represents the continuation of execution of the script after the expression
	 * 
	 * @param object $e
	 * @param bool $topLevelSync
	 * 
	 * @return object
	 */
	public static function toAsync ($e, $topLevelSync = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:74: lines 74-77
		if ($topLevelSync === null) {
			$topLevelSync = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:75: characters 3-23
		$a = new Async();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:76: characters 3-34
		return $a->build($e, $topLevelSync);
	}

	/**
	 * @return void
	 */
	public function __construct () {
		if (!$this->__hx__default__getTopLevelEnd) {
			$this->__hx__default__getTopLevelEnd = new HxClosure($this, 'getTopLevelEnd');
			if ($this->getTopLevelEnd === null) $this->getTopLevelEnd = $this->__hx__default__getTopLevelEnd;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:38: characters 12-13
		$this->uid = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:142: characters 3-19
		$this->vars = new StringMap();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:143: characters 3-19
		$this->definedVars = new \Array_hx();
	}

	/**
	 * @param string $op
	 * @param object $e1
	 * @param object $e2
	 * @param object $inf
	 * 
	 * @return object
	 */
	public function binop ($op, $e1, $e2, $inf) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:174: characters 3-37
		return new _HxAnon_Async0(ExprDef::EBinop($op, $e1, $e2), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}

	/**
	 * @param object[]|\Array_hx $arr
	 * @param object $e
	 * 
	 * @return object
	 */
	public function block ($arr, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:164: characters 7-55
		$tmp = null;
		if ($arr->length === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:164: characters 26-38
			$_g = ($arr->arr[0] ?? null)->e;
			if ($_g->index === 4) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:164: characters 52-53
				$_g1 = $_g->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:164: characters 7-55
				$tmp = true;
			} else {
				$tmp = false;
			}
		} else {
			$tmp = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:164: lines 164-165
		if ($tmp) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:165: characters 4-17
			return ($arr->arr[0] ?? null);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:166: characters 3-28
		return new _HxAnon_Async0(ExprDef::EBlock($arr), $e->pmin, $e->pmax, $e->origin, $e->line);
	}

	/**
	 * @param object $e
	 * @param bool $topLevelSync
	 * 
	 * @return object
	 */
	public function build ($e, $topLevelSync = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:84: lines 84-89
		if ($topLevelSync === null) {
			$topLevelSync = false;
		}
		if ($topLevelSync) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:85: characters 4-28
			return $this->buildSync($e, null);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:87: characters 4-31
			$end = $this->getTopLevelEnd();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:88: characters 4-29
			return $this->toCps($e, $end, $end);
		}
	}

	/**
	 * @param object $e
	 * @param object $exit
	 * 
	 * @return object
	 */
	public function buildSync ($e, $exit) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:107: characters 11-18
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:112: characters 15-17
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:113: characters 4-23
			$v = $this->saveVars();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:114: characters 4-23
			$this->lookupFunctions($el);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 18-50
			$_g1 = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 19-49
			$_g2 = 0;
			while ($_g2 < $el->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 23-24
				$e1 = ($el->arr[$_g2] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 19-49
				++$_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 32-49
				$x = $this->buildSync($e1, $exit);
				$_g1->arr[$_g1->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 12-54
			$arr = $_g1;
			$e1 = null;
			if ($arr->length === 1) {
				$_g1 = ($arr->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$e1 = true;
				} else {
					$e1 = false;
				}
			} else {
				$e1 = false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:115: characters 4-55
			$e2 = ($e1 ? ($arr->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr), $e->pmin, $e->pmax, $e->origin, $e->line));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:116: characters 4-18
			$this->restoreVars($v);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:117: characters 4-12
			return $e2;
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:126: characters 24-25
			$_g1 = $_g->params[0];
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:127: characters 4-55
			$oldLoop = $this->currentLoop;
			$oldBreak = $this->currentBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:128: characters 4-22
			$this->currentLoop = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:129: characters 4-23
			$this->currentBreak = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 21-30
			$_g1 = Boot::getInstanceClosure($this, 'buildSync');
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 39-43
			$exit1 = $exit;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 4-45
			$e = Tools::map($e, function ($e) use (&$_g1, &$exit1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 21-35
				return $_g1($e, $exit1);
			});
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:131: characters 4-25
			$this->currentLoop = $oldLoop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:132: characters 4-27
			$this->currentBreak = $oldBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:133: characters 4-12
			return $e;
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:126: characters 13-14
			$_g2 = $_g->params[0];
			$_g2 = $_g->params[1];
			$_g2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:127: characters 4-55
			$oldLoop = $this->currentLoop;
			$oldBreak = $this->currentBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:128: characters 4-22
			$this->currentLoop = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:129: characters 4-23
			$this->currentBreak = null;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 21-30
			$_g2 = Boot::getInstanceClosure($this, 'buildSync');
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 39-43
			$exit2 = $exit;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 4-45
			$e = Tools::map($e, function ($e) use (&$_g2, &$exit2) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:130: characters 21-35
				return $_g2($e, $exit2);
			});
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:131: characters 4-25
			$this->currentLoop = $oldLoop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:132: characters 4-27
			$this->currentBreak = $oldBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:133: characters 4-12
			return $e;
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:122: lines 122-137
			if ($this->currentBreak !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:123: characters 4-26
				return ($this->currentBreak)($e);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
				$_g3 = Boot::getInstanceClosure($this, 'buildSync');
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
				$exit3 = $exit;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
				return Tools::map($e, function ($e) use (&$exit3, &$_g3) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
					return $_g3($e, $exit3);
				});
			}
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:124: lines 124-137
			if ($this->currentLoop !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:125: characters 18-41
				$arr = $this->retNull($this->currentLoop, $e);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:125: characters 11-62
				$arr1 = \Array_hx::wrap([
					$arr,
					new _HxAnon_Async0(ExprDef::EReturn(), $e->pmin, $e->pmax, $e->origin, $e->line),
				]);
				$tmp = null;
				if ($arr1->length === 1) {
					$_g4 = ($arr1->arr[0] ?? null)->e;
					if ($_g4->index === 4) {
						$_g5 = $_g4->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr1->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
				$_g4 = Boot::getInstanceClosure($this, 'buildSync');
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
				$exit4 = $exit;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
				return Tools::map($e, function ($e) use (&$exit4, &$_g4) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
					return $_g4($e, $exit4);
				});
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:108: characters 18-19
			$_g5 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:108: characters 20-21
			$_g5 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:108: characters 27-28
			$_g5 = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:108: characters 22-26
			$name = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:109: lines 109-110
			if ($name !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:110: characters 5-32
				return $this->toCps($e, null, null);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:111: characters 4-12
			return $e;
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:134: characters 16-20
			$eret = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:134: lines 134-137
			if ($exit !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:135: characters 18-72
				$arr = ($eret === null ? $this->retNull($exit, $e) : new _HxAnon_Async0(ExprDef::ECall($exit, \Array_hx::wrap([$eret])), $e->pmin, $e->pmax, $e->origin, $e->line));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:135: characters 11-94
				$arr1 = \Array_hx::wrap([
					$arr,
					new _HxAnon_Async0(ExprDef::EReturn(), $e->pmin, $e->pmax, $e->origin, $e->line),
				]);
				$tmp = null;
				if ($arr1->length === 1) {
					$_g5 = ($arr1->arr[0] ?? null)->e;
					if ($_g5->index === 4) {
						$_g6 = $_g5->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr1->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
				$_g5 = Boot::getInstanceClosure($this, 'buildSync');
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
				$exit5 = $exit;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
				return Tools::map($e, function ($e) use (&$_g5, &$exit5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
					return $_g5($e, $exit5);
				});
			}
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 22-26
			$_g6 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 28-77
			$_g7 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 14-20
			$__hx__switch = ($_g->params[0]);
			if ($__hx__switch === "async") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:118: characters 26-27
				$e1 = $_g7;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:119: characters 4-39
				return $this->toCps($e1, $this->ignore(), $this->ignore());
			} else if ($__hx__switch === "sync") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 33-40
				$_hx_tmp = $_g7->e;
				if ($_hx_tmp->index === 14) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 22-26
					$args = $_g6;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 28-77
					$ef = $_g7;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 54-59
					$fargs = $_hx_tmp->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 61-65
					$body = $_hx_tmp->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 67-71
					$name = $_hx_tmp->params[2];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:120: characters 73-76
					$ret = $_hx_tmp->params[3];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:121: characters 32-88
					$e1 = ExprDef::EFunction($fargs, $this->buildSync($body, null), $name, $ret);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:121: characters 11-92
					return new _HxAnon_Async0(ExprDef::EMeta("sync", $args, new _HxAnon_Async0($e1, $ef->pmin, $ef->pmax, $ef->origin, $ef->line)), $e->pmin, $e->pmax, $e->origin, $e->line);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
					$_g = Boot::getInstanceClosure($this, 'buildSync');
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
					$exit6 = $exit;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
					return Tools::map($e, function ($e) use (&$exit6, &$_g) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
						return $_g($e, $exit6);
					});
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
				$_g6 = Boot::getInstanceClosure($this, 'buildSync');
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
				$exit7 = $exit;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
				return Tools::map($e, function ($e) use (&$exit7, &$_g6) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
					return $_g6($e, $exit7);
				});
			}
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-33
			$_g7 = Boot::getInstanceClosure($this, 'buildSync');
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 42-46
			$exit8 = $exit;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 4-48
			return Tools::map($e, function ($e) use (&$exit8, &$_g7) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:137: characters 24-38
				return $_g7($e, $exit8);
			});
		}
	}

	/**
	 * @param object $e
	 * @param object[]|\Array_hx $args
	 * @param object $inf
	 * 
	 * @return object
	 */
	public function call ($e, $args, $inf) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:178: characters 3-33
		return new _HxAnon_Async0(ExprDef::ECall($e, $args), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}

	/**
	 * @param object $e
	 * 
	 * @return void
	 */
	public function checkSync ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:216: lines 216-217
		if (!$this->syncFlag) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:217: characters 4-10
			return;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:218: characters 11-18
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:221: characters 37-38
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:219: characters 14-21
			$_hx_tmp = $_g->params[0]->e;
			$__hx__switch = ($_hx_tmp->index);
			if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:219: characters 32-33
				$i = $_hx_tmp->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:219: lines 219-228
				if (($this->asyncIdents === null) || \array_key_exists($i, $this->asyncIdents->data) || (($this->vars->data[$i] ?? null) === VarMode::Defined())) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:220: characters 4-20
					$this->syncFlag = false;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:228: characters 4-28
					Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
				}
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:221: characters 32-33
				$_g1 = $_hx_tmp->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:221: characters 34-35
				$i = $_hx_tmp->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:221: lines 221-228
				if (($this->asyncIdents === null) || \array_key_exists($i, $this->asyncIdents->data)) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:222: characters 4-20
					$this->syncFlag = false;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:228: characters 4-28
					Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
				}
			} else {
				Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:223: characters 18-19
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:223: characters 20-21
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:223: characters 27-28
			$_g1 = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:223: characters 22-26
			$name = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:223: lines 223-228
			if ($name !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:224: characters 4-20
				$this->syncFlag = false;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:228: characters 4-28
				Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
			}
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:225: characters 32-33
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:225: characters 35-36
			$_g1 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:225: characters 14-30
			$__hx__switch = ($_g->params[0]);
			if ($__hx__switch === "async" || $__hx__switch === "sync") {
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:228: characters 4-28
				Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
			}
		} else {
			Tools::iter($e, Boot::getInstanceClosure($this, 'checkSync'));
		}
	}

	/**
	 * @param string $v
	 * @param VarMode $mode
	 * 
	 * @return void
	 */
	public function defineVar ($v, $mode) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:93: characters 3-50
		$_this = $this->definedVars;
		$x = new _HxAnon_Async1($v, ($this->vars->data[$v] ?? null));
		$_this->arr[$_this->length++] = $x;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:94: characters 3-20
		$this->vars->data[$v] = $mode;
	}

	/**
	 * @param object $e
	 * @param string $f
	 * @param object $inf
	 * 
	 * @return object
	 */
	public function field ($e, $f, $inf) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:170: characters 3-31
		return new _HxAnon_Async0(ExprDef::EField($e, $f), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}

	/**
	 * @param string $arg
	 * @param object $e
	 * @param string $name
	 * 
	 * @return object
	 */
	public function fun ($arg, $e, $name = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:156: characters 3-63
		return new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($arg, null)]), $e, $name), $e->pmin, $e->pmax, $e->origin, $e->line);
	}

	/**
	 * @param string[]|\Array_hx $arg
	 * @param object $e
	 * @param string $name
	 * 
	 * @return object
	 */
	public function funs ($arg, $e, $name = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 23-63
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 24-62
		$_g1 = 0;
		while ($_g1 < $arg->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 29-30
			$a = ($arg->arr[$_g1] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 24-62
			++$_g1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 40-62
			$_g->arr[$_g->length++] = new _HxAnon_Async2($a, null);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:160: characters 10-77
		return new _HxAnon_Async0(ExprDef::EFunction($_g, $e, $name), $e->pmin, $e->pmax, $e->origin, $e->line);
	}

	/**
	 * @return object
	 */
	public function getTopLevelEnd ()
	{
		if ($this->getTopLevelEnd !== $this->__hx__default__getTopLevelEnd) return call_user_func_array($this->getTopLevelEnd, func_get_args());
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:80: characters 3-18
		return $this->ignore();
	}
	protected $__hx__default__getTopLevelEnd;

	/**
	 * @param string $str
	 * @param object $e
	 * 
	 * @return object
	 */
	public function ident ($str, $e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:152: characters 3-28
		return new _HxAnon_Async0(ExprDef::EIdent($str), $e->pmin, $e->pmax, $e->origin, $e->line);
	}

	/**
	 * @param object $e
	 * 
	 * @return object
	 */
	public function ignore ($e = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:147: characters 3-38
		$inf = ($e === null ? Async::$nullExpr : $e);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:148: characters 19-50
		$arr = ($e === null ? new \Array_hx() : \Array_hx::wrap([$e]));
		$e = null;
		if ($arr->length === 1) {
			$_g = ($arr->arr[0] ?? null)->e;
			if ($_g->index === 4) {
				$_g1 = $_g->params[0];
				$e = true;
			} else {
				$e = false;
			}
		} else {
			$e = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:148: characters 10-51
		$e1 = ($e ? ($arr->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr), $inf->pmin, $inf->pmax, $inf->origin, $inf->line));
		return new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_", null)]), $e1, null), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
	}

	/**
	 * @param string $id
	 * 
	 * @return bool
	 */
	public function isAsyncIdent ($id) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:212: characters 10-55
		if ($this->asyncIdents !== null) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:212: characters 33-55
			return \array_key_exists($id, $this->asyncIdents->data);
		} else {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:212: characters 10-55
			return true;
		}
	}

	/**
	 * @param object $e
	 * 
	 * @return bool
	 */
	public function isSync ($e) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:206: characters 3-18
		$this->syncFlag = true;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:207: characters 3-15
		$this->checkSync($e);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:208: characters 3-18
		return $this->syncFlag;
	}

	/**
	 * @param object[]|\Array_hx $el
	 * 
	 * @return void
	 */
	public function lookupFunctions ($el) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:98: lines 98-103
		$_g = 0;
		while ($_g < $el->length) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:98: characters 8-9
			$e = ($el->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:98: lines 98-103
			++$_g;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:99: characters 12-19
			$_g1 = $e->e;
			$__hx__switch = ($_g1->index);
			if ($__hx__switch === 14) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: characters 19-20
				$_g2 = $_g1->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: characters 22-23
				$_g3 = $_g1->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: characters 31-32
				$_g4 = $_g1->params[3];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: characters 25-29
				$name = $_g1->params[2];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: lines 100-102
				if ($name !== null) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:100: characters 54-78
					$this->defineVar($name, VarMode::Defined());
				}
			} else if ($__hx__switch === 25) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 22-23
				$_g5 = $_g1->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 15-21
				if ($_g1->params[0] === "sync") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 24-31
					$_hx_tmp = $_g1->params[2]->e;
					if ($_hx_tmp->index === 14) {
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 45-46
						$_g6 = $_hx_tmp->params[0];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 47-48
						$_g7 = $_hx_tmp->params[1];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 54-55
						$_g8 = $_hx_tmp->params[3];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 49-53
						$name1 = $_hx_tmp->params[2];
						#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: lines 101-102
						if ($name1 !== null) {
							#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:101: characters 78-104
							$this->defineVar($name1, VarMode::ForceSync());
						}
					}
				}
			} else {
			}
		}
	}

	/**
	 * @param object $ecall
	 * @param object[]|\Array_hx $args
	 * @param object $rest
	 * @param object $exit
	 * @param bool $sync
	 * 
	 * @return object
	 */
	public function makeCall ($ecall, $args, $rest, $exit, $sync = false) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:189: lines 189-201
		if ($sync === null) {
			$sync = false;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 15-55
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 26-30
		$_g1 = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 30-41
		$_g2 = $args->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 16-54
		while ($_g1 < $_g2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 26-41
			$i = $_g1++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 44-54
			$_g->arr[$_g->length++] = "_a" . ($this->uid++);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:190: characters 3-56
		$names = $_g;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 15-66
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 26-30
		$_g1 = 0;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 30-41
		$_g2 = $args->length;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 16-65
		while ($_g1 < $_g2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 26-41
			$i = $_g1++;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 44-65
			$x = new _HxAnon_Async0(ExprDef::EIdent(($names->arr[$i] ?? null)), $ecall->pmin, $ecall->pmax, $ecall->origin, $ecall->line);
			$_g->arr[$_g->length++] = $x;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:191: characters 3-67
		$rargs = $_g;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:192: lines 192-193
		if (!$sync) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:193: characters 4-23
			$rargs->length = \array_unshift($rargs->arr, $rest);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:194: characters 3-93
		$rest1 = new _HxAnon_Async0(($sync ? ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::ECall($ecall, $rargs), $ecall->pmin, $ecall->pmax, $ecall->origin, $ecall->line)])) : ExprDef::ECall($ecall, $rargs)), $ecall->pmin, $ecall->pmax, $ecall->origin, $ecall->line);
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:195: characters 3-27
		$i = $args->length - 1;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:196: lines 196-199
		while ($i >= 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:197: characters 4-52
			$rest1 = $this->toCps(($args->arr[$i] ?? null), new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2(($names->arr[$i] ?? null), null)]), $rest1, null), $rest1->pmin, $rest1->pmax, $rest1->origin, $rest1->line), $exit);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:198: characters 4-7
			--$i;
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:200: characters 3-14
		return $rest1;
	}

	/**
	 * @param int $k
	 * 
	 * @return void
	 */
	public function restoreVars ($k) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:237: lines 237-240
		while ($this->definedVars->length > $k) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:238: characters 12-29
			$_this = $this->definedVars;
			if ($_this->length > 0) {
				$_this->length--;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:238: characters 4-30
			$v = \array_pop($_this->arr);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:239: characters 4-68
			if ($v->prev === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:239: characters 25-41
				$this->vars->remove($v->n);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:239: characters 47-68
				$this->vars->data[$v->n] = $v->prev;
			}
		}
	}

	/**
	 * @param object $e
	 * @param object $pos
	 * 
	 * @return object
	 */
	public function retNull ($e, $pos = null) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:182: characters 11-18
		$_g = $e->e;
		if ($_g->index === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 18-30
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 35-36
			$_g2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 38-39
			$_g2 = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 18-30
			if ($_g1->length === 1) {
				$_g2 = ($_g1->arr[0] ?? null);
				$_g1 = $_g2->opt;
				$_g1 = $_g2->t;
				$_g1 = $_g2->value;
				if ($_g2->name === "_") {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 32-33
					$e1 = $_g->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:183: characters 42-50
					return $e1;
				}
			}
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:186: characters 10-50
		$inf = ($pos === null ? $e : $pos);
		return new _HxAnon_Async0(ExprDef::ECall($e, \Array_hx::wrap([Async::$nullId])), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}

	/**
	 * @return int
	 */
	public function saveVars () {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:233: characters 3-28
		return $this->definedVars->length;
	}

	/**
	 * @param object $e
	 * @param object $rest
	 * @param object $exit
	 * 
	 * @return object
	 */
	public function toCps ($e, $rest, $exit) {
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:243: lines 243-430
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:244: lines 244-245
		if ($this->isSync($e)) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:245: characters 11-45
			$args = \Array_hx::wrap([$this->buildSync($e, $exit)]);
			return new _HxAnon_Async0(ExprDef::ECall($rest, $args), $e->pmin, $e->pmax, $e->origin, $e->line);
		}
		#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:246: characters 11-18
		$_g = $e->e;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:401: characters 15-16
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:402: characters 4-29
			return new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([$e])), $e->pmin, $e->pmax, $e->origin, $e->line);
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:401: characters 26-27
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:402: characters 4-29
			return new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([$e])), $e->pmin, $e->pmax, $e->origin, $e->line);
		} else if ($__hx__switch === 2) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:394: characters 13-14
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:394: characters 16-17
			$t = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:394: characters 19-21
			$ev = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:395: lines 395-396
			if ($ev === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:396: characters 12-43
				$arr = \Array_hx::wrap([
					$e,
					$this->retNull($rest, $e),
				]);
				$tmp = null;
				if ($arr->length === 1) {
					$_g1 = ($arr->arr[0] ?? null)->e;
					if ($_g1->index === 4) {
						$_g2 = $_g1->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr), $e->pmin, $e->pmax, $e->origin, $e->line);
				}
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:398: characters 5-21
			$arr = new _HxAnon_Async0(ExprDef::EVar($v, $t), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:399: characters 32-72
			$arr1 = new _HxAnon_Async0(ExprDef::EBinop("=", new _HxAnon_Async0(ExprDef::EIdent($v), $e->pmin, $e->pmax, $e->origin, $e->line), new _HxAnon_Async0(ExprDef::EIdent("_r"), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:399: characters 25-94
			$arr2 = \Array_hx::wrap([
				$arr1,
				$this->retNull($rest, $e),
			]);
			$e1 = null;
			if ($arr2->length === 1) {
				$_g1 = ($arr2->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$e1 = true;
				} else {
					$e1 = false;
				}
			} else {
				$e1 = false;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:399: characters 15-95
			$e2 = ($e1 ? ($arr2->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr2), $e->pmin, $e->pmax, $e->origin, $e->line));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:397: lines 397-400
			$arr1 = \Array_hx::wrap([
				$arr,
				$this->toCps($ev, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_r", null)]), $e2, null), $e2->pmin, $e2->pmax, $e2->origin, $e2->line), $exit),
			]);
			$tmp = null;
			if ($arr1->length === 1) {
				$_g1 = ($arr1->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$tmp = true;
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			if ($tmp) {
				return ($arr1->arr[0] ?? null);
			} else {
				return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 3) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:271: characters 16-17
			$e1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:272: characters 11-46
			$e2 = ExprDef::EParent($this->toCps($e1, $rest, $exit));
			return new _HxAnon_Async0($e2, $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
		} else if ($__hx__switch === 4) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:247: characters 15-17
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:248: characters 4-23
			$el1 = (clone $el);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:249: characters 4-26
			$vold = $this->saveVars();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:250: characters 4-23
			$this->lookupFunctions($el1);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:251: lines 251-254
			while ($el1->length > 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:252: characters 19-27
				if ($el1->length > 0) {
					$el1->length--;
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:252: characters 5-41
				$e1 = $this->toCps(\array_pop($el1->arr), $rest, $exit);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:253: characters 5-21
				$rest = $this->ignore($e1);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:255: characters 4-21
			$this->restoreVars($vold);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:256: characters 4-24
			return $this->retNull($rest);
		} else if ($__hx__switch === 5) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:401: characters 47-48
			$_g1 = $_g->params[0];
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:402: characters 4-29
			return new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([$e])), $e->pmin, $e->pmax, $e->origin, $e->line);
		} else if ($__hx__switch === 6) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:308: characters 15-17
			$op = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:308: characters 19-21
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:308: characters 23-25
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:309: lines 309-341
			if ($op === "&&") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:334: characters 5-28
				$id1 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:335: characters 5-28
				$id2 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:336: characters 38-86
				$e3 = new _HxAnon_Async0(ExprDef::EBinop("!=", new _HxAnon_Async0(ExprDef::EIdent($id1), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EIdent("true"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:336: characters 87-120
				$e4 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EIdent("false"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)])), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:336: characters 31-146
				$e5 = ExprDef::EIf($e3, $e4, $this->toCps($e2, $rest, $exit));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:336: characters 22-147
				$e3 = new _HxAnon_Async0($e5, $e->pmin, $e->pmax, $e->origin, $e->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:336: characters 5-154
				return $this->toCps($e1, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id1, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
			} else if ($op === "%=" || $op === "&=" || $op === "*=" || $op === "+=" || $op === "-=" || $op === "/=" || $op === "=" || $op === "^=" || $op === "|=") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:311: characters 13-21
				$_g1 = $e1->e;
				$__hx__switch = ($_g1->index);
				if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:312: characters 17-18
					$_g2 = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:313: characters 6-28
					$id = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:314: characters 23-80
					$e3 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EBinop($op, $e1, new _HxAnon_Async0(ExprDef::EIdent($id), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)])), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:314: characters 6-87
					return $this->toCps($e2, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
				} else if ($__hx__switch === 5) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:315: characters 17-20
					$ef1 = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:315: characters 22-23
					$f = $_g1->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:316: characters 6-29
					$id1 = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:317: characters 6-29
					$id2 = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:318: characters 43-129
					$e3 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EBinop($op, new _HxAnon_Async0(ExprDef::EField(new _HxAnon_Async0(ExprDef::EIdent($id1), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $f), $ef1->pmin, $ef1->pmax, $ef1->origin, $ef1->line), new _HxAnon_Async0(ExprDef::EIdent($id2), $e2->pmin, $e2->pmax, $e2->origin, $e2->line)), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:318: characters 24-137
					$e4 = $this->toCps($e2, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id2, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:318: characters 6-144
					return $this->toCps($ef1, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id1, null)]), $e4, null), $e4->pmin, $e4->pmax, $e4->origin, $e4->line), $exit);
				} else if ($__hx__switch === 16) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:319: characters 17-21
					$earr = $_g1->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:319: characters 23-29
					$eindex = $_g1->params[1];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:320: characters 6-31
					$idArr = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:321: characters 6-33
					$idIndex = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:322: characters 6-31
					$idVal = "_r" . ($this->uid++);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:324: characters 7-122
					$e3 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EBinop($op, new _HxAnon_Async0(ExprDef::EArray(new _HxAnon_Async0(ExprDef::EIdent($idArr), $earr->pmin, $earr->pmax, $earr->origin, $earr->line), new _HxAnon_Async0(ExprDef::EIdent($idIndex), $eindex->pmin, $eindex->pmax, $eindex->origin, $eindex->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EIdent($idVal), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:323: lines 323-325
					$e4 = $this->toCps($e2, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($idVal, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
					$e3 = $this->toCps($eindex, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($idIndex, null)]), $e4, null), $e4->pmin, $e4->pmax, $e4->origin, $e4->line), $exit);
					return $this->toCps($earr, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($idArr, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:327: characters 6-11
					throw Exception::thrown("assert " . \Std::string($e1));
				}
			} else if ($op === "||") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:330: characters 5-28
				$id1 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:331: characters 5-28
				$id2 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:332: characters 38-86
				$e3 = new _HxAnon_Async0(ExprDef::EBinop("==", new _HxAnon_Async0(ExprDef::EIdent($id1), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EIdent("true"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:332: characters 87-119
				$e4 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EIdent("true"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)])), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:332: characters 31-145
				$e5 = ExprDef::EIf($e3, $e4, $this->toCps($e2, $rest, $exit));
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:332: characters 22-146
				$e3 = new _HxAnon_Async0($e5, $e->pmin, $e->pmax, $e->origin, $e->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:332: characters 5-153
				return $this->toCps($e1, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id1, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:338: characters 5-28
				$id1 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:339: characters 5-28
				$id2 = "_r" . ($this->uid++);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:340: characters 41-110
				$e3 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EBinop($op, new _HxAnon_Async0(ExprDef::EIdent($id1), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EIdent($id2), $e2->pmin, $e2->pmax, $e2->origin, $e2->line)), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:340: characters 22-118
				$e4 = $this->toCps($e2, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id2, null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:340: characters 5-125
				return $this->toCps($e1, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id1, null)]), $e4, null), $e4->pmin, $e4->pmax, $e4->origin, $e4->line), $exit);
			}
		} else if ($__hx__switch === 7) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:401: characters 36-37
			$_g1 = $_g->params[0];
			if ($_g1 === "!") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:306: characters 14-22
				$op = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:306: characters 24-30
				$prefix = $_g->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:306: characters 32-35
				$eop = $_g->params[2];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:307: characters 22-87
				$e1 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EUnop($op, $prefix, new _HxAnon_Async0(ExprDef::EIdent("_r"), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:307: characters 4-94
				return $this->toCps($eop, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_r", null)]), $e1, null), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $exit);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:402: characters 4-29
				return new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([$e])), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 8) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:285: characters 39-43
			$_g1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:282: characters 14-21
			$_hx_tmp = $_g->params[0]->e;
			$__hx__switch = ($_hx_tmp->index);
			if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:282: characters 32-33
				$i = $_hx_tmp->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:282: characters 36-40
				$args = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:283: characters 4-27
				$mode = ($this->vars->data[$i] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:284: characters 4-97
				return $this->makeCall(new _HxAnon_Async0(ExprDef::EIdent(($mode !== null ? $i : "a_" . ($i??'null'))), $e->pmin, $e->pmax, $e->origin, $e->line), $args, $rest, $exit, $mode === VarMode::ForceSync());
			} else if ($__hx__switch === 5) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:285: characters 32-33
				$e1 = $_hx_tmp->params[0];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:285: characters 35-36
				$f = $_hx_tmp->params[1];
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:285: characters 39-43
				$args = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:286: characters 4-56
				return $this->makeCall(new _HxAnon_Async0(ExprDef::EField($e1, "a_" . ($f??'null')), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $args, $rest, $exit);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:428: characters 4-9
				throw Exception::thrown("Unsupported async expression " . (Printer::toString($e)??'null'));
			}
		} else if ($__hx__switch === 9) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 12-16
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 18-20
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 22-24
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 40-56
			$e3 = new _HxAnon_Async0(ExprDef::EIdent("_c"), $cond->pmin, $cond->pmax, $cond->origin, $cond->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 58-79
			$e4 = $this->toCps($e1, $rest, $exit);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 81-131
			$e1 = ($e2 === null ? $this->retNull($rest) : $this->toCps($e2, $rest, $exit));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 23-136
			$e2 = new _HxAnon_Async0(ExprDef::EIf($e3, $e4, $e1), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 4-143
			return $this->toCps($cond, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_c", null)]), $e2, null), $e2->pmin, $e2->pmax, $e2->origin, $e2->line), $exit);
		} else if ($__hx__switch === 10) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:344: characters 15-19
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:344: characters 21-24
			$ewh = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:345: characters 4-19
			$id = ++$this->uid;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:346: characters 4-41
			$loop = new _HxAnon_Async0(ExprDef::EIdent("_loop" . ($id??'null')), $cond->pmin, $cond->pmax, $cond->origin, $cond->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:347: characters 4-55
			$oldLoop = $this->currentLoop;
			$oldBreak = $this->currentBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:348: characters 4-22
			$this->currentLoop = $loop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:349: characters 4-81
			$this->currentBreak = function ($e) use (&$rest, &$_gthis) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:349: characters 45-60
				$arr = $_gthis->retNull($rest, $e);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:349: characters 38-81
				$arr1 = \Array_hx::wrap([
					$arr,
					new _HxAnon_Async0(ExprDef::EReturn(), $e->pmin, $e->pmax, $e->origin, $e->line),
				]);
				$tmp = null;
				if ($arr1->length === 1) {
					$_g = ($arr1->arr[0] ?? null)->e;
					if ($_g->index === 4) {
						$_g1 = $_g->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr1->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line);
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:352: characters 35-52
			$e1 = new _HxAnon_Async0(ExprDef::EIdent("_c"), $cond->pmin, $cond->pmax, $cond->origin, $cond->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:352: characters 54-76
			$e2 = $this->toCps($ewh, $loop, $exit);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:352: characters 28-103
			$e3 = ExprDef::EIf($e1, $e2, $this->retNull($rest, $cond));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:352: characters 18-104
			$e1 = new _HxAnon_Async0($e3, $cond->pmin, $cond->pmax, $cond->origin, $cond->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:351: lines 351-353
			$e2 = $this->toCps($cond, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_c", null)]), $e1, null), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $exit);
			$arr = new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_r", null)]), $e2, "_loop" . ($id??'null')), $e2->pmin, $e2->pmax, $e2->origin, $e2->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:350: lines 350-355
			$arr1 = \Array_hx::wrap([
				$arr,
				$this->retNull($loop, $cond),
			]);
			$ewhile = null;
			if ($arr1->length === 1) {
				$_g1 = ($arr1->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$ewhile = true;
				} else {
					$ewhile = false;
				}
			} else {
				$ewhile = false;
			}
			$ewhile1 = ($ewhile ? ($arr1->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:356: characters 4-25
			$this->currentLoop = $oldLoop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:357: characters 4-27
			$this->currentBreak = $oldBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:358: characters 4-17
			return $ewhile1;
		} else if ($__hx__switch === 11) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:287: characters 13-14
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:287: characters 16-19
			$eit = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:287: characters 21-26
			$eloop = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:288: characters 4-19
			$id = ++$this->uid;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:289: characters 4-32
			$it = new _HxAnon_Async0(ExprDef::EIdent("_i" . ($id??'null')), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:290: characters 4-55
			$oldLoop = $this->currentLoop;
			$oldBreak = $this->currentBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:291: characters 4-37
			$loop = new _HxAnon_Async0(ExprDef::EIdent("_loop" . ($id??'null')), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:292: characters 4-22
			$this->currentLoop = $loop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:293: characters 4-91
			$this->currentBreak = function ($inf) use (&$rest, &$_gthis) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:293: characters 47-65
				$arr = $_gthis->retNull($rest, $inf);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:293: characters 40-91
				$arr1 = \Array_hx::wrap([
					$arr,
					new _HxAnon_Async0(ExprDef::EReturn(), $inf->pmin, $inf->pmax, $inf->origin, $inf->line),
				]);
				$tmp = null;
				if ($arr1->length === 1) {
					$_g = ($arr1->arr[0] ?? null)->e;
					if ($_g->index === 4) {
						$_g1 = $_g->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr1->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr1), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
				}
			};
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:295: characters 5-71
			$arr = new _HxAnon_Async0(ExprDef::EVar("_i" . ($id??'null'), null, new _HxAnon_Async0(ExprDef::ECall(new _HxAnon_Async0(ExprDef::EIdent("makeIterator"), $eit->pmin, $eit->pmax, $eit->origin, $eit->line), \Array_hx::wrap([$eit])), $eit->pmin, $eit->pmax, $eit->origin, $eit->line)), $eit->pmin, $eit->pmax, $eit->origin, $eit->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:297: characters 13-77
			$e1 = new _HxAnon_Async0(ExprDef::EUnop("!", true, new _HxAnon_Async0(ExprDef::ECall(new _HxAnon_Async0(ExprDef::EField($it, "hasNext"), $it->pmin, $it->pmax, $it->origin, $it->line), new \Array_hx()), $it->pmin, $it->pmax, $it->origin, $it->line)), $it->pmin, $it->pmax, $it->origin, $it->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:297: characters 6-100
			$e2 = ExprDef::EIf($e1, ($this->currentBreak)($it));
			$arr1 = new _HxAnon_Async0($e2, $it->pmin, $it->pmax, $it->origin, $it->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:298: characters 6-57
			$arr2 = new _HxAnon_Async0(ExprDef::EVar($v, null, new _HxAnon_Async0(ExprDef::ECall(new _HxAnon_Async0(ExprDef::EField($it, "next"), $it->pmin, $it->pmax, $it->origin, $it->line), new \Array_hx()), $it->pmin, $it->pmax, $it->origin, $it->line)), $it->pmin, $it->pmax, $it->origin, $it->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:296: lines 296-300
			$arr3 = \Array_hx::wrap([
				$arr1,
				$arr2,
				$this->toCps($eloop, $loop, $exit),
			]);
			$e1 = null;
			if ($arr3->length === 1) {
				$_g1 = ($arr3->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$e1 = true;
				} else {
					$e1 = false;
				}
			} else {
				$e1 = false;
			}
			$e2 = ($e1 ? ($arr3->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr3), $it->pmin, $it->pmax, $it->origin, $it->line));
			$arr1 = new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_", null)]), $e2, "_loop" . ($id??'null')), $e2->pmin, $e2->pmax, $e2->origin, $e2->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:294: lines 294-302
			$arr2 = \Array_hx::wrap([
				$arr,
				$arr1,
				$this->retNull($loop, $e),
			]);
			$efor = null;
			if ($arr2->length === 1) {
				$_g1 = ($arr2->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$efor = true;
				} else {
					$efor = false;
				}
			} else {
				$efor = false;
			}
			$efor1 = ($efor ? ($arr2->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr2), $e->pmin, $e->pmax, $e->origin, $e->line));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:303: characters 4-25
			$this->currentLoop = $oldLoop;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:304: characters 4-27
			$this->currentBreak = $oldBreak;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:305: characters 4-15
			return $efor1;
		} else if ($__hx__switch === 12) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:414: characters 4-36
			if ($this->currentBreak === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:414: characters 31-36
				throw Exception::thrown("Break outside loop");
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:415: characters 4-26
			return ($this->currentBreak)($e);
		} else if ($__hx__switch === 13) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:417: characters 4-35
			if ($this->currentLoop === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:417: characters 30-35
				throw Exception::thrown("Continue outside loop");
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:418: characters 18-41
			$arr = $this->retNull($this->currentLoop, $e);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:418: characters 11-63
			$arr1 = \Array_hx::wrap([
				$arr,
				new _HxAnon_Async0(ExprDef::EReturn(), $e->pmin, $e->pmax, $e->origin, $e->line),
			]);
			$tmp = null;
			if ($arr1->length === 1) {
				$_g1 = ($arr1->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$tmp = true;
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			if ($tmp) {
				return ($arr1->arr[0] ?? null);
			} else {
				return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 14) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:257: characters 18-22
			$args = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:257: characters 24-28
			$body = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:257: characters 30-34
			$name = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:257: characters 36-37
			$t = $_g->params[3];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:258: characters 4-26
			$vold = $this->saveVars();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:259: lines 259-260
			if ($name !== null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:260: characters 5-29
				$this->defineVar($name, VarMode::Defined());
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:261: lines 261-262
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:261: characters 9-10
				$a = ($args->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:261: lines 261-262
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:262: characters 5-31
				$this->defineVar($a->name, VarMode::Defined());
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:263: characters 4-49
			$args->length = \array_unshift($args->arr, new _HxAnon_Async2("_onEnd", null));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:264: characters 4-34
			$frest = new _HxAnon_Async0(ExprDef::EIdent("_onEnd"), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:265: characters 4-28
			$oldFun = $this->currentFun;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:266: characters 4-21
			$this->currentFun = $name;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:267: characters 4-41
			$body1 = $this->toCps($body, $frest, $frest);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:268: characters 4-49
			$f = new _HxAnon_Async0(ExprDef::EFunction($args, $body1, $name, $t), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:269: characters 4-21
			$this->restoreVars($vold);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:270: characters 11-47
			if ($rest === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:270: characters 26-27
				return $f;
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:270: characters 30-47
				return new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([$f])), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 15) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:359: characters 16-20
			$eret = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:360: characters 11-68
			if ($eret === null) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:360: characters 26-42
				return $this->retNull($exit, $e);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:360: characters 45-68
				return $this->toCps($eret, $exit, $exit);
			}
		} else if ($__hx__switch === 16) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:390: characters 15-19
			$earr = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:390: characters 21-27
			$eindex = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:391: characters 4-27
			$id1 = "_r" . ($this->uid++);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:392: characters 4-27
			$id2 = "_r" . ($this->uid++);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:393: characters 46-113
			$e1 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EArray(new _HxAnon_Async0(ExprDef::EIdent($id1), $e->pmin, $e->pmax, $e->origin, $e->line), new _HxAnon_Async0(ExprDef::EIdent($id2), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:393: characters 23-121
			$e2 = $this->toCps($eindex, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id2, null)]), $e1, null), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $exit);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:393: characters 4-128
			return $this->toCps($earr, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2($id1, null)]), $e2, null), $e2->pmin, $e2->pmax, $e2->origin, $e2->line), $exit);
		} else if ($__hx__switch === 17) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:374: characters 19-21
			$el = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:375: characters 4-26
			$id = "_a" . ($this->uid++);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:376: characters 4-44
			$rest1 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EIdent($id), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:377: characters 4-26
			$i = $el->length - 1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:378: lines 378-385
			while ($i >= 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:379: characters 5-19
				$e1 = ($el->arr[$i] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:380: lines 380-383
				$arr = \Array_hx::wrap([
					new _HxAnon_Async0(ExprDef::EBinop("=", new _HxAnon_Async0(ExprDef::EArray(new _HxAnon_Async0(ExprDef::EIdent($id), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EConst(Const_hx::CInt($i)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), new _HxAnon_Async0(ExprDef::EIdent("_r"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line),
					$rest1,
				]);
				$e2 = null;
				if ($arr->length === 1) {
					$_g1 = ($arr->arr[0] ?? null)->e;
					if ($_g1->index === 4) {
						$_g2 = $_g1->params[0];
						$e2 = true;
					} else {
						$e2 = false;
					}
				} else {
					$e2 = false;
				}
				$e3 = ($e2 ? ($arr->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr), $e1->pmin, $e1->pmax, $e1->origin, $e1->line));
				$rest1 = $this->toCps($e1, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_r", null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line), $exit);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:384: characters 5-8
				--$i;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:386: lines 386-389
			$arr = \Array_hx::wrap([
				new _HxAnon_Async0(ExprDef::EVar($id, null, new _HxAnon_Async0(ExprDef::EArrayDecl(new \Array_hx()), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line),
				$rest1,
			]);
			$tmp = null;
			if ($arr->length === 1) {
				$_g1 = ($arr->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$tmp = true;
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			if ($tmp) {
				return ($arr->arr[0] ?? null);
			} else {
				return new _HxAnon_Async0(ExprDef::EBlock($arr), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 18) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:403: characters 13-15
			$cl = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:403: characters 17-21
			$args = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 16-56
			$_g1 = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 27-31
			$_g2 = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 31-42
			$_g3 = $args->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 17-55
			while ($_g2 < $_g3) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 27-42
				$i = $_g2++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 45-55
				$_g1->arr[$_g1->length++] = "_a" . ($this->uid++);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:404: characters 4-57
			$names = $_g1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 16-70
			$_g1 = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 27-31
			$_g2 = 0;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 31-42
			$_g3 = $args->length;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 17-69
			while ($_g2 < $_g3) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 27-42
				$i = $_g2++;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 45-69
				$e1 = ($args->arr[$i] ?? null);
				$x = new _HxAnon_Async0(ExprDef::EIdent(($names->arr[$i] ?? null)), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				$_g1->arr[$_g1->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:405: characters 4-71
			$rargs = $_g1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:406: characters 4-52
			$rest1 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::ENew($cl, $rargs), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:407: characters 4-28
			$i = $args->length - 1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:408: lines 408-411
			while ($i >= 0) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:409: characters 5-53
				$rest1 = $this->toCps(($args->arr[$i] ?? null), new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2(($names->arr[$i] ?? null), null)]), $rest1, null), $rest1->pmin, $rest1->pmax, $rest1->origin, $rest1->line), $exit);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:410: characters 5-8
				--$i;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:412: characters 4-15
			return $rest1;
		} else if ($__hx__switch === 19) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:422: characters 15-16
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:423: characters 4-91
			return $this->toCps($v, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_v", null)]), new _HxAnon_Async0(ExprDef::EThrow($v), $v->pmin, $v->pmax, $v->origin, $v->line)), $v->pmin, $v->pmax, $v->origin, $v->line), $exit);
		} else if ($__hx__switch === 21) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:361: characters 16-22
			$fields = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:362: characters 4-26
			$id = "_o" . ($this->uid++);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:363: characters 4-44
			$rest1 = new _HxAnon_Async0(ExprDef::ECall($rest, \Array_hx::wrap([new _HxAnon_Async0(ExprDef::EIdent($id), $e->pmin, $e->pmax, $e->origin, $e->line)])), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:364: characters 4-20
			$fields->arr = \array_reverse($fields->arr);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:365: lines 365-369
			$_g1 = 0;
			while ($_g1 < $fields->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:365: characters 9-10
				$f = ($fields->arr[$_g1] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:365: lines 365-369
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:367: characters 17-54
				$inf = $f->e;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:367: characters 27-40
				$e1 = $f->e;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:367: characters 56-71
				$e2 = $f->e;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:367: characters 6-77
				$inf1 = $f->e;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:366: lines 366-369
				$arr = \Array_hx::wrap([
					new _HxAnon_Async0(ExprDef::EBinop("=", new _HxAnon_Async0(ExprDef::EField(new _HxAnon_Async0(ExprDef::EIdent($id), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), $f->name), $inf->pmin, $inf->pmax, $inf->origin, $inf->line), new _HxAnon_Async0(ExprDef::EIdent("_r"), $e2->pmin, $e2->pmax, $e2->origin, $e2->line)), $inf1->pmin, $inf1->pmax, $inf1->origin, $inf1->line),
					$rest1,
				]);
				$e3 = $f->e;
				$e4 = null;
				if ($arr->length === 1) {
					$_g2 = ($arr->arr[0] ?? null)->e;
					if ($_g2->index === 4) {
						$_g3 = $_g2->params[0];
						$e4 = true;
					} else {
						$e4 = false;
					}
				} else {
					$e4 = false;
				}
				$e5 = ($e4 ? ($arr->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr), $e3->pmin, $e3->pmax, $e3->origin, $e3->line));
				$rest1 = $this->toCps($f->e, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_r", null)]), $e5, null), $e5->pmin, $e5->pmax, $e5->origin, $e5->line), $exit);
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:370: lines 370-373
			$arr = \Array_hx::wrap([
				new _HxAnon_Async0(ExprDef::EVar($id, null, new _HxAnon_Async0(ExprDef::EObject(new \Array_hx()), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line),
				$rest1,
			]);
			$tmp = null;
			if ($arr->length === 1) {
				$_g1 = ($arr->arr[0] ?? null)->e;
				if ($_g1->index === 4) {
					$_g2 = $_g1->params[0];
					$tmp = true;
				} else {
					$tmp = false;
				}
			} else {
				$tmp = false;
			}
			if ($tmp) {
				return ($arr->arr[0] ?? null);
			} else {
				return new _HxAnon_Async0(ExprDef::EBlock($arr), $e->pmin, $e->pmax, $e->origin, $e->line);
			}
		} else if ($__hx__switch === 22) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 36-40
			$cond = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 42-44
			$e1 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:342: characters 46-48
			$e2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 40-56
			$e3 = new _HxAnon_Async0(ExprDef::EIdent("_c"), $cond->pmin, $cond->pmax, $cond->origin, $cond->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 58-79
			$e4 = $this->toCps($e1, $rest, $exit);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 81-131
			$e1 = ($e2 === null ? $this->retNull($rest) : $this->toCps($e2, $rest, $exit));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 23-136
			$e2 = new _HxAnon_Async0(ExprDef::EIf($e3, $e4, $e1), $e->pmin, $e->pmax, $e->origin, $e->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:343: characters 4-143
			return $this->toCps($cond, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_c", null)]), $e2, null), $e2->pmin, $e2->pmax, $e2->origin, $e2->line), $exit);
		} else if ($__hx__switch === 23) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:419: characters 16-17
			$v = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:419: characters 19-24
			$cases = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:419: characters 26-29
			$def = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 16-92
			$_g1 = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 17-90
			$_g2 = 0;
			while ($_g2 < $cases->length) {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 22-23
				$c = ($cases->arr[$_g2] ?? null);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 17-90
				++$_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 46-54
				$c1 = $c->values;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 35-90
				$x = new _HxAnon_Async3($c1, $this->toCps($c->expr, $rest, $exit));
				$_g1->arr[$_g1->length++] = $x;
			}
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:420: characters 4-93
			$cases = $_g1;
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:421: characters 75-88
			$e1 = new _HxAnon_Async0(ExprDef::EIdent("_c"), $v->pmin, $v->pmax, $v->origin, $v->line);
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:421: characters 97-149
			$e2 = ($def === null ? $this->retNull($rest) : $this->toCps($def, $rest, $exit));
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:421: characters 4-165
			return $this->toCps($v, new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_c", null)]), new _HxAnon_Async0(ExprDef::ESwitch($e1, $cases, $e2), $e->pmin, $e->pmax, $e->origin, $e->line)), $e->pmin, $e->pmax, $e->origin, $e->line), $exit);
		} else if ($__hx__switch === 25) {
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 14-18
			$_g1 = $_g->params[0];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 19-20
			$_g2 = $_g->params[1];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 21-22
			$_g2 = $_g->params[2];
			#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 14-18
			if ($_g1 === "async") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:275: characters 26-27
				$e1 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:276: characters 4-27
				$nothing = $this->ignore();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:277: characters 18-42
				$arr = $this->toCps($e1, $nothing, $nothing);
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:277: characters 11-60
				$arr1 = \Array_hx::wrap([
					$arr,
					$this->retNull($rest),
				]);
				$tmp = null;
				if ($arr1->length === 1) {
					$_g = ($arr1->arr[0] ?? null)->e;
					if ($_g->index === 4) {
						$_g3 = $_g->params[0];
						$tmp = true;
					} else {
						$tmp = false;
					}
				} else {
					$tmp = false;
				}
				if ($tmp) {
					return ($arr1->arr[0] ?? null);
				} else {
					return new _HxAnon_Async0(ExprDef::EBlock($arr1), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
				}
			} else if ($_g1 === "split") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:278: characters 26-27
				$e1 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:279: characters 4-117
				$args = null;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:279: characters 23-30
				$_g = $e1->e;
				if ($_g->index === 17) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:279: characters 51-53
					$el = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:279: characters 4-117
					$args = $el;
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:279: characters 69-74
					throw Exception::thrown("@split expression should be an array");
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 15-91
				$_g = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 16-90
				$_g3 = 0;
				while ($_g3 < $args->length) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 21-22
					$a = ($args->arr[$_g3] ?? null);
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 16-90
					++$_g3;
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 52-64
					$arr = \Array_hx::wrap([$a]);
					$e2 = null;
					if ($arr->length === 1) {
						$_g4 = ($arr->arr[0] ?? null)->e;
						if ($_g4->index === 4) {
							$_g5 = $_g4->params[0];
							$e2 = true;
						} else {
							$e2 = false;
						}
					} else {
						$e2 = false;
					}
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 33-90
					$e3 = $this->toCps(($e2 ? ($arr->arr[0] ?? null) : new _HxAnon_Async0(ExprDef::EBlock($arr), $a->pmin, $a->pmax, $a->origin, $a->line)), new _HxAnon_Async0(ExprDef::EIdent("_rest"), $a->pmin, $a->pmax, $a->origin, $a->line), $exit);
					$_g->arr[$_g->length++] = new _HxAnon_Async0(ExprDef::EFunction(\Array_hx::wrap([new _HxAnon_Async2("_rest", null)]), $e3, null), $e3->pmin, $e3->pmax, $e3->origin, $e3->line);
				}
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:280: characters 4-92
				$args = $_g;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:281: characters 11-67
				return new _HxAnon_Async0(ExprDef::ECall(new _HxAnon_Async0(ExprDef::EIdent("split"), $e1->pmin, $e1->pmax, $e1->origin, $e1->line), \Array_hx::wrap([
					$rest,
					new _HxAnon_Async0(ExprDef::EArrayDecl($args), $e1->pmin, $e1->pmax, $e1->origin, $e1->line),
				])), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
			} else if ($_g1 === "sync") {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:273: characters 25-26
				$e1 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:274: characters 11-43
				$args = \Array_hx::wrap([$this->buildSync($e1, $exit)]);
				return new _HxAnon_Async0(ExprDef::ECall($rest, $args), $e1->pmin, $e1->pmax, $e1->origin, $e1->line);
			} else {
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 14-18
				$name = $_g1;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: characters 21-22
				$e1 = $_g2;
				#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:424: lines 424-428
				if (HxString::charCodeAt($name, 0) === 58) {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:425: characters 4-31
					return $this->toCps($e1, $rest, $exit);
				} else {
					#C:\HaxeToolkit\haxe\lib\hscript/2,5,0/hscript/Async.hx:428: characters 4-9
					throw Exception::thrown("Unsupported async expression " . (Printer::toString($e)??'null'));
				}
			}
		} else {
			throw Exception::thrown("Unsupported async expression " . (Printer::toString($e)??'null'));
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$nullExpr = new _HxAnon_Async0(null, 0, 0, "<null>", 0);
		$inf = Async::$nullExpr;
		self::$nullId = new _HxAnon_Async0(ExprDef::EIdent("null"), $inf->pmin, $inf->pmax, $inf->origin, $inf->line);
	}
}

class _HxAnon_Async0 extends HxAnon {
	function __construct($e, $pmin, $pmax, $origin, $line) {
		$this->e = $e;
		$this->pmin = $pmin;
		$this->pmax = $pmax;
		$this->origin = $origin;
		$this->line = $line;
	}
}

class _HxAnon_Async1 extends HxAnon {
	function __construct($n, $prev) {
		$this->n = $n;
		$this->prev = $prev;
	}
}

class _HxAnon_Async2 extends HxAnon {
	function __construct($name, $t) {
		$this->name = $name;
		$this->t = $t;
	}
}

class _HxAnon_Async3 extends HxAnon {
	function __construct($values, $expr) {
		$this->values = $values;
		$this->expr = $expr;
	}
}

Boot::registerClass(Async::class, 'hscript.Async');
Async::__hx__init();
