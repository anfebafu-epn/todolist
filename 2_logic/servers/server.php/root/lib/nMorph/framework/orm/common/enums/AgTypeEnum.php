<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\enums;

use \php\Boot;
use \php\_Boot\HxEnum;

class AgTypeEnum extends HxEnum {
	/**
	 * @return AgTypeEnum
	 */
	static public function AVG () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('AVG', 4, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function COUNT () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('COUNT', 1, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function COUNTALL () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('COUNTALL', 2, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function DISTINCT () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('DISTINCT', 3, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function MAX () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('MAX', 5, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function MIN () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('MIN', 6, []);
		return $inst;
	}

	/**
	 * @return AgTypeEnum
	 */
	static public function SUM () {
		static $inst = null;
		if (!$inst) $inst = new AgTypeEnum('SUM', 0, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			4 => 'AVG',
			1 => 'COUNT',
			2 => 'COUNTALL',
			3 => 'DISTINCT',
			5 => 'MAX',
			6 => 'MIN',
			0 => 'SUM',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'AVG' => 0,
			'COUNT' => 0,
			'COUNTALL' => 0,
			'DISTINCT' => 0,
			'MAX' => 0,
			'MIN' => 0,
			'SUM' => 0,
		];
	}
}

Boot::registerClass(AgTypeEnum::class, 'nMorph.framework.orm.common.enums.AgTypeEnum');
