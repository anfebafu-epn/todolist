<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\fields;

use \nMorph\framework\orm\interfaces\ISet;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\enums\DBTypeEnum;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\FieldSentence;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\common\exceptions\ExceptionHelper;
use \nMorph\framework\orm\common\enums\HaxeTypeEnum;
use \haxe\io\Bytes;
use \nMorph\framework\orm\common\enums\NullableEnum;

class BinarySentence extends FieldSentence {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.framework.orm.common.fields.BinarySentence\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.common.sentences.FieldSentence\"/>\x0A\x09<ValidateDBCompatibility public=\"1\" set=\"method\" line=\"21\"><f a=\"binaryValue\">\x0A\x09<c path=\"haxe.io.Bytes\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></ValidateDBCompatibility>\x0A\x09<Equals public=\"1\" set=\"method\" line=\"28\"><f a=\"binaryValue\">\x0A\x09<c path=\"haxe.io.Bytes\"/>\x0A\x09<c path=\"nMorph.framework.orm.common.conditions.Condition\"/>\x0A</f></Equals>\x0A\x09<IsNull public=\"1\" set=\"method\" line=\"32\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNull>\x0A\x09<IsNotNull public=\"1\" set=\"method\" line=\"36\"><f a=\"\"><c path=\"nMorph.framework.orm.common.conditions.Condition\"/></f></IsNotNull>\x0A\x09<SET public=\"1\" set=\"method\" line=\"40\"><f a=\"binaryValue\">\x0A\x09<c path=\"haxe.io.Bytes\"/>\x0A\x09<c path=\"nMorph.framework.orm.interfaces.ISet\"/>\x0A</f></SET>\x0A\x09<new public=\"1\" set=\"method\" line=\"17\"><f a=\"FieldTable:FieldName:Nullable:IsPrimaryKey\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A\x09<e path=\"nMorph.framework.orm.common.enums.NullableEnum\"/>\x0A\x09<x path=\"Bool\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></new>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keep\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @param string $FieldTable
	 * @param string $FieldName
	 * @param NullableEnum $Nullable
	 * @param bool $IsPrimaryKey
	 * 
	 * @return void
	 */
	public function __construct ($FieldTable, $FieldName, $Nullable, $IsPrimaryKey) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:18: characters 9-112
		parent::__construct($FieldTable, $FieldName, DBTypeEnum::BINARY(), HaxeTypeEnum::BYTES(), null, null, $Nullable, $IsPrimaryKey);
	}

	/**
	 * @param Bytes $binaryValue
	 * 
	 * @return Condition
	 */
	public function Equals ($binaryValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:29: characters 9-69
		return Condition::SET($this, Op::Equal(), Val::bytes($binaryValue));
	}

	/**
	 * @return Condition
	 */
	public function IsNotNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:37: characters 9-66
		return Condition::SET($this, Op::Different(), Val::bytes(null));
	}

	/**
	 * @return Condition
	 */
	public function IsNull () {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:33: characters 9-62
		return Condition::SET($this, Op::Equal(), Val::bytes(null));
	}

	/**
	 * @param Bytes $binaryValue
	 * 
	 * @return ISet
	 */
	public function SET ($binaryValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:41: characters 9-59
		$asg = Assign::SET($this, Val::bytes($binaryValue));
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:42: characters 9-19
		return $asg;
	}

	/**
	 * @param Bytes $binaryValue
	 * 
	 * @return void
	 */
	public function ValidateDBCompatibility ($binaryValue) {
		#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:22: lines 22-24
		if ($binaryValue->length > 2147483646) {
			#5_framework\orm\src/nMorph/framework/orm/common/fields/BinarySentence.hx:23: characters 13-107
			ExceptionHelper::LogicException(50004, "Binary not compatible with Database, Binary too large");
		}
	}
}

Boot::registerClass(BinarySentence::class, 'nMorph.framework.orm.common.fields.BinarySentence');
