<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\orm\common\enums;

use \php\Boot;
use \php\_Boot\HxEnum;

class StTypeEnum extends HxEnum {
	/**
	 * @return StTypeEnum
	 */
	static public function CONCAT () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('CONCAT', 1, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function LENGTH () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('LENGTH', 0, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function LOCATE () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('LOCATE', 3, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function LOWER () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('LOWER', 5, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function REPLACE () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('REPLACE', 2, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function REVERSE () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('REVERSE', 8, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function SUBSTRING () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('SUBSTRING', 4, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function TRIM () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('TRIM', 7, []);
		return $inst;
	}

	/**
	 * @return StTypeEnum
	 */
	static public function UPPER () {
		static $inst = null;
		if (!$inst) $inst = new StTypeEnum('UPPER', 6, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			1 => 'CONCAT',
			0 => 'LENGTH',
			3 => 'LOCATE',
			5 => 'LOWER',
			2 => 'REPLACE',
			8 => 'REVERSE',
			4 => 'SUBSTRING',
			7 => 'TRIM',
			6 => 'UPPER',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'CONCAT' => 0,
			'LENGTH' => 0,
			'LOCATE' => 0,
			'LOWER' => 0,
			'REPLACE' => 0,
			'REVERSE' => 0,
			'SUBSTRING' => 0,
			'TRIM' => 0,
			'UPPER' => 0,
		];
	}
}

Boot::registerClass(StTypeEnum::class, 'nMorph.framework.orm.common.enums.StTypeEnum');
