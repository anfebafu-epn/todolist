<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\core\db\nmorph_core;

use \nMorph\framework\orm\lang\SQL;
use \nMorph\framework\orm\interfaces\ICondition;
use \nMorph\framework\orm\common\sentences\Val;
use \nMorph\framework\orm\client\ModelObject;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\interfaces\ISource;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\clauses\WhereClause;
use \nMorph\framework\orm\client\ChangeItem;
use \nMorph\framework\orm\common\fields\VarcharSentence;
use \nMorph\framework\common\datatypes\UUID;
use \nMorph\framework\orm\common\sources\TableSource;
use \nMorph\framework\orm\common\fields\SmallIntegerSentence;
use \nMorph\framework\orm\common\fields\UUIDSentence;
use \nMorph\framework\orm\common\enums\NullableEnum;

/**
 * ...
 * @author Smartwork
 */
class PL_Extension extends ModelObject {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.core.db.nmorph_core.PL_Extension\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.client.ModelObject\"/>\x0A\x09<table public=\"1\" expr=\"new TableSource(&quot;PL_Extension&quot;)\" line=\"33\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.interfaces.ISource\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new TableSource(\"PL_Extension\")</e></m></meta>\x0A\x09\x09<haxe_doc>* referencia a tabla para consultas</haxe_doc>\x0A\x09</table>\x0A\x09<col_ExtensionID public=\"1\" expr=\"new UUIDSentence(&quot;PL_Extension&quot;, &quot;ExtensionID&quot;, NullableEnum.NOTNULL, true)\" line=\"37\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.UUIDSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new UUIDSentence(\"PL_Extension\", \"ExtensionID\", NullableEnum.NOTNULL, true)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna ExtensionID</haxe_doc>\x0A\x09</col_ExtensionID>\x0A\x09<col_ExtensionName public=\"1\" expr=\"new VarcharSentence(&quot;PL_Extension&quot;, &quot;ExtensionName&quot;, 250, NullableEnum.NULL, false)\" line=\"42\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.VarcharSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new VarcharSentence(\"PL_Extension\", \"ExtensionName\", 250, NullableEnum.NULL, false)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna ExtensionName</haxe_doc>\x0A\x09</col_ExtensionName>\x0A\x09<col_Status public=\"1\" expr=\"new SmallIntegerSentence(&quot;PL_Extension&quot;, &quot;Status&quot;, NullableEnum.NULL, false)\" line=\"47\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.SmallIntegerSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new SmallIntegerSentence(\"PL_Extension\", \"Status\", NullableEnum.NULL, false)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna Status</haxe_doc>\x0A\x09</col_Status>\x0A\x09<WHERE public=\"1\" set=\"method\" line=\"55\" static=\"1\">\x0A\x09\x09<f a=\"Condition\">\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.interfaces.ICondition\"/>\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.common.clauses.WhereClause\"/>\x0A\x09\x09</f>\x0A\x09\x09<haxe_doc>* inicio rápido de filtro\x0A\x09 * @param\x09Filtro\x0A\x09 * @return objeto para aplicar otras condiciones o ejecutar el query</haxe_doc>\x0A\x09</WHERE>\x0A\x09<BYPK public=\"1\" set=\"method\" line=\"64\" static=\"1\">\x0A\x09\x09<f a=\"val_ExtensionID\">\x0A\x09\x09\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.common.clauses.WhereClause\"/>\x0A\x09\x09</f>\x0A\x09\x09<haxe_doc>* filtro por clave primaria\x0A\x09 * @param\x09valor de clave primaria\x0A\x09 * @return  objeto para aplicar otras condiciones o ejecutar el query</haxe_doc>\x0A\x09</BYPK>\x0A\x09<ExtensionID get=\"accessor\" set=\"null\">\x0A\x09\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</ExtensionID>\x0A\x09<get_ExtensionID public=\"1\" set=\"method\" line=\"70\"><f a=\"\"><c path=\"nMorph.framework.common.datatypes.UUID\"/></f></get_ExtensionID>\x0A\x09<ExtensionName get=\"accessor\" set=\"accessor\">\x0A\x09\x09<c path=\"String\"/>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</ExtensionName>\x0A\x09<get_ExtensionName public=\"1\" set=\"method\" line=\"77\"><f a=\"\"><c path=\"String\"/></f></get_ExtensionName>\x0A\x09<set_ExtensionName public=\"1\" set=\"method\" line=\"81\"><f a=\"value\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A</f></set_ExtensionName>\x0A\x09<Status get=\"accessor\" set=\"accessor\">\x0A\x09\x09<x path=\"Null\"><x path=\"Int\"/></x>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</Status>\x0A\x09<get_Status public=\"1\" set=\"method\" line=\"91\"><f a=\"\"><x path=\"Null\"><x path=\"Int\"/></x></f></get_Status>\x0A\x09<set_Status public=\"1\" set=\"method\" line=\"95\"><f a=\"value\">\x0A\x09<x path=\"Null\"><x path=\"Int\"/></x>\x0A\x09<x path=\"Null\"><x path=\"Int\"/></x>\x0A</f></set_Status>\x0A\x09<new public=\"1\" set=\"method\" line=\"25\">\x0A\x09\x09<f a=\"\"><x path=\"Void\"/></f>\x0A\x09\x09<haxe_doc>* Constructor de la clase PL_Extension que tiene equivalencia con la tabla de la base de datos</haxe_doc>\x0A\x09</new>\x0A\x09<haxe_doc>* ...\x0A * @author Smartwork</haxe_doc>\x0A\x09<meta>\x0A\x09\x09<m n=\":keepSub\"/>\x0A\x09\x09<m n=\":rtti\"/>\x0A\x09</meta>\x0A</class>";
	/**
	 * @var UUIDSentence
	 * Referencia a columna ExtensionID
	 */
	static public $col_ExtensionID;
	/**
	 * @var VarcharSentence
	 * Referencia a columna ExtensionName
	 */
	static public $col_ExtensionName;
	/**
	 * @var SmallIntegerSentence
	 * Referencia a columna Status
	 */
	static public $col_Status;
	/**
	 * @var ISource
	 * referencia a tabla para consultas
	 */
	static public $table;

	/**
	 * @var UUID
	 */
	public $ExtensionID;
	/**
	 * @var string
	 */
	public $ExtensionName;
	/**
	 * @var int
	 */
	public $Status;

	/**
	 * filtro por clave primaria
	 * @param	valor de clave primaria
	 * @return  objeto para aplicar otras condiciones o ejecutar el query
	 * 
	 * @param UUID $val_ExtensionID
	 * 
	 * @return WhereClause
	 */
	public static function BYPK ($val_ExtensionID) {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:65: characters 3-109
		return SQL::SELECT()->FROM(PL_Extension::$table)->WHERE(Condition::SET(PL_Extension::$col_ExtensionID, Op::Equal(), Val::uuid($val_ExtensionID)));
	}

	/**
	 * inicio rápido de filtro
	 * @param	Filtro
	 * @return objeto para aplicar otras condiciones o ejecutar el query
	 * 
	 * @param ICondition $Condition
	 * 
	 * @return WhereClause
	 */
	public static function WHERE ($Condition) {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:56: characters 3-51
		return SQL::SELECT()->FROM(PL_Extension::$table)->WHERE($Condition);
	}

	/**
	 * Constructor de la clase PL_Extension que tiene equivalencia con la tabla de la base de datos
	 * 
	 * @return void
	 */
	public function __construct () {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:27: characters 3-10
		parent::__construct();
	}

	/**
	 * @return UUID
	 */
	public function get_ExtensionID () {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:71: characters 3-21
		return $this->ExtensionID;
	}

	/**
	 * @return string
	 */
	public function get_ExtensionName () {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:78: characters 3-23
		return $this->ExtensionName;
	}

	/**
	 * @return int
	 */
	public function get_Status () {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:92: characters 3-16
		return $this->Status;
	}

	/**
	 * @param string $value
	 * 
	 * @return string
	 */
	public function set_ExtensionName ($value) {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:84: characters 3-123
		if ($this->get_TrackChanges() && ($this->get_ExtensionName() !== $value)) {
			#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:84: characters 77-94
			$tmp = PL_Extension::$col_ExtensionName;
			#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:84: characters 52-123
			$this->AddChange(new ChangeItem($tmp, $this->get_ExtensionName(), $value));
		}
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:85: characters 3-29
		return $this->ExtensionName = $value;
	}

	/**
	 * @param int $value
	 * 
	 * @return int
	 */
	public function set_Status ($value) {
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:98: characters 3-102
		if ($this->get_TrackChanges() && ($this->get_Status() !== $value)) {
			#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:98: characters 70-80
			$tmp = PL_Extension::$col_Status;
			#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:98: characters 45-102
			$this->AddChange(new ChangeItem($tmp, $this->get_Status(), $value));
		}
		#3_data\db\src/nMorph/core/db/nmorph_core/PL_Extension.hx:99: characters 3-22
		return $this->Status = $value;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$table = new TableSource("PL_Extension");
		self::$col_ExtensionID = new UUIDSentence("PL_Extension", "ExtensionID", NullableEnum::NOTNULL(), true);
		self::$col_ExtensionName = new VarcharSentence("PL_Extension", "ExtensionName", 250, NullableEnum::NULL(), false);
		self::$col_Status = new SmallIntegerSentence("PL_Extension", "Status", NullableEnum::NULL(), false);
	}
}

Boot::registerClass(PL_Extension::class, 'nMorph.core.db.nmorph_core.PL_Extension');
Boot::registerGetters('nMorph\\core\\db\\nmorph_core\\PL_Extension', [
	'Status' => true,
	'ExtensionName' => true,
	'ExtensionID' => true
]);
Boot::registerSetters('nMorph\\core\\db\\nmorph_core\\PL_Extension', [
	'Status' => true,
	'ExtensionName' => true
]);
PL_Extension::__hx__init();
