<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\core\db\sw_todolist;

use \nMorph\framework\orm\lang\SQL;
use \nMorph\framework\orm\interfaces\ICondition;
use \nMorph\framework\orm\common\sentences\Val;
use \nMorph\framework\orm\client\ModelObject;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\interfaces\ISource;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sources\ViewSource;
use \nMorph\framework\orm\common\clauses\WhereClause;
use \nMorph\framework\orm\client\ChangeItem;
use \nMorph\framework\orm\common\fields\VarcharSentence;
use \nMorph\framework\common\datatypes\UUID;
use \nMorph\framework\orm\common\fields\UUIDSentence;
use \nMorph\framework\orm\common\enums\NullableEnum;

/**
 * ...
 * @author Smartwork
 */
class Category_VTA extends ModelObject {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.core.db.sw_todolist.Category_VTA\" params=\"\">\x0A\x09<extends path=\"nMorph.framework.orm.client.ModelObject\"/>\x0A\x09<view public=\"1\" expr=\"new ViewSource(&quot;Category_VTA&quot;)\" line=\"33\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.interfaces.ISource\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new ViewSource(\"Category_VTA\")</e></m></meta>\x0A\x09\x09<haxe_doc>* referencia a vista para consultas</haxe_doc>\x0A\x09</view>\x0A\x09<col_CategoryId public=\"1\" expr=\"new UUIDSentence(&quot;Category_VTA&quot;, &quot;CategoryId&quot;, NullableEnum.NOTNULL, true)\" line=\"37\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.UUIDSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new UUIDSentence(\"Category_VTA\", \"CategoryId\", NullableEnum.NOTNULL, true)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna CategoryId</haxe_doc>\x0A\x09</col_CategoryId>\x0A\x09<col_PersonId public=\"1\" expr=\"new UUIDSentence(&quot;Category_VTA&quot;, &quot;PersonId&quot;, NullableEnum.NULL, false)\" line=\"42\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.UUIDSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new UUIDSentence(\"Category_VTA\", \"PersonId\", NullableEnum.NULL, false)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna PersonId</haxe_doc>\x0A\x09</col_PersonId>\x0A\x09<col_CategoryName public=\"1\" expr=\"new VarcharSentence(&quot;Category_VTA&quot;, &quot;CategoryName&quot;, 50, NullableEnum.NOTNULL, false)\" line=\"47\" static=\"1\">\x0A\x09\x09<c path=\"nMorph.framework.orm.common.fields.VarcharSentence\"/>\x0A\x09\x09<meta><m n=\":value\"><e>new VarcharSentence(\"Category_VTA\", \"CategoryName\", 50, NullableEnum.NOTNULL, false)</e></m></meta>\x0A\x09\x09<haxe_doc>* Referencia a columna CategoryName</haxe_doc>\x0A\x09</col_CategoryName>\x0A\x09<WHERE public=\"1\" set=\"method\" line=\"55\" static=\"1\">\x0A\x09\x09<f a=\"Condition\">\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.interfaces.ICondition\"/>\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.common.clauses.WhereClause\"/>\x0A\x09\x09</f>\x0A\x09\x09<haxe_doc>* inicio rápido de filtro\x0A\x09 * @param\x09Filtro\x0A\x09 * @return objeto para aplicar otras condiciones o ejecutar el query</haxe_doc>\x0A\x09</WHERE>\x0A\x09<BYPK public=\"1\" set=\"method\" line=\"64\" static=\"1\">\x0A\x09\x09<f a=\"val_CategoryId\">\x0A\x09\x09\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09\x09\x09<c path=\"nMorph.framework.orm.common.clauses.WhereClause\"/>\x0A\x09\x09</f>\x0A\x09\x09<haxe_doc>* filtro por clave primaria\x0A\x09 * @param\x09valor de clave primaria\x0A\x09 * @return  objeto para aplicar otras condiciones o ejecutar el query</haxe_doc>\x0A\x09</BYPK>\x0A\x09<CategoryId get=\"accessor\" set=\"null\">\x0A\x09\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</CategoryId>\x0A\x09<get_CategoryId public=\"1\" set=\"method\" line=\"70\"><f a=\"\"><c path=\"nMorph.framework.common.datatypes.UUID\"/></f></get_CategoryId>\x0A\x09<PersonId get=\"accessor\" set=\"accessor\">\x0A\x09\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</PersonId>\x0A\x09<get_PersonId public=\"1\" set=\"method\" line=\"77\"><f a=\"\"><c path=\"nMorph.framework.common.datatypes.UUID\"/></f></get_PersonId>\x0A\x09<set_PersonId public=\"1\" set=\"method\" line=\"81\"><f a=\"value\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A</f></set_PersonId>\x0A\x09<CategoryName get=\"accessor\" set=\"accessor\">\x0A\x09\x09<c path=\"String\"/>\x0A\x09\x09<meta><m n=\":isVar\"/></meta>\x0A\x09</CategoryName>\x0A\x09<get_CategoryName public=\"1\" set=\"method\" line=\"91\"><f a=\"\"><c path=\"String\"/></f></get_CategoryName>\x0A\x09<set_CategoryName public=\"1\" set=\"method\" line=\"95\"><f a=\"value\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"String\"/>\x0A</f></set_CategoryName>\x0A\x09<new public=\"1\" set=\"method\" line=\"25\">\x0A\x09\x09<f a=\"\"><x path=\"Void\"/></f>\x0A\x09\x09<haxe_doc>* Constructor de la clase Category_VTA que tiene equivalencia con la tabla de la base de datos</haxe_doc>\x0A\x09</new>\x0A\x09<haxe_doc>* ...\x0A * @author Smartwork</haxe_doc>\x0A\x09<meta>\x0A\x09\x09<m n=\":keepSub\"/>\x0A\x09\x09<m n=\":rtti\"/>\x0A\x09</meta>\x0A</class>";
	/**
	 * @var UUIDSentence
	 * Referencia a columna CategoryId
	 */
	static public $col_CategoryId;
	/**
	 * @var VarcharSentence
	 * Referencia a columna CategoryName
	 */
	static public $col_CategoryName;
	/**
	 * @var UUIDSentence
	 * Referencia a columna PersonId
	 */
	static public $col_PersonId;
	/**
	 * @var ISource
	 * referencia a vista para consultas
	 */
	static public $view;

	/**
	 * @var UUID
	 */
	public $CategoryId;
	/**
	 * @var string
	 */
	public $CategoryName;
	/**
	 * @var UUID
	 */
	public $PersonId;

	/**
	 * filtro por clave primaria
	 * @param	valor de clave primaria
	 * @return  objeto para aplicar otras condiciones o ejecutar el query
	 * 
	 * @param UUID $val_CategoryId
	 * 
	 * @return WhereClause
	 */
	public static function BYPK ($val_CategoryId) {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:65: characters 3-106
		return SQL::SELECT()->FROM(Category_VTA::$view)->WHERE(Condition::SET(Category_VTA::$col_CategoryId, Op::Equal(), Val::uuid($val_CategoryId)));
	}

	/**
	 * inicio rápido de filtro
	 * @param	Filtro
	 * @return objeto para aplicar otras condiciones o ejecutar el query
	 * 
	 * @param ICondition $Condition
	 * 
	 * @return WhereClause
	 */
	public static function WHERE ($Condition) {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:56: characters 3-50
		return SQL::SELECT()->FROM(Category_VTA::$view)->WHERE($Condition);
	}

	/**
	 * Constructor de la clase Category_VTA que tiene equivalencia con la tabla de la base de datos
	 * 
	 * @return void
	 */
	public function __construct () {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:27: characters 3-10
		parent::__construct();
	}

	/**
	 * @return UUID
	 */
	public function get_CategoryId () {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:71: characters 3-20
		return $this->CategoryId;
	}

	/**
	 * @return string
	 */
	public function get_CategoryName () {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:92: characters 3-22
		return $this->CategoryName;
	}

	/**
	 * @return UUID
	 */
	public function get_PersonId () {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:78: characters 3-18
		return $this->PersonId;
	}

	/**
	 * @param string $value
	 * 
	 * @return string
	 */
	public function set_CategoryName ($value) {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:98: characters 3-120
		if ($this->get_TrackChanges() && ($this->get_CategoryName() !== $value)) {
			#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:98: characters 76-92
			$tmp = Category_VTA::$col_CategoryName;
			#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:98: characters 51-120
			$this->AddChange(new ChangeItem($tmp, $this->get_CategoryName(), $value));
		}
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:99: characters 3-28
		return $this->CategoryName = $value;
	}

	/**
	 * @param UUID $value
	 * 
	 * @return UUID
	 */
	public function set_PersonId ($value) {
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:84: characters 3-108
		if ($this->get_TrackChanges() && ($this->get_PersonId() !== $value)) {
			#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:84: characters 72-84
			$tmp = Category_VTA::$col_PersonId;
			#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:84: characters 47-108
			$this->AddChange(new ChangeItem($tmp, $this->get_PersonId(), $value));
		}
		#3_data\db\src/nMorph/core/db/sw_todolist/Category_VTA.hx:85: characters 3-24
		return $this->PersonId = $value;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$view = new ViewSource("Category_VTA");
		self::$col_CategoryId = new UUIDSentence("Category_VTA", "CategoryId", NullableEnum::NOTNULL(), true);
		self::$col_PersonId = new UUIDSentence("Category_VTA", "PersonId", NullableEnum::NULL(), false);
		self::$col_CategoryName = new VarcharSentence("Category_VTA", "CategoryName", 50, NullableEnum::NOTNULL(), false);
	}
}

Boot::registerClass(Category_VTA::class, 'nMorph.core.db.sw_todolist.Category_VTA');
Boot::registerGetters('nMorph\\core\\db\\sw_todolist\\Category_VTA', [
	'CategoryName' => true,
	'PersonId' => true,
	'CategoryId' => true
]);
Boot::registerSetters('nMorph\\core\\db\\sw_todolist\\Category_VTA', [
	'CategoryName' => true,
	'PersonId' => true
]);
Category_VTA::__hx__init();
