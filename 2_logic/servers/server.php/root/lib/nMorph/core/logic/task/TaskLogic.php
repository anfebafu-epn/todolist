<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\core\logic\task;

use \nMorph\framework\orm\lang\SQL;
use \nMorph\core\db\sw_todolist\Task_VTA;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\orm\common\sentences\Ag;
use \nMorph\framework\common\datatypes\UUID;
use \nMorph\framework\orm\common\conditions\ConditionGroup;
use \nMorph\core\db\sw_todolist\Task;

/**
 * ...
 * @author Smartwork
 */
final class TaskLogic {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.core.logic.task.TaskLogic\" params=\"\" final=\"1\">\x0A\x09<Task_Search public=\"1\" set=\"method\" line=\"32\"><f a=\"SearchTerm:CategoryID:PersonID\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<c path=\"Array\"><c path=\"nMorph.core.db.sw_todolist.Task_VTA\"/></c>\x0A</f></Task_Search>\x0A\x09<Task_GetByID public=\"1\" set=\"method\" line=\"52\"><f a=\"ID\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<c path=\"nMorph.core.db.sw_todolist.Task\"/>\x0A</f></Task_GetByID>\x0A\x09<Task_SetComplete public=\"1\" set=\"method\" line=\"57\"><f a=\"ID\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></Task_SetComplete>\x0A\x09<Task_Save public=\"1\" set=\"method\" line=\"68\"><f a=\"UpdatedObj\">\x0A\x09<c path=\"nMorph.core.db.sw_todolist.Task\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></Task_Save>\x0A\x09<Task_Delete public=\"1\" set=\"method\" line=\"113\"><f a=\"ID\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></Task_Delete>\x0A\x09<new public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></new>\x0A\x09<haxe_doc>* ...\x0A * @author Smartwork</haxe_doc>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keepSub\"/>\x0A\x09\x09<m n=\":final\"/>\x0A\x09\x09<m n=\":rtti\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param UUID $ID
	 * 
	 * @return void
	 */
	public function Task_Delete ($ID) {
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:115: lines 115-118
		SQL::DELETE()->FROM(Task::$table)->WHERE(Condition::SET(Task::$col_TaskId, Op::Equal(), Val::uuid($ID)))->Execute();
	}

	/**
	 * @param UUID $ID
	 * 
	 * @return Task
	 */
	public function Task_GetByID ($ID) {
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:53: characters 3-46
		$cat = Task::BYPK($ID)->ReadOne(Boot::getClass(Task::class));
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:54: characters 3-13
		return $cat;
	}

	/**
	 * @param Task $UpdatedObj
	 * 
	 * @return void
	 */
	public function Task_Save ($UpdatedObj) {
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:70: lines 70-74
		$Exists = SQL::SELECT(\Array_hx::wrap([Ag::COUNTALL()]))->FROM(Task::$table)->WHERE(Condition::SET(Task::$col_TaskId, Op::Equal(), Val::uuid($UpdatedObj->get_TaskId())))->ReadValue();
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:77: lines 77-110
		if ($Exists === 0) {
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:83: characters 4-26
			$tmp = SQL::INSERT(Task::$table);
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:85: characters 5-38
			$tmp1 = Val::uuid($UpdatedObj->get_TaskId());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:86: characters 5-40
			$tmp2 = Val::uuid($UpdatedObj->get_PersonId());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:87: characters 5-42
			$tmp3 = Val::uuid($UpdatedObj->get_CategoryId());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:88: characters 5-36
			$tmp4 = Val::str($UpdatedObj->get_Title());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:89: characters 5-42
			$tmp5 = Val::str($UpdatedObj->get_Description());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:90: characters 5-25
			$tmp6 = Val::date(\Date::now());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:91: characters 5-39
			$tmp7 = Val::date($UpdatedObj->get_DueDate());
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:83: lines 83-94
			$tmp->VALUES(\Array_hx::wrap([
				$tmp1,
				$tmp2,
				$tmp3,
				$tmp4,
				$tmp5,
				$tmp6,
				$tmp7,
				Val::bool($UpdatedObj->get_IsCompleted()),
			]))->Execute();
		} else {
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:99: characters 4-26
			$tmp = SQL::UPDATE(Task::$table);
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:101: characters 5-71
			$tmp1 = Assign::SET(Task::$col_PersonId, Val::uuid($UpdatedObj->get_PersonId()));
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:102: characters 5-75
			$tmp2 = Assign::SET(Task::$col_CategoryId, Val::uuid($UpdatedObj->get_CategoryId()));
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:103: characters 5-64
			$tmp3 = Assign::SET(Task::$col_Title, Val::str($UpdatedObj->get_Title()));
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:104: characters 5-76
			$tmp4 = Assign::SET(Task::$col_Description, Val::str($UpdatedObj->get_Description()));
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:105: characters 5-69
			$tmp5 = Assign::SET(Task::$col_DueDate, Val::date($UpdatedObj->get_DueDate()));
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:99: lines 99-109
			$tmp->SET(\Array_hx::wrap([
				$tmp1,
				$tmp2,
				$tmp3,
				$tmp4,
				$tmp5,
				Assign::SET(Task::$col_IsCompleted, Val::bool($UpdatedObj->get_IsCompleted())),
			]))->WHERE(Condition::SET(Task::$col_TaskId, Op::Equal(), Val::uuid($UpdatedObj->get_TaskId())))->Execute();
		}
	}

	/**
	 * @param string $SearchTerm
	 * @param UUID $CategoryID
	 * @param UUID $PersonID
	 * 
	 * @return Task_VTA[]|\Array_hx
	 */
	public function Task_Search ($SearchTerm, $CategoryID, $PersonID) {
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:34: lines 34-36
		$cg = ConditionGroup::SET(Task_VTA::$col_Title->LIKE("%" . ($SearchTerm??'null') . "%")->OR(Task_VTA::$col_Description->LIKE("%" . ($SearchTerm??'null') . "%")))->AND(Task_VTA::$col_IsCompleted->Equals(false));
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:38: lines 38-40
		if (!$CategoryID->equals(UUID::empty())) {
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:39: characters 4-55
			$cg = $cg->AND(Task_VTA::$col_CategoryId->eq($CategoryID));
		}
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:42: lines 42-44
		if (!$PersonID->equals(UUID::empty())) {
			#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:43: characters 4-51
			$cg = $cg->AND(Task_VTA::$col_PersonId->eq($PersonID));
		}
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:46: characters 3-64
		$lst = Task_VTA::WHERE($cg)->Read(Boot::getClass(Task_VTA::class));
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:48: characters 3-13
		return $lst;
	}

	/**
	 * @param UUID $ID
	 * 
	 * @return void
	 */
	public function Task_SetComplete ($ID) {
		#2_logic\logic\src/nMorph/core/logic/task/TaskLogic.hx:59: lines 59-64
		SQL::UPDATE(Task::$table)->SET(\Array_hx::wrap([Assign::SET(Task::$col_IsCompleted, Val::bool(true))]))->WHERE(Condition::SET(Task::$col_TaskId, Op::Equal(), Val::uuid($ID)))->Execute();
	}
}

Boot::registerClass(TaskLogic::class, 'nMorph.core.logic.task.TaskLogic');
