<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\core\logic\category;

use \nMorph\framework\orm\lang\SQL;
use \nMorph\framework\orm\common\sentences\Val;
use \php\Boot;
use \nMorph\framework\orm\common\enums\Op;
use \nMorph\framework\orm\common\conditions\Condition;
use \nMorph\core\db\sw_todolist\Category;
use \nMorph\framework\orm\common\sentences\Assign;
use \nMorph\framework\common\exceptions\ExceptionHelper;
use \nMorph\framework\orm\common\sentences\Ag;
use \nMorph\framework\common\datatypes\UUID;
use \nMorph\core\db\sw_todolist\Task;

/**
 * ...
 * @author Smartwork
 */
final class CategoryLogic {
	/**
	 * @var string
	 */
	static public $__rtti = "<class path=\"nMorph.core.logic.category.CategoryLogic\" params=\"\" final=\"1\">\x0A\x09<Query public=\"1\" set=\"method\" line=\"32\"><f a=\"\"><c path=\"String\"/></f></Query>\x0A\x09<Category_Search public=\"1\" set=\"method\" line=\"38\"><f a=\"SearchTerm\">\x0A\x09<c path=\"String\"/>\x0A\x09<c path=\"Array\"><c path=\"nMorph.core.db.sw_todolist.Category\"/></c>\x0A</f></Category_Search>\x0A\x09<Category_GetByID public=\"1\" set=\"method\" line=\"49\"><f a=\"ID\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<c path=\"nMorph.core.db.sw_todolist.Category\"/>\x0A</f></Category_GetByID>\x0A\x09<Category_Save public=\"1\" set=\"method\" line=\"57\"><f a=\"UpdatedObj\">\x0A\x09<c path=\"nMorph.core.db.sw_todolist.Category\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></Category_Save>\x0A\x09<Category_Delete public=\"1\" set=\"method\" line=\"82\"><f a=\"ID\">\x0A\x09<c path=\"nMorph.framework.common.datatypes.UUID\"/>\x0A\x09<x path=\"Void\"/>\x0A</f></Category_Delete>\x0A\x09<new public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></new>\x0A\x09<haxe_doc>* ...\x0A * @author Smartwork</haxe_doc>\x0A\x09<meta>\x0A\x09\x09<m n=\":directlyUsed\"/>\x0A\x09\x09<m n=\":keepSub\"/>\x0A\x09\x09<m n=\":final\"/>\x0A\x09\x09<m n=\":rtti\"/>\x0A\x09</meta>\x0A</class>";

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param UUID $ID
	 * 
	 * @return void
	 */
	public function Category_Delete ($ID) {
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:84: lines 84-88
		$Exists = SQL::SELECT(\Array_hx::wrap([Ag::COUNTALL()]))->FROM(Task::$table)->WHERE(Task::$col_CategoryId->eq($ID))->ReadValue();
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:91: lines 91-94
		if ($Exists > 0) {
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:92: characters 4-98
			ExceptionHelper::LogicException(1002, "Unable to delete Category. There are associated tasks.");
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:93: characters 4-10
			return;
		}
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:97: lines 97-100
		SQL::DELETE()->FROM(Category::$table)->WHERE(Condition::SET(Category::$col_CategoryId, Op::Equal(), Val::uuid($ID)))->Execute();
	}

	/**
	 * @param UUID $ID
	 * 
	 * @return Category
	 */
	public function Category_GetByID ($ID) {
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:51: characters 3-58
		$cat = Category::BYPK($ID)->ReadOne(Boot::getClass(Category::class));
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:53: characters 3-13
		return $cat;
	}

	/**
	 * @param Category $UpdatedObj
	 * 
	 * @return void
	 */
	public function Category_Save ($UpdatedObj) {
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:59: lines 59-63
		$Exists = SQL::SELECT(\Array_hx::wrap([Ag::COUNTALL()]))->FROM(Category::$table)->WHERE(Condition::SET(Category::$col_CategoryId, Op::Equal(), Val::uuid($UpdatedObj->get_CategoryId())))->ReadValue();
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:66: lines 66-79
		if ($Exists === 0) {
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:68: characters 4-30
			$tmp = SQL::INSERT(Category::$table);
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:69: characters 13-50
			$tmp1 = Val::uuid($UpdatedObj->get_CategoryId());
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:68: lines 68-70
			$tmp->VALUES(\Array_hx::wrap([
				$tmp1,
				Val::str($UpdatedObj->get_CategoryName()),
			]))->Execute();
		} else {
			#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:75: lines 75-78
			SQL::UPDATE(Category::$table)->SET(\Array_hx::wrap([Assign::SET(Category::$col_CategoryName, Val::str($UpdatedObj->get_CategoryName()))]))->WHERE(Condition::SET(Category::$col_CategoryId, Op::Equal(), Val::uuid($UpdatedObj->get_CategoryId())))->Execute();
		}
	}

	/**
	 * @param string $SearchTerm
	 * 
	 * @return Category[]|\Array_hx
	 */
	public function Category_Search ($SearchTerm) {
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:40: lines 40-43
		$lst = Category::WHERE(Category::$col_CategoryName->LIKE("%" . ($SearchTerm??'null') . "%"))->ORDERBY(\Array_hx::wrap([Category::$col_CategoryName]))->Read(Boot::getClass(Category::class));
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:45: characters 3-13
		return $lst;
	}

	/**
	 * @return string
	 */
	public function Query () {
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:33: characters 3-73
		$p = SQL::SELECT()->FROM(Category::$table)->ReadOne(Boot::getClass(Category::class));
		#2_logic\logic\src/nMorph/core/logic/category/CategoryLogic.hx:34: characters 3-30
		return $p->get_CategoryName();
	}
}

Boot::registerClass(CategoryLogic::class, 'nMorph.core.logic.category.CategoryLogic');
