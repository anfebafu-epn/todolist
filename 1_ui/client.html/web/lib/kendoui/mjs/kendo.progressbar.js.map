{"version":3,"file":"kendo.progressbar.js","names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","HORIZONTAL","VERTICAL","KPROGRESSBAR","KPROGRESSBARINDETERMINATE","KPROGRESSBARCOMPLETE","KPROGRESSWRAPPER","KPROGRESSSTATUS","KCOMPLETEDCHUNK","STATEDISABLED","PROGRESS_VALUE","CHUNK_ITEM","PROGRESSTYPE","VALUE","PERCENT","CHUNK","CHANGE","COMPLETE","math","Math","extend","templates","progressStatus","announceElement","ProgressBar","init","element","options","that","this","fn","call","_progressProperty","orientation","_fields","value","_validateValue","_validateType","type","_wrapper","ariaRole","_aria","_progressAnimation","min","_updateProgress","setOptions","wrapper","hasOwnProperty","toggleClass","reverse","enable","events","max","chunkCount","showStatus","animation","label","labelId","attr","role","announce","appendTo","text","_calculatePercentage","toFixed","_isStarted","progressWrapper","currentType","isValid","each","k","Error","format","container","initialValue","addClass","_addChunkProgressWrapper","prepend","find","_value","validated","_roundValue","isNaN","removeClass","removeAttr","parseFloat","power","pow","_round","percentage","_updateChunks","_onProgressUpdateAlways","_updateProgressWrapper","completedChunks","percentagesPerChunk","parseInt","percentageParsed","completedChunksCount","floor","slice","jQuery","animationDuration","_animation","duration","animationCssOptions","length","_addRegularProgressWrapper","animate","start","_onProgressAnimateStart","bind","progress","_onProgressAnimate","complete","_onProgressAnimateComplete","always","show","e","progressStatusWrapSize","progressInPercent","elem","style","css","currentValue","progressValue","progressWrapperSize","hide","trigger","destroy","remove","chunkSize","html","i","append","first","end","last","_normalizeChunkSize","lastChunk","currentSize","difference","_calculateChunkSize","chunkContainer","_onePercent","abs","plugin"],"sources":["kendo.progressbar.js"],"mappings":"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","sourcesContent":["import './kendo.core.js';\n\nvar __meta__ = {\n    id: \"progressbar\",\n    name: \"ProgressBar\",\n    category: \"web\",\n    description: \"The ProgressBar offers rich functionality for displaying and tracking progress\",\n    depends: [ \"core\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        DEFAULTMIN = 0,\n        DEFAULTMAX = 100,\n        DEFAULTVALUE = 0,\n        DEFAULTCHUNKCOUNT = 5,\n        KPROGRESSBAR = \"k-progressbar\",\n        KPROGRESSBARREVERSE = \"k-progressbar-reverse\",\n        KPROGRESSBARINDETERMINATE = \"k-progressbar-indeterminate\",\n        KPROGRESSBARCOMPLETE = \"k-complete\",\n        KPROGRESSWRAPPER = \"k-selected\",\n        KPROGRESSSTATUS = \"k-progress-status\",\n        LABEL_POSITION_END = \"k-progress-end\",\n        KCOMPLETEDCHUNK = \"k-selected\",\n        STATEDISABLED = \"k-disabled\",\n        PROGRESS_VALUE = \"k-progressbar-value\",\n        CHUNK_ITEM = \"k-progressbar-chunk\",\n        PROGRESSTYPE = {\n            VALUE: \"value\",\n            PERCENT: \"percent\",\n            CHUNK: \"chunk\"\n        },\n        CHANGE = \"change\",\n        COMPLETE = \"complete\",\n        BOOLEAN = \"boolean\",\n        math = Math,\n        extend = $.extend,\n        HUNDREDPERCENT = 100,\n        DEFAULTANIMATIONDURATION = 400,\n        PRECISION = 3,\n        templates = {\n            progressStatus: \"<span class='k-progress-status-wrap \" + LABEL_POSITION_END + \"'><span class='k-progress-status'></span></span>\",\n            announceElement: '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>'\n        };\n\n    var ProgressBar = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            Widget.fn.init.call(this, element, options);\n\n            options = that.options;\n\n            that._progressProperty = (options.orientation === HORIZONTAL) ? \"width\" : \"height\";\n\n            that._fields();\n\n            options.value = that._validateValue(options.value);\n\n            that._validateType(options.type);\n\n            that._wrapper();\n\n            if (options.ariaRole) {\n                that._aria();\n            }\n\n            that._progressAnimation();\n\n            if ((options.value !== options.min) && (options.value !== false)) {\n               that._updateProgress();\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this,\n                wrapper = that.wrapper;\n\n            Widget.fn.setOptions.call(that, options);\n\n            if (options.hasOwnProperty(\"reverse\")) {\n                wrapper.toggleClass(\"k-progressbar-reverse\", options.reverse);\n            }\n\n            if (options.hasOwnProperty(\"enable\")) {\n                that.enable(options.enable);\n            }\n\n            if (options.ariaRole) {\n                that._aria();\n            }\n\n            that._progressAnimation();\n\n            that._validateValue();\n\n            that._updateProgress();\n        },\n\n        events: [\n            CHANGE,\n            COMPLETE\n        ],\n\n        options: {\n            name: \"ProgressBar\",\n            orientation: HORIZONTAL,\n            reverse: false,\n            min: DEFAULTMIN,\n            max: DEFAULTMAX,\n            value: DEFAULTVALUE,\n            enable: true,\n            type: PROGRESSTYPE.VALUE,\n            chunkCount: DEFAULTCHUNKCOUNT,\n            showStatus: true,\n            animation: { },\n            label: null,\n            labelId: null,\n            ariaRole: false\n        },\n\n        _aria: function() {\n            var that = this,\n                options = that.options,\n                wrapper = that.wrapper;\n\n            wrapper.attr({\n                \"role\": \"progressbar\",\n                \"aria-valuemin\": options.min,\n                \"aria-valuemax\": options.max\n            });\n\n            if (!!options.labelId) {\n                wrapper.attr(\"aria-labelledby\", options.labelId);\n            } else if (!!options.label) {\n                wrapper.attr(\"aria-label\", options.label);\n            }\n\n            that.announce = $(templates.announceElement);\n            that.announce.appendTo($(\"body\"));\n\n            if (options.value !== false) {\n                wrapper.attr(\"aria-valuenow\", options.value);\n\n                that.announce.text(that._calculatePercentage().toFixed() + \"%\");\n            }\n        },\n\n        _fields: function() {\n            var that = this;\n\n            that._isStarted = false;\n\n            that.progressWrapper = that.progressStatus = $();\n        },\n\n        _validateType: function(currentType) {\n            var isValid = false;\n\n            $.each(PROGRESSTYPE, function(k, type) {\n                if (type === currentType) {\n                    isValid = true;\n                    return false;\n                }\n            });\n\n            if (!isValid) {\n                throw new Error(kendo.format(\"Invalid ProgressBar type '{0}'\", currentType));\n            }\n        },\n\n        _wrapper: function() {\n            var that = this;\n            var container = that.wrapper = that.element;\n            var options = that.options;\n            var orientation = options.orientation;\n            var initialValue = (options.value !== false) ? options.value : options.min;\n\n            container.addClass(KPROGRESSBAR);\n\n            container.addClass(KPROGRESSBAR + \"-\" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));\n\n            if (options.enable === false) {\n                container.addClass(STATEDISABLED);\n            }\n\n            if (options.reverse) {\n                container.addClass(KPROGRESSBARREVERSE);\n            }\n\n            if (options.value === false) {\n                container.addClass(KPROGRESSBARINDETERMINATE);\n            }\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n                that._addChunkProgressWrapper();\n            } else {\n                if (options.showStatus) {\n                    that.progressStatus = that.wrapper.prepend(templates.progressStatus)\n                                              .find(\".\" + KPROGRESSSTATUS);\n\n                    if (options.type === PROGRESSTYPE.VALUE) {\n                        that.progressStatus.text(initialValue);\n                    } else {\n                        that.progressStatus.text(that._calculatePercentage(initialValue).toFixed() + \"%\");\n                    }\n                }\n            }\n        },\n\n        value: function(value) {\n            return this._value(value);\n        },\n\n        _value: function(value) {\n            var that = this;\n            var options = that.options;\n            var validated;\n\n            if (value === undefined$1) {\n                return options.value;\n            } else {\n                if (typeof value !== BOOLEAN) {\n                    value = that._roundValue(value);\n\n                    if (!isNaN(value)) {\n                        validated = that._validateValue(value);\n\n                        if (validated !== options.value) {\n                            that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);\n\n                            options.value = validated;\n\n                            that._isStarted = true;\n\n                            that._updateProgress();\n                        }\n                    }\n                } else if (!value) {\n                    that.wrapper.addClass(KPROGRESSBARINDETERMINATE);\n                    that.wrapper.removeAttr(\"aria-valuenow\");\n                    options.value = false;\n\n                    if (that.announce) {\n                        that.announce.text(\"\");\n                    }\n                }\n            }\n        },\n\n        _roundValue: function(value) {\n             value = parseFloat(value);\n\n             var power = math.pow(10, PRECISION);\n\n             return kendo._round(value * power) / power;\n        },\n\n        _validateValue: function(value) {\n            var that = this;\n            var options = that.options;\n\n            if (value !== false) {\n                if (value <= options.min || value === true) {\n                    return options.min;\n                } else if (value >= options.max) {\n                    return options.max;\n                }\n            } else if (value === false) {\n                return false;\n            }\n\n            if (isNaN(that._roundValue(value))) {\n                return options.min;\n            }\n\n            return value;\n        },\n\n        _updateProgress: function() {\n            var that = this;\n            var options = that.options;\n            var percentage = that._calculatePercentage();\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n                that._updateChunks(percentage);\n                that._onProgressUpdateAlways(options.value);\n            } else {\n                that._updateProgressWrapper(percentage);\n            }\n\n            if (options.ariaRole) {\n                that.wrapper.attr(\"aria-valuenow\", that.options.value);\n\n                if (that.announce) {\n                    that.announce.text(percentage.toFixed() + \"%\");\n                }\n            }\n        },\n\n        _updateChunks: function(percentage) {\n            var that = this;\n            var options = that.options;\n            var chunkCount = options.chunkCount;\n            var percentagesPerChunk = parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;\n            var percentageParsed = parseInt(percentage * 100, 10) / 100;\n            var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);\n            var completedChunks;\n\n            if ((options.orientation === HORIZONTAL && !(options.reverse)) ||\n               (options.orientation === VERTICAL && options.reverse)) {\n                completedChunks = that.wrapper.find(\"li.\" + CHUNK_ITEM).slice(0, completedChunksCount);\n            } else if (completedChunksCount === 0) {\n                completedChunks = kendo.jQuery();\n            } else {\n                completedChunks = that.wrapper.find(\"li.\" + CHUNK_ITEM).slice(completedChunksCount * -1);\n            }\n\n            that.wrapper.find(\".\" + KCOMPLETEDCHUNK)\n                        .removeClass(KCOMPLETEDCHUNK + \" \" + PROGRESS_VALUE);\n\n            completedChunks.addClass(KCOMPLETEDCHUNK + \" \" + PROGRESS_VALUE);\n        },\n\n        _updateProgressWrapper: function(percentage) {\n            var that = this;\n            var options = that.options;\n            var progressWrapper = that.wrapper.find(\".\" + KPROGRESSWRAPPER);\n            var animationDuration = that._isStarted ? that._animation.duration : 0;\n            var animationCssOptions = { };\n\n            if (progressWrapper.length === 0) {\n                that._addRegularProgressWrapper();\n            }\n\n            animationCssOptions[that._progressProperty] = percentage + \"%\";\n            that.progressWrapper.animate(animationCssOptions, {\n                duration: animationDuration,\n                start: that._onProgressAnimateStart.bind(that),\n                progress: that._onProgressAnimate.bind(that),\n                complete: that._onProgressAnimateComplete.bind(that, options.value),\n                always: that._onProgressUpdateAlways.bind(that, options.value)\n            });\n        },\n\n        _onProgressAnimateStart: function() {\n            this.progressWrapper.show();\n        },\n\n        _onProgressAnimate: function(e) {\n            var that = this;\n            var options = that.options;\n            var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);\n            var progressStatusWrapSize;\n\n            if (options.showStatus) {\n                progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n\n                that.progressWrapper.find(\".k-progress-status-wrap\").css(that._progressProperty, progressStatusWrapSize + \"%\");\n            }\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {\n                that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);\n            }\n        },\n\n        _onProgressAnimateComplete: function(currentValue) {\n            var that = this;\n            var options = that.options;\n            var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n            var progressValue;\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {\n                that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);\n            }\n\n            if (options.showStatus) {\n                if (options.type === PROGRESSTYPE.VALUE) {\n                    progressValue = currentValue;\n                } else if (options.type == PROGRESSTYPE.PERCENT) {\n                    progressValue = that._calculatePercentage(currentValue).toFixed() + \"%\";\n                } else {\n                    progressValue = math.floor(that._calculatePercentage(currentValue)) + \"%\";\n                }\n                that.progressStatus.text(progressValue);\n            }\n\n            if (currentValue === options.min) {\n                that.progressWrapper.hide();\n            }\n        },\n\n        _onProgressUpdateAlways: function(currentValue) {\n            var that = this;\n            var options = that.options;\n\n            if (that._isStarted) {\n                that.trigger(CHANGE, { value: currentValue });\n            }\n\n            if (currentValue === options.max && that._isStarted) {\n                that.trigger(COMPLETE, { value: options.max });\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n            var options = that.options;\n\n            options.enable = typeof(enable) === \"undefined\" ? true : enable;\n            that.wrapper.toggleClass(STATEDISABLED, !options.enable);\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that.announce) {\n                that.announce.remove();\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        _addChunkProgressWrapper: function() {\n            var that = this;\n            var options = that.options;\n            var container = that.wrapper;\n            var chunkSize = HUNDREDPERCENT / options.chunkCount;\n            var html = \"\";\n\n            if (options.chunkCount <= 1) {\n                options.chunkCount = 1;\n            }\n\n            that.element.addClass(\"k-chunk-progressbar\");\n            html += \"<ul class='k-reset k-progressbar-chunks'>\";\n            for (var i = options.chunkCount - 1; i >= 0; i--) {\n                html += \"<li class='\" + CHUNK_ITEM + \"'></li>\";\n            }\n            html += \"</ul>\";\n\n            container.append(html).find(\".\" + CHUNK_ITEM).css(that._progressProperty, chunkSize + \"%\")\n                     .first().addClass(\"k-first\")\n                     .end()\n                     .last().addClass(\"k-last\");\n\n            that._normalizeChunkSize();\n        },\n\n        _normalizeChunkSize: function() {\n            var that = this;\n            var options = that.options;\n            var lastChunk = that.wrapper.find(\".\" + CHUNK_ITEM).last();\n            var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);\n            var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);\n\n            if (difference > 0) {\n                lastChunk.css(that._progressProperty, (currentSize + difference) + \"%\");\n            }\n        },\n\n        _addRegularProgressWrapper: function() {\n            var that = this;\n\n            that.progressWrapper = $(\"<div class='\" + KPROGRESSWRAPPER + \" \" + PROGRESS_VALUE + \"'></div>\").appendTo(that.wrapper);\n\n            if (that.options.showStatus) {\n                that.progressWrapper.append(templates.progressStatus);\n\n                that.progressStatus = that.wrapper.find(\".\" + KPROGRESSSTATUS);\n            }\n        },\n\n        _calculateChunkSize: function() {\n            var that = this;\n            var chunkCount = that.options.chunkCount;\n            var chunkContainer = that.wrapper.find(\"ul.k-reset\");\n\n            return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;\n        },\n\n        _calculatePercentage: function(currentValue) {\n            var that = this;\n            var options = that.options;\n            var value = (currentValue !== undefined$1) ? currentValue : options.value;\n            var min = options.min;\n            var max = options.max;\n            that._onePercent = math.abs((max - min) / 100);\n\n            return math.abs((value - min) / that._onePercent);\n        },\n\n        _progressAnimation: function() {\n            var that = this;\n            var options = that.options;\n            var animation = options.animation;\n\n            if (animation === false) {\n                that._animation = { duration: 0 };\n            } else {\n                that._animation = extend({\n                    duration: DEFAULTANIMATIONDURATION\n                }, options.animation);\n            }\n        }\n    });\n\n    kendo.ui.plugin(ProgressBar);\n})(window.kendo.jQuery);\n"]}