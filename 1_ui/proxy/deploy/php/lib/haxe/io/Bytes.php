<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace haxe\io;

use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;

class Bytes {
	/**
	 * @var Container
	 */
	public $b;
	/**
	 * @var int
	 */
	public $length;

	/**
	 * @param int $length
	 * 
	 * @return Bytes
	 */
	public static function alloc ($length) {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:147: characters 3-52
		return new Bytes($length, new Container(\str_repeat(\chr(0), $length)));
	}

	/**
	 * @param string $s
	 * 
	 * @return Bytes
	 */
	public static function ofHex ($s) {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:159: characters 3-30
		$len = \strlen($s);
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:160: lines 160-161
		if (($len & 1) !== 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:161: characters 4-9
			throw Exception::thrown("Not a hex string (odd number of digits)");
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:162: characters 3-40
		$b = \hex2bin($s);
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:163: characters 20-36
		$tmp = \strlen($b);
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:163: characters 3-40
		return new Bytes($tmp, new Container($b));
	}

	/**
	 * @param int $length
	 * @param Container $b
	 * 
	 * @return void
	 */
	public function __construct ($length, $b) {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:34: characters 3-23
		$this->length = $length;
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/Bytes.hx:35: characters 3-13
		$this->b = $b;
	}
}

Boot::registerClass(Bytes::class, 'haxe.io.Bytes');
