<?php
/**
 * Generated by Haxe 4.2.2
 */

namespace nMorph\framework\common\datatypes;

use \haxe\_Int64\Int64_Impl_;
use \haxe\io\_BytesData\Container;
use \haxe\_Int64\___Int64;
use \php\Boot;
use \haxe\Exception;
use \haxe\Int64Helper;
use \php\_Boot\HxString;
use \haxe\_Int32\Int32_Impl_;
use \haxe\io\Bytes;

class UUID {
	/**
	 * @var string
	 */
	const BASE_70 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+!@#\$^";
	/**
	 * @var string
	 */
	const COOKIE_BASE90 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#\$%&'()*+-./:<=>?@[]^_`{|}~";
	/**
	 * @var string
	 */
	const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
	/**
	 * @var string
	 */
	const FLICKR_BASE58 = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	/**
	 * @var string
	 */
	const ISO_OID = "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
	/**
	 * @var string
	 */
	const LOWERCASE_BASE26 = "abcdefghijklmnopqrstuvwxyz";
	/**
	 * @var string
	 */
	const NANO_ID_ALPHABET = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	/**
	 * @var string
	 */
	const NIL = "00000000-0000-0000-0000-000000000000";
	/**
	 * @var string
	 */
	const NO_LOOK_ALIKES_BASE51 = "2346789ABCDEFGHJKLMNPQRTUVWXYZabcdefghijkmnpqrtwxyz";
	/**
	 * @var string
	 */
	const NUMBERS_BIN = "01";
	/**
	 * @var string
	 */
	const NUMBERS_DEC = "0123456789";
	/**
	 * @var string
	 */
	const NUMBERS_HEX = "0123456789abcdef";
	/**
	 * @var string
	 */
	const NUMBERS_OCT = "01234567";
	/**
	 * @var string
	 */
	const UPPERCASE_BASE26 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	/**
	 * @var string
	 */
	const URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
	/**
	 * @var string
	 */
	const X500_DN = "6ba7b814-9dad-11d1-80b4-00c04fd430c8";

	/**
	 * @var int
	 */
	static public $clockSequenceBuffer = -1;
	/**
	 * @var float
	 */
	static public $lastMSecs = 0;
	/**
	 * @var int
	 */
	static public $lastNSecs = 0;
	/**
	 * @var \EReg
	 */
	static public $regexp;
	/**
	 * @var int
	 */
	static public $rndSeed;
	/**
	 * @var ___Int64
	 */
	static public $state0;
	/**
	 * @var ___Int64
	 */
	static public $state1;

	/**
	 * @var string
	 */
	public $UUIDValue;

	/**
	 * @param string $number
	 * @param string $fromAlphabet
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function convert ($number, $fromAlphabet, $toAlphabet) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:420: characters 3-42
		$fromBase = mb_strlen($fromAlphabet);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:421: characters 3-39
		$toBase = mb_strlen($toAlphabet);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:422: characters 3-27
		$len = mb_strlen($number);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:423: characters 3-23
		$buf = "";
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:424: characters 31-51
		$numberMap_length = $len;
		$this1 = [];
		$numberMap_data = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:425: characters 3-38
		$divide = 0;
		$newlen = 0;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:426: characters 13-17
		$_g = 0;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:426: characters 17-20
		$_g1 = $len;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:426: lines 426-429
		while ($_g < $_g1) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:426: characters 13-20
			$i = $_g++;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:428: characters 4-57
			$numberMap_data[$i] = HxString::indexOf($fromAlphabet, ($i < 0 ? "" : \mb_substr($number, $i, 1)));
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:430: lines 430-449
		while (true) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:431: characters 4-10
			$divide = 0;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:432: characters 4-10
			$newlen = 0;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:433: characters 14-18
			$_g = 0;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:433: characters 18-21
			$_g1 = $len;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:433: lines 433-445
			while ($_g < $_g1) {
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:433: characters 14-21
				$i = $_g++;
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:435: characters 5-11
				$divide = $divide * $fromBase + ($numberMap_data[$i] ?? null);
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:436: lines 436-444
				if ($divide >= $toBase) {
					#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:438: characters 6-56
					$numberMap_data[$newlen++] = (int)(\floor($divide / $toBase));
					#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:439: characters 6-12
					$divide %= $toBase;
				} else if ($newlen > 0) {
					#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:443: characters 6-29
					$numberMap_data[$newlen++] = 0;
				}
			}
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:446: characters 4-7
			$len = $newlen;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:447: characters 4-7
			$buf = ((($divide < 0 ? "" : \mb_substr($toAlphabet, $divide, 1)))??'null') . ($buf??'null');
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:430: lines 430-449
			if (!($newlen !== 0)) {
				break;
			}
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:451: characters 3-13
		return $buf;
	}

	/**
	 * Crea un nuevo UUID vacÃ­o
	 * 
	 * @return UUID
	 */
	public static function empty () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:128: characters 3-34
		return (new UUID())->setValue("00000000-0000-0000-0000-000000000000");
	}

	/**
	 * Crea un UUID desde Bytes
	 * @param	UUIDBytes
	 * 
	 * @param Bytes $UUIDBytes
	 * 
	 * @return UUID
	 */
	public static function fromBytes ($UUIDBytes) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:137: characters 3-49
		return (new UUID())->setValuefromBytes($UUIDBytes);
	}

	/**
	 * @param string $nanoUUID
	 * @param string $separator
	 * @param string $fromAlphabet
	 * 
	 * @return string
	 */
	public static function fromNano ($nanoUUID, $separator = "-", $fromAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:256: lines 256-259
		if ($separator === null) {
			$separator = "-";
		}
		if ($fromAlphabet === null) {
			$fromAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:257: characters 3-63
		$uuid = UUID::convert($nanoUUID, $fromAlphabet, "0123456789abcdef");
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:258: characters 3-35
		return UUID::hexToUUID($uuid, $separator);
	}

	/**
	 * @param string $shortUUID
	 * @param string $separator
	 * @param string $fromAlphabet
	 * 
	 * @return string
	 */
	public static function fromShort ($shortUUID, $separator = "-", $fromAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:244: lines 244-247
		if ($separator === null) {
			$separator = "-";
		}
		if ($fromAlphabet === null) {
			$fromAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:245: characters 3-64
		$uuid = UUID::convert($shortUUID, $fromAlphabet, "0123456789abcdef");
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:246: characters 3-35
		return UUID::hexToUUID($uuid, $separator);
	}

	/**
	 * Genera un UUID desde un String
	 * @param	UUID en string
	 * @return  UUID
	 * 
	 * @param string $UUIDString
	 * 
	 * @return UUID
	 */
	public static function fromString ($UUIDString) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:161: characters 3-41
		return (new UUID())->setValue($UUIDString);
	}

	/**
	 * @param string $hex
	 * @param string $separator
	 * 
	 * @return string
	 */
	public static function hexToUUID ($hex, $separator) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:415: characters 3-157
		return (\mb_substr($hex, 0, 8)??'null') . ($separator??'null') . (\mb_substr($hex, 8, 4)??'null') . ($separator??'null') . (\mb_substr($hex, 12, 4)??'null') . ($separator??'null') . (\mb_substr($hex, 16, 4)??'null') . ($separator??'null') . (\mb_substr($hex, 20, 12)??'null');
	}

	/**
	 * @param int $len
	 * @param string $alphabet
	 * @param \Closure $randomFunc
	 * 
	 * @return string
	 */
	public static function nanoId ($len = 21, $alphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", $randomFunc = null) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:455: lines 455-477
		if ($len === null) {
			$len = 21;
		}
		if ($alphabet === null) {
			$alphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:456: characters 3-52
		if ($randomFunc === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:456: characters 29-52
			$randomFunc = Boot::getStaticClosure(UUID::class, 'randomByte');
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:457: characters 3-32
		if ($alphabet === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:457: characters 27-32
			throw Exception::thrown("Alphabet cannot be null");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:458: characters 3-62
		if ((mb_strlen($alphabet) === 0) || (mb_strlen($alphabet) >= 256)) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:458: characters 57-62
			throw Exception::thrown("Alphabet must contain between 1 and 255 symbols");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:459: characters 3-24
		if ($len <= 0) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:459: characters 19-24
			throw Exception::thrown("Length must be greater than zero");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:460: characters 3-86
		$mask = (2 << (int)(\floor(\log(mb_strlen($alphabet) - 1) / \log(2)))) - 1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:461: characters 3-65
		$step = (int)(\ceil(1.6 * $mask * $len / mb_strlen($alphabet)));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:462: characters 3-28
		$sb = new \StringBuf();
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:463: lines 463-475
		while (mb_strlen($sb->b) !== $len) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:465: characters 14-18
			$_g = 0;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:465: characters 18-22
			$_g1 = $step;
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:465: lines 465-474
			while ($_g < $_g1) {
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:465: characters 14-22
				$i = $_g++;
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:467: characters 5-28
				$rnd = $randomFunc();
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:468: characters 5-33
				$aIndex = $rnd & $mask;
				#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:469: lines 469-473
				if ($aIndex < mb_strlen($alphabet)) {
					#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:471: characters 6-37
					$sb->add(($aIndex < 0 ? "" : \mb_substr($alphabet, $aIndex, 1)));
					#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:472: characters 6-33
					if (mb_strlen($sb->b) === $len) {
						#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:472: characters 28-33
						break;
					}
				}
			}
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:476: characters 3-23
		return $sb->b;
	}

	/**
	 * Genera un valor UUID de forma aleatoria utilizando algoritmo v4
	 * @return
	 * 
	 * @return UUID
	 */
	public static function newUUID () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:146: characters 3-52
		return (new UUID())->setValue(UUID::v4(null, Boot::getStaticClosure(UUID::class, 'secureRandom')));
	}

	/**
	 * @param string $uuid
	 * @param string $separator
	 * 
	 * @return Bytes
	 */
	public static function parse ($uuid, $separator = "-") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:391: characters 3-63
		if ($separator === null) {
			$separator = "-";
		}
		return Bytes::ofHex(\StringTools::replace($uuid, $separator, ""));
	}

	/**
	 * @return int
	 */
	public static function randomByte () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:240: characters 3-33
		return UUID::randomFromRange(0, 255);
	}

	/**
	 * @param int $min
	 * @param int $max
	 * 
	 * @return int
	 */
	public static function randomFromRange ($min, $max) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:228: characters 3-25
		$s1 = UUID::$state0;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:229: characters 3-25
		$s0 = UUID::$state1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:230: characters 3-9
		UUID::$state0 = $s0;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 9-17
		$b = 23;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 3-17
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 9-17
		if ($b === 0) {
			$this1 = new ___Int64($s1->high, $s1->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 3-17
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 9-17
			$this1 = new ___Int64((((($s1->high << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($s1->low, (32 - $b))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, ($s1->low << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 3-17
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 9-17
			$this1 = new ___Int64(($s1->low << ($b - 32) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, 0);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:231: characters 3-17
			$b1 = $this1;
		}
		$this1 = new ___Int64((($s1->high ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($s1->low ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		$s1 = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-19
		$a_high = (($s1->high ^ $s0->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_low = (($s1->low ^ $s0->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 23-32
		$b = 18;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-33
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 23-32
		if ($b === 0) {
			$this1 = new ___Int64($s1->high, $s1->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-33
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 23-32
			$this1 = new ___Int64(Boot::shiftRightUnsigned($s1->high, $b), (((($s1->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($s1->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-33
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 23-32
			$this1 = new ___Int64(0, Boot::shiftRightUnsigned($s1->high, ($b - 32)));
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-33
			$b1 = $this1;
		}
		$a_high1 = (($a_high ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_low1 = (($a_low ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 37-45
		$b = 5;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-46
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 37-45
		if ($b === 0) {
			$this1 = new ___Int64($s0->high, $s0->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-46
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 37-45
			$this1 = new ___Int64(Boot::shiftRightUnsigned($s0->high, $b), (((($s0->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($s0->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-46
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 37-45
			$this1 = new ___Int64(0, Boot::shiftRightUnsigned($s0->high, ($b - 32)));
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 12-46
			$b1 = $this1;
		}
		$this1 = new ___Int64((($a_high1 ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($a_low1 ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:232: characters 3-9
		UUID::$state1 = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:233: characters 22-33
		$a = UUID::$state1;
		$high = (($a->high + $s0->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a->low + $s0->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($low, $a->low) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:264: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:233: characters 22-33
		$this1 = new ___Int64($high, $low);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:233: characters 21-52
		$x = $max - $min + 1;
		$this2 = new ___Int64($x >> 31, $x);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:233: characters 3-58
		$result = Int64_Impl_::divMod($this1, $this2)->modulus->low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:234: characters 12-43
		if ($result < 0) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:234: characters 27-34
			$result = -$result;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:235: characters 3-22
		return $result + $min;
	}

	/**
	 * @return int
	 */
	public static function secureRandom () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:151: characters 3-25
		return \mt_rand(0, 255);
	}

	/**
	 * @param string $toAlphabet
	 * @param \Closure $randomFunc
	 * 
	 * @return string
	 */
	public static function short ($toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", $randomFunc = null) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:481: characters 3-45
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		return UUID::v4(null, $randomFunc, null, true, $toAlphabet);
	}

	/**
	 * @param int $index
	 * 
	 * @return ___Int64
	 */
	public static function splitmix64_seed ($index) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:220: characters 23-65
		$a_high = $index >> 31;
		$a_low = $index;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:220: characters 31-65
		$b_high = -1640531527;
		$b_low = 2135587861;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:220: characters 23-65
		$high = (($a_high + $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a_low + $b_low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($low, $a_low) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:264: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:220: characters 23-65
		$this1 = new ___Int64($high, $low);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:220: characters 3-67
		$result = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 23-35
		$b = 30;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 13-36
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 23-35
		if ($b === 0) {
			$this1 = new ___Int64($result->high, $result->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 13-36
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 23-35
			$this1 = new ___Int64((($result->high >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (((($result->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($result->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 13-36
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 23-35
			$this1 = new ___Int64((($result->high >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($result->high >> ($b - 32)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 13-36
			$b1 = $this1;
		}
		$a_high = (($result->high ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_low = (($result->low ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 40-74
		$b_high = -1084733587;
		$b_low = 484763065;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 12-74
		$mask = 65535;
		$al = $a_low & $mask;
		$ah = Boot::shiftRightUnsigned($a_low, 16);
		$bl = $b_low & $mask;
		$bh = Boot::shiftRightUnsigned($b_low, 16);
		$p00 = Int32_Impl_::mul($al, $bl);
		$p10 = Int32_Impl_::mul($ah, $bl);
		$p01 = Int32_Impl_::mul($al, $bh);
		$p11 = Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:302: characters 3-6
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:303: characters 3-6
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 12-74
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:305: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:306: characters 3-6
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:307: characters 3-6
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 12-74
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:309: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:221: characters 12-74
		$high = (($high + (((Int32_Impl_::mul($a_low, $b_high) + Int32_Impl_::mul($a_high, $b_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$this1 = new ___Int64($high, $low);
		$result = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 23-35
		$b = 27;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 13-36
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 23-35
		if ($b === 0) {
			$this1 = new ___Int64($result->high, $result->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 13-36
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 23-35
			$this1 = new ___Int64((($result->high >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (((($result->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($result->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 13-36
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 23-35
			$this1 = new ___Int64((($result->high >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($result->high >> ($b - 32)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 13-36
			$b1 = $this1;
		}
		$a_high = (($result->high ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_low = (($result->low ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 40-74
		$b_high = -1798288965;
		$b_low = 321982955;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 12-74
		$mask = 65535;
		$al = $a_low & $mask;
		$ah = Boot::shiftRightUnsigned($a_low, 16);
		$bl = $b_low & $mask;
		$bh = Boot::shiftRightUnsigned($b_low, 16);
		$p00 = Int32_Impl_::mul($al, $bl);
		$p10 = Int32_Impl_::mul($ah, $bl);
		$p01 = Int32_Impl_::mul($al, $bh);
		$p11 = Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:302: characters 3-6
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:303: characters 3-6
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 12-74
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:305: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:306: characters 3-6
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:307: characters 3-6
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 12-74
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:309: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:222: characters 12-74
		$high = (($high + (((Int32_Impl_::mul($a_low, $b_high) + Int32_Impl_::mul($a_high, $b_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$this1 = new ___Int64($high, $low);
		$result = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 20-32
		$b = 31;
		$b &= 63;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 10-33
		$b1 = null;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 20-32
		if ($b === 0) {
			$this1 = new ___Int64($result->high, $result->low);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 10-33
			$b1 = $this1;
		} else if ($b < 32) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 20-32
			$this1 = new ___Int64((($result->high >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (((($result->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($result->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 10-33
			$b1 = $this1;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 20-32
			$this1 = new ___Int64((($result->high >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($result->high >> ($b - 32)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:223: characters 10-33
			$b1 = $this1;
		}
		$this1 = new ___Int64((($result->high ^ $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($result->low ^ $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		return $this1;
	}

	/**
	 * @param Bytes $data
	 * @param string $separator
	 * 
	 * @return string
	 */
	public static function stringify ($data, $separator = "-") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:386: characters 3-43
		if ($separator === null) {
			$separator = "-";
		}
		return UUID::hexToUUID(\bin2hex($data->b->s), $separator);
	}

	/**
	 * @param string $uuid
	 * @param string $separator
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function toNano ($uuid, $separator = "-", $toAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:262: lines 262-265
		if ($separator === null) {
			$separator = "-";
		}
		if ($toAlphabet === null) {
			$toAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:263: characters 10-64
		$uuid = \mb_strtolower(\StringTools::replace($uuid, $separator, ""));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:264: characters 3-52
		return UUID::convert($uuid, "0123456789abcdef", $toAlphabet);
	}

	/**
	 * @param string $uuid
	 * @param string $separator
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function toShort ($uuid, $separator = "-", $toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:250: lines 250-253
		if ($separator === null) {
			$separator = "-";
		}
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:251: characters 10-64
		$uuid = \mb_strtolower(\StringTools::replace($uuid, $separator, ""));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:252: characters 3-52
		return UUID::convert($uuid, "0123456789abcdef", $toAlphabet);
	}

	/**
	 * @param Bytes $node
	 * @param int $optClockSequence
	 * @param float $msecs
	 * @param int $optNsecs
	 * @param \Closure $randomFunc
	 * @param string $separator
	 * @param bool $shortUUID
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function v1 ($node = null, $optClockSequence = -1, $msecs = -1, $optNsecs = -1, $randomFunc = null, $separator = "-", $shortUUID = false, $toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:268: lines 268-338
		if ($optClockSequence === null) {
			$optClockSequence = -1;
		}
		if ($msecs === null) {
			$msecs = -1;
		}
		if ($optNsecs === null) {
			$optNsecs = -1;
		}
		if ($separator === null) {
			$separator = "-";
		}
		if ($shortUUID === null) {
			$shortUUID = false;
		}
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:269: characters 3-51
		if ($randomFunc === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:269: characters 28-38
			$randomFunc = Boot::getStaticClosure(UUID::class, 'randomByte');
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:270: characters 3-38
		$buffer = Bytes::alloc(16);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:271: lines 271-277
		if ($node === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:273: characters 4-8
			$node = Bytes::alloc(6);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:275: characters 5-30
			$v = $randomFunc();
			$node->b->s[0] = \chr($v);
			$v = $randomFunc();
			$node->b->s[1] = \chr($v);
			$v = $randomFunc();
			$node->b->s[2] = \chr($v);
			$v = $randomFunc();
			$node->b->s[3] = \chr($v);
			$v = $randomFunc();
			$node->b->s[4] = \chr($v);
			$v = $randomFunc();
			$node->b->s[5] = \chr($v);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:276: characters 4-35
			$v = \ord($node->b->s[0]) | 1;
			$node->b->s[0] = \chr($v);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:278: lines 278-281
		if (UUID::$clockSequenceBuffer === -1) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:280: characters 4-23
			UUID::$clockSequenceBuffer = (($randomFunc() << 8) | $randomFunc()) & 16383;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:282: characters 3-35
		$clockSeq = $optClockSequence;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:283: lines 283-286
		if ($optClockSequence === -1) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:285: characters 4-12
			$clockSeq = UUID::$clockSequenceBuffer;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:287: lines 287-290
		if (Boot::equal($msecs, -1)) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:289: characters 4-9
			$msecs = \microtime(true);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:291: characters 3-24
		$nsecs = $optNsecs;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:292: lines 292-295
		if ($optNsecs === -1) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:294: characters 4-9
			$nsecs = UUID::$lastNSecs + 1;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:296: characters 3-62
		$dt = $msecs - UUID::$lastMSecs + ($nsecs - UUID::$lastNSecs) / 10000;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:297: lines 297-300
		if (($dt < 0) && ($optClockSequence === -1)) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:299: characters 4-12
			$clockSeq = ($clockSeq + 1) & 16383;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:301: lines 301-304
		if ((($dt < 0) || ($msecs > UUID::$lastMSecs)) && ($optNsecs === -1)) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:303: characters 4-9
			$nsecs = 0;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:305: lines 305-308
		if ($nsecs >= 10000) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:307: characters 4-9
			throw Exception::thrown("Can't create more than 10M uuids/sec");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:309: characters 3-12
		UUID::$lastMSecs = $msecs;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:310: characters 3-12
		UUID::$lastNSecs = $nsecs;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:311: characters 3-22
		UUID::$clockSequenceBuffer = $clockSeq;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:313: characters 3-26
		$msecs += 12219292800000;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:314: characters 19-53
		$this1 = new ___Int64(1, 0);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:314: characters 3-54
		$dvs = $this1;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 19-53
		$a = Int64Helper::fromFloat($msecs);
		$b_high = 0;
		$b_low = 268435455;
		$a_high = $a->high & $b_high;
		$a_low = $a->low & $b_low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-62
		$b_high = 0;
		$b_low = 10000;
		$mask = 65535;
		$al = $a_low & $mask;
		$ah = Boot::shiftRightUnsigned($a_low, 16);
		$bl = $b_low & $mask;
		$bh = Boot::shiftRightUnsigned($b_low, 16);
		$p00 = Int32_Impl_::mul($al, $bl);
		$p10 = Int32_Impl_::mul($ah, $bl);
		$p01 = Int32_Impl_::mul($al, $bh);
		$p11 = Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:302: characters 3-6
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:303: characters 3-6
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-62
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:305: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:306: characters 3-6
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:307: characters 3-6
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-62
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:309: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-62
		$high = (($high + (((Int32_Impl_::mul($a_low, $b_high) + Int32_Impl_::mul($a_high, $b_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_high = $high;
		$a_low = $low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-70
		$b_high = $nsecs >> 31;
		$b_low = $nsecs;
		$high = (($a_high + $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a_low + $b_low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($low, $a_low) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:264: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 18-70
		$this1 = new ___Int64($high, $low);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:315: characters 3-83
		$tl = Int64_Impl_::divMod($this1, $dvs)->modulus->low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:316: characters 3-34
		$buffer->b->s[0] = \chr(Boot::shiftRightUnsigned($tl, 24) & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:317: characters 3-34
		$buffer->b->s[1] = \chr(Boot::shiftRightUnsigned($tl, 16) & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:318: characters 3-33
		$buffer->b->s[2] = \chr(Boot::shiftRightUnsigned($tl, 8) & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:319: characters 3-27
		$buffer->b->s[3] = \chr($tl & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 19-55
		$a = Int64_Impl_::divMod(Int64Helper::fromFloat($msecs), $dvs)->quotient;
		$b_high = 0;
		$b_low = 10000;
		$mask = 65535;
		$al = $a->low & $mask;
		$ah = Boot::shiftRightUnsigned($a->low, 16);
		$bl = $b_low & $mask;
		$bh = Boot::shiftRightUnsigned($b_low, 16);
		$p00 = Int32_Impl_::mul($al, $bl);
		$p10 = Int32_Impl_::mul($ah, $bl);
		$p01 = Int32_Impl_::mul($al, $bh);
		$p11 = Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:302: characters 3-6
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:303: characters 3-6
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 19-55
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:305: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:306: characters 3-6
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:307: characters 3-6
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 19-55
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			$ret = $high++;
			#C:\HaxeToolkit\haxe\std/haxe/Int64.hx:309: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 19-55
		$high = (($high + (((Int32_Impl_::mul($a->low, $b_high) + Int32_Impl_::mul($a->high, $b_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$a_high = $high;
		$a_low = $low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 18-68
		$b_high = 0;
		$b_low = 268435455;
		$this_high = $a_high & $b_high;
		$this_low = $a_low & $b_low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:321: characters 3-74
		$tmh = $this_low;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:322: characters 3-34
		$buffer->b->s[4] = \chr(Boot::shiftRightUnsigned($tmh, 8) & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:323: characters 3-28
		$buffer->b->s[5] = \chr($tmh & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:325: characters 3-41
		$buffer->b->s[6] = \chr((Boot::shiftRightUnsigned($tmh, 24) & 15) | 16);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:326: characters 3-35
		$buffer->b->s[7] = \chr(Boot::shiftRightUnsigned($tmh, 16) & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:328: characters 3-39
		$buffer->b->s[8] = \chr(Boot::shiftRightUnsigned($clockSeq, 8) | 128);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:329: characters 3-33
		$buffer->b->s[9] = \chr($clockSeq & 255);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:332: characters 4-35
		$v = \ord($node->b->s[0]);
		$buffer->b->s[10] = \chr($v);
		$v = \ord($node->b->s[1]);
		$buffer->b->s[11] = \chr($v);
		$v = \ord($node->b->s[2]);
		$buffer->b->s[12] = \chr($v);
		$v = \ord($node->b->s[3]);
		$buffer->b->s[13] = \chr($v);
		$v = \ord($node->b->s[4]);
		$buffer->b->s[14] = \chr($v);
		$v = \ord($node->b->s[5]);
		$buffer->b->s[15] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:334: characters 3-42
		$uuid = UUID::stringify($buffer, $separator);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:335: characters 3-66
		if ($shortUUID) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:335: characters 20-24
			$uuid = UUID::toShort($uuid, $separator, $toAlphabet);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:337: characters 3-14
		return $uuid;
	}

	/**
	 * @param string $name
	 * @param string $namespace
	 * @param string $separator
	 * @param bool $shortUUID
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function v3 ($name, $namespace = "", $separator = "-", $shortUUID = false, $toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:341: lines 341-349
		if ($namespace === null) {
			$namespace = "";
		}
		if ($separator === null) {
			$separator = "-";
		}
		if ($shortUUID === null) {
			$shortUUID = false;
		}
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:342: characters 3-54
		$namespace = \StringTools::replace($namespace, "-", "");
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:343: characters 49-69
		$_this = \strlen($name);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:343: characters 16-79
		$b = new Container(\md5(Bytes::ofHex(($namespace??'null') . (\bin2hex((new Bytes($_this, new Container($name)))->b->s)??'null'))->b->s, true));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:343: characters 3-80
		$buffer = new Bytes(\strlen($b->s), $b);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:344: characters 3-47
		$v = (\ord($buffer->b->s[6]) & 15) | 48;
		$buffer->b->s[6] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:345: characters 3-47
		$v = (\ord($buffer->b->s[8]) & 63) | 128;
		$buffer->b->s[8] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:346: characters 3-42
		$uuid = UUID::stringify($buffer, $separator);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:347: characters 3-66
		if ($shortUUID) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:347: characters 20-66
			$uuid = UUID::toShort($uuid, $separator, $toAlphabet);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:348: characters 3-14
		return $uuid;
	}

	/**
	 * @param Bytes $randBytes
	 * @param \Closure $randomFunc
	 * @param string $separator
	 * @param bool $shortUUID
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function v4 ($randBytes = null, $randomFunc = null, $separator = "-", $shortUUID = false, $toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:352: lines 352-371
		if ($separator === null) {
			$separator = "-";
		}
		if ($shortUUID === null) {
			$shortUUID = false;
		}
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:353: characters 3-51
		if ($randomFunc === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:353: characters 28-51
			$randomFunc = Boot::getStaticClosure(UUID::class, 'randomByte');
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:354: characters 3-32
		$buffer = $randBytes;
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:355: lines 355-365
		if ($buffer === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:357: characters 4-28
			$buffer = Bytes::alloc(16);
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:360: characters 5-32
			$v = $randomFunc();
			$buffer->b->s[0] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[1] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[2] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[3] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[4] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[5] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[6] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[7] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[8] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[9] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[10] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[11] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[12] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[13] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[14] = \chr($v);
			$v = $randomFunc();
			$buffer->b->s[15] = \chr($v);
		} else if ($buffer->length < 16) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:364: characters 29-34
			throw Exception::thrown("Random bytes should be at least 16 bytes");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:366: characters 3-47
		$v = (\ord($buffer->b->s[6]) & 15) | 64;
		$buffer->b->s[6] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:367: characters 3-47
		$v = (\ord($buffer->b->s[8]) & 63) | 128;
		$buffer->b->s[8] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:368: characters 3-42
		$uuid = UUID::stringify($buffer, $separator);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:369: characters 3-66
		if ($shortUUID) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:369: characters 20-66
			$uuid = UUID::toShort($uuid, $separator, $toAlphabet);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:370: characters 3-14
		return $uuid;
	}

	/**
	 * @param string $name
	 * @param string $namespace
	 * @param string $separator
	 * @param bool $shortUUID
	 * @param string $toAlphabet
	 * 
	 * @return string
	 */
	public static function v5 ($name, $namespace = "", $separator = "-", $shortUUID = false, $toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:374: lines 374-382
		if ($namespace === null) {
			$namespace = "";
		}
		if ($separator === null) {
			$separator = "-";
		}
		if ($shortUUID === null) {
			$shortUUID = false;
		}
		if ($toAlphabet === null) {
			$toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:375: characters 3-54
		$namespace = \StringTools::replace($namespace, "-", "");
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:376: characters 50-70
		$_this = \strlen($name);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:376: characters 16-80
		$b = new Container(\sha1(Bytes::ofHex(($namespace??'null') . (\bin2hex((new Bytes($_this, new Container($name)))->b->s)??'null'))->b->s, true));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:376: characters 3-81
		$buffer = new Bytes(\strlen($b->s), $b);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:377: characters 3-47
		$v = (\ord($buffer->b->s[6]) & 15) | 80;
		$buffer->b->s[6] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:378: characters 3-47
		$v = (\ord($buffer->b->s[8]) & 63) | 128;
		$buffer->b->s[8] = \chr($v);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:379: characters 3-42
		$uuid = UUID::stringify($buffer, $separator);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:380: characters 3-66
		if ($shortUUID) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:380: characters 20-66
			$uuid = UUID::toShort($uuid, $separator, $toAlphabet);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:381: characters 3-14
		return $uuid;
	}

	/**
	 * @param string $uuid
	 * @param string $separator
	 * 
	 * @return bool
	 */
	public static function validate ($uuid, $separator = "-") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:395: lines 395-405
		if ($separator === null) {
			$separator = "-";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:396: lines 396-403
		if ($separator === "") {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:398: characters 4-136
			$uuid = (\mb_substr($uuid, 0, 8)??'null') . "-" . (\mb_substr($uuid, 8, 4)??'null') . "-" . (\mb_substr($uuid, 12, 4)??'null') . "-" . (\mb_substr($uuid, 16, 4)??'null') . "-" . (\mb_substr($uuid, 20, 12)??'null');
		} else if ($separator !== "-") {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:402: characters 4-52
			$uuid = \StringTools::replace($uuid, $separator, "-");
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:404: characters 3-28
		return UUID::$regexp->match($uuid);
	}

	/**
	 * @param string $uuid
	 * @param string $separator
	 * 
	 * @return int
	 */
	public static function version ($uuid, $separator = "-") {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:408: lines 408-411
		if ($separator === null) {
			$separator = "-";
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:409: characters 3-50
		$uuid = \StringTools::replace($uuid, $separator, "");
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:410: characters 3-46
		return \Std::parseInt("0x" . (\mb_substr($uuid, 12, 1)??'null'));
	}

	/**
	 * Inicializa un UUID con valor 0
	 * 
	 * @return void
	 */
	public function __construct () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:16: characters 33-36
		$this->UUIDValue = "00000000-0000-0000-0000-000000000000";
	}

	/**
	 * @param string $b
	 * 
	 * @return UUID
	 */
	public function assign ($b) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:47: characters 3-14
		$this->setValue($b);
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:48: characters 3-14
		return $this;
	}

	/**
	 * @param UUID $b
	 * 
	 * @return bool
	 */
	public function diff ($b) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:60: characters 3-39
		return $this->UUIDValue !== $b->UUIDValue;
	}

	/**
	 * @param UUID $b
	 * 
	 * @return bool
	 */
	public function equals ($b) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:54: characters 3-34
		return $this->UUIDValue === $b->UUIDValue;
	}

	/**
	 * Devuelve la representaciÃ³n del UUID en Bytes
	 * @return
	 * 
	 * @return Bytes
	 */
	public function getBytes () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:109: characters 3-42
		if ($this->UUIDValue === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:109: characters 31-42
			return null;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:110: characters 3-36
		return UUID::parse($this->UUIDValue);
	}

	/**
	 * Obtiene la representaciÃ³n en formato Nano
	 * @return
	 * 
	 * @return string
	 */
	public function getNano () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:99: characters 3-42
		if ($this->UUIDValue === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:99: characters 31-42
			return null;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:100: characters 3-37
		return UUID::toNano($this->UUIDValue);
	}

	/**
	 * Obtiene la representaciÃ³n en formato short
	 * @return
	 * 
	 * @return string
	 */
	public function getShort () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:89: characters 3-42
		if ($this->UUIDValue === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:89: characters 31-42
			return null;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:90: characters 3-38
		return UUID::toShort($this->UUIDValue);
	}

	/**
	 * Obtiene el UUID almacenado en String
	 * @param	UUID
	 * @return string interno almacenado
	 * 
	 * @return string
	 */
	public function getValue () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:70: characters 3-24
		return $this->UUIDValue;
	}

	/**
	 * Valida si el valor es EMPTY
	 * @return
	 * 
	 * @return bool
	 */
	public function isEMPTY () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:170: lines 170-171
		if ($this->UUIDValue === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:171: characters 4-16
			return false;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:172: lines 172-173
		if ($this->UUIDValue === "00000000-0000-0000-0000-000000000000") {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:173: characters 4-15
			return true;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:174: characters 3-15
		return false;
	}

	/**
	 * Valida si el valor es NULL
	 * @return
	 * 
	 * @return bool
	 */
	public function isNULL () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:183: lines 183-184
		if ($this->UUIDValue === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:184: characters 4-15
			return true;
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:185: characters 3-15
		return false;
	}

	/**
	 * Almacena el valor string determinado internamente
	 * @param	Valor en string
	 * @return
	 * 
	 * @param string $UUIDString
	 * 
	 * @return UUID
	 */
	public function setValue ($UUIDString) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:34: lines 34-40
		if ($UUIDString === null) {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:36: characters 4-25
			$this->UUIDValue = null;
		} else {
			#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:39: characters 4-45
			$this->UUIDValue = \mb_strtoupper($UUIDString);
		}
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:41: characters 3-14
		return $this;
	}

	/**
	 * Establece el valor desde un tipo de dato Bytes
	 * @param	UUIDBytes
	 * 
	 * @param Bytes $UUIDBytes
	 * 
	 * @return UUID
	 */
	public function setValuefromBytes ($UUIDBytes) {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:119: characters 3-38
		$this->setValue(UUID::stringify($UUIDBytes));
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:120: characters 3-14
		return $this;
	}

	/**
	 * Obtiene el UUID almacenado en String
	 * @param	UUID
	 * @return string interno almacenado
	 * 
	 * @return string
	 */
	public function toString () {
		#5_framework\common\src/nMorph/framework/common/datatypes/UUID.hx:80: characters 3-24
		return $this->UUIDValue;
	}

	public function __toString() {
		return $this->toString();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$regexp = new \EReg("^(?:[0-9a-f] {8}-[0-9a-f] {4}-[1-5][0-9a-f] {3}-[89ab][0-9a-f] {3}-[0-9a-f] {12}|00000000-0000-0000-0000-000000000000)\$", "i");
		self::$rndSeed = (int)((\microtime(true) * 1000));
		self::$state0 = UUID::splitmix64_seed(UUID::$rndSeed);
		self::$state1 = UUID::splitmix64_seed(UUID::$rndSeed + 1);
	}
}

Boot::registerClass(UUID::class, 'nMorph.framework.common.datatypes.UUID');
UUID::__hx__init();
